
PNG_MCU_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  08005494  08005494  00015494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08005bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001970  20000088  08005c5c  00020088  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200019f8  08005c5c  000219f8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   000151df  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034ea  00000000  00000000  0003528f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bdbb  00000000  00000000  00038779  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cd0  00000000  00000000  00044538  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001200  00000000  00000000  00045208  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000794e  00000000  00000000  00046408  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003b85  00000000  00000000  0004dd56  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000518db  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027b0  00000000  00000000  00051958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800547c 	.word	0x0800547c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	0800547c 	.word	0x0800547c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800025c:	20fa      	movs	r0, #250	; 0xfa
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <HAL_InitTick+0x3c>)
 8000260:	0080      	lsls	r0, r0, #2
 8000262:	7819      	ldrb	r1, [r3, #0]
 8000264:	f7ff ff6c 	bl	8000140 <__udivsi3>
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <HAL_InitTick+0x40>)
 800026a:	0001      	movs	r1, r0
 800026c:	6818      	ldr	r0, [r3, #0]
 800026e:	f7ff ff67 	bl	8000140 <__udivsi3>
 8000272:	f000 fae3 	bl	800083c <HAL_SYSTICK_Config>
 8000276:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000278:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800027a:	2c00      	cmp	r4, #0
 800027c:	d109      	bne.n	8000292 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	2d03      	cmp	r5, #3
 8000280:	d807      	bhi.n	8000292 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	3802      	subs	r0, #2
 8000284:	0022      	movs	r2, r4
 8000286:	0029      	movs	r1, r5
 8000288:	f000 fa9c 	bl	80007c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800028c:	0020      	movs	r0, r4
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <HAL_InitTick+0x44>)
 8000290:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	20000000 	.word	0x20000000
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000004 	.word	0x20000004

080002a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a0:	2310      	movs	r3, #16
 80002a2:	4a06      	ldr	r2, [pc, #24]	; (80002bc <HAL_Init+0x1c>)
{
 80002a4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80002a8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002aa:	430b      	orrs	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ae:	f7ff ffd3 	bl	8000258 <HAL_InitTick>
  HAL_MspInit();
 80002b2:	f004 fafb 	bl	80048ac <HAL_MspInit>
}
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	40022000 	.word	0x40022000

080002c0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x10>)
 80002c2:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <HAL_IncTick+0x14>)
 80002c4:	6811      	ldr	r1, [r2, #0]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	185b      	adds	r3, r3, r1
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	200002f8 	.word	0x200002f8
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002d8:	4b01      	ldr	r3, [pc, #4]	; (80002e0 <HAL_GetTick+0x8>)
 80002da:	6818      	ldr	r0, [r3, #0]
}
 80002dc:	4770      	bx	lr
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	200002f8 	.word	0x200002f8

080002e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002e8:	f7ff fff6 	bl	80002d8 <HAL_GetTick>
 80002ec:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ee:	1c63      	adds	r3, r4, #1
 80002f0:	d002      	beq.n	80002f8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <HAL_Delay+0x20>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002f8:	f7ff ffee 	bl	80002d8 <HAL_GetTick>
 80002fc:	1b40      	subs	r0, r0, r5
 80002fe:	4284      	cmp	r4, r0
 8000300:	d8fa      	bhi.n	80002f8 <HAL_Delay+0x14>
  {
  }
}
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	20000000 	.word	0x20000000

08000308 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000308:	2300      	movs	r3, #0
{
 800030a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800030c:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 800030e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000310:	6803      	ldr	r3, [r0, #0]
{
 8000312:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	400a      	ands	r2, r1
 8000318:	2a01      	cmp	r2, #1
 800031a:	d107      	bne.n	800032c <ADC_Enable+0x24>
 800031c:	6819      	ldr	r1, [r3, #0]
 800031e:	4211      	tst	r1, r2
 8000320:	d001      	beq.n	8000326 <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000322:	2000      	movs	r0, #0
}
 8000324:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000326:	68da      	ldr	r2, [r3, #12]
 8000328:	0412      	lsls	r2, r2, #16
 800032a:	d4fa      	bmi.n	8000322 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800032c:	6899      	ldr	r1, [r3, #8]
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <ADC_Enable+0x8c>)
 8000330:	4211      	tst	r1, r2
 8000332:	d008      	beq.n	8000346 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000334:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000336:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000338:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800033a:	4313      	orrs	r3, r2
 800033c:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800033e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000340:	4303      	orrs	r3, r0
 8000342:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000344:	e7ee      	b.n	8000324 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8000346:	2201      	movs	r2, #1
 8000348:	6899      	ldr	r1, [r3, #8]
 800034a:	430a      	orrs	r2, r1
 800034c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <ADC_Enable+0x90>)
 8000350:	4912      	ldr	r1, [pc, #72]	; (800039c <ADC_Enable+0x94>)
 8000352:	6818      	ldr	r0, [r3, #0]
 8000354:	f7ff fef4 	bl	8000140 <__udivsi3>
 8000358:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800035a:	9b01      	ldr	r3, [sp, #4]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d115      	bne.n	800038c <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8000360:	f7ff ffba 	bl	80002d8 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000364:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000366:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000368:	6823      	ldr	r3, [r4, #0]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	422b      	tst	r3, r5
 800036e:	d1d8      	bne.n	8000322 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000370:	f7ff ffb2 	bl	80002d8 <HAL_GetTick>
 8000374:	1b80      	subs	r0, r0, r6
 8000376:	2802      	cmp	r0, #2
 8000378:	d9f6      	bls.n	8000368 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800037a:	2310      	movs	r3, #16
 800037c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 800037e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000380:	4313      	orrs	r3, r2
 8000382:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000384:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000386:	432b      	orrs	r3, r5
 8000388:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800038a:	e7cb      	b.n	8000324 <ADC_Enable+0x1c>
      wait_loop_index--;
 800038c:	9b01      	ldr	r3, [sp, #4]
 800038e:	3b01      	subs	r3, #1
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	e7e2      	b.n	800035a <ADC_Enable+0x52>
 8000394:	80000017 	.word	0x80000017
 8000398:	2000000c 	.word	0x2000000c
 800039c:	000f4240 	.word	0x000f4240

080003a0 <HAL_ADC_Init>:
{
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80003a4:	2001      	movs	r0, #1
  if(hadc == NULL)
 80003a6:	2c00      	cmp	r4, #0
 80003a8:	d073      	beq.n	8000492 <HAL_ADC_Init+0xf2>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80003aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d106      	bne.n	80003be <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80003b0:	0022      	movs	r2, r4
 80003b2:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80003b4:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80003b6:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80003b8:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80003ba:	f004 fa8f 	bl	80048dc <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80003c0:	06db      	lsls	r3, r3, #27
 80003c2:	d500      	bpl.n	80003c6 <HAL_ADC_Init+0x26>
 80003c4:	e07a      	b.n	80004bc <HAL_ADC_Init+0x11c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80003c6:	2204      	movs	r2, #4
 80003c8:	6823      	ldr	r3, [r4, #0]
 80003ca:	6898      	ldr	r0, [r3, #8]
 80003cc:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80003ce:	d000      	beq.n	80003d2 <HAL_ADC_Init+0x32>
 80003d0:	e074      	b.n	80004bc <HAL_ADC_Init+0x11c>
    ADC_STATE_CLR_SET(hadc->State,
 80003d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80003d4:	4943      	ldr	r1, [pc, #268]	; (80004e4 <HAL_ADC_Init+0x144>)
 80003d6:	4011      	ands	r1, r2
 80003d8:	2202      	movs	r2, #2
 80003da:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80003dc:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80003de:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80003e0:	689a      	ldr	r2, [r3, #8]
 80003e2:	400a      	ands	r2, r1
 80003e4:	2a01      	cmp	r2, #1
 80003e6:	d000      	beq.n	80003ea <HAL_ADC_Init+0x4a>
 80003e8:	e06e      	b.n	80004c8 <HAL_ADC_Init+0x128>
 80003ea:	6819      	ldr	r1, [r3, #0]
 80003ec:	4211      	tst	r1, r2
 80003ee:	d102      	bne.n	80003f6 <HAL_ADC_Init+0x56>
 80003f0:	68da      	ldr	r2, [r3, #12]
 80003f2:	0412      	lsls	r2, r2, #16
 80003f4:	d568      	bpl.n	80004c8 <HAL_ADC_Init+0x128>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80003f6:	68da      	ldr	r2, [r3, #12]
 80003f8:	493b      	ldr	r1, [pc, #236]	; (80004e8 <HAL_ADC_Init+0x148>)
 80003fa:	400a      	ands	r2, r1
 80003fc:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80003fe:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000400:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000402:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000404:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000406:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000408:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800040a:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800040c:	3a01      	subs	r2, #1
 800040e:	1e56      	subs	r6, r2, #1
 8000410:	41b2      	sbcs	r2, r6
 8000412:	0316      	lsls	r6, r2, #12
 8000414:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000416:	034f      	lsls	r7, r1, #13
 8000418:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800041a:	6922      	ldr	r2, [r4, #16]
 800041c:	432f      	orrs	r7, r5
 800041e:	2a02      	cmp	r2, #2
 8000420:	d100      	bne.n	8000424 <HAL_ADC_Init+0x84>
 8000422:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000424:	1d62      	adds	r2, r4, #5
 8000426:	7fd2      	ldrb	r2, [r2, #31]
 8000428:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800042a:	433a      	orrs	r2, r7
 800042c:	4332      	orrs	r2, r6
 800042e:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000430:	7ee0      	ldrb	r0, [r4, #27]
 8000432:	2801      	cmp	r0, #1
 8000434:	d104      	bne.n	8000440 <HAL_ADC_Init+0xa0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000436:	2900      	cmp	r1, #0
 8000438:	d12c      	bne.n	8000494 <HAL_ADC_Init+0xf4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800043a:	2180      	movs	r1, #128	; 0x80
 800043c:	0249      	lsls	r1, r1, #9
 800043e:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000440:	20c2      	movs	r0, #194	; 0xc2
 8000442:	69e1      	ldr	r1, [r4, #28]
 8000444:	30ff      	adds	r0, #255	; 0xff
 8000446:	4281      	cmp	r1, r0
 8000448:	d002      	beq.n	8000450 <HAL_ADC_Init+0xb0>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800044a:	6a20      	ldr	r0, [r4, #32]
 800044c:	4301      	orrs	r1, r0
 800044e:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000450:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000452:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000454:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000456:	4311      	orrs	r1, r2
 8000458:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800045a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800045c:	4281      	cmp	r1, r0
 800045e:	d002      	beq.n	8000466 <HAL_ADC_Init+0xc6>
 8000460:	1e48      	subs	r0, r1, #1
 8000462:	2806      	cmp	r0, #6
 8000464:	d807      	bhi.n	8000476 <HAL_ADC_Init+0xd6>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000466:	2507      	movs	r5, #7
 8000468:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800046a:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800046c:	43a8      	bics	r0, r5
 800046e:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000470:	6958      	ldr	r0, [r3, #20]
 8000472:	4301      	orrs	r1, r0
 8000474:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	491c      	ldr	r1, [pc, #112]	; (80004ec <HAL_ADC_Init+0x14c>)
 800047a:	400b      	ands	r3, r1
 800047c:	429a      	cmp	r2, r3
 800047e:	d111      	bne.n	80004a4 <HAL_ADC_Init+0x104>
      ADC_CLEAR_ERRORCODE(hadc);
 8000480:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000482:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000484:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8000486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000488:	4393      	bics	r3, r2
 800048a:	001a      	movs	r2, r3
 800048c:	2301      	movs	r3, #1
 800048e:	4313      	orrs	r3, r2
 8000490:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000494:	2120      	movs	r1, #32
 8000496:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000498:	4329      	orrs	r1, r5
 800049a:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800049c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800049e:	4308      	orrs	r0, r1
 80004a0:	63e0      	str	r0, [r4, #60]	; 0x3c
 80004a2:	e7cd      	b.n	8000440 <HAL_ADC_Init+0xa0>
      ADC_STATE_CLR_SET(hadc->State,
 80004a4:	2212      	movs	r2, #18
 80004a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004a8:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80004aa:	4393      	bics	r3, r2
 80004ac:	001a      	movs	r2, r3
 80004ae:	2310      	movs	r3, #16
 80004b0:	4313      	orrs	r3, r2
 80004b2:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80004b6:	4303      	orrs	r3, r0
 80004b8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80004ba:	e7ea      	b.n	8000492 <HAL_ADC_Init+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004bc:	2310      	movs	r3, #16
 80004be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80004c0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004c2:	4313      	orrs	r3, r2
 80004c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80004c6:	e7e4      	b.n	8000492 <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->CFGR1,
 80004c8:	2118      	movs	r1, #24
 80004ca:	68da      	ldr	r2, [r3, #12]
 80004cc:	438a      	bics	r2, r1
 80004ce:	68a1      	ldr	r1, [r4, #8]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80004d4:	6919      	ldr	r1, [r3, #16]
 80004d6:	6862      	ldr	r2, [r4, #4]
 80004d8:	0089      	lsls	r1, r1, #2
 80004da:	0889      	lsrs	r1, r1, #2
 80004dc:	4311      	orrs	r1, r2
 80004de:	6119      	str	r1, [r3, #16]
 80004e0:	e789      	b.n	80003f6 <HAL_ADC_Init+0x56>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	fffffefd 	.word	0xfffffefd
 80004e8:	fffe0219 	.word	0xfffe0219
 80004ec:	833fffe7 	.word	0x833fffe7

080004f0 <HAL_ADC_Start_DMA>:
{
 80004f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004f2:	6803      	ldr	r3, [r0, #0]
{
 80004f4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004f6:	689b      	ldr	r3, [r3, #8]
{
 80004f8:	000f      	movs	r7, r1
 80004fa:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 80004fc:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004fe:	075b      	lsls	r3, r3, #29
 8000500:	d430      	bmi.n	8000564 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8000502:	0026      	movs	r6, r4
 8000504:	3634      	adds	r6, #52	; 0x34
 8000506:	7833      	ldrb	r3, [r6, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d02b      	beq.n	8000564 <HAL_ADC_Start_DMA+0x74>
 800050c:	2301      	movs	r3, #1
 800050e:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000510:	7e63      	ldrb	r3, [r4, #25]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d127      	bne.n	8000566 <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8000516:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000518:	4a16      	ldr	r2, [pc, #88]	; (8000574 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 800051a:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 800051c:	401a      	ands	r2, r3
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	4313      	orrs	r3, r2
 8000524:	63a3      	str	r3, [r4, #56]	; 0x38
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000526:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 800052a:	63e5      	str	r5, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 800052c:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800052e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000532:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000534:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_ADC_Start_DMA+0x90>)
 8000538:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800053a:	231c      	movs	r3, #28
 800053c:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800053e:	684a      	ldr	r2, [r1, #4]
 8000540:	3b0c      	subs	r3, #12
 8000542:	4313      	orrs	r3, r2
 8000544:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000546:	2301      	movs	r3, #1
 8000548:	68ca      	ldr	r2, [r1, #12]
 800054a:	4313      	orrs	r3, r2
 800054c:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800054e:	003a      	movs	r2, r7
 8000550:	3140      	adds	r1, #64	; 0x40
 8000552:	9b01      	ldr	r3, [sp, #4]
 8000554:	f000 f9be 	bl	80008d4 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000558:	2304      	movs	r3, #4
 800055a:	0028      	movs	r0, r5
 800055c:	6822      	ldr	r2, [r4, #0]
 800055e:	6891      	ldr	r1, [r2, #8]
 8000560:	430b      	orrs	r3, r1
 8000562:	6093      	str	r3, [r2, #8]
}
 8000564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000566:	0020      	movs	r0, r4
 8000568:	f7ff fece 	bl	8000308 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800056c:	2800      	cmp	r0, #0
 800056e:	d1f9      	bne.n	8000564 <HAL_ADC_Start_DMA+0x74>
 8000570:	e7d1      	b.n	8000516 <HAL_ADC_Start_DMA+0x26>
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	fffff0fe 	.word	0xfffff0fe
 8000578:	08000585 	.word	0x08000585
 800057c:	080005f7 	.word	0x080005f7
 8000580:	08000603 	.word	0x08000603

08000584 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000584:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000586:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000588:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800058a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800058c:	4211      	tst	r1, r2
 800058e:	d12a      	bne.n	80005e6 <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000590:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000592:	32b1      	adds	r2, #177	; 0xb1
 8000594:	32ff      	adds	r2, #255	; 0xff
 8000596:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000598:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800059a:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	0109      	lsls	r1, r1, #4
 80005a0:	68d0      	ldr	r0, [r2, #12]
 80005a2:	4208      	tst	r0, r1
 80005a4:	d112      	bne.n	80005cc <ADC_DMAConvCplt+0x48>
 80005a6:	7e99      	ldrb	r1, [r3, #26]
 80005a8:	2900      	cmp	r1, #0
 80005aa:	d10f      	bne.n	80005cc <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	0709      	lsls	r1, r1, #28
 80005b0:	d50c      	bpl.n	80005cc <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005b2:	6891      	ldr	r1, [r2, #8]
 80005b4:	0749      	lsls	r1, r1, #29
 80005b6:	d40d      	bmi.n	80005d4 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80005b8:	200c      	movs	r0, #12
 80005ba:	6851      	ldr	r1, [r2, #4]
 80005bc:	4381      	bics	r1, r0
 80005be:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80005c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005c2:	490b      	ldr	r1, [pc, #44]	; (80005f0 <ADC_DMAConvCplt+0x6c>)
 80005c4:	4011      	ands	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	430a      	orrs	r2, r1
 80005ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80005cc:	0018      	movs	r0, r3
 80005ce:	f004 f90f 	bl	80047f0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80005d2:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005d4:	2220      	movs	r2, #32
 80005d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80005d8:	430a      	orrs	r2, r1
 80005da:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005dc:	2201      	movs	r2, #1
 80005de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80005e0:	430a      	orrs	r2, r1
 80005e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005e4:	e7f2      	b.n	80005cc <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4798      	blx	r3
}
 80005ec:	e7f1      	b.n	80005d2 <ADC_DMAConvCplt+0x4e>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	fffffefe 	.word	0xfffffefe

080005f4 <HAL_ADC_ConvHalfCpltCallback>:
 80005f4:	4770      	bx	lr

080005f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80005f6:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80005f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80005fa:	f7ff fffb 	bl	80005f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80005fe:	bd10      	pop	{r4, pc}

08000600 <HAL_ADC_ErrorCallback>:
}
 8000600:	4770      	bx	lr

08000602 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000602:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000604:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000606:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000608:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800060a:	4313      	orrs	r3, r2
 800060c:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800060e:	2304      	movs	r3, #4
 8000610:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000612:	4313      	orrs	r3, r2
 8000614:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8000616:	f7ff fff3 	bl	8000600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800061a:	bd10      	pop	{r4, pc}

0800061c <HAL_ADC_ConfigChannel>:
{
 800061c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 800061e:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8000620:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000622:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000624:	3434      	adds	r4, #52	; 0x34
 8000626:	7823      	ldrb	r3, [r4, #0]
{
 8000628:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800062a:	2002      	movs	r0, #2
 800062c:	2b01      	cmp	r3, #1
 800062e:	d02b      	beq.n	8000688 <HAL_ADC_ConfigChannel+0x6c>
 8000630:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000632:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000634:	6aee      	ldr	r6, [r5, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000636:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8000638:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800063a:	0740      	lsls	r0, r0, #29
 800063c:	d45a      	bmi.n	80006f4 <HAL_ADC_ConfigChannel+0xd8>
    if (sConfig->Rank != ADC_RANK_NONE)
 800063e:	4830      	ldr	r0, [pc, #192]	; (8000700 <HAL_ADC_ConfigChannel+0xe4>)
 8000640:	684f      	ldr	r7, [r1, #4]
 8000642:	680d      	ldr	r5, [r1, #0]
 8000644:	4287      	cmp	r7, r0
 8000646:	d03f      	beq.n	80006c8 <HAL_ADC_ConfigChannel+0xac>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000648:	40ab      	lsls	r3, r5
 800064a:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800064c:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800064e:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000650:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000652:	4338      	orrs	r0, r7
 8000654:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000656:	429e      	cmp	r6, r3
 8000658:	d00f      	beq.n	800067a <HAL_ADC_ConfigChannel+0x5e>
 800065a:	3e01      	subs	r6, #1
 800065c:	2e06      	cmp	r6, #6
 800065e:	d90c      	bls.n	800067a <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000660:	688b      	ldr	r3, [r1, #8]
 8000662:	2107      	movs	r1, #7
 8000664:	6950      	ldr	r0, [r2, #20]
 8000666:	4008      	ands	r0, r1
 8000668:	4283      	cmp	r3, r0
 800066a:	d006      	beq.n	800067a <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800066c:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800066e:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000670:	4388      	bics	r0, r1
 8000672:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000674:	6950      	ldr	r0, [r2, #20]
 8000676:	4303      	orrs	r3, r0
 8000678:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800067a:	002b      	movs	r3, r5
 800067c:	3b10      	subs	r3, #16
 800067e:	2b02      	cmp	r3, #2
 8000680:	d903      	bls.n	800068a <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000682:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000684:	2300      	movs	r3, #0
 8000686:	7023      	strb	r3, [r4, #0]
}
 8000688:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800068a:	4a1e      	ldr	r2, [pc, #120]	; (8000704 <HAL_ADC_ConfigChannel+0xe8>)
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	6811      	ldr	r1, [r2, #0]
 8000690:	2d10      	cmp	r5, #16
 8000692:	d015      	beq.n	80006c0 <HAL_ADC_ConfigChannel+0xa4>
 8000694:	2d11      	cmp	r5, #17
 8000696:	d015      	beq.n	80006c4 <HAL_ADC_ConfigChannel+0xa8>
 8000698:	045b      	lsls	r3, r3, #17
 800069a:	430b      	orrs	r3, r1
 800069c:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800069e:	2d10      	cmp	r5, #16
 80006a0:	d1ef      	bne.n	8000682 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_ADC_ConfigChannel+0xec>)
 80006a4:	4919      	ldr	r1, [pc, #100]	; (800070c <HAL_ADC_ConfigChannel+0xf0>)
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	f7ff fd4a 	bl	8000140 <__udivsi3>
 80006ac:	230a      	movs	r3, #10
 80006ae:	4358      	muls	r0, r3
 80006b0:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 80006b2:	9b01      	ldr	r3, [sp, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0e4      	beq.n	8000682 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 80006b8:	9b01      	ldr	r3, [sp, #4]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	e7f8      	b.n	80006b2 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80006c0:	041b      	lsls	r3, r3, #16
 80006c2:	e7ea      	b.n	800069a <HAL_ADC_ConfigChannel+0x7e>
 80006c4:	03db      	lsls	r3, r3, #15
 80006c6:	e7e8      	b.n	800069a <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006c8:	40ab      	lsls	r3, r5
 80006ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80006cc:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006ce:	002b      	movs	r3, r5
 80006d0:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006d2:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d8d4      	bhi.n	8000682 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <HAL_ADC_ConfigChannel+0xe8>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	2d10      	cmp	r5, #16
 80006de:	d005      	beq.n	80006ec <HAL_ADC_ConfigChannel+0xd0>
 80006e0:	2d11      	cmp	r5, #17
 80006e2:	d005      	beq.n	80006f0 <HAL_ADC_ConfigChannel+0xd4>
 80006e4:	490a      	ldr	r1, [pc, #40]	; (8000710 <HAL_ADC_ConfigChannel+0xf4>)
 80006e6:	400a      	ands	r2, r1
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	e7ca      	b.n	8000682 <HAL_ADC_ConfigChannel+0x66>
 80006ec:	4909      	ldr	r1, [pc, #36]	; (8000714 <HAL_ADC_ConfigChannel+0xf8>)
 80006ee:	e7fa      	b.n	80006e6 <HAL_ADC_ConfigChannel+0xca>
 80006f0:	4909      	ldr	r1, [pc, #36]	; (8000718 <HAL_ADC_ConfigChannel+0xfc>)
 80006f2:	e7f8      	b.n	80006e6 <HAL_ADC_ConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006f4:	2220      	movs	r2, #32
 80006f6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80006f8:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006fa:	430a      	orrs	r2, r1
 80006fc:	63aa      	str	r2, [r5, #56]	; 0x38
 80006fe:	e7c1      	b.n	8000684 <HAL_ADC_ConfigChannel+0x68>
 8000700:	00001001 	.word	0x00001001
 8000704:	40012708 	.word	0x40012708
 8000708:	2000000c 	.word	0x2000000c
 800070c:	000f4240 	.word	0x000f4240
 8000710:	feffffff 	.word	0xfeffffff
 8000714:	ff7fffff 	.word	0xff7fffff
 8000718:	ffbfffff 	.word	0xffbfffff

0800071c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800071c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800071e:	0006      	movs	r6, r0
 8000720:	3634      	adds	r6, #52	; 0x34
 8000722:	7833      	ldrb	r3, [r6, #0]
{
 8000724:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000726:	2002      	movs	r0, #2
 8000728:	2b01      	cmp	r3, #1
 800072a:	d042      	beq.n	80007b2 <HAL_ADCEx_Calibration_Start+0x96>
 800072c:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800072e:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8000730:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000732:	6823      	ldr	r3, [r4, #0]
 8000734:	689a      	ldr	r2, [r3, #8]
 8000736:	400a      	ands	r2, r1
 8000738:	2a01      	cmp	r2, #1
 800073a:	d105      	bne.n	8000748 <HAL_ADCEx_Calibration_Start+0x2c>
 800073c:	6819      	ldr	r1, [r3, #0]
 800073e:	4211      	tst	r1, r2
 8000740:	d138      	bne.n	80007b4 <HAL_ADCEx_Calibration_Start+0x98>
 8000742:	68da      	ldr	r2, [r3, #12]
 8000744:	0412      	lsls	r2, r2, #16
 8000746:	d435      	bmi.n	80007b4 <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8000748:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800074a:	491d      	ldr	r1, [pc, #116]	; (80007c0 <HAL_ADCEx_Calibration_Start+0xa4>)
 800074c:	4011      	ands	r1, r2
 800074e:	2202      	movs	r2, #2
 8000750:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000752:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8000754:	63a2      	str	r2, [r4, #56]	; 0x38
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000756:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000758:	68da      	ldr	r2, [r3, #12]
 800075a:	438a      	bics	r2, r1
 800075c:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	6899      	ldr	r1, [r3, #8]
 8000762:	0612      	lsls	r2, r2, #24
 8000764:	430a      	orrs	r2, r1
 8000766:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000768:	f7ff fdb6 	bl	80002d8 <HAL_GetTick>
 800076c:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	689a      	ldr	r2, [r3, #8]
 8000772:	2a00      	cmp	r2, #0
 8000774:	db0e      	blt.n	8000794 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000776:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000778:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800077a:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800077c:	430d      	orrs	r5, r1
 800077e:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000780:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000782:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8000784:	4393      	bics	r3, r2
 8000786:	001a      	movs	r2, r3
 8000788:	2301      	movs	r3, #1
 800078a:	4313      	orrs	r3, r2
 800078c:	63a3      	str	r3, [r4, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800078e:	2300      	movs	r3, #0
 8000790:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8000792:	e00e      	b.n	80007b2 <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000794:	f7ff fda0 	bl	80002d8 <HAL_GetTick>
 8000798:	1bc0      	subs	r0, r0, r7
 800079a:	2802      	cmp	r0, #2
 800079c:	d9e7      	bls.n	800076e <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 800079e:	2212      	movs	r2, #18
 80007a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80007a2:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80007a4:	4393      	bics	r3, r2
 80007a6:	001a      	movs	r2, r3
 80007a8:	2310      	movs	r3, #16
 80007aa:	4313      	orrs	r3, r2
 80007ac:	63a3      	str	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hadc);
 80007ae:	2300      	movs	r3, #0
 80007b0:	7033      	strb	r3, [r6, #0]
}
 80007b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007b4:	2320      	movs	r3, #32
 80007b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80007b8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007ba:	4313      	orrs	r3, r2
 80007bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80007be:	e7e6      	b.n	800078e <HAL_ADCEx_Calibration_Start+0x72>
 80007c0:	fffffefd 	.word	0xfffffefd

080007c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80007c8:	2800      	cmp	r0, #0
 80007ca:	db12      	blt.n	80007f2 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007cc:	0883      	lsrs	r3, r0, #2
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <HAL_NVIC_SetPriority+0x58>)
 80007d0:	2403      	movs	r4, #3
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	189b      	adds	r3, r3, r2
 80007d6:	22ff      	movs	r2, #255	; 0xff
 80007d8:	4020      	ands	r0, r4
 80007da:	40a0      	lsls	r0, r4
 80007dc:	0014      	movs	r4, r2
 80007de:	25c0      	movs	r5, #192	; 0xc0
 80007e0:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007e2:	4011      	ands	r1, r2
 80007e4:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e6:	00ad      	lsls	r5, r5, #2
 80007e8:	595e      	ldr	r6, [r3, r5]
 80007ea:	43a6      	bics	r6, r4
 80007ec:	4331      	orrs	r1, r6
 80007ee:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f2:	2403      	movs	r4, #3
 80007f4:	230f      	movs	r3, #15
 80007f6:	b2c0      	uxtb	r0, r0
 80007f8:	4003      	ands	r3, r0
 80007fa:	4020      	ands	r0, r4
 80007fc:	40a0      	lsls	r0, r4
 80007fe:	34fc      	adds	r4, #252	; 0xfc
 8000800:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000802:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000804:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000806:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000808:	3b08      	subs	r3, #8
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <HAL_NVIC_SetPriority+0x5c>)
 800080c:	089b      	lsrs	r3, r3, #2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	189b      	adds	r3, r3, r2
 8000812:	69da      	ldr	r2, [r3, #28]
 8000814:	43aa      	bics	r2, r5
 8000816:	4311      	orrs	r1, r2
 8000818:	61d9      	str	r1, [r3, #28]
 800081a:	e7e9      	b.n	80007f0 <HAL_NVIC_SetPriority+0x2c>
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000824:	2800      	cmp	r0, #0
 8000826:	db05      	blt.n	8000834 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000828:	231f      	movs	r3, #31
 800082a:	4018      	ands	r0, r3
 800082c:	3b1e      	subs	r3, #30
 800082e:	4083      	lsls	r3, r0
 8000830:	4a01      	ldr	r2, [pc, #4]	; (8000838 <HAL_NVIC_EnableIRQ+0x14>)
 8000832:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000834:	4770      	bx	lr
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	e000e100 	.word	0xe000e100

0800083c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	4a09      	ldr	r2, [pc, #36]	; (8000864 <HAL_SYSTICK_Config+0x28>)
 800083e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000840:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000842:	4293      	cmp	r3, r2
 8000844:	d80d      	bhi.n	8000862 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000846:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084a:	4808      	ldr	r0, [pc, #32]	; (800086c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084e:	6a03      	ldr	r3, [r0, #32]
 8000850:	0609      	lsls	r1, r1, #24
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	430b      	orrs	r3, r1
 8000858:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000860:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000862:	4770      	bx	lr
 8000864:	00ffffff 	.word	0x00ffffff
 8000868:	e000e010 	.word	0xe000e010
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8000874:	2001      	movs	r0, #1
  if(NULL == hdma)
 8000876:	2c00      	cmp	r4, #0
 8000878:	d024      	beq.n	80008c4 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800087a:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800087c:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800087e:	1ca5      	adds	r5, r4, #2
 8000880:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8000882:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000886:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000888:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800088a:	6863      	ldr	r3, [r4, #4]
 800088c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800088e:	68e1      	ldr	r1, [r4, #12]
 8000890:	430b      	orrs	r3, r1
 8000892:	6921      	ldr	r1, [r4, #16]
 8000894:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000896:	6961      	ldr	r1, [r4, #20]
 8000898:	430b      	orrs	r3, r1
 800089a:	69a1      	ldr	r1, [r4, #24]
 800089c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800089e:	69e1      	ldr	r1, [r4, #28]
 80008a0:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80008a2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80008a4:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_DMA_Init+0x5c>)
 80008a8:	2114      	movs	r1, #20
 80008aa:	18c0      	adds	r0, r0, r3
 80008ac:	f7ff fc48 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80008b2:	0080      	lsls	r0, r0, #2
 80008b4:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80008b6:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008b8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80008ba:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008bc:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80008be:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80008c0:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80008c2:	77e0      	strb	r0, [r4, #31]
}  
 80008c4:	bd70      	pop	{r4, r5, r6, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	ffffc00f 	.word	0xffffc00f
 80008cc:	bffdfff8 	.word	0xbffdfff8
 80008d0:	40020000 	.word	0x40020000

080008d4 <HAL_DMA_Start_IT>:
{
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80008d6:	1c46      	adds	r6, r0, #1
 80008d8:	7ff5      	ldrb	r5, [r6, #31]
 80008da:	2402      	movs	r4, #2
 80008dc:	2d01      	cmp	r5, #1
 80008de:	d026      	beq.n	800092e <HAL_DMA_Start_IT+0x5a>
 80008e0:	2501      	movs	r5, #1
 80008e2:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80008e4:	1905      	adds	r5, r0, r4
 80008e6:	46ac      	mov	ip, r5
 80008e8:	7fed      	ldrb	r5, [r5, #31]
 80008ea:	2700      	movs	r7, #0
 80008ec:	b2ed      	uxtb	r5, r5
 80008ee:	2d01      	cmp	r5, #1
 80008f0:	d129      	bne.n	8000946 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80008f2:	4666      	mov	r6, ip
 80008f4:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008f6:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008f8:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008fa:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008fc:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008fe:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000900:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000902:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000904:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000906:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000908:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800090a:	6843      	ldr	r3, [r0, #4]
 800090c:	6805      	ldr	r5, [r0, #0]
 800090e:	2b10      	cmp	r3, #16
 8000910:	d10f      	bne.n	8000932 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8000912:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000914:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000916:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000918:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00c      	beq.n	8000938 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800091e:	230e      	movs	r3, #14
 8000920:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000922:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000924:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8000926:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000928:	682a      	ldr	r2, [r5, #0]
 800092a:	4313      	orrs	r3, r2
 800092c:	602b      	str	r3, [r5, #0]
} 
 800092e:	0020      	movs	r0, r4
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8000932:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000934:	60e2      	str	r2, [r4, #12]
 8000936:	e7ee      	b.n	8000916 <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000938:	230a      	movs	r3, #10
 800093a:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800093c:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800093e:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	4393      	bics	r3, r2
 8000944:	e7ed      	b.n	8000922 <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 8000946:	77f7      	strb	r7, [r6, #31]
 8000948:	e7f1      	b.n	800092e <HAL_DMA_Start_IT+0x5a>

0800094a <HAL_DMA_Abort_IT>:
{  
 800094a:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800094c:	1c84      	adds	r4, r0, #2
 800094e:	7fe3      	ldrb	r3, [r4, #31]
 8000950:	2b02      	cmp	r3, #2
 8000952:	d004      	beq.n	800095e <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000954:	2304      	movs	r3, #4
 8000956:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000958:	3b03      	subs	r3, #3
}
 800095a:	0018      	movs	r0, r3
 800095c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800095e:	210e      	movs	r1, #14
 8000960:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000962:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	438a      	bics	r2, r1
 8000968:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800096a:	2201      	movs	r2, #1
 800096c:	6819      	ldr	r1, [r3, #0]
 800096e:	4391      	bics	r1, r2
 8000970:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000972:	0011      	movs	r1, r2
 8000974:	40a9      	lsls	r1, r5
 8000976:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000978:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800097a:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800097c:	2400      	movs	r4, #0
 800097e:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8000980:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000982:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000984:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000986:	42a2      	cmp	r2, r4
 8000988:	d0e7      	beq.n	800095a <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800098a:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800098c:	0023      	movs	r3, r4
 800098e:	e7e4      	b.n	800095a <HAL_DMA_Abort_IT+0x10>

08000990 <HAL_DMA_IRQHandler>:
{
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000992:	2704      	movs	r7, #4
 8000994:	003e      	movs	r6, r7
 8000996:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000998:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800099a:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800099c:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800099e:	6803      	ldr	r3, [r0, #0]
 80009a0:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80009a2:	422e      	tst	r6, r5
 80009a4:	d00d      	beq.n	80009c2 <HAL_DMA_IRQHandler+0x32>
 80009a6:	423c      	tst	r4, r7
 80009a8:	d00b      	beq.n	80009c2 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009aa:	6819      	ldr	r1, [r3, #0]
 80009ac:	0689      	lsls	r1, r1, #26
 80009ae:	d402      	bmi.n	80009b6 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	43b9      	bics	r1, r7
 80009b4:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80009b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80009b8:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d019      	beq.n	80009f2 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 80009be:	4798      	blx	r3
}  
 80009c0:	e017      	b.n	80009f2 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80009c2:	2702      	movs	r7, #2
 80009c4:	003e      	movs	r6, r7
 80009c6:	408e      	lsls	r6, r1
 80009c8:	422e      	tst	r6, r5
 80009ca:	d013      	beq.n	80009f4 <HAL_DMA_IRQHandler+0x64>
 80009cc:	423c      	tst	r4, r7
 80009ce:	d011      	beq.n	80009f4 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	0689      	lsls	r1, r1, #26
 80009d4:	d406      	bmi.n	80009e4 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80009d6:	240a      	movs	r4, #10
 80009d8:	6819      	ldr	r1, [r3, #0]
 80009da:	43a1      	bics	r1, r4
 80009dc:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80009de:	2101      	movs	r1, #1
 80009e0:	19c3      	adds	r3, r0, r7
 80009e2:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80009e4:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80009e6:	2200      	movs	r2, #0
 80009e8:	1c43      	adds	r3, r0, #1
 80009ea:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 80009ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d1e5      	bne.n	80009be <HAL_DMA_IRQHandler+0x2e>
}  
 80009f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80009f4:	2608      	movs	r6, #8
 80009f6:	0037      	movs	r7, r6
 80009f8:	408f      	lsls	r7, r1
 80009fa:	423d      	tst	r5, r7
 80009fc:	d0f9      	beq.n	80009f2 <HAL_DMA_IRQHandler+0x62>
 80009fe:	4234      	tst	r4, r6
 8000a00:	d0f7      	beq.n	80009f2 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a02:	250e      	movs	r5, #14
 8000a04:	681c      	ldr	r4, [r3, #0]
 8000a06:	43ac      	bics	r4, r5
 8000a08:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	001c      	movs	r4, r3
 8000a0e:	408c      	lsls	r4, r1
 8000a10:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8000a12:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000a14:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000a16:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8000a18:	2200      	movs	r2, #0
 8000a1a:	18c3      	adds	r3, r0, r3
 8000a1c:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8000a1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a20:	e7e5      	b.n	80009ee <HAL_DMA_IRQHandler+0x5e>
	...

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a26:	680b      	ldr	r3, [r1, #0]
{ 
 8000a28:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8000a2c:	2300      	movs	r3, #0
{ 
 8000a2e:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a30:	9a02      	ldr	r2, [sp, #8]
 8000a32:	40da      	lsrs	r2, r3
 8000a34:	d101      	bne.n	8000a3a <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 8000a36:	b007      	add	sp, #28
 8000a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	9203      	str	r2, [sp, #12]
 8000a40:	9903      	ldr	r1, [sp, #12]
 8000a42:	9a02      	ldr	r2, [sp, #8]
 8000a44:	400a      	ands	r2, r1
 8000a46:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8000a48:	d100      	bne.n	8000a4c <HAL_GPIO_Init+0x28>
 8000a4a:	e08c      	b.n	8000b66 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a4c:	9a01      	ldr	r2, [sp, #4]
 8000a4e:	2110      	movs	r1, #16
 8000a50:	6852      	ldr	r2, [r2, #4]
 8000a52:	0016      	movs	r6, r2
 8000a54:	438e      	bics	r6, r1
 8000a56:	2e02      	cmp	r6, #2
 8000a58:	d10e      	bne.n	8000a78 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a5a:	2507      	movs	r5, #7
 8000a5c:	401d      	ands	r5, r3
 8000a5e:	00ad      	lsls	r5, r5, #2
 8000a60:	3901      	subs	r1, #1
 8000a62:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8000a64:	08dc      	lsrs	r4, r3, #3
 8000a66:	00a4      	lsls	r4, r4, #2
 8000a68:	1904      	adds	r4, r0, r4
 8000a6a:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a6c:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a6e:	9901      	ldr	r1, [sp, #4]
 8000a70:	6909      	ldr	r1, [r1, #16]
 8000a72:	40a9      	lsls	r1, r5
 8000a74:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000a76:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a78:	2403      	movs	r4, #3
 8000a7a:	005f      	lsls	r7, r3, #1
 8000a7c:	40bc      	lsls	r4, r7
 8000a7e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000a80:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a82:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a84:	4025      	ands	r5, r4
 8000a86:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a88:	2503      	movs	r5, #3
 8000a8a:	4015      	ands	r5, r2
 8000a8c:	40bd      	lsls	r5, r7
 8000a8e:	4661      	mov	r1, ip
 8000a90:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000a92:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a94:	2e01      	cmp	r6, #1
 8000a96:	d80f      	bhi.n	8000ab8 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a98:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8000a9a:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a9c:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a9e:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aa0:	40bd      	lsls	r5, r7
 8000aa2:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000aa4:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000aa6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa8:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aaa:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aac:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	400d      	ands	r5, r1
 8000ab2:	409d      	lsls	r5, r3
 8000ab4:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000ab6:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ab8:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aba:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000abc:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000abe:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac0:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac2:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac4:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000ac8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aca:	420a      	tst	r2, r1
 8000acc:	d04b      	beq.n	8000b66 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2101      	movs	r1, #1
 8000ad0:	4c26      	ldr	r4, [pc, #152]	; (8000b6c <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad2:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad4:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad6:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad8:	430d      	orrs	r5, r1
 8000ada:	61a5      	str	r5, [r4, #24]
 8000adc:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ade:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae0:	400c      	ands	r4, r1
 8000ae2:	9405      	str	r4, [sp, #20]
 8000ae4:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ae6:	240f      	movs	r4, #15
 8000ae8:	4921      	ldr	r1, [pc, #132]	; (8000b70 <HAL_GPIO_Init+0x14c>)
 8000aea:	00ad      	lsls	r5, r5, #2
 8000aec:	00b6      	lsls	r6, r6, #2
 8000aee:	186d      	adds	r5, r5, r1
 8000af0:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000af2:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8000af4:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000af6:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000af8:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000afa:	2400      	movs	r4, #0
 8000afc:	4288      	cmp	r0, r1
 8000afe:	d00c      	beq.n	8000b1a <HAL_GPIO_Init+0xf6>
 8000b00:	491c      	ldr	r1, [pc, #112]	; (8000b74 <HAL_GPIO_Init+0x150>)
 8000b02:	3401      	adds	r4, #1
 8000b04:	4288      	cmp	r0, r1
 8000b06:	d008      	beq.n	8000b1a <HAL_GPIO_Init+0xf6>
 8000b08:	491b      	ldr	r1, [pc, #108]	; (8000b78 <HAL_GPIO_Init+0x154>)
 8000b0a:	3401      	adds	r4, #1
 8000b0c:	4288      	cmp	r0, r1
 8000b0e:	d004      	beq.n	8000b1a <HAL_GPIO_Init+0xf6>
 8000b10:	491a      	ldr	r1, [pc, #104]	; (8000b7c <HAL_GPIO_Init+0x158>)
 8000b12:	3403      	adds	r4, #3
 8000b14:	4288      	cmp	r0, r1
 8000b16:	d100      	bne.n	8000b1a <HAL_GPIO_Init+0xf6>
 8000b18:	3c02      	subs	r4, #2
 8000b1a:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8000b1c:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b1e:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8000b20:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b22:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000b24:	4c16      	ldr	r4, [pc, #88]	; (8000b80 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8000b26:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000b28:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8000b2a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b2c:	03d1      	lsls	r1, r2, #15
 8000b2e:	d401      	bmi.n	8000b34 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8000b30:	003e      	movs	r6, r7
 8000b32:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000b34:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000b36:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8000b38:	9e00      	ldr	r6, [sp, #0]
 8000b3a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3c:	0391      	lsls	r1, r2, #14
 8000b3e:	d401      	bmi.n	8000b44 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8000b40:	003e      	movs	r6, r7
 8000b42:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000b44:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000b46:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8000b48:	9e00      	ldr	r6, [sp, #0]
 8000b4a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4c:	02d1      	lsls	r1, r2, #11
 8000b4e:	d401      	bmi.n	8000b54 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8000b50:	003e      	movs	r6, r7
 8000b52:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000b54:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000b56:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8000b58:	9f00      	ldr	r7, [sp, #0]
 8000b5a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b5c:	0292      	lsls	r2, r2, #10
 8000b5e:	d401      	bmi.n	8000b64 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8000b60:	402e      	ands	r6, r5
 8000b62:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000b64:	60e7      	str	r7, [r4, #12]
    position++;
 8000b66:	3301      	adds	r3, #1
 8000b68:	e762      	b.n	8000a30 <HAL_GPIO_Init+0xc>
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000
 8000b74:	48000400 	.word	0x48000400
 8000b78:	48000800 	.word	0x48000800
 8000b7c:	48000c00 	.word	0x48000c00
 8000b80:	40010400 	.word	0x40010400

08000b84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b88:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b8a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b8c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000b8e:	e7fc      	b.n	8000b8a <HAL_GPIO_WritePin+0x6>

08000b90 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000b90:	6943      	ldr	r3, [r0, #20]
 8000b92:	4219      	tst	r1, r3
 8000b94:	d000      	beq.n	8000b98 <HAL_GPIO_TogglePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b96:	0409      	lsls	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b98:	6181      	str	r1, [r0, #24]
  }
}
 8000b9a:	4770      	bx	lr

08000b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000b9e:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ba0:	695a      	ldr	r2, [r3, #20]
 8000ba2:	4210      	tst	r0, r2
 8000ba4:	d002      	beq.n	8000bac <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ba6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ba8:	f003 fe1a 	bl	80047e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bac:	bd10      	pop	{r4, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	40010400 	.word	0x40010400

08000bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	0004      	movs	r4, r0
 8000bb8:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d102      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000bbe:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000bc0:	b005      	add	sp, #20
 8000bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc4:	6803      	ldr	r3, [r0, #0]
 8000bc6:	07db      	lsls	r3, r3, #31
 8000bc8:	d42e      	bmi.n	8000c28 <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bca:	6823      	ldr	r3, [r4, #0]
 8000bcc:	079b      	lsls	r3, r3, #30
 8000bce:	d47e      	bmi.n	8000cce <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	071b      	lsls	r3, r3, #28
 8000bd4:	d500      	bpl.n	8000bd8 <HAL_RCC_OscConfig+0x24>
 8000bd6:	e0ba      	b.n	8000d4e <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	075b      	lsls	r3, r3, #29
 8000bdc:	d500      	bpl.n	8000be0 <HAL_RCC_OscConfig+0x2c>
 8000bde:	e0dd      	b.n	8000d9c <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	06db      	lsls	r3, r3, #27
 8000be4:	d51a      	bpl.n	8000c1c <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000be6:	6962      	ldr	r2, [r4, #20]
 8000be8:	4db4      	ldr	r5, [pc, #720]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000bea:	2304      	movs	r3, #4
 8000bec:	2a01      	cmp	r2, #1
 8000bee:	d000      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x3e>
 8000bf0:	e149      	b.n	8000e86 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bf2:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bf4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000bfa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c00:	f7ff fb6a 	bl	80002d8 <HAL_GetTick>
 8000c04:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c08:	4233      	tst	r3, r6
 8000c0a:	d100      	bne.n	8000c0e <HAL_RCC_OscConfig+0x5a>
 8000c0c:	e134      	b.n	8000e78 <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c0e:	21f8      	movs	r1, #248	; 0xf8
 8000c10:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c12:	69a3      	ldr	r3, [r4, #24]
 8000c14:	438a      	bics	r2, r1
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c1c:	6a23      	ldr	r3, [r4, #32]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d000      	beq.n	8000c24 <HAL_RCC_OscConfig+0x70>
 8000c22:	e157      	b.n	8000ed4 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8000c24:	2000      	movs	r0, #0
 8000c26:	e7cb      	b.n	8000bc0 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c28:	210c      	movs	r1, #12
 8000c2a:	4da4      	ldr	r5, [pc, #656]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000c2c:	686a      	ldr	r2, [r5, #4]
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2a04      	cmp	r2, #4
 8000c32:	d006      	beq.n	8000c42 <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c34:	686b      	ldr	r3, [r5, #4]
 8000c36:	400b      	ands	r3, r1
 8000c38:	2b08      	cmp	r3, #8
 8000c3a:	d109      	bne.n	8000c50 <HAL_RCC_OscConfig+0x9c>
 8000c3c:	686b      	ldr	r3, [r5, #4]
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	d506      	bpl.n	8000c50 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c42:	682b      	ldr	r3, [r5, #0]
 8000c44:	039b      	lsls	r3, r3, #14
 8000c46:	d5c0      	bpl.n	8000bca <HAL_RCC_OscConfig+0x16>
 8000c48:	6863      	ldr	r3, [r4, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1bd      	bne.n	8000bca <HAL_RCC_OscConfig+0x16>
 8000c4e:	e7b6      	b.n	8000bbe <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c50:	6863      	ldr	r3, [r4, #4]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d113      	bne.n	8000c7e <HAL_RCC_OscConfig+0xca>
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	682a      	ldr	r2, [r5, #0]
 8000c5a:	025b      	lsls	r3, r3, #9
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c60:	f7ff fb3a 	bl	80002d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c64:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c66:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c68:	02b6      	lsls	r6, r6, #10
 8000c6a:	682b      	ldr	r3, [r5, #0]
 8000c6c:	4233      	tst	r3, r6
 8000c6e:	d1ac      	bne.n	8000bca <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c70:	f7ff fb32 	bl	80002d8 <HAL_GetTick>
 8000c74:	1bc0      	subs	r0, r0, r7
 8000c76:	2864      	cmp	r0, #100	; 0x64
 8000c78:	d9f7      	bls.n	8000c6a <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	e7a0      	b.n	8000bc0 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d115      	bne.n	8000cae <HAL_RCC_OscConfig+0xfa>
 8000c82:	682b      	ldr	r3, [r5, #0]
 8000c84:	4a8e      	ldr	r2, [pc, #568]	; (8000ec0 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c88:	4013      	ands	r3, r2
 8000c8a:	602b      	str	r3, [r5, #0]
 8000c8c:	682b      	ldr	r3, [r5, #0]
 8000c8e:	4a8d      	ldr	r2, [pc, #564]	; (8000ec4 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c90:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c92:	4013      	ands	r3, r2
 8000c94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c96:	f7ff fb1f 	bl	80002d8 <HAL_GetTick>
 8000c9a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	4233      	tst	r3, r6
 8000ca0:	d093      	beq.n	8000bca <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca2:	f7ff fb19 	bl	80002d8 <HAL_GetTick>
 8000ca6:	1bc0      	subs	r0, r0, r7
 8000ca8:	2864      	cmp	r0, #100	; 0x64
 8000caa:	d9f7      	bls.n	8000c9c <HAL_RCC_OscConfig+0xe8>
 8000cac:	e7e5      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	d105      	bne.n	8000cbe <HAL_RCC_OscConfig+0x10a>
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	682a      	ldr	r2, [r5, #0]
 8000cb6:	02db      	lsls	r3, r3, #11
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	602b      	str	r3, [r5, #0]
 8000cbc:	e7cb      	b.n	8000c56 <HAL_RCC_OscConfig+0xa2>
 8000cbe:	682b      	ldr	r3, [r5, #0]
 8000cc0:	4a7f      	ldr	r2, [pc, #508]	; (8000ec0 <HAL_RCC_OscConfig+0x30c>)
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	602b      	str	r3, [r5, #0]
 8000cc6:	682b      	ldr	r3, [r5, #0]
 8000cc8:	4a7e      	ldr	r2, [pc, #504]	; (8000ec4 <HAL_RCC_OscConfig+0x310>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	e7c7      	b.n	8000c5e <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000cce:	220c      	movs	r2, #12
 8000cd0:	4d7a      	ldr	r5, [pc, #488]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000cd2:	686b      	ldr	r3, [r5, #4]
 8000cd4:	4213      	tst	r3, r2
 8000cd6:	d006      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cd8:	686b      	ldr	r3, [r5, #4]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	2b08      	cmp	r3, #8
 8000cde:	d111      	bne.n	8000d04 <HAL_RCC_OscConfig+0x150>
 8000ce0:	686b      	ldr	r3, [r5, #4]
 8000ce2:	03db      	lsls	r3, r3, #15
 8000ce4:	d40e      	bmi.n	8000d04 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce6:	682b      	ldr	r3, [r5, #0]
 8000ce8:	079b      	lsls	r3, r3, #30
 8000cea:	d503      	bpl.n	8000cf4 <HAL_RCC_OscConfig+0x140>
 8000cec:	68e3      	ldr	r3, [r4, #12]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d000      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x140>
 8000cf2:	e764      	b.n	8000bbe <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf4:	21f8      	movs	r1, #248	; 0xf8
 8000cf6:	682a      	ldr	r2, [r5, #0]
 8000cf8:	6923      	ldr	r3, [r4, #16]
 8000cfa:	438a      	bics	r2, r1
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	602b      	str	r3, [r5, #0]
 8000d02:	e765      	b.n	8000bd0 <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d04:	68e2      	ldr	r2, [r4, #12]
 8000d06:	2301      	movs	r3, #1
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	d00f      	beq.n	8000d2c <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8000d0c:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000d10:	4313      	orrs	r3, r2
 8000d12:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d14:	f7ff fae0 	bl	80002d8 <HAL_GetTick>
 8000d18:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1a:	682b      	ldr	r3, [r5, #0]
 8000d1c:	4233      	tst	r3, r6
 8000d1e:	d1e9      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d20:	f7ff fada 	bl	80002d8 <HAL_GetTick>
 8000d24:	1bc0      	subs	r0, r0, r7
 8000d26:	2802      	cmp	r0, #2
 8000d28:	d9f7      	bls.n	8000d1a <HAL_RCC_OscConfig+0x166>
 8000d2a:	e7a6      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8000d2c:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000d30:	439a      	bics	r2, r3
 8000d32:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000d34:	f7ff fad0 	bl	80002d8 <HAL_GetTick>
 8000d38:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3a:	682b      	ldr	r3, [r5, #0]
 8000d3c:	4233      	tst	r3, r6
 8000d3e:	d100      	bne.n	8000d42 <HAL_RCC_OscConfig+0x18e>
 8000d40:	e746      	b.n	8000bd0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d42:	f7ff fac9 	bl	80002d8 <HAL_GetTick>
 8000d46:	1bc0      	subs	r0, r0, r7
 8000d48:	2802      	cmp	r0, #2
 8000d4a:	d9f6      	bls.n	8000d3a <HAL_RCC_OscConfig+0x186>
 8000d4c:	e795      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d4e:	69e2      	ldr	r2, [r4, #28]
 8000d50:	2301      	movs	r3, #1
 8000d52:	4d5a      	ldr	r5, [pc, #360]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	d010      	beq.n	8000d7a <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8000d58:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d5a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000d60:	f7ff faba 	bl	80002d8 <HAL_GetTick>
 8000d64:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d68:	4233      	tst	r3, r6
 8000d6a:	d000      	beq.n	8000d6e <HAL_RCC_OscConfig+0x1ba>
 8000d6c:	e734      	b.n	8000bd8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d6e:	f7ff fab3 	bl	80002d8 <HAL_GetTick>
 8000d72:	1bc0      	subs	r0, r0, r7
 8000d74:	2802      	cmp	r0, #2
 8000d76:	d9f6      	bls.n	8000d66 <HAL_RCC_OscConfig+0x1b2>
 8000d78:	e77f      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8000d7a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d7c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000d7e:	439a      	bics	r2, r3
 8000d80:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000d82:	f7ff faa9 	bl	80002d8 <HAL_GetTick>
 8000d86:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d8a:	4233      	tst	r3, r6
 8000d8c:	d100      	bne.n	8000d90 <HAL_RCC_OscConfig+0x1dc>
 8000d8e:	e723      	b.n	8000bd8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d90:	f7ff faa2 	bl	80002d8 <HAL_GetTick>
 8000d94:	1bc0      	subs	r0, r0, r7
 8000d96:	2802      	cmp	r0, #2
 8000d98:	d9f6      	bls.n	8000d88 <HAL_RCC_OscConfig+0x1d4>
 8000d9a:	e76e      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d9c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000d9e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000da0:	4d46      	ldr	r5, [pc, #280]	; (8000ebc <HAL_RCC_OscConfig+0x308>)
 8000da2:	0552      	lsls	r2, r2, #21
 8000da4:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000da6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000da8:	4213      	tst	r3, r2
 8000daa:	d108      	bne.n	8000dbe <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	69eb      	ldr	r3, [r5, #28]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61eb      	str	r3, [r5, #28]
 8000db2:	69eb      	ldr	r3, [r5, #28]
 8000db4:	4013      	ands	r3, r2
 8000db6:	9303      	str	r3, [sp, #12]
 8000db8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dbe:	2780      	movs	r7, #128	; 0x80
 8000dc0:	4e41      	ldr	r6, [pc, #260]	; (8000ec8 <HAL_RCC_OscConfig+0x314>)
 8000dc2:	007f      	lsls	r7, r7, #1
 8000dc4:	6833      	ldr	r3, [r6, #0]
 8000dc6:	423b      	tst	r3, r7
 8000dc8:	d006      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dca:	68a3      	ldr	r3, [r4, #8]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d113      	bne.n	8000df8 <HAL_RCC_OscConfig+0x244>
 8000dd0:	6a2a      	ldr	r2, [r5, #32]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	622b      	str	r3, [r5, #32]
 8000dd6:	e030      	b.n	8000e3a <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dd8:	6833      	ldr	r3, [r6, #0]
 8000dda:	433b      	orrs	r3, r7
 8000ddc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000dde:	f7ff fa7b 	bl	80002d8 <HAL_GetTick>
 8000de2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de4:	6833      	ldr	r3, [r6, #0]
 8000de6:	423b      	tst	r3, r7
 8000de8:	d1ef      	bne.n	8000dca <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dea:	f7ff fa75 	bl	80002d8 <HAL_GetTick>
 8000dee:	9b01      	ldr	r3, [sp, #4]
 8000df0:	1ac0      	subs	r0, r0, r3
 8000df2:	2864      	cmp	r0, #100	; 0x64
 8000df4:	d9f6      	bls.n	8000de4 <HAL_RCC_OscConfig+0x230>
 8000df6:	e740      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
 8000df8:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d114      	bne.n	8000e28 <HAL_RCC_OscConfig+0x274>
 8000dfe:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e00:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e02:	4393      	bics	r3, r2
 8000e04:	622b      	str	r3, [r5, #32]
 8000e06:	6a2b      	ldr	r3, [r5, #32]
 8000e08:	3203      	adds	r2, #3
 8000e0a:	4393      	bics	r3, r2
 8000e0c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000e0e:	f7ff fa63 	bl	80002d8 <HAL_GetTick>
 8000e12:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e14:	6a2b      	ldr	r3, [r5, #32]
 8000e16:	423b      	tst	r3, r7
 8000e18:	d025      	beq.n	8000e66 <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e1a:	f7ff fa5d 	bl	80002d8 <HAL_GetTick>
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_RCC_OscConfig+0x318>)
 8000e20:	1b80      	subs	r0, r0, r6
 8000e22:	4298      	cmp	r0, r3
 8000e24:	d9f6      	bls.n	8000e14 <HAL_RCC_OscConfig+0x260>
 8000e26:	e728      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	d10b      	bne.n	8000e44 <HAL_RCC_OscConfig+0x290>
 8000e2c:	6a29      	ldr	r1, [r5, #32]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	430b      	orrs	r3, r1
 8000e32:	622b      	str	r3, [r5, #32]
 8000e34:	6a2b      	ldr	r3, [r5, #32]
 8000e36:	431a      	orrs	r2, r3
 8000e38:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fa4d 	bl	80002d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000e40:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e42:	e00d      	b.n	8000e60 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e44:	6a2b      	ldr	r3, [r5, #32]
 8000e46:	4393      	bics	r3, r2
 8000e48:	2204      	movs	r2, #4
 8000e4a:	622b      	str	r3, [r5, #32]
 8000e4c:	6a2b      	ldr	r3, [r5, #32]
 8000e4e:	4393      	bics	r3, r2
 8000e50:	e7c0      	b.n	8000dd4 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e52:	f7ff fa41 	bl	80002d8 <HAL_GetTick>
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_RCC_OscConfig+0x318>)
 8000e58:	1b80      	subs	r0, r0, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d900      	bls.n	8000e60 <HAL_RCC_OscConfig+0x2ac>
 8000e5e:	e70c      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e60:	6a2b      	ldr	r3, [r5, #32]
 8000e62:	423b      	tst	r3, r7
 8000e64:	d0f5      	beq.n	8000e52 <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 8000e66:	9b00      	ldr	r3, [sp, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d000      	beq.n	8000e6e <HAL_RCC_OscConfig+0x2ba>
 8000e6c:	e6b8      	b.n	8000be0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e6e:	69eb      	ldr	r3, [r5, #28]
 8000e70:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_RCC_OscConfig+0x31c>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	61eb      	str	r3, [r5, #28]
 8000e76:	e6b3      	b.n	8000be0 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e78:	f7ff fa2e 	bl	80002d8 <HAL_GetTick>
 8000e7c:	1bc0      	subs	r0, r0, r7
 8000e7e:	2802      	cmp	r0, #2
 8000e80:	d800      	bhi.n	8000e84 <HAL_RCC_OscConfig+0x2d0>
 8000e82:	e6c0      	b.n	8000c06 <HAL_RCC_OscConfig+0x52>
 8000e84:	e6f9      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000e86:	3205      	adds	r2, #5
 8000e88:	d103      	bne.n	8000e92 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000e8a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000e8c:	439a      	bics	r2, r3
 8000e8e:	636a      	str	r2, [r5, #52]	; 0x34
 8000e90:	e6bd      	b.n	8000c0e <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e92:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e94:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e96:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000e98:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e9a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000e9c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e9e:	4393      	bics	r3, r2
 8000ea0:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fa19 	bl	80002d8 <HAL_GetTick>
 8000ea6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ea8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000eaa:	4233      	tst	r3, r6
 8000eac:	d100      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x2fc>
 8000eae:	e6b5      	b.n	8000c1c <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000eb0:	f7ff fa12 	bl	80002d8 <HAL_GetTick>
 8000eb4:	1bc0      	subs	r0, r0, r7
 8000eb6:	2802      	cmp	r0, #2
 8000eb8:	d9f6      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x2f4>
 8000eba:	e6de      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	fffeffff 	.word	0xfffeffff
 8000ec4:	fffbffff 	.word	0xfffbffff
 8000ec8:	40007000 	.word	0x40007000
 8000ecc:	00001388 	.word	0x00001388
 8000ed0:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ed4:	200c      	movs	r0, #12
 8000ed6:	4a35      	ldr	r2, [pc, #212]	; (8000fac <HAL_RCC_OscConfig+0x3f8>)
 8000ed8:	6851      	ldr	r1, [r2, #4]
 8000eda:	0015      	movs	r5, r2
 8000edc:	4001      	ands	r1, r0
 8000ede:	2908      	cmp	r1, #8
 8000ee0:	d047      	beq.n	8000f72 <HAL_RCC_OscConfig+0x3be>
 8000ee2:	4a33      	ldr	r2, [pc, #204]	; (8000fb0 <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d132      	bne.n	8000f4e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 8000ee8:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eea:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000eec:	4013      	ands	r3, r2
 8000eee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ef0:	f7ff f9f2 	bl	80002d8 <HAL_GetTick>
 8000ef4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef6:	04b6      	lsls	r6, r6, #18
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	4233      	tst	r3, r6
 8000efc:	d121      	bne.n	8000f42 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000efe:	220f      	movs	r2, #15
 8000f00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f02:	4393      	bics	r3, r2
 8000f04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f06:	4313      	orrs	r3, r2
 8000f08:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000f0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f0e:	686a      	ldr	r2, [r5, #4]
 8000f10:	430b      	orrs	r3, r1
 8000f12:	4928      	ldr	r1, [pc, #160]	; (8000fb4 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f14:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f16:	400a      	ands	r2, r1
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	682a      	ldr	r2, [r5, #0]
 8000f20:	045b      	lsls	r3, r3, #17
 8000f22:	4313      	orrs	r3, r2
 8000f24:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f26:	f7ff f9d7 	bl	80002d8 <HAL_GetTick>
 8000f2a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f2c:	04a4      	lsls	r4, r4, #18
 8000f2e:	682b      	ldr	r3, [r5, #0]
 8000f30:	4223      	tst	r3, r4
 8000f32:	d000      	beq.n	8000f36 <HAL_RCC_OscConfig+0x382>
 8000f34:	e676      	b.n	8000c24 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff f9cf 	bl	80002d8 <HAL_GetTick>
 8000f3a:	1b80      	subs	r0, r0, r6
 8000f3c:	2802      	cmp	r0, #2
 8000f3e:	d9f6      	bls.n	8000f2e <HAL_RCC_OscConfig+0x37a>
 8000f40:	e69b      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f42:	f7ff f9c9 	bl	80002d8 <HAL_GetTick>
 8000f46:	1bc0      	subs	r0, r0, r7
 8000f48:	2802      	cmp	r0, #2
 8000f4a:	d9d5      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x344>
 8000f4c:	e695      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 8000f4e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f50:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000f52:	4013      	ands	r3, r2
 8000f54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f56:	f7ff f9bf 	bl	80002d8 <HAL_GetTick>
 8000f5a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f5c:	04a4      	lsls	r4, r4, #18
 8000f5e:	682b      	ldr	r3, [r5, #0]
 8000f60:	4223      	tst	r3, r4
 8000f62:	d100      	bne.n	8000f66 <HAL_RCC_OscConfig+0x3b2>
 8000f64:	e65e      	b.n	8000c24 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f66:	f7ff f9b7 	bl	80002d8 <HAL_GetTick>
 8000f6a:	1b80      	subs	r0, r0, r6
 8000f6c:	2802      	cmp	r0, #2
 8000f6e:	d9f6      	bls.n	8000f5e <HAL_RCC_OscConfig+0x3aa>
 8000f70:	e683      	b.n	8000c7a <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 8000f72:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d100      	bne.n	8000f7a <HAL_RCC_OscConfig+0x3c6>
 8000f78:	e622      	b.n	8000bc0 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f7a:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8000f7c:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000f80:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8000f82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f84:	4019      	ands	r1, r3
        return HAL_ERROR;
 8000f86:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f88:	42a9      	cmp	r1, r5
 8000f8a:	d000      	beq.n	8000f8e <HAL_RCC_OscConfig+0x3da>
 8000f8c:	e618      	b.n	8000bc0 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000f8e:	210f      	movs	r1, #15
 8000f90:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f94:	428a      	cmp	r2, r1
 8000f96:	d000      	beq.n	8000f9a <HAL_RCC_OscConfig+0x3e6>
 8000f98:	e612      	b.n	8000bc0 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000f9a:	20f0      	movs	r0, #240	; 0xf0
 8000f9c:	0380      	lsls	r0, r0, #14
 8000f9e:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000fa0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000fa2:	1a1b      	subs	r3, r3, r0
 8000fa4:	1e58      	subs	r0, r3, #1
 8000fa6:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 8000fa8:	b2d8      	uxtb	r0, r3
 8000faa:	e609      	b.n	8000bc0 <HAL_RCC_OscConfig+0xc>
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	feffffff 	.word	0xfeffffff
 8000fb4:	ffc2ffff 	.word	0xffc2ffff

08000fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fb8:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000fba:	4c14      	ldr	r4, [pc, #80]	; (800100c <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000fbc:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	0021      	movs	r1, r4
 8000fc2:	4668      	mov	r0, sp
 8000fc4:	f003 fe30 	bl	8004c28 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000fc8:	0021      	movs	r1, r4
 8000fca:	ad04      	add	r5, sp, #16
 8000fcc:	2210      	movs	r2, #16
 8000fce:	3110      	adds	r1, #16
 8000fd0:	0028      	movs	r0, r5
 8000fd2:	f003 fe29 	bl	8004c28 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fd6:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000fd8:	4e0d      	ldr	r6, [pc, #52]	; (8001010 <HAL_RCC_GetSysClockFreq+0x58>)
 8000fda:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fdc:	401a      	ands	r2, r3
 8000fde:	2a08      	cmp	r2, #8
 8000fe0:	d111      	bne.n	8001006 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	466a      	mov	r2, sp
 8000fe6:	0c99      	lsrs	r1, r3, #18
 8000fe8:	4001      	ands	r1, r0
 8000fea:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000fec:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000fee:	4002      	ands	r2, r0
 8000ff0:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000ff2:	03db      	lsls	r3, r3, #15
 8000ff4:	d505      	bpl.n	8001002 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000ff6:	4807      	ldr	r0, [pc, #28]	; (8001014 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000ff8:	f7ff f8a2 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000ffc:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ffe:	b008      	add	sp, #32
 8001000:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_RCC_GetSysClockFreq+0x60>)
 8001004:	e7fa      	b.n	8000ffc <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001008:	e7f9      	b.n	8000ffe <HAL_RCC_GetSysClockFreq+0x46>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	08005494 	.word	0x08005494
 8001010:	40021000 	.word	0x40021000
 8001014:	007a1200 	.word	0x007a1200
 8001018:	003d0900 	.word	0x003d0900

0800101c <HAL_RCC_ClockConfig>:
{
 800101c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800101e:	0005      	movs	r5, r0
 8001020:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001022:	2800      	cmp	r0, #0
 8001024:	d101      	bne.n	800102a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001026:	2001      	movs	r0, #1
}
 8001028:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800102a:	2201      	movs	r2, #1
 800102c:	4c37      	ldr	r4, [pc, #220]	; (800110c <HAL_RCC_ClockConfig+0xf0>)
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	4013      	ands	r3, r2
 8001032:	428b      	cmp	r3, r1
 8001034:	d31c      	bcc.n	8001070 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001036:	6829      	ldr	r1, [r5, #0]
 8001038:	078b      	lsls	r3, r1, #30
 800103a:	d422      	bmi.n	8001082 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800103c:	07cb      	lsls	r3, r1, #31
 800103e:	d42f      	bmi.n	80010a0 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001040:	2301      	movs	r3, #1
 8001042:	6822      	ldr	r2, [r4, #0]
 8001044:	401a      	ands	r2, r3
 8001046:	4297      	cmp	r7, r2
 8001048:	d351      	bcc.n	80010ee <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	4c30      	ldr	r4, [pc, #192]	; (8001110 <HAL_RCC_ClockConfig+0xf4>)
 800104e:	075b      	lsls	r3, r3, #29
 8001050:	d454      	bmi.n	80010fc <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001052:	f7ff ffb1 	bl	8000fb8 <HAL_RCC_GetSysClockFreq>
 8001056:	6863      	ldr	r3, [r4, #4]
 8001058:	4a2e      	ldr	r2, [pc, #184]	; (8001114 <HAL_RCC_ClockConfig+0xf8>)
 800105a:	061b      	lsls	r3, r3, #24
 800105c:	0f1b      	lsrs	r3, r3, #28
 800105e:	5cd3      	ldrb	r3, [r2, r3]
 8001060:	40d8      	lsrs	r0, r3
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_RCC_ClockConfig+0xfc>)
 8001064:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff f8f6 	bl	8000258 <HAL_InitTick>
  return HAL_OK;
 800106c:	2000      	movs	r0, #0
 800106e:	e7db      	b.n	8001028 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	4393      	bics	r3, r2
 8001074:	430b      	orrs	r3, r1
 8001076:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	4013      	ands	r3, r2
 800107c:	4299      	cmp	r1, r3
 800107e:	d1d2      	bne.n	8001026 <HAL_RCC_ClockConfig+0xa>
 8001080:	e7d9      	b.n	8001036 <HAL_RCC_ClockConfig+0x1a>
 8001082:	4a23      	ldr	r2, [pc, #140]	; (8001110 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001084:	074b      	lsls	r3, r1, #29
 8001086:	d504      	bpl.n	8001092 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001088:	23e0      	movs	r3, #224	; 0xe0
 800108a:	6850      	ldr	r0, [r2, #4]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4303      	orrs	r3, r0
 8001090:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001092:	20f0      	movs	r0, #240	; 0xf0
 8001094:	6853      	ldr	r3, [r2, #4]
 8001096:	4383      	bics	r3, r0
 8001098:	68a8      	ldr	r0, [r5, #8]
 800109a:	4303      	orrs	r3, r0
 800109c:	6053      	str	r3, [r2, #4]
 800109e:	e7cd      	b.n	800103c <HAL_RCC_ClockConfig+0x20>
 80010a0:	4e1b      	ldr	r6, [pc, #108]	; (8001110 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a2:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a6:	2a01      	cmp	r2, #1
 80010a8:	d119      	bne.n	80010de <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	039b      	lsls	r3, r3, #14
 80010ac:	d5bb      	bpl.n	8001026 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ae:	2103      	movs	r1, #3
 80010b0:	6873      	ldr	r3, [r6, #4]
 80010b2:	438b      	bics	r3, r1
 80010b4:	4313      	orrs	r3, r2
 80010b6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80010b8:	f7ff f90e 	bl	80002d8 <HAL_GetTick>
 80010bc:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010be:	230c      	movs	r3, #12
 80010c0:	6872      	ldr	r2, [r6, #4]
 80010c2:	401a      	ands	r2, r3
 80010c4:	686b      	ldr	r3, [r5, #4]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d0b9      	beq.n	8001040 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010cc:	f7ff f904 	bl	80002d8 <HAL_GetTick>
 80010d0:	9b01      	ldr	r3, [sp, #4]
 80010d2:	1ac0      	subs	r0, r0, r3
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_RCC_ClockConfig+0x100>)
 80010d6:	4298      	cmp	r0, r3
 80010d8:	d9f1      	bls.n	80010be <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80010da:	2003      	movs	r0, #3
 80010dc:	e7a4      	b.n	8001028 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010de:	2a02      	cmp	r2, #2
 80010e0:	d102      	bne.n	80010e8 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e2:	019b      	lsls	r3, r3, #6
 80010e4:	d4e3      	bmi.n	80010ae <HAL_RCC_ClockConfig+0x92>
 80010e6:	e79e      	b.n	8001026 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e8:	079b      	lsls	r3, r3, #30
 80010ea:	d4e0      	bmi.n	80010ae <HAL_RCC_ClockConfig+0x92>
 80010ec:	e79b      	b.n	8001026 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ee:	6822      	ldr	r2, [r4, #0]
 80010f0:	439a      	bics	r2, r3
 80010f2:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f4:	6822      	ldr	r2, [r4, #0]
 80010f6:	421a      	tst	r2, r3
 80010f8:	d195      	bne.n	8001026 <HAL_RCC_ClockConfig+0xa>
 80010fa:	e7a6      	b.n	800104a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80010fc:	6863      	ldr	r3, [r4, #4]
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_RCC_ClockConfig+0x104>)
 8001100:	4013      	ands	r3, r2
 8001102:	68ea      	ldr	r2, [r5, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	6063      	str	r3, [r4, #4]
 8001108:	e7a3      	b.n	8001052 <HAL_RCC_ClockConfig+0x36>
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	40022000 	.word	0x40022000
 8001110:	40021000 	.word	0x40021000
 8001114:	08005b7f 	.word	0x08005b7f
 8001118:	2000000c 	.word	0x2000000c
 800111c:	00001388 	.word	0x00001388
 8001120:	fffff8ff 	.word	0xfffff8ff

08001124 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	055b      	lsls	r3, r3, #21
 800112c:	0f5b      	lsrs	r3, r3, #29
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001132:	6810      	ldr	r0, [r2, #0]
 8001134:	40d8      	lsrs	r0, r3
}    
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000
 800113c:	08005b8f 	.word	0x08005b8f
 8001140:	2000000c 	.word	0x2000000c

08001144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001146:	6803      	ldr	r3, [r0, #0]
{
 8001148:	b085      	sub	sp, #20
 800114a:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800114c:	03db      	lsls	r3, r3, #15
 800114e:	d528      	bpl.n	80011a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001150:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001152:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001154:	4c3b      	ldr	r4, [pc, #236]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001156:	0552      	lsls	r2, r2, #21
 8001158:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800115a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115c:	4213      	tst	r3, r2
 800115e:	d108      	bne.n	8001172 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	69e3      	ldr	r3, [r4, #28]
 8001162:	4313      	orrs	r3, r2
 8001164:	61e3      	str	r3, [r4, #28]
 8001166:	69e3      	ldr	r3, [r4, #28]
 8001168:	4013      	ands	r3, r2
 800116a:	9303      	str	r3, [sp, #12]
 800116c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800116e:	2301      	movs	r3, #1
 8001170:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001172:	2780      	movs	r7, #128	; 0x80
 8001174:	4e34      	ldr	r6, [pc, #208]	; (8001248 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001176:	007f      	lsls	r7, r7, #1
 8001178:	6833      	ldr	r3, [r6, #0]
 800117a:	423b      	tst	r3, r7
 800117c:	d02f      	beq.n	80011de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800117e:	22c0      	movs	r2, #192	; 0xc0
 8001180:	6a23      	ldr	r3, [r4, #32]
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4013      	ands	r3, r2
 8001186:	4e31      	ldr	r6, [pc, #196]	; (800124c <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001188:	d13b      	bne.n	8001202 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800118a:	6a23      	ldr	r3, [r4, #32]
 800118c:	401e      	ands	r6, r3
 800118e:	686b      	ldr	r3, [r5, #4]
 8001190:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001192:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001194:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001196:	2b01      	cmp	r3, #1
 8001198:	d103      	bne.n	80011a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800119a:	69e3      	ldr	r3, [r4, #28]
 800119c:	4a2c      	ldr	r2, [pc, #176]	; (8001250 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800119e:	4013      	ands	r3, r2
 80011a0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80011a2:	682a      	ldr	r2, [r5, #0]
 80011a4:	07d3      	lsls	r3, r2, #31
 80011a6:	d506      	bpl.n	80011b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80011a8:	2003      	movs	r0, #3
 80011aa:	4926      	ldr	r1, [pc, #152]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80011ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80011ae:	4383      	bics	r3, r0
 80011b0:	68a8      	ldr	r0, [r5, #8]
 80011b2:	4303      	orrs	r3, r0
 80011b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80011b6:	0693      	lsls	r3, r2, #26
 80011b8:	d506      	bpl.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80011ba:	2010      	movs	r0, #16
 80011bc:	4921      	ldr	r1, [pc, #132]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80011be:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80011c0:	4383      	bics	r3, r0
 80011c2:	68e8      	ldr	r0, [r5, #12]
 80011c4:	4303      	orrs	r3, r0
 80011c6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80011c8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80011ca:	0553      	lsls	r3, r2, #21
 80011cc:	d517      	bpl.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80011d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011d4:	438b      	bics	r3, r1
 80011d6:	6929      	ldr	r1, [r5, #16]
 80011d8:	430b      	orrs	r3, r1
 80011da:	6313      	str	r3, [r2, #48]	; 0x30
 80011dc:	e00f      	b.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011de:	6833      	ldr	r3, [r6, #0]
 80011e0:	433b      	orrs	r3, r7
 80011e2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80011e4:	f7ff f878 	bl	80002d8 <HAL_GetTick>
 80011e8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ea:	6833      	ldr	r3, [r6, #0]
 80011ec:	423b      	tst	r3, r7
 80011ee:	d1c6      	bne.n	800117e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f0:	f7ff f872 	bl	80002d8 <HAL_GetTick>
 80011f4:	9b01      	ldr	r3, [sp, #4]
 80011f6:	1ac0      	subs	r0, r0, r3
 80011f8:	2864      	cmp	r0, #100	; 0x64
 80011fa:	d9f6      	bls.n	80011ea <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 80011fc:	2003      	movs	r0, #3
}
 80011fe:	b005      	add	sp, #20
 8001200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001202:	6869      	ldr	r1, [r5, #4]
 8001204:	400a      	ands	r2, r1
 8001206:	4293      	cmp	r3, r2
 8001208:	d0bf      	beq.n	800118a <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 800120a:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800120c:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800120e:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001210:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001212:	025b      	lsls	r3, r3, #9
 8001214:	4303      	orrs	r3, r0
 8001216:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001218:	6a23      	ldr	r3, [r4, #32]
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800121c:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800121e:	4003      	ands	r3, r0
 8001220:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001222:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001224:	07d3      	lsls	r3, r2, #31
 8001226:	d5b0      	bpl.n	800118a <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8001228:	f7ff f856 	bl	80002d8 <HAL_GetTick>
 800122c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122e:	2202      	movs	r2, #2
 8001230:	6a23      	ldr	r3, [r4, #32]
 8001232:	4213      	tst	r3, r2
 8001234:	d1a9      	bne.n	800118a <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001236:	f7ff f84f 	bl	80002d8 <HAL_GetTick>
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800123c:	1bc0      	subs	r0, r0, r7
 800123e:	4298      	cmp	r0, r3
 8001240:	d9f5      	bls.n	800122e <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001242:	e7db      	b.n	80011fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8001244:	40021000 	.word	0x40021000
 8001248:	40007000 	.word	0x40007000
 800124c:	fffffcff 	.word	0xfffffcff
 8001250:	efffffff 	.word	0xefffffff
 8001254:	fffeffff 	.word	0xfffeffff
 8001258:	00001388 	.word	0x00001388

0800125c <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800125c:	21e0      	movs	r1, #224	; 0xe0
 800125e:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001260:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	438a      	bics	r2, r1
 8001266:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001268:	2282      	movs	r2, #130	; 0x82
 800126a:	6841      	ldr	r1, [r0, #4]
 800126c:	0052      	lsls	r2, r2, #1
 800126e:	4291      	cmp	r1, r2
 8001270:	d10c      	bne.n	800128c <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	6882      	ldr	r2, [r0, #8]
 8001276:	0209      	lsls	r1, r1, #8
 8001278:	428a      	cmp	r2, r1
 800127a:	d003      	beq.n	8001284 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	00c9      	lsls	r1, r1, #3
 8001280:	428a      	cmp	r2, r1
 8001282:	d103      	bne.n	800128c <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001284:	2140      	movs	r1, #64	; 0x40
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	438a      	bics	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001290:	0189      	lsls	r1, r1, #6
 8001292:	428a      	cmp	r2, r1
 8001294:	d106      	bne.n	80012a4 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8001296:	6819      	ldr	r1, [r3, #0]
 8001298:	4c07      	ldr	r4, [pc, #28]	; (80012b8 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 800129a:	4021      	ands	r1, r4
 800129c:	6019      	str	r1, [r3, #0]
 800129e:	6819      	ldr	r1, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80012a4:	0003      	movs	r3, r0
 80012a6:	2201      	movs	r2, #1
 80012a8:	335d      	adds	r3, #93	; 0x5d
 80012aa:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80012ac:	2300      	movs	r3, #0
 80012ae:	305c      	adds	r0, #92	; 0x5c
 80012b0:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 80012b2:	2003      	movs	r0, #3
 80012b4:	bd10      	pop	{r4, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	ffffdfff 	.word	0xffffdfff

080012bc <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80012bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012be:	0004      	movs	r4, r0
 80012c0:	000d      	movs	r5, r1
 80012c2:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012c4:	2680      	movs	r6, #128	; 0x80
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	6898      	ldr	r0, [r3, #8]
 80012ca:	4030      	ands	r0, r6
 80012cc:	d009      	beq.n	80012e2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x26>
    if (Timeout != HAL_MAX_DELAY)
 80012ce:	1c6a      	adds	r2, r5, #1
 80012d0:	d0fa      	beq.n	80012c8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80012d2:	f7ff f801 	bl	80002d8 <HAL_GetTick>
 80012d6:	1bc0      	subs	r0, r0, r7
 80012d8:	4285      	cmp	r5, r0
 80012da:	d8f4      	bhi.n	80012c6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 80012dc:	0020      	movs	r0, r4
 80012de:	f7ff ffbd 	bl	800125c <SPI_WaitFifoStateUntilTimeout.part.1>
}
 80012e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012e4 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80012e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80012e6:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80012e8:	0005      	movs	r5, r0
 80012ea:	000c      	movs	r4, r1
 80012ec:	0016      	movs	r6, r2
 80012ee:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80012f0:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 80012f2:	682b      	ldr	r3, [r5, #0]
 80012f4:	6898      	ldr	r0, [r3, #8]
 80012f6:	4020      	ands	r0, r4
 80012f8:	d00d      	beq.n	8001316 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80012fa:	42bc      	cmp	r4, r7
 80012fc:	d100      	bne.n	8001300 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80012fe:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001300:	1c72      	adds	r2, r6, #1
 8001302:	d0f7      	beq.n	80012f4 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001304:	f7fe ffe8 	bl	80002d8 <HAL_GetTick>
 8001308:	9b01      	ldr	r3, [sp, #4]
 800130a:	1ac0      	subs	r0, r0, r3
 800130c:	4286      	cmp	r6, r0
 800130e:	d8f0      	bhi.n	80012f2 <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
 8001310:	0028      	movs	r0, r5
 8001312:	f7ff ffa3 	bl	800125c <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001316:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001318 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001318:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800131a:	0013      	movs	r3, r2
{
 800131c:	000d      	movs	r5, r1
 800131e:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001320:	000a      	movs	r2, r1
 8001322:	21c0      	movs	r1, #192	; 0xc0
 8001324:	0149      	lsls	r1, r1, #5
{
 8001326:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001328:	f7ff ffdc 	bl	80012e4 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 800132c:	2800      	cmp	r0, #0
 800132e:	d005      	beq.n	800133c <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001330:	2320      	movs	r3, #32
 8001332:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001334:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001336:	4313      	orrs	r3, r2
 8001338:	6623      	str	r3, [r4, #96]	; 0x60
 800133a:	e00f      	b.n	800135c <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800133c:	0032      	movs	r2, r6
 800133e:	0029      	movs	r1, r5
 8001340:	0020      	movs	r0, r4
 8001342:	f7ff ffbb 	bl	80012bc <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001346:	2800      	cmp	r0, #0
 8001348:	d1f2      	bne.n	8001330 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800134a:	21c0      	movs	r1, #192	; 0xc0
 800134c:	0033      	movs	r3, r6
 800134e:	002a      	movs	r2, r5
 8001350:	00c9      	lsls	r1, r1, #3
 8001352:	0020      	movs	r0, r4
 8001354:	f7ff ffc6 	bl	80012e4 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8001358:	2800      	cmp	r0, #0
 800135a:	d1e9      	bne.n	8001330 <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800135c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001360 <HAL_SPI_Init>:
{
 8001360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001362:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001364:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001366:	2c00      	cmp	r4, #0
 8001368:	d04b      	beq.n	8001402 <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136a:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800136c:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001370:	355d      	adds	r5, #93	; 0x5d
 8001372:	782b      	ldrb	r3, [r5, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 800137a:	0022      	movs	r2, r4
 800137c:	325c      	adds	r2, #92	; 0x5c
 800137e:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8001380:	0020      	movs	r0, r4
 8001382:	f003 fb19 	bl	80049b8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001386:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001388:	2240      	movs	r2, #64	; 0x40
 800138a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800138c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800138e:	680b      	ldr	r3, [r1, #0]
 8001390:	2000      	movs	r0, #0
 8001392:	4393      	bics	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
 8001396:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001398:	68e2      	ldr	r2, [r4, #12]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	429a      	cmp	r2, r3
 800139e:	d931      	bls.n	8001404 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80013a0:	26f0      	movs	r6, #240	; 0xf0
 80013a2:	0136      	lsls	r6, r6, #4
 80013a4:	42b2      	cmp	r2, r6
 80013a6:	d133      	bne.n	8001410 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80013a8:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80013aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d103      	bne.n	80013b8 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d92f      	bls.n	8001414 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80013b4:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80013b6:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80013b8:	68a7      	ldr	r7, [r4, #8]
 80013ba:	6863      	ldr	r3, [r4, #4]
 80013bc:	69a0      	ldr	r0, [r4, #24]
 80013be:	433b      	orrs	r3, r7
 80013c0:	6927      	ldr	r7, [r4, #16]
 80013c2:	433b      	orrs	r3, r7
 80013c4:	6967      	ldr	r7, [r4, #20]
 80013c6:	433b      	orrs	r3, r7
 80013c8:	69e7      	ldr	r7, [r4, #28]
 80013ca:	433b      	orrs	r3, r7
 80013cc:	6a27      	ldr	r7, [r4, #32]
 80013ce:	433b      	orrs	r3, r7
 80013d0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80013d2:	433b      	orrs	r3, r7
 80013d4:	2780      	movs	r7, #128	; 0x80
 80013d6:	00bf      	lsls	r7, r7, #2
 80013d8:	4007      	ands	r7, r0
 80013da:	433b      	orrs	r3, r7
 80013dc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80013de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013e0:	0c00      	lsrs	r0, r0, #16
 80013e2:	431a      	orrs	r2, r3
 80013e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013e6:	431a      	orrs	r2, r3
 80013e8:	2304      	movs	r3, #4
 80013ea:	4018      	ands	r0, r3
 80013ec:	4310      	orrs	r0, r2
 80013ee:	4306      	orrs	r6, r0
 80013f0:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013f2:	69cb      	ldr	r3, [r1, #28]
 80013f4:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013f6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013f8:	4013      	ands	r3, r2
 80013fa:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80013fc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013fe:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001400:	702b      	strb	r3, [r5, #0]
}
 8001402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001404:	2680      	movs	r6, #128	; 0x80
 8001406:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001408:	429a      	cmp	r2, r3
 800140a:	d0ce      	beq.n	80013aa <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140c:	62a0      	str	r0, [r4, #40]	; 0x28
 800140e:	e7cc      	b.n	80013aa <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001410:	0006      	movs	r6, r0
 8001412:	e7fb      	b.n	800140c <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001414:	2301      	movs	r3, #1
 8001416:	e7ce      	b.n	80013b6 <HAL_SPI_Init+0x56>
 8001418:	fffff7ff 	.word	0xfffff7ff

0800141c <HAL_SPI_Transmit>:
{
 800141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141e:	b087      	sub	sp, #28
 8001420:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 8001422:	0003      	movs	r3, r0
 8001424:	335c      	adds	r3, #92	; 0x5c
 8001426:	9303      	str	r3, [sp, #12]
 8001428:	781b      	ldrb	r3, [r3, #0]
{
 800142a:	0004      	movs	r4, r0
 800142c:	000d      	movs	r5, r1
 800142e:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8001430:	2602      	movs	r6, #2
 8001432:	2b01      	cmp	r3, #1
 8001434:	d100      	bne.n	8001438 <HAL_SPI_Transmit+0x1c>
 8001436:	e07c      	b.n	8001532 <HAL_SPI_Transmit+0x116>
 8001438:	2301      	movs	r3, #1
 800143a:	9a03      	ldr	r2, [sp, #12]
 800143c:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800143e:	f7fe ff4b 	bl	80002d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001442:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 8001444:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001446:	325d      	adds	r2, #93	; 0x5d
 8001448:	7813      	ldrb	r3, [r2, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d16a      	bne.n	8001526 <HAL_SPI_Transmit+0x10a>
    errorcode = HAL_ERROR;
 8001450:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 8001452:	2d00      	cmp	r5, #0
 8001454:	d067      	beq.n	8001526 <HAL_SPI_Transmit+0x10a>
 8001456:	2f00      	cmp	r7, #0
 8001458:	d065      	beq.n	8001526 <HAL_SPI_Transmit+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800145a:	3302      	adds	r3, #2
 800145c:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800145e:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8001460:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001462:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001464:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001466:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001468:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800146a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800146c:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 800146e:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001470:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001472:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001474:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	68a2      	ldr	r2, [r4, #8]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	429a      	cmp	r2, r3
 800147e:	d105      	bne.n	800148c <HAL_SPI_Transmit+0x70>
    SPI_1LINE_TX(hspi);
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	01db      	lsls	r3, r3, #7
 8001486:	6811      	ldr	r1, [r2, #0]
 8001488:	430b      	orrs	r3, r1
 800148a:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800148c:	2240      	movs	r2, #64	; 0x40
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	4211      	tst	r1, r2
 8001494:	d102      	bne.n	800149c <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 8001496:	6819      	ldr	r1, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800149c:	21e0      	movs	r1, #224	; 0xe0
 800149e:	68e0      	ldr	r0, [r4, #12]
 80014a0:	00c9      	lsls	r1, r1, #3
 80014a2:	6862      	ldr	r2, [r4, #4]
 80014a4:	4288      	cmp	r0, r1
 80014a6:	d947      	bls.n	8001538 <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_SPI_Transmit+0x94>
 80014ac:	2f01      	cmp	r7, #1
 80014ae:	d107      	bne.n	80014c0 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014b0:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80014b2:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014b4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80014b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80014b8:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b29b      	uxth	r3, r3
 80014be:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80014c0:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80014c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d116      	bne.n	80014f6 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80014c8:	9a02      	ldr	r2, [sp, #8]
 80014ca:	9901      	ldr	r1, [sp, #4]
 80014cc:	0020      	movs	r0, r4
 80014ce:	f7ff ff23 	bl	8001318 <SPI_EndRxTxTransaction>
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d000      	beq.n	80014d8 <HAL_SPI_Transmit+0xbc>
 80014d6:	e06d      	b.n	80015b4 <HAL_SPI_Transmit+0x198>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80014d8:	68a3      	ldr	r3, [r4, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80014de:	9305      	str	r3, [sp, #20]
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	9205      	str	r2, [sp, #20]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	9305      	str	r3, [sp, #20]
 80014ea:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80014ec:	6e26      	ldr	r6, [r4, #96]	; 0x60
 80014ee:	1e73      	subs	r3, r6, #1
 80014f0:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 80014f2:	b2f6      	uxtb	r6, r6
 80014f4:	e017      	b.n	8001526 <HAL_SPI_Transmit+0x10a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	6893      	ldr	r3, [r2, #8]
 80014fa:	422b      	tst	r3, r5
 80014fc:	d009      	beq.n	8001512 <HAL_SPI_Transmit+0xf6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001500:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001502:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001504:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001506:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001508:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800150a:	3b01      	subs	r3, #1
 800150c:	b29b      	uxth	r3, r3
 800150e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001510:	e7d7      	b.n	80014c2 <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001512:	f7fe fee1 	bl	80002d8 <HAL_GetTick>
 8001516:	9b02      	ldr	r3, [sp, #8]
 8001518:	1ac0      	subs	r0, r0, r3
 800151a:	9b01      	ldr	r3, [sp, #4]
 800151c:	4298      	cmp	r0, r3
 800151e:	d3d0      	bcc.n	80014c2 <HAL_SPI_Transmit+0xa6>
 8001520:	3301      	adds	r3, #1
 8001522:	d0ce      	beq.n	80014c2 <HAL_SPI_Transmit+0xa6>
          errorcode = HAL_TIMEOUT;
 8001524:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001526:	2301      	movs	r3, #1
 8001528:	345d      	adds	r4, #93	; 0x5d
 800152a:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 800152c:	2300      	movs	r3, #0
 800152e:	9a03      	ldr	r2, [sp, #12]
 8001530:	7013      	strb	r3, [r2, #0]
}
 8001532:	0030      	movs	r0, r6
 8001534:	b007      	add	sp, #28
 8001536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001538:	2a00      	cmp	r2, #0
 800153a:	d001      	beq.n	8001540 <HAL_SPI_Transmit+0x124>
 800153c:	2f01      	cmp	r7, #1
 800153e:	d10a      	bne.n	8001556 <HAL_SPI_Transmit+0x13a>
      if (hspi->TxXferCount > 1U)
 8001540:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001542:	2a01      	cmp	r2, #1
 8001544:	d91c      	bls.n	8001580 <HAL_SPI_Transmit+0x164>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001546:	882a      	ldrh	r2, [r5, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001548:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800154a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800154c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800154e:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001550:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8001552:	b29b      	uxth	r3, r3
 8001554:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001556:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8001558:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0b4      	beq.n	80014c8 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800155e:	6822      	ldr	r2, [r4, #0]
 8001560:	6893      	ldr	r3, [r2, #8]
 8001562:	422b      	tst	r3, r5
 8001564:	d01c      	beq.n	80015a0 <HAL_SPI_Transmit+0x184>
        if (hspi->TxXferCount > 1U)
 8001566:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001568:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800156a:	2901      	cmp	r1, #1
 800156c:	d910      	bls.n	8001590 <HAL_SPI_Transmit+0x174>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800156e:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001570:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001572:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001574:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001576:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001578:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800157a:	b29b      	uxth	r3, r3
 800157c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800157e:	e7eb      	b.n	8001558 <HAL_SPI_Transmit+0x13c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001580:	782a      	ldrb	r2, [r5, #0]
 8001582:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8001584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001586:	3301      	adds	r3, #1
 8001588:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800158a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800158c:	3b01      	subs	r3, #1
 800158e:	e7e0      	b.n	8001552 <HAL_SPI_Transmit+0x136>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8001594:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001596:	3301      	adds	r3, #1
 8001598:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800159a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800159c:	3b01      	subs	r3, #1
 800159e:	e7ec      	b.n	800157a <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015a0:	f7fe fe9a 	bl	80002d8 <HAL_GetTick>
 80015a4:	9b02      	ldr	r3, [sp, #8]
 80015a6:	1ac0      	subs	r0, r0, r3
 80015a8:	9b01      	ldr	r3, [sp, #4]
 80015aa:	4283      	cmp	r3, r0
 80015ac:	d8d4      	bhi.n	8001558 <HAL_SPI_Transmit+0x13c>
 80015ae:	3301      	adds	r3, #1
 80015b0:	d0d2      	beq.n	8001558 <HAL_SPI_Transmit+0x13c>
 80015b2:	e7b7      	b.n	8001524 <HAL_SPI_Transmit+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80015b4:	2320      	movs	r3, #32
 80015b6:	6623      	str	r3, [r4, #96]	; 0x60
 80015b8:	e78e      	b.n	80014d8 <HAL_SPI_Transmit+0xbc>
	...

080015bc <HAL_SPI_TransmitReceive>:
{
 80015bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015be:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80015c0:	0003      	movs	r3, r0
{
 80015c2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 80015c4:	335c      	adds	r3, #92	; 0x5c
 80015c6:	781a      	ldrb	r2, [r3, #0]
{
 80015c8:	0004      	movs	r4, r0
 80015ca:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 80015cc:	2502      	movs	r5, #2
 80015ce:	2a01      	cmp	r2, #1
 80015d0:	d100      	bne.n	80015d4 <HAL_SPI_TransmitReceive+0x18>
 80015d2:	e0ac      	b.n	800172e <HAL_SPI_TransmitReceive+0x172>
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80015d8:	f7fe fe7e 	bl	80002d8 <HAL_GetTick>
  tmp_state           = hspi->State;
 80015dc:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80015de:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 80015e0:	335d      	adds	r3, #93	; 0x5d
 80015e2:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80015e4:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80015e6:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d00b      	beq.n	8001604 <HAL_SPI_TransmitReceive+0x48>
 80015ec:	2282      	movs	r2, #130	; 0x82
 80015ee:	0052      	lsls	r2, r2, #1
 80015f0:	4291      	cmp	r1, r2
 80015f2:	d000      	beq.n	80015f6 <HAL_SPI_TransmitReceive+0x3a>
 80015f4:	e094      	b.n	8001720 <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80015f6:	68a2      	ldr	r2, [r4, #8]
 80015f8:	2a00      	cmp	r2, #0
 80015fa:	d000      	beq.n	80015fe <HAL_SPI_TransmitReceive+0x42>
 80015fc:	e090      	b.n	8001720 <HAL_SPI_TransmitReceive+0x164>
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d000      	beq.n	8001604 <HAL_SPI_TransmitReceive+0x48>
 8001602:	e08d      	b.n	8001720 <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 8001604:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001606:	2f00      	cmp	r7, #0
 8001608:	d100      	bne.n	800160c <HAL_SPI_TransmitReceive+0x50>
 800160a:	e089      	b.n	8001720 <HAL_SPI_TransmitReceive+0x164>
 800160c:	9b01      	ldr	r3, [sp, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d100      	bne.n	8001614 <HAL_SPI_TransmitReceive+0x58>
 8001612:	e085      	b.n	8001720 <HAL_SPI_TransmitReceive+0x164>
 8001614:	2e00      	cmp	r6, #0
 8001616:	d100      	bne.n	800161a <HAL_SPI_TransmitReceive+0x5e>
 8001618:	e082      	b.n	8001720 <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800161a:	0023      	movs	r3, r4
 800161c:	335d      	adds	r3, #93	; 0x5d
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	2a04      	cmp	r2, #4
 8001622:	d001      	beq.n	8001628 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001624:	2205      	movs	r2, #5
 8001626:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001628:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800162a:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800162c:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800162e:	0022      	movs	r2, r4
 8001630:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001632:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8001634:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001636:	1da2      	adds	r2, r4, #6
 8001638:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800163a:	22e0      	movs	r2, #224	; 0xe0
 800163c:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 800163e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001640:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001642:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001644:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001646:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001648:	00d2      	lsls	r2, r2, #3
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	4290      	cmp	r0, r2
 800164e:	d801      	bhi.n	8001654 <HAL_SPI_TransmitReceive+0x98>
 8001650:	2e01      	cmp	r6, #1
 8001652:	d931      	bls.n	80016b8 <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4d71      	ldr	r5, [pc, #452]	; (800181c <HAL_SPI_TransmitReceive+0x260>)
 8001658:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800165a:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800165c:	2240      	movs	r2, #64	; 0x40
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	681d      	ldr	r5, [r3, #0]
 8001662:	4215      	tst	r5, r2
 8001664:	d102      	bne.n	800166c <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8001666:	681d      	ldr	r5, [r3, #0]
 8001668:	432a      	orrs	r2, r5
 800166a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800166c:	22e0      	movs	r2, #224	; 0xe0
 800166e:	00d2      	lsls	r2, r2, #3
 8001670:	4290      	cmp	r0, r2
 8001672:	d95e      	bls.n	8001732 <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001674:	2900      	cmp	r1, #0
 8001676:	d001      	beq.n	800167c <HAL_SPI_TransmitReceive+0xc0>
 8001678:	2e01      	cmp	r6, #1
 800167a:	d107      	bne.n	800168c <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800167c:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800167e:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001680:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001682:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001684:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001686:	3b01      	subs	r3, #1
 8001688:	b29b      	uxth	r3, r3
 800168a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800168c:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800168e:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001690:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001692:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001694:	2b00      	cmp	r3, #0
 8001696:	d114      	bne.n	80016c2 <HAL_SPI_TransmitReceive+0x106>
 8001698:	0023      	movs	r3, r4
 800169a:	3308      	adds	r3, #8
 800169c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80016a2:	9a00      	ldr	r2, [sp, #0]
 80016a4:	9908      	ldr	r1, [sp, #32]
 80016a6:	0020      	movs	r0, r4
 80016a8:	f7ff fe36 	bl	8001318 <SPI_EndRxTxTransaction>
 80016ac:	1e05      	subs	r5, r0, #0
 80016ae:	d037      	beq.n	8001720 <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80016b0:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80016b2:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80016b4:	6623      	str	r3, [r4, #96]	; 0x60
 80016b6:	e033      	b.n	8001720 <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	685d      	ldr	r5, [r3, #4]
 80016bc:	0152      	lsls	r2, r2, #5
 80016be:	432a      	orrs	r2, r5
 80016c0:	e7cb      	b.n	800165a <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80016c2:	6822      	ldr	r2, [r4, #0]
 80016c4:	6893      	ldr	r3, [r2, #8]
 80016c6:	423b      	tst	r3, r7
 80016c8:	d00e      	beq.n	80016e8 <HAL_SPI_TransmitReceive+0x12c>
 80016ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00b      	beq.n	80016e8 <HAL_SPI_TransmitReceive+0x12c>
 80016d0:	2d01      	cmp	r5, #1
 80016d2:	d109      	bne.n	80016e8 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 80016d4:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016d8:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80016da:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016dc:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80016de:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80016e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80016e8:	6893      	ldr	r3, [r2, #8]
 80016ea:	4233      	tst	r3, r6
 80016ec:	d00e      	beq.n	800170c <HAL_SPI_TransmitReceive+0x150>
 80016ee:	0021      	movs	r1, r4
 80016f0:	3108      	adds	r1, #8
 80016f2:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d009      	beq.n	800170c <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 80016f8:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80016fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016fc:	68d2      	ldr	r2, [r2, #12]
 80016fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001700:	3302      	adds	r3, #2
 8001702:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001704:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8001706:	3b01      	subs	r3, #1
 8001708:	b29b      	uxth	r3, r3
 800170a:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800170c:	f7fe fde4 	bl	80002d8 <HAL_GetTick>
 8001710:	9b00      	ldr	r3, [sp, #0]
 8001712:	1ac0      	subs	r0, r0, r3
 8001714:	9b08      	ldr	r3, [sp, #32]
 8001716:	4283      	cmp	r3, r0
 8001718:	d8bb      	bhi.n	8001692 <HAL_SPI_TransmitReceive+0xd6>
 800171a:	3301      	adds	r3, #1
 800171c:	d0b9      	beq.n	8001692 <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 800171e:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001720:	0023      	movs	r3, r4
 8001722:	2201      	movs	r2, #1
 8001724:	335d      	adds	r3, #93	; 0x5d
 8001726:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8001728:	2300      	movs	r3, #0
 800172a:	345c      	adds	r4, #92	; 0x5c
 800172c:	7023      	strb	r3, [r4, #0]
}
 800172e:	0028      	movs	r0, r5
 8001730:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001732:	2900      	cmp	r1, #0
 8001734:	d001      	beq.n	800173a <HAL_SPI_TransmitReceive+0x17e>
 8001736:	2e01      	cmp	r6, #1
 8001738:	d10a      	bne.n	8001750 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 800173a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800173c:	2a01      	cmp	r2, #1
 800173e:	d951      	bls.n	80017e4 <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001740:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001742:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001744:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8001746:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001748:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800174a:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 800174c:	b29b      	uxth	r3, r3
 800174e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001750:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001752:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001754:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001756:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <HAL_SPI_TransmitReceive+0x1ac>
 800175c:	0023      	movs	r3, r4
 800175e:	3308      	adds	r3, #8
 8001760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001762:	2b00      	cmp	r3, #0
 8001764:	d100      	bne.n	8001768 <HAL_SPI_TransmitReceive+0x1ac>
 8001766:	e79c      	b.n	80016a2 <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001768:	6822      	ldr	r2, [r4, #0]
 800176a:	6893      	ldr	r3, [r2, #8]
 800176c:	423b      	tst	r3, r7
 800176e:	d011      	beq.n	8001794 <HAL_SPI_TransmitReceive+0x1d8>
 8001770:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00e      	beq.n	8001794 <HAL_SPI_TransmitReceive+0x1d8>
 8001776:	2d01      	cmp	r5, #1
 8001778:	d10c      	bne.n	8001794 <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 800177a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800177c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800177e:	2901      	cmp	r1, #1
 8001780:	d938      	bls.n	80017f4 <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001782:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001784:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001786:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001788:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800178a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800178c:	3b02      	subs	r3, #2
        txallowed = 0U;
 800178e:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8001790:	b29b      	uxth	r3, r3
 8001792:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001794:	6821      	ldr	r1, [r4, #0]
 8001796:	688b      	ldr	r3, [r1, #8]
 8001798:	4233      	tst	r3, r6
 800179a:	d019      	beq.n	80017d0 <HAL_SPI_TransmitReceive+0x214>
 800179c:	0023      	movs	r3, r4
 800179e:	3308      	adds	r3, #8
 80017a0:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	d014      	beq.n	80017d0 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 80017a6:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 80017a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017aa:	2801      	cmp	r0, #1
 80017ac:	d92a      	bls.n	8001804 <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80017ae:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 80017b0:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80017b2:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80017b4:	3202      	adds	r2, #2
 80017b6:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80017b8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80017ba:	3a02      	subs	r2, #2
 80017bc:	b292      	uxth	r2, r2
 80017be:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 80017c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d804      	bhi.n	80017d0 <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	684a      	ldr	r2, [r1, #4]
 80017ca:	015b      	lsls	r3, r3, #5
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80017d0:	f7fe fd82 	bl	80002d8 <HAL_GetTick>
 80017d4:	9b00      	ldr	r3, [sp, #0]
 80017d6:	1ac0      	subs	r0, r0, r3
 80017d8:	9b08      	ldr	r3, [sp, #32]
 80017da:	4283      	cmp	r3, r0
 80017dc:	d8bb      	bhi.n	8001756 <HAL_SPI_TransmitReceive+0x19a>
 80017de:	3301      	adds	r3, #1
 80017e0:	d0b9      	beq.n	8001756 <HAL_SPI_TransmitReceive+0x19a>
 80017e2:	e79c      	b.n	800171e <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80017e4:	783a      	ldrb	r2, [r7, #0]
 80017e6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80017e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017ea:	3301      	adds	r3, #1
 80017ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80017ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017f0:	3b01      	subs	r3, #1
 80017f2:	e7ab      	b.n	800174c <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80017f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017fa:	3301      	adds	r3, #1
 80017fc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80017fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001800:	3b01      	subs	r3, #1
 8001802:	e7c4      	b.n	800178e <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001804:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 8001806:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001808:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 800180a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800180c:	3201      	adds	r2, #1
 800180e:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8001810:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001812:	3a01      	subs	r2, #1
 8001814:	b292      	uxth	r2, r2
 8001816:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001818:	e7da      	b.n	80017d0 <HAL_SPI_TransmitReceive+0x214>
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	ffffefff 	.word	0xffffefff

08001820 <HAL_SPI_GetState>:
  return hspi->State;
 8001820:	305d      	adds	r0, #93	; 0x5d
 8001822:	7800      	ldrb	r0, [r0, #0]
 8001824:	b2c0      	uxtb	r0, r0
}
 8001826:	4770      	bx	lr

08001828 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001828:	6803      	ldr	r3, [r0, #0]
 800182a:	4907      	ldr	r1, [pc, #28]	; (8001848 <UART_EndRxTransfer+0x20>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	400a      	ands	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	3123      	adds	r1, #35	; 0x23
 8001836:	31ff      	adds	r1, #255	; 0xff
 8001838:	438a      	bics	r2, r1
 800183a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800183c:	2320      	movs	r3, #32
 800183e:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001840:	2300      	movs	r3, #0
 8001842:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001844:	4770      	bx	lr
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	fffffedf 	.word	0xfffffedf

0800184c <HAL_UART_Receive_IT>:
{
 800184c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800184e:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8001850:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001852:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001854:	2c20      	cmp	r4, #32
 8001856:	d141      	bne.n	80018dc <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8001858:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800185a:	2900      	cmp	r1, #0
 800185c:	d03e      	beq.n	80018dc <HAL_UART_Receive_IT+0x90>
 800185e:	2a00      	cmp	r2, #0
 8001860:	d03c      	beq.n	80018dc <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001862:	2580      	movs	r5, #128	; 0x80
 8001864:	689c      	ldr	r4, [r3, #8]
 8001866:	016d      	lsls	r5, r5, #5
 8001868:	42ac      	cmp	r4, r5
 800186a:	d104      	bne.n	8001876 <HAL_UART_Receive_IT+0x2a>
 800186c:	691d      	ldr	r5, [r3, #16]
 800186e:	2d00      	cmp	r5, #0
 8001870:	d101      	bne.n	8001876 <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001872:	4201      	tst	r1, r0
 8001874:	d132      	bne.n	80018dc <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8001876:	001d      	movs	r5, r3
 8001878:	3570      	adds	r5, #112	; 0x70
 800187a:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 800187c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800187e:	2e01      	cmp	r6, #1
 8001880:	d02c      	beq.n	80018dc <HAL_UART_Receive_IT+0x90>
 8001882:	3801      	subs	r0, #1
 8001884:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8001886:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001888:	0019      	movs	r1, r3
 800188a:	3158      	adds	r1, #88	; 0x58
 800188c:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 800188e:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8001890:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 8001892:	2100      	movs	r1, #0
 8001894:	001a      	movs	r2, r3
 8001896:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001898:	0140      	lsls	r0, r0, #5
 800189a:	325c      	adds	r2, #92	; 0x5c
 800189c:	4284      	cmp	r4, r0
 800189e:	d120      	bne.n	80018e2 <HAL_UART_Receive_IT+0x96>
 80018a0:	6919      	ldr	r1, [r3, #16]
 80018a2:	2900      	cmp	r1, #0
 80018a4:	d11b      	bne.n	80018de <HAL_UART_Receive_IT+0x92>
 80018a6:	4913      	ldr	r1, [pc, #76]	; (80018f4 <HAL_UART_Receive_IT+0xa8>)
 80018a8:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018aa:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018ac:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80018b0:	3222      	adds	r2, #34	; 0x22
 80018b2:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	6890      	ldr	r0, [r2, #8]
 80018b8:	4301      	orrs	r1, r0
 80018ba:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0149      	lsls	r1, r1, #5
 80018c0:	428c      	cmp	r4, r1
 80018c2:	d115      	bne.n	80018f0 <HAL_UART_Receive_IT+0xa4>
 80018c4:	6919      	ldr	r1, [r3, #16]
 80018c6:	2900      	cmp	r1, #0
 80018c8:	d112      	bne.n	80018f0 <HAL_UART_Receive_IT+0xa4>
      huart->RxISR = UART_RxISR_16BIT;
 80018ca:	490b      	ldr	r1, [pc, #44]	; (80018f8 <HAL_UART_Receive_IT+0xac>)
      huart->RxISR = UART_RxISR_8BIT;
 80018cc:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80018ce:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 80018d0:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80018d2:	6811      	ldr	r1, [r2, #0]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 80018d8:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 80018de:	21ff      	movs	r1, #255	; 0xff
 80018e0:	e7e2      	b.n	80018a8 <HAL_UART_Receive_IT+0x5c>
 80018e2:	2c00      	cmp	r4, #0
 80018e4:	d1e0      	bne.n	80018a8 <HAL_UART_Receive_IT+0x5c>
 80018e6:	6919      	ldr	r1, [r3, #16]
 80018e8:	2900      	cmp	r1, #0
 80018ea:	d0f8      	beq.n	80018de <HAL_UART_Receive_IT+0x92>
 80018ec:	217f      	movs	r1, #127	; 0x7f
 80018ee:	e7db      	b.n	80018a8 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 80018f0:	4902      	ldr	r1, [pc, #8]	; (80018fc <HAL_UART_Receive_IT+0xb0>)
 80018f2:	e7eb      	b.n	80018cc <HAL_UART_Receive_IT+0x80>
 80018f4:	000001ff 	.word	0x000001ff
 80018f8:	08001965 	.word	0x08001965
 80018fc:	08001905 	.word	0x08001905

08001900 <HAL_UART_TxCpltCallback>:
 8001900:	4770      	bx	lr
	...

08001904 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001904:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8001906:	b510      	push	{r4, lr}
 8001908:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800190a:	2a22      	cmp	r2, #34	; 0x22
 800190c:	d123      	bne.n	8001956 <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 800190e:	0002      	movs	r2, r0
 8001910:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001912:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001914:	8812      	ldrh	r2, [r2, #0]
 8001916:	4013      	ands	r3, r2
 8001918:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800191a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800191c:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800191e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001920:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8001922:	3301      	adds	r3, #1
 8001924:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001926:	8813      	ldrh	r3, [r2, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	b29b      	uxth	r3, r3
 800192c:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800192e:	8813      	ldrh	r3, [r2, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10e      	bne.n	8001954 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001936:	6802      	ldr	r2, [r0, #0]
 8001938:	4c09      	ldr	r4, [pc, #36]	; (8001960 <UART_RxISR_8BIT+0x5c>)
 800193a:	6811      	ldr	r1, [r2, #0]
 800193c:	4021      	ands	r1, r4
 800193e:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001940:	6891      	ldr	r1, [r2, #8]
 8001942:	3423      	adds	r4, #35	; 0x23
 8001944:	34ff      	adds	r4, #255	; 0xff
 8001946:	43a1      	bics	r1, r4
 8001948:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800194a:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800194c:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 800194e:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001950:	f002 ff68 	bl	8004824 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001954:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001956:	2208      	movs	r2, #8
 8001958:	6999      	ldr	r1, [r3, #24]
 800195a:	430a      	orrs	r2, r1
 800195c:	619a      	str	r2, [r3, #24]
}
 800195e:	e7f9      	b.n	8001954 <UART_RxISR_8BIT+0x50>
 8001960:	fffffedf 	.word	0xfffffedf

08001964 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001964:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8001966:	b510      	push	{r4, lr}
 8001968:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800196a:	2a22      	cmp	r2, #34	; 0x22
 800196c:	d121      	bne.n	80019b2 <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 800196e:	0001      	movs	r1, r0
 8001970:	315c      	adds	r1, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001972:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8001974:	8809      	ldrh	r1, [r1, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8001976:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8001978:	4021      	ands	r1, r4
 800197a:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 800197c:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 800197e:	3202      	adds	r2, #2
 8001980:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001982:	315a      	adds	r1, #90	; 0x5a
 8001984:	880a      	ldrh	r2, [r1, #0]
 8001986:	3a01      	subs	r2, #1
 8001988:	b292      	uxth	r2, r2
 800198a:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 800198c:	880a      	ldrh	r2, [r1, #0]
 800198e:	b292      	uxth	r2, r2
 8001990:	2a00      	cmp	r2, #0
 8001992:	d10d      	bne.n	80019b0 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	4c09      	ldr	r4, [pc, #36]	; (80019bc <UART_RxISR_16BIT+0x58>)
 8001998:	4021      	ands	r1, r4
 800199a:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800199c:	6899      	ldr	r1, [r3, #8]
 800199e:	3423      	adds	r4, #35	; 0x23
 80019a0:	34ff      	adds	r4, #255	; 0xff
 80019a2:	43a1      	bics	r1, r4
 80019a4:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80019a6:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80019a8:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 80019aa:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80019ac:	f002 ff3a 	bl	8004824 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80019b0:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80019b2:	2208      	movs	r2, #8
 80019b4:	6999      	ldr	r1, [r3, #24]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	619a      	str	r2, [r3, #24]
}
 80019ba:	e7f9      	b.n	80019b0 <UART_RxISR_16BIT+0x4c>
 80019bc:	fffffedf 	.word	0xfffffedf

080019c0 <HAL_UART_ErrorCallback>:
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_UART_IRQHandler>:
{
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80019c6:	6803      	ldr	r3, [r0, #0]
{
 80019c8:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80019ca:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80019cc:	4850      	ldr	r0, [pc, #320]	; (8001b10 <HAL_UART_IRQHandler+0x14c>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019ce:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019d0:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80019d2:	4202      	tst	r2, r0
 80019d4:	d10b      	bne.n	80019ee <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80019d6:	2020      	movs	r0, #32
 80019d8:	4202      	tst	r2, r0
 80019da:	d100      	bne.n	80019de <HAL_UART_IRQHandler+0x1a>
 80019dc:	e076      	b.n	8001acc <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80019de:	4201      	tst	r1, r0
 80019e0:	d100      	bne.n	80019e4 <HAL_UART_IRQHandler+0x20>
 80019e2:	e073      	b.n	8001acc <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 80019e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 80019e6:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d165      	bne.n	8001ab8 <HAL_UART_IRQHandler+0xf4>
 80019ec:	e065      	b.n	8001aba <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80019ee:	2001      	movs	r0, #1
 80019f0:	0035      	movs	r5, r6
 80019f2:	4005      	ands	r5, r0
 80019f4:	d103      	bne.n	80019fe <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80019f6:	2790      	movs	r7, #144	; 0x90
 80019f8:	007f      	lsls	r7, r7, #1
 80019fa:	4239      	tst	r1, r7
 80019fc:	d066      	beq.n	8001acc <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80019fe:	4202      	tst	r2, r0
 8001a00:	d005      	beq.n	8001a0e <HAL_UART_IRQHandler+0x4a>
 8001a02:	05ce      	lsls	r6, r1, #23
 8001a04:	d503      	bpl.n	8001a0e <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001a06:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a08:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001a0a:	4330      	orrs	r0, r6
 8001a0c:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001a0e:	2002      	movs	r0, #2
 8001a10:	4202      	tst	r2, r0
 8001a12:	d006      	beq.n	8001a22 <HAL_UART_IRQHandler+0x5e>
 8001a14:	2d00      	cmp	r5, #0
 8001a16:	d004      	beq.n	8001a22 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001a18:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a1a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001a1c:	1800      	adds	r0, r0, r0
 8001a1e:	4330      	orrs	r0, r6
 8001a20:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001a22:	2004      	movs	r0, #4
 8001a24:	4202      	tst	r2, r0
 8001a26:	d006      	beq.n	8001a36 <HAL_UART_IRQHandler+0x72>
 8001a28:	2d00      	cmp	r5, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001a2c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a2e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001a30:	3802      	subs	r0, #2
 8001a32:	4330      	orrs	r0, r6
 8001a34:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001a36:	0710      	lsls	r0, r2, #28
 8001a38:	d508      	bpl.n	8001a4c <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001a3a:	0688      	lsls	r0, r1, #26
 8001a3c:	d401      	bmi.n	8001a42 <HAL_UART_IRQHandler+0x7e>
 8001a3e:	2d00      	cmp	r5, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001a42:	2008      	movs	r0, #8
 8001a44:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a46:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001a48:	4328      	orrs	r0, r5
 8001a4a:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001a4c:	2080      	movs	r0, #128	; 0x80
 8001a4e:	0100      	lsls	r0, r0, #4
 8001a50:	4202      	tst	r2, r0
 8001a52:	d006      	beq.n	8001a62 <HAL_UART_IRQHandler+0x9e>
 8001a54:	014d      	lsls	r5, r1, #5
 8001a56:	d504      	bpl.n	8001a62 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001a58:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001a5a:	2320      	movs	r3, #32
 8001a5c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001a5e:	4303      	orrs	r3, r0
 8001a60:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a62:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d028      	beq.n	8001aba <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001a68:	2320      	movs	r3, #32
 8001a6a:	421a      	tst	r2, r3
 8001a6c:	d006      	beq.n	8001a7c <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001a6e:	4219      	tst	r1, r3
 8001a70:	d004      	beq.n	8001a7c <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8001a72:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8001a78:	0020      	movs	r0, r4
 8001a7a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001a7c:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8001a7e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001a80:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8001a82:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001a84:	065b      	lsls	r3, r3, #25
 8001a86:	d402      	bmi.n	8001a8e <HAL_UART_IRQHandler+0xca>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001a88:	2328      	movs	r3, #40	; 0x28
 8001a8a:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001a8c:	d01a      	beq.n	8001ac4 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8001a8e:	f7ff fecb 	bl	8001828 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a92:	2140      	movs	r1, #64	; 0x40
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	420a      	tst	r2, r1
 8001a9a:	d00f      	beq.n	8001abc <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a9c:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001a9e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	d009      	beq.n	8001abc <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_UART_IRQHandler+0x150>)
 8001aaa:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001aac:	f7fe ff4d 	bl	800094a <HAL_DMA_Abort_IT>
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ab4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001ab6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ab8:	4798      	blx	r3
}
 8001aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8001abc:	0020      	movs	r0, r4
 8001abe:	f7ff ff7f 	bl	80019c0 <HAL_UART_ErrorCallback>
 8001ac2:	e7fa      	b.n	8001aba <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8001ac4:	f7ff ff7c 	bl	80019c0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac8:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001aca:	e7f6      	b.n	8001aba <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001acc:	2080      	movs	r0, #128	; 0x80
 8001ace:	0340      	lsls	r0, r0, #13
 8001ad0:	4202      	tst	r2, r0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_UART_IRQHandler+0x11e>
 8001ad4:	0275      	lsls	r5, r6, #9
 8001ad6:	d504      	bpl.n	8001ae2 <HAL_UART_IRQHandler+0x11e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001ad8:	6218      	str	r0, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001ada:	0020      	movs	r0, r4
 8001adc:	f000 fa4a 	bl	8001f74 <HAL_UARTEx_WakeupCallback>
    return;
 8001ae0:	e7eb      	b.n	8001aba <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001ae2:	2080      	movs	r0, #128	; 0x80
 8001ae4:	4202      	tst	r2, r0
 8001ae6:	d003      	beq.n	8001af0 <HAL_UART_IRQHandler+0x12c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001ae8:	4201      	tst	r1, r0
 8001aea:	d001      	beq.n	8001af0 <HAL_UART_IRQHandler+0x12c>
    if (huart->TxISR != NULL)
 8001aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aee:	e77a      	b.n	80019e6 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001af0:	2040      	movs	r0, #64	; 0x40
 8001af2:	4202      	tst	r2, r0
 8001af4:	d0e1      	beq.n	8001aba <HAL_UART_IRQHandler+0xf6>
 8001af6:	4201      	tst	r1, r0
 8001af8:	d0df      	beq.n	8001aba <HAL_UART_IRQHandler+0xf6>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4382      	bics	r2, r0
 8001afe:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001b00:	2320      	movs	r3, #32
 8001b02:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001b04:	2300      	movs	r3, #0
  HAL_UART_TxCpltCallback(huart);
 8001b06:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8001b08:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001b0a:	f7ff fef9 	bl	8001900 <HAL_UART_TxCpltCallback>
 8001b0e:	e7d4      	b.n	8001aba <HAL_UART_IRQHandler+0xf6>
 8001b10:	0000080f 	.word	0x0000080f
 8001b14:	08001b19 	.word	0x08001b19

08001b18 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001b18:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	0002      	movs	r2, r0
{
 8001b1e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001b20:	325a      	adds	r2, #90	; 0x5a
 8001b22:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001b24:	3a08      	subs	r2, #8
 8001b26:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8001b28:	f7ff ff4a 	bl	80019c0 <HAL_UART_ErrorCallback>
}
 8001b2c:	bd10      	pop	{r4, pc}
	...

08001b30 <UART_SetConfig>:
{
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b34:	6925      	ldr	r5, [r4, #16]
 8001b36:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b38:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b3a:	432b      	orrs	r3, r5
 8001b3c:	6965      	ldr	r5, [r4, #20]
 8001b3e:	69c1      	ldr	r1, [r0, #28]
 8001b40:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b42:	6810      	ldr	r0, [r2, #0]
 8001b44:	4d43      	ldr	r5, [pc, #268]	; (8001c54 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b46:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b48:	4028      	ands	r0, r5
 8001b4a:	4303      	orrs	r3, r0
 8001b4c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b4e:	6853      	ldr	r3, [r2, #4]
 8001b50:	4841      	ldr	r0, [pc, #260]	; (8001c58 <UART_SetConfig+0x128>)
  tmpreg |= huart->Init.OneBitSampling;
 8001b52:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b54:	4003      	ands	r3, r0
 8001b56:	68e0      	ldr	r0, [r4, #12]
 8001b58:	4303      	orrs	r3, r0
 8001b5a:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001b5c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b5e:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001b60:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b62:	4d3e      	ldr	r5, [pc, #248]	; (8001c5c <UART_SetConfig+0x12c>)
 8001b64:	4028      	ands	r0, r5
 8001b66:	4303      	orrs	r3, r0
 8001b68:	6093      	str	r3, [r2, #8]
 8001b6a:	2380      	movs	r3, #128	; 0x80
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b6c:	483c      	ldr	r0, [pc, #240]	; (8001c60 <UART_SetConfig+0x130>)
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	4282      	cmp	r2, r0
 8001b72:	d110      	bne.n	8001b96 <UART_SetConfig+0x66>
 8001b74:	2003      	movs	r0, #3
 8001b76:	4a3b      	ldr	r2, [pc, #236]	; (8001c64 <UART_SetConfig+0x134>)
 8001b78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b7a:	4002      	ands	r2, r0
 8001b7c:	483a      	ldr	r0, [pc, #232]	; (8001c68 <UART_SetConfig+0x138>)
 8001b7e:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b80:	4299      	cmp	r1, r3
 8001b82:	d013      	beq.n	8001bac <UART_SetConfig+0x7c>
    switch (clocksource)
 8001b84:	2808      	cmp	r0, #8
 8001b86:	d828      	bhi.n	8001bda <UART_SetConfig+0xaa>
 8001b88:	f7fe fad0 	bl	800012c <__gnu_thumb1_case_uqi>
 8001b8c:	27462741 	.word	0x27462741
 8001b90:	27272757 	.word	0x27272757
 8001b94:	5a          	.byte	0x5a
 8001b95:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b96:	4835      	ldr	r0, [pc, #212]	; (8001c6c <UART_SetConfig+0x13c>)
 8001b98:	4282      	cmp	r2, r0
 8001b9a:	d156      	bne.n	8001c4a <UART_SetConfig+0x11a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b9c:	4299      	cmp	r1, r3
 8001b9e:	d136      	bne.n	8001c0e <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ba0:	f7ff fac0 	bl	8001124 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ba4:	6863      	ldr	r3, [r4, #4]
 8001ba6:	0040      	lsls	r0, r0, #1
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	e00b      	b.n	8001bc4 <UART_SetConfig+0x94>
    switch (clocksource)
 8001bac:	2808      	cmp	r0, #8
 8001bae:	d81e      	bhi.n	8001bee <UART_SetConfig+0xbe>
 8001bb0:	f7fe fab2 	bl	8000118 <__gnu_thumb1_case_sqi>
 8001bb4:	1d051df6 	.word	0x1d051df6
 8001bb8:	1d1d1d15 	.word	0x1d1d1d15
 8001bbc:	18          	.byte	0x18
 8001bbd:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001bbe:	6863      	ldr	r3, [r4, #4]
 8001bc0:	0858      	lsrs	r0, r3, #1
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <UART_SetConfig+0x140>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001bc4:	18c0      	adds	r0, r0, r3
 8001bc6:	6861      	ldr	r1, [r4, #4]
 8001bc8:	f7fe faba 	bl	8000140 <__udivsi3>
 8001bcc:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bce:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	4928      	ldr	r1, [pc, #160]	; (8001c74 <UART_SetConfig+0x144>)
 8001bd4:	3a10      	subs	r2, #16
 8001bd6:	428a      	cmp	r2, r1
 8001bd8:	d90c      	bls.n	8001bf4 <UART_SetConfig+0xc4>
      ret = HAL_ERROR;
 8001bda:	2001      	movs	r0, #1
 8001bdc:	e013      	b.n	8001c06 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 8001bde:	f7ff f9eb 	bl	8000fb8 <HAL_RCC_GetSysClockFreq>
 8001be2:	e7df      	b.n	8001ba4 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001be4:	6863      	ldr	r3, [r4, #4]
 8001be6:	0858      	lsrs	r0, r3, #1
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	025b      	lsls	r3, r3, #9
 8001bec:	e7ea      	b.n	8001bc4 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 8001bee:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e7ed      	b.n	8001bd0 <UART_SetConfig+0xa0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	4391      	bics	r1, r2
 8001bfa:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001bfc:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 8001bfe:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c00:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001c0a:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001c0c:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c0e:	f7ff fa89 	bl	8001124 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001c12:	6863      	ldr	r3, [r4, #4]
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	e002      	b.n	8001c1e <UART_SetConfig+0xee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001c18:	6863      	ldr	r3, [r4, #4]
 8001c1a:	0858      	lsrs	r0, r3, #1
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <UART_SetConfig+0x148>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c1e:	18c0      	adds	r0, r0, r3
 8001c20:	6861      	ldr	r1, [r4, #4]
 8001c22:	f7fe fa8d 	bl	8000140 <__udivsi3>
 8001c26:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c28:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	4911      	ldr	r1, [pc, #68]	; (8001c74 <UART_SetConfig+0x144>)
 8001c2e:	3a10      	subs	r2, #16
 8001c30:	428a      	cmp	r2, r1
 8001c32:	d8d2      	bhi.n	8001bda <UART_SetConfig+0xaa>
      huart->Instance->BRR = usartdiv;
 8001c34:	6822      	ldr	r2, [r4, #0]
 8001c36:	60d3      	str	r3, [r2, #12]
 8001c38:	e7e5      	b.n	8001c06 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 8001c3a:	f7ff f9bd 	bl	8000fb8 <HAL_RCC_GetSysClockFreq>
 8001c3e:	e7e8      	b.n	8001c12 <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c40:	6863      	ldr	r3, [r4, #4]
 8001c42:	0858      	lsrs	r0, r3, #1
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	e7e9      	b.n	8001c1e <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c4a:	4299      	cmp	r1, r3
 8001c4c:	d0cf      	beq.n	8001bee <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 8001c4e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e7ea      	b.n	8001c2a <UART_SetConfig+0xfa>
 8001c54:	ffff69f3 	.word	0xffff69f3
 8001c58:	ffffcfff 	.word	0xffffcfff
 8001c5c:	fffff4ff 	.word	0xfffff4ff
 8001c60:	40013800 	.word	0x40013800
 8001c64:	40021000 	.word	0x40021000
 8001c68:	080054b4 	.word	0x080054b4
 8001c6c:	40004400 	.word	0x40004400
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	0000ffef 	.word	0x0000ffef
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001c7e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c80:	07da      	lsls	r2, r3, #31
 8001c82:	d506      	bpl.n	8001c92 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c84:	6801      	ldr	r1, [r0, #0]
 8001c86:	4c28      	ldr	r4, [pc, #160]	; (8001d28 <UART_AdvFeatureConfig+0xac>)
 8001c88:	684a      	ldr	r2, [r1, #4]
 8001c8a:	4022      	ands	r2, r4
 8001c8c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001c8e:	4322      	orrs	r2, r4
 8001c90:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c92:	079a      	lsls	r2, r3, #30
 8001c94:	d506      	bpl.n	8001ca4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c96:	6801      	ldr	r1, [r0, #0]
 8001c98:	4c24      	ldr	r4, [pc, #144]	; (8001d2c <UART_AdvFeatureConfig+0xb0>)
 8001c9a:	684a      	ldr	r2, [r1, #4]
 8001c9c:	4022      	ands	r2, r4
 8001c9e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001ca0:	4322      	orrs	r2, r4
 8001ca2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ca4:	075a      	lsls	r2, r3, #29
 8001ca6:	d506      	bpl.n	8001cb6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ca8:	6801      	ldr	r1, [r0, #0]
 8001caa:	4c21      	ldr	r4, [pc, #132]	; (8001d30 <UART_AdvFeatureConfig+0xb4>)
 8001cac:	684a      	ldr	r2, [r1, #4]
 8001cae:	4022      	ands	r2, r4
 8001cb0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001cb2:	4322      	orrs	r2, r4
 8001cb4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001cb6:	071a      	lsls	r2, r3, #28
 8001cb8:	d506      	bpl.n	8001cc8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cba:	6801      	ldr	r1, [r0, #0]
 8001cbc:	4c1d      	ldr	r4, [pc, #116]	; (8001d34 <UART_AdvFeatureConfig+0xb8>)
 8001cbe:	684a      	ldr	r2, [r1, #4]
 8001cc0:	4022      	ands	r2, r4
 8001cc2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001cc4:	4322      	orrs	r2, r4
 8001cc6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001cc8:	06da      	lsls	r2, r3, #27
 8001cca:	d506      	bpl.n	8001cda <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ccc:	6801      	ldr	r1, [r0, #0]
 8001cce:	4c1a      	ldr	r4, [pc, #104]	; (8001d38 <UART_AdvFeatureConfig+0xbc>)
 8001cd0:	688a      	ldr	r2, [r1, #8]
 8001cd2:	4022      	ands	r2, r4
 8001cd4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001cd6:	4322      	orrs	r2, r4
 8001cd8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001cda:	069a      	lsls	r2, r3, #26
 8001cdc:	d506      	bpl.n	8001cec <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001cde:	6801      	ldr	r1, [r0, #0]
 8001ce0:	4c16      	ldr	r4, [pc, #88]	; (8001d3c <UART_AdvFeatureConfig+0xc0>)
 8001ce2:	688a      	ldr	r2, [r1, #8]
 8001ce4:	4022      	ands	r2, r4
 8001ce6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001ce8:	4322      	orrs	r2, r4
 8001cea:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cec:	065a      	lsls	r2, r3, #25
 8001cee:	d510      	bpl.n	8001d12 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cf0:	6801      	ldr	r1, [r0, #0]
 8001cf2:	4d13      	ldr	r5, [pc, #76]	; (8001d40 <UART_AdvFeatureConfig+0xc4>)
 8001cf4:	684a      	ldr	r2, [r1, #4]
 8001cf6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001cf8:	402a      	ands	r2, r5
 8001cfa:	4322      	orrs	r2, r4
 8001cfc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	0352      	lsls	r2, r2, #13
 8001d02:	4294      	cmp	r4, r2
 8001d04:	d105      	bne.n	8001d12 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d06:	684a      	ldr	r2, [r1, #4]
 8001d08:	4c0e      	ldr	r4, [pc, #56]	; (8001d44 <UART_AdvFeatureConfig+0xc8>)
 8001d0a:	4022      	ands	r2, r4
 8001d0c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d0e:	4322      	orrs	r2, r4
 8001d10:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d12:	061b      	lsls	r3, r3, #24
 8001d14:	d506      	bpl.n	8001d24 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d16:	6802      	ldr	r2, [r0, #0]
 8001d18:	490b      	ldr	r1, [pc, #44]	; (8001d48 <UART_AdvFeatureConfig+0xcc>)
 8001d1a:	6853      	ldr	r3, [r2, #4]
 8001d1c:	400b      	ands	r3, r1
 8001d1e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001d20:	430b      	orrs	r3, r1
 8001d22:	6053      	str	r3, [r2, #4]
}
 8001d24:	bd30      	pop	{r4, r5, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	fffdffff 	.word	0xfffdffff
 8001d2c:	fffeffff 	.word	0xfffeffff
 8001d30:	fffbffff 	.word	0xfffbffff
 8001d34:	ffff7fff 	.word	0xffff7fff
 8001d38:	ffffefff 	.word	0xffffefff
 8001d3c:	ffffdfff 	.word	0xffffdfff
 8001d40:	ffefffff 	.word	0xffefffff
 8001d44:	ff9fffff 	.word	0xff9fffff
 8001d48:	fff7ffff 	.word	0xfff7ffff

08001d4c <UART_WaitOnFlagUntilTimeout>:
{
 8001d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d4e:	2780      	movs	r7, #128	; 0x80
{
 8001d50:	0004      	movs	r4, r0
 8001d52:	000e      	movs	r6, r1
 8001d54:	0015      	movs	r5, r2
 8001d56:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d58:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d5a:	6822      	ldr	r2, [r4, #0]
 8001d5c:	69d3      	ldr	r3, [r2, #28]
 8001d5e:	4033      	ands	r3, r6
 8001d60:	1b9b      	subs	r3, r3, r6
 8001d62:	4259      	negs	r1, r3
 8001d64:	414b      	adcs	r3, r1
 8001d66:	42ab      	cmp	r3, r5
 8001d68:	d001      	beq.n	8001d6e <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	e01c      	b.n	8001da8 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8001d6e:	9b08      	ldr	r3, [sp, #32]
 8001d70:	3301      	adds	r3, #1
 8001d72:	d0f3      	beq.n	8001d5c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d74:	f7fe fab0 	bl	80002d8 <HAL_GetTick>
 8001d78:	9b01      	ldr	r3, [sp, #4]
 8001d7a:	9a08      	ldr	r2, [sp, #32]
 8001d7c:	1ac0      	subs	r0, r0, r3
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	4282      	cmp	r2, r0
 8001d82:	d301      	bcc.n	8001d88 <UART_WaitOnFlagUntilTimeout+0x3c>
 8001d84:	2a00      	cmp	r2, #0
 8001d86:	d110      	bne.n	8001daa <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4913      	ldr	r1, [pc, #76]	; (8001dd8 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	31a3      	adds	r1, #163	; 0xa3
 8001d94:	31ff      	adds	r1, #255	; 0xff
 8001d96:	438a      	bics	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001d9e:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001da0:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001da2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001da4:	3470      	adds	r4, #112	; 0x70
 8001da6:	7023      	strb	r3, [r4, #0]
}
 8001da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001daa:	2104      	movs	r1, #4
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	420a      	tst	r2, r1
 8001db0:	d0d3      	beq.n	8001d5a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001db2:	69da      	ldr	r2, [r3, #28]
 8001db4:	423a      	tst	r2, r7
 8001db6:	d0d0      	beq.n	8001d5a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001db8:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4906      	ldr	r1, [pc, #24]	; (8001dd8 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	31a3      	adds	r1, #163	; 0xa3
 8001dc6:	31ff      	adds	r1, #255	; 0xff
 8001dc8:	438a      	bics	r2, r1
 8001dca:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001dcc:	2320      	movs	r3, #32
 8001dce:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001dd0:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001dd2:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001dd4:	e7e4      	b.n	8001da0 <UART_WaitOnFlagUntilTimeout+0x54>
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	fffffe5f 	.word	0xfffffe5f

08001ddc <HAL_UART_Transmit>:
{
 8001ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dde:	b087      	sub	sp, #28
 8001de0:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8001de2:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001de4:	0004      	movs	r4, r0
 8001de6:	000d      	movs	r5, r1
 8001de8:	0017      	movs	r7, r2
    return HAL_BUSY;
 8001dea:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d149      	bne.n	8001e84 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8001df0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001df2:	2900      	cmp	r1, #0
 8001df4:	d046      	beq.n	8001e84 <HAL_UART_Transmit+0xa8>
 8001df6:	2a00      	cmp	r2, #0
 8001df8:	d044      	beq.n	8001e84 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	68a2      	ldr	r2, [r4, #8]
 8001dfe:	015b      	lsls	r3, r3, #5
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d104      	bne.n	8001e0e <HAL_UART_Transmit+0x32>
 8001e04:	6923      	ldr	r3, [r4, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e0a:	4201      	tst	r1, r0
 8001e0c:	d13a      	bne.n	8001e84 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001e0e:	0023      	movs	r3, r4
 8001e10:	3370      	adds	r3, #112	; 0x70
 8001e12:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001e14:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001e16:	2a01      	cmp	r2, #1
 8001e18:	d034      	beq.n	8001e84 <HAL_UART_Transmit+0xa8>
 8001e1a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1c:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8001e1e:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e20:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e22:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e24:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001e26:	f7fe fa57 	bl	80002d8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001e2a:	0023      	movs	r3, r4
 8001e2c:	3350      	adds	r3, #80	; 0x50
 8001e2e:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8001e30:	3302      	adds	r3, #2
 8001e32:	9303      	str	r3, [sp, #12]
 8001e34:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001e3a:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e3c:	015b      	lsls	r3, r3, #5
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d104      	bne.n	8001e4c <HAL_UART_Transmit+0x70>
 8001e42:	6923      	ldr	r3, [r4, #16]
 8001e44:	42b3      	cmp	r3, r6
 8001e46:	d101      	bne.n	8001e4c <HAL_UART_Transmit+0x70>
 8001e48:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8001e4a:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8001e4c:	0023      	movs	r3, r4
 8001e4e:	3352      	adds	r3, #82	; 0x52
 8001e50:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e52:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8001e54:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d10a      	bne.n	8001e74 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e5e:	2140      	movs	r1, #64	; 0x40
 8001e60:	0020      	movs	r0, r4
 8001e62:	f7ff ff73 	bl	8001d4c <UART_WaitOnFlagUntilTimeout>
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d10b      	bne.n	8001e82 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8001e6a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001e6c:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8001e6e:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8001e70:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001e72:	e007      	b.n	8001e84 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e74:	2200      	movs	r2, #0
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	0020      	movs	r0, r4
 8001e7a:	f7ff ff67 	bl	8001d4c <UART_WaitOnFlagUntilTimeout>
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	d002      	beq.n	8001e88 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8001e82:	2003      	movs	r0, #3
}
 8001e84:	b007      	add	sp, #28
 8001e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e88:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e8e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001e90:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e92:	05db      	lsls	r3, r3, #23
 8001e94:	0ddb      	lsrs	r3, r3, #23
 8001e96:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001e98:	9b03      	ldr	r3, [sp, #12]
 8001e9a:	9a03      	ldr	r2, [sp, #12]
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	8013      	strh	r3, [r2, #0]
 8001ea4:	e7d2      	b.n	8001e4c <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ea6:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8001ea8:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eaa:	8513      	strh	r3, [r2, #40]	; 0x28
 8001eac:	e7f4      	b.n	8001e98 <HAL_UART_Transmit+0xbc>
	...

08001eb0 <UART_CheckIdleState>:
{
 8001eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb2:	2600      	movs	r6, #0
{
 8001eb4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb6:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001eb8:	f7fe fa0e 	bl	80002d8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ebc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001ebe:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	071b      	lsls	r3, r3, #28
 8001ec4:	d415      	bmi.n	8001ef2 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	075b      	lsls	r3, r3, #29
 8001ecc:	d50a      	bpl.n	8001ee4 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <UART_CheckIdleState+0x5c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	03c9      	lsls	r1, r1, #15
 8001ed8:	002b      	movs	r3, r5
 8001eda:	0020      	movs	r0, r4
 8001edc:	f7ff ff36 	bl	8001d4c <UART_WaitOnFlagUntilTimeout>
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	d111      	bne.n	8001f08 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001ee4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001ee6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001ee8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001eea:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001eec:	3470      	adds	r4, #112	; 0x70
 8001eee:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001ef0:	e00b      	b.n	8001f0a <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <UART_CheckIdleState+0x5c>)
 8001ef6:	0032      	movs	r2, r6
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	0389      	lsls	r1, r1, #14
 8001efc:	0003      	movs	r3, r0
 8001efe:	0020      	movs	r0, r4
 8001f00:	f7ff ff24 	bl	8001d4c <UART_WaitOnFlagUntilTimeout>
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d0de      	beq.n	8001ec6 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001f08:	2003      	movs	r0, #3
}
 8001f0a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001f0c:	01ffffff 	.word	0x01ffffff

08001f10 <HAL_UART_Init>:
{
 8001f10:	b510      	push	{r4, lr}
 8001f12:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001f14:	d101      	bne.n	8001f1a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001f16:	2001      	movs	r0, #1
}
 8001f18:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001f1a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d104      	bne.n	8001f2a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001f20:	0002      	movs	r2, r0
 8001f22:	3270      	adds	r2, #112	; 0x70
 8001f24:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001f26:	f002 fd79 	bl	8004a1c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001f2a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f30:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001f32:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f34:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001f36:	438b      	bics	r3, r1
 8001f38:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f3a:	f7ff fdf9 	bl	8001b30 <UART_SetConfig>
 8001f3e:	2801      	cmp	r0, #1
 8001f40:	d0e9      	beq.n	8001f16 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001f48:	0020      	movs	r0, r4
 8001f4a:	f7ff fe97 	bl	8001c7c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	4907      	ldr	r1, [pc, #28]	; (8001f70 <HAL_UART_Init+0x60>)
 8001f52:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001f54:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f56:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f58:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	438a      	bics	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001f62:	2201      	movs	r2, #1
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001f6a:	f7ff ffa1 	bl	8001eb0 <UART_CheckIdleState>
 8001f6e:	e7d3      	b.n	8001f18 <HAL_UART_Init+0x8>
 8001f70:	ffffb7ff 	.word	0xffffb7ff

08001f74 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001f74:	4770      	bx	lr
	...

08001f78 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <disk_status+0x18>)
{
 8001f7a:	b510      	push	{r4, lr}
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8001f7c:	181a      	adds	r2, r3, r0
 8001f7e:	0080      	lsls	r0, r0, #2
 8001f80:	181b      	adds	r3, r3, r0
 8001f82:	7a11      	ldrb	r1, [r2, #8]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0008      	movs	r0, r1
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4798      	blx	r3
  return stat;
}
 8001f8c:	bd10      	pop	{r4, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	200002c4 	.word	0x200002c4

08001f94 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <disk_initialize+0x24>)
{
 8001f96:	0002      	movs	r2, r0
  if(disk.is_initialized[pdrv] == 0)
 8001f98:	5c19      	ldrb	r1, [r3, r0]
  DSTATUS stat = RES_OK;
 8001f9a:	2000      	movs	r0, #0
{
 8001f9c:	b510      	push	{r4, lr}
  if(disk.is_initialized[pdrv] == 0)
 8001f9e:	4281      	cmp	r1, r0
 8001fa0:	d108      	bne.n	8001fb4 <disk_initialize+0x20>
  { 
    disk.is_initialized[pdrv] = 1;
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8001fa6:	1899      	adds	r1, r3, r2
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	189b      	adds	r3, r3, r2
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	7a08      	ldrb	r0, [r1, #8]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4798      	blx	r3
  }
  return stat;
}
 8001fb4:	bd10      	pop	{r4, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	200002c4 	.word	0x200002c4

08001fbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8001fbc:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8001fbe:	4c05      	ldr	r4, [pc, #20]	; (8001fd4 <disk_read+0x18>)
 8001fc0:	1825      	adds	r5, r4, r0
 8001fc2:	0080      	lsls	r0, r0, #2
 8001fc4:	1824      	adds	r4, r4, r0
 8001fc6:	7a2e      	ldrb	r6, [r5, #8]
 8001fc8:	6860      	ldr	r0, [r4, #4]
 8001fca:	6884      	ldr	r4, [r0, #8]
 8001fcc:	0030      	movs	r0, r6
 8001fce:	47a0      	blx	r4
  return res;
}
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	200002c4 	.word	0x200002c4

08001fd8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8001fd8:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8001fda:	4c05      	ldr	r4, [pc, #20]	; (8001ff0 <disk_write+0x18>)
 8001fdc:	1825      	adds	r5, r4, r0
 8001fde:	0080      	lsls	r0, r0, #2
 8001fe0:	1824      	adds	r4, r4, r0
 8001fe2:	7a2e      	ldrb	r6, [r5, #8]
 8001fe4:	6860      	ldr	r0, [r4, #4]
 8001fe6:	68c4      	ldr	r4, [r0, #12]
 8001fe8:	0030      	movs	r0, r6
 8001fea:	47a0      	blx	r4
  return res;
}
 8001fec:	bd70      	pop	{r4, r5, r6, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	200002c4 	.word	0x200002c4

08001ff4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <disk_ioctl+0x18>)
{
 8001ff6:	b570      	push	{r4, r5, r6, lr}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001ff8:	181c      	adds	r4, r3, r0
 8001ffa:	0080      	lsls	r0, r0, #2
 8001ffc:	181b      	adds	r3, r3, r0
 8001ffe:	7a25      	ldrb	r5, [r4, #8]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	0028      	movs	r0, r5
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	4798      	blx	r3
  return res;
}
 8002008:	bd70      	pop	{r4, r5, r6, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	200002c4 	.word	0x200002c4

08002010 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002010:	2300      	movs	r3, #0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002012:	b510      	push	{r4, lr}
	while (cnt--)
 8002014:	429a      	cmp	r2, r3
 8002016:	d100      	bne.n	800201a <mem_cpy+0xa>
		*d++ = *s++;
}
 8002018:	bd10      	pop	{r4, pc}
		*d++ = *s++;
 800201a:	5ccc      	ldrb	r4, [r1, r3]
 800201c:	54c4      	strb	r4, [r0, r3]
 800201e:	3301      	adds	r3, #1
 8002020:	e7f8      	b.n	8002014 <mem_cpy+0x4>

08002022 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002022:	1882      	adds	r2, r0, r2
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8002024:	4290      	cmp	r0, r2
 8002026:	d100      	bne.n	800202a <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8002028:	4770      	bx	lr
		*d++ = (BYTE)val;
 800202a:	7001      	strb	r1, [r0, #0]
 800202c:	3001      	adds	r0, #1
 800202e:	e7f9      	b.n	8002024 <mem_set+0x2>

08002030 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002032:	2400      	movs	r4, #0
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002034:	2580      	movs	r5, #128	; 0x80
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002036:	0022      	movs	r2, r4
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <chk_lock+0x64>)
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800203a:	00ed      	lsls	r5, r5, #3
		if (Files[i].fs) {	/* Existing entry */
 800203c:	681f      	ldr	r7, [r3, #0]
 800203e:	2f00      	cmp	r7, #0
 8002040:	d01c      	beq.n	800207c <chk_lock+0x4c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002042:	5946      	ldr	r6, [r0, r5]
 8002044:	42b7      	cmp	r7, r6
 8002046:	d11a      	bne.n	800207e <chk_lock+0x4e>
 8002048:	2781      	movs	r7, #129	; 0x81
 800204a:	00ff      	lsls	r7, r7, #3
 800204c:	685e      	ldr	r6, [r3, #4]
 800204e:	59c7      	ldr	r7, [r0, r7]
 8002050:	42be      	cmp	r6, r7
 8002052:	d114      	bne.n	800207e <chk_lock+0x4e>
				Files[i].clu == dp->sclust &&
 8002054:	891e      	ldrh	r6, [r3, #8]
 8002056:	46b4      	mov	ip, r6
 8002058:	4e0f      	ldr	r6, [pc, #60]	; (8002098 <chk_lock+0x68>)
 800205a:	5b87      	ldrh	r7, [r0, r6]
 800205c:	45bc      	cmp	ip, r7
 800205e:	d10e      	bne.n	800207e <chk_lock+0x4e>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002060:	2010      	movs	r0, #16
 8002062:	2900      	cmp	r1, #0
 8002064:	d115      	bne.n	8002092 <chk_lock+0x62>
 8002066:	230c      	movs	r3, #12
 8002068:	435a      	muls	r2, r3
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <chk_lock+0x64>)
 800206c:	189a      	adds	r2, r3, r2
 800206e:	8950      	ldrh	r0, [r2, #10]
 8002070:	3801      	subs	r0, #1
 8002072:	38ff      	subs	r0, #255	; 0xff
 8002074:	4242      	negs	r2, r0
 8002076:	4142      	adcs	r2, r0
 8002078:	0110      	lsls	r0, r2, #4
 800207a:	e00a      	b.n	8002092 <chk_lock+0x62>
			be = 1;
 800207c:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800207e:	3201      	adds	r2, #1
 8002080:	330c      	adds	r3, #12
 8002082:	2a02      	cmp	r2, #2
 8002084:	d1da      	bne.n	800203c <chk_lock+0xc>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002086:	2000      	movs	r0, #0
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002088:	4284      	cmp	r4, r0
 800208a:	d102      	bne.n	8002092 <chk_lock+0x62>
 800208c:	2902      	cmp	r1, #2
 800208e:	d000      	beq.n	8002092 <chk_lock+0x62>
 8002090:	2012      	movs	r0, #18
}
 8002092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002094:	200000a8 	.word	0x200000a8
 8002098:	00000406 	.word	0x00000406

0800209c <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 800209c:	2380      	movs	r3, #128	; 0x80
{
 800209e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a0:	4c24      	ldr	r4, [pc, #144]	; (8002134 <inc_lock+0x98>)
		if (Files[i].fs == dp->fs &&
 80020a2:	00db      	lsls	r3, r3, #3
			Files[i].clu == dp->sclust &&
 80020a4:	2581      	movs	r5, #129	; 0x81
		if (Files[i].fs == dp->fs &&
 80020a6:	58c6      	ldr	r6, [r0, r3]
 80020a8:	0022      	movs	r2, r4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80020aa:	2300      	movs	r3, #0
			Files[i].clu == dp->sclust &&
 80020ac:	00ed      	lsls	r5, r5, #3
		if (Files[i].fs == dp->fs &&
 80020ae:	6827      	ldr	r7, [r4, #0]
 80020b0:	42b7      	cmp	r7, r6
 80020b2:	d10a      	bne.n	80020ca <inc_lock+0x2e>
 80020b4:	6867      	ldr	r7, [r4, #4]
 80020b6:	46bc      	mov	ip, r7
 80020b8:	5947      	ldr	r7, [r0, r5]
 80020ba:	45bc      	cmp	ip, r7
 80020bc:	d105      	bne.n	80020ca <inc_lock+0x2e>
			Files[i].clu == dp->sclust &&
 80020be:	8927      	ldrh	r7, [r4, #8]
 80020c0:	46bc      	mov	ip, r7
 80020c2:	4f1d      	ldr	r7, [pc, #116]	; (8002138 <inc_lock+0x9c>)
 80020c4:	5bc7      	ldrh	r7, [r0, r7]
 80020c6:	45bc      	cmp	ip, r7
 80020c8:	d027      	beq.n	800211a <inc_lock+0x7e>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80020ca:	3301      	adds	r3, #1
 80020cc:	340c      	adds	r4, #12
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d1ed      	bne.n	80020ae <inc_lock+0x12>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <inc_lock+0x46>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80020d8:	2400      	movs	r4, #0
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80020da:	68d3      	ldr	r3, [r2, #12]
 80020dc:	42a3      	cmp	r3, r4
 80020de:	d11a      	bne.n	8002116 <inc_lock+0x7a>
 80020e0:	2301      	movs	r3, #1
		Files[i].fs = dp->fs;
 80020e2:	240c      	movs	r4, #12
		Files[i].clu = dp->sclust;
 80020e4:	2581      	movs	r5, #129	; 0x81
		Files[i].fs = dp->fs;
 80020e6:	435c      	muls	r4, r3
		Files[i].clu = dp->sclust;
 80020e8:	00ed      	lsls	r5, r5, #3
 80020ea:	5945      	ldr	r5, [r0, r5]
		Files[i].fs = dp->fs;
 80020ec:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 80020ee:	1914      	adds	r4, r2, r4
 80020f0:	6065      	str	r5, [r4, #4]
		Files[i].idx = dp->index;
 80020f2:	4d11      	ldr	r5, [pc, #68]	; (8002138 <inc_lock+0x9c>)
 80020f4:	5b40      	ldrh	r0, [r0, r5]
 80020f6:	8120      	strh	r0, [r4, #8]
		Files[i].ctr = 0;
 80020f8:	2000      	movs	r0, #0
 80020fa:	8160      	strh	r0, [r4, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80020fc:	4281      	cmp	r1, r0
 80020fe:	d115      	bne.n	800212c <inc_lock+0x90>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002100:	210c      	movs	r1, #12
 8002102:	4359      	muls	r1, r3
 8002104:	1851      	adds	r1, r2, r1
 8002106:	8949      	ldrh	r1, [r1, #10]
 8002108:	3101      	adds	r1, #1
 800210a:	b289      	uxth	r1, r1
 800210c:	200c      	movs	r0, #12
 800210e:	4358      	muls	r0, r3
 8002110:	1812      	adds	r2, r2, r0
 8002112:	8151      	strh	r1, [r2, #10]

	return i + 1;
 8002114:	1c5c      	adds	r4, r3, #1
}
 8002116:	0020      	movs	r0, r4
 8002118:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800211a:	2900      	cmp	r1, #0
 800211c:	d0f0      	beq.n	8002100 <inc_lock+0x64>
 800211e:	210c      	movs	r1, #12
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002120:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002122:	4359      	muls	r1, r3
 8002124:	1851      	adds	r1, r2, r1
 8002126:	8949      	ldrh	r1, [r1, #10]
 8002128:	42a1      	cmp	r1, r4
 800212a:	d1f4      	bne.n	8002116 <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800212c:	2180      	movs	r1, #128	; 0x80
 800212e:	0049      	lsls	r1, r1, #1
 8002130:	e7ec      	b.n	800210c <inc_lock+0x70>
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	200000a8 	.word	0x200000a8
 8002138:	00000406 	.word	0x00000406

0800213c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800213c:	1e41      	subs	r1, r0, #1
{
 800213e:	b510      	push	{r4, lr}
		if (n) n--;					/* Decrement read mode open count */
		Files[i].ctr = n;
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002140:	2002      	movs	r0, #2
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002142:	2901      	cmp	r1, #1
 8002144:	d811      	bhi.n	800216a <dec_lock+0x2e>
		n = Files[i].ctr;
 8002146:	230c      	movs	r3, #12
 8002148:	001a      	movs	r2, r3
 800214a:	434a      	muls	r2, r1
 800214c:	4c07      	ldr	r4, [pc, #28]	; (800216c <dec_lock+0x30>)
 800214e:	18a2      	adds	r2, r4, r2
 8002150:	8950      	ldrh	r0, [r2, #10]
		if (n) n--;					/* Decrement read mode open count */
 8002152:	4a07      	ldr	r2, [pc, #28]	; (8002170 <dec_lock+0x34>)
 8002154:	4002      	ands	r2, r0
 8002156:	d001      	beq.n	800215c <dec_lock+0x20>
 8002158:	3801      	subs	r0, #1
 800215a:	b282      	uxth	r2, r0
		res = FR_OK;
 800215c:	2000      	movs	r0, #0
		Files[i].ctr = n;
 800215e:	434b      	muls	r3, r1
 8002160:	18e1      	adds	r1, r4, r3
 8002162:	814a      	strh	r2, [r1, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002164:	4282      	cmp	r2, r0
 8002166:	d100      	bne.n	800216a <dec_lock+0x2e>
 8002168:	50e0      	str	r0, [r4, r3]
	}
	return res;
}
 800216a:	bd10      	pop	{r4, pc}
 800216c:	200000a8 	.word	0x200000a8
 8002170:	fffffeff 	.word	0xfffffeff

08002174 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8002174:	0003      	movs	r3, r0
 8002176:	b570      	push	{r4, r5, r6, lr}
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002178:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <clmt_clust+0x38>)
{
 800217a:	0008      	movs	r0, r1
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800217c:	589c      	ldr	r4, [r3, r2]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800217e:	3a24      	subs	r2, #36	; 0x24
 8002180:	589d      	ldr	r5, [r3, r2]
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <clmt_clust+0x3c>)
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002184:	3404      	adds	r4, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8002186:	5ae9      	ldrh	r1, [r5, r3]
 8002188:	f7fd ffda 	bl	8000140 <__udivsi3>
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <clmt_clust+0x40>)
 800218e:	5ce9      	ldrb	r1, [r5, r3]
 8002190:	f7fd ffd6 	bl	8000140 <__udivsi3>
 8002194:	0002      	movs	r2, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002196:	6820      	ldr	r0, [r4, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8002198:	2800      	cmp	r0, #0
 800219a:	d006      	beq.n	80021aa <clmt_clust+0x36>
		if (cl < ncl) break;	/* In this fragment? */
 800219c:	4282      	cmp	r2, r0
 800219e:	d302      	bcc.n	80021a6 <clmt_clust+0x32>
		cl -= ncl; tbl++;		/* Next fragment */
 80021a0:	1a12      	subs	r2, r2, r0
 80021a2:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80021a4:	e7f7      	b.n	8002196 <clmt_clust+0x22>
	}
	return cl + *tbl;	/* Return the cluster number */
 80021a6:	6860      	ldr	r0, [r4, #4]
 80021a8:	1810      	adds	r0, r2, r0
}
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
 80021ac:	00000424 	.word	0x00000424
 80021b0:	0000040a 	.word	0x0000040a
 80021b4:	00000402 	.word	0x00000402

080021b8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80021b8:	0001      	movs	r1, r0
	BYTE sum = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	310b      	adds	r1, #11
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80021be:	085a      	lsrs	r2, r3, #1
 80021c0:	01db      	lsls	r3, r3, #7
 80021c2:	4313      	orrs	r3, r2
 80021c4:	7802      	ldrb	r2, [r0, #0]
 80021c6:	3001      	adds	r0, #1
 80021c8:	189b      	adds	r3, r3, r2
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4288      	cmp	r0, r1
 80021ce:	d1f6      	bne.n	80021be <sum_sfn+0x6>
	return sum;
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	4770      	bx	lr

080021d4 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80021d4:	6802      	ldr	r2, [r0, #0]
 80021d6:	1e13      	subs	r3, r2, #0
 80021d8:	d103      	bne.n	80021e2 <get_ldnumber+0xe>
	int vol = -1;
 80021da:	2001      	movs	r0, #1
 80021dc:	4240      	negs	r0, r0
 80021de:	e00e      	b.n	80021fe <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80021e0:	3301      	adds	r3, #1
 80021e2:	7819      	ldrb	r1, [r3, #0]
 80021e4:	291f      	cmp	r1, #31
 80021e6:	d909      	bls.n	80021fc <get_ldnumber+0x28>
 80021e8:	293a      	cmp	r1, #58	; 0x3a
 80021ea:	d1f9      	bne.n	80021e0 <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 80021ec:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80021ee:	428b      	cmp	r3, r1
 80021f0:	d1f3      	bne.n	80021da <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	2a30      	cmp	r2, #48	; 0x30
 80021f6:	d1f0      	bne.n	80021da <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 80021f8:	3301      	adds	r3, #1
 80021fa:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80021fc:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 80021fe:	4770      	bx	lr

08002200 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8002200:	b510      	push	{r4, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002202:	2800      	cmp	r0, #0
 8002204:	d015      	beq.n	8002232 <validate+0x32>
 8002206:	2280      	movs	r2, #128	; 0x80
 8002208:	00d2      	lsls	r2, r2, #3
 800220a:	5883      	ldr	r3, [r0, r2]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d010      	beq.n	8002232 <validate+0x32>
 8002210:	5c9a      	ldrb	r2, [r3, r2]
 8002212:	2a00      	cmp	r2, #0
 8002214:	d00d      	beq.n	8002232 <validate+0x32>
 8002216:	4a08      	ldr	r2, [pc, #32]	; (8002238 <validate+0x38>)
 8002218:	5a99      	ldrh	r1, [r3, r2]
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <validate+0x3c>)
 800221c:	5a82      	ldrh	r2, [r0, r2]
 800221e:	4291      	cmp	r1, r2
 8002220:	d107      	bne.n	8002232 <validate+0x32>
 8002222:	4a07      	ldr	r2, [pc, #28]	; (8002240 <validate+0x40>)
 8002224:	5c98      	ldrb	r0, [r3, r2]
 8002226:	f7ff fea7 	bl	8001f78 <disk_status>
 800222a:	2301      	movs	r3, #1
 800222c:	4003      	ands	r3, r0
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800222e:	1e18      	subs	r0, r3, #0
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002230:	d000      	beq.n	8002234 <validate+0x34>
		return FR_INVALID_OBJECT;
 8002232:	2009      	movs	r0, #9
}
 8002234:	bd10      	pop	{r4, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	00000406 	.word	0x00000406
 800223c:	00000404 	.word	0x00000404
 8002240:	00000401 	.word	0x00000401

08002244 <get_fileinfo>:
{
 8002244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (dp->sect) {		/* Get SFN */
 8002246:	2382      	movs	r3, #130	; 0x82
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	58c3      	ldr	r3, [r0, r3]
{
 800224c:	000c      	movs	r4, r1
	p = fno->fname;
 800224e:	3109      	adds	r1, #9
	if (dp->sect) {		/* Get SFN */
 8002250:	2b00      	cmp	r3, #0
 8002252:	d038      	beq.n	80022c6 <get_fileinfo+0x82>
		i = 0;
 8002254:	2200      	movs	r2, #0
		dir = dp->dir;
 8002256:	4b33      	ldr	r3, [pc, #204]	; (8002324 <get_fileinfo+0xe0>)
 8002258:	58c3      	ldr	r3, [r0, r3]
			c = (TCHAR)dir[i++];
 800225a:	1c55      	adds	r5, r2, #1
 800225c:	5c9a      	ldrb	r2, [r3, r2]
			if (c == ' ') continue;				/* Skip padding spaces */
 800225e:	2a20      	cmp	r2, #32
 8002260:	d017      	beq.n	8002292 <get_fileinfo+0x4e>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8002262:	2a05      	cmp	r2, #5
 8002264:	d059      	beq.n	800231a <get_fileinfo+0xd6>
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8002266:	2d09      	cmp	r5, #9
 8002268:	d102      	bne.n	8002270 <get_fileinfo+0x2c>
 800226a:	272e      	movs	r7, #46	; 0x2e
 800226c:	700f      	strb	r7, [r1, #0]
 800226e:	3101      	adds	r1, #1
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 8002270:	0017      	movs	r7, r2
 8002272:	3f41      	subs	r7, #65	; 0x41
 8002274:	2f19      	cmp	r7, #25
 8002276:	d80a      	bhi.n	800228e <get_fileinfo+0x4a>
 8002278:	7b1f      	ldrb	r7, [r3, #12]
 800227a:	46bc      	mov	ip, r7
 800227c:	2710      	movs	r7, #16
 800227e:	2d08      	cmp	r5, #8
 8002280:	d800      	bhi.n	8002284 <get_fileinfo+0x40>
 8002282:	3f08      	subs	r7, #8
 8002284:	4666      	mov	r6, ip
 8002286:	423e      	tst	r6, r7
 8002288:	d001      	beq.n	800228e <get_fileinfo+0x4a>
				c += 0x20;			/* To lower */
 800228a:	3220      	adds	r2, #32
 800228c:	b2d2      	uxtb	r2, r2
			*p++ = c;
 800228e:	700a      	strb	r2, [r1, #0]
 8002290:	3101      	adds	r1, #1
 8002292:	002a      	movs	r2, r5
		while (i < 11) {		/* Copy name body and extension */
 8002294:	2d0b      	cmp	r5, #11
 8002296:	d1e0      	bne.n	800225a <get_fileinfo+0x16>
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8002298:	7ada      	ldrb	r2, [r3, #11]
 800229a:	7222      	strb	r2, [r4, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800229c:	7f5d      	ldrb	r5, [r3, #29]
 800229e:	7f1a      	ldrb	r2, [r3, #28]
 80022a0:	022d      	lsls	r5, r5, #8
 80022a2:	4315      	orrs	r5, r2
 80022a4:	7f9a      	ldrb	r2, [r3, #30]
 80022a6:	0412      	lsls	r2, r2, #16
 80022a8:	4315      	orrs	r5, r2
 80022aa:	7fda      	ldrb	r2, [r3, #31]
 80022ac:	0612      	lsls	r2, r2, #24
 80022ae:	432a      	orrs	r2, r5
 80022b0:	6022      	str	r2, [r4, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 80022b2:	7e5d      	ldrb	r5, [r3, #25]
 80022b4:	7e1a      	ldrb	r2, [r3, #24]
 80022b6:	022d      	lsls	r5, r5, #8
 80022b8:	432a      	orrs	r2, r5
 80022ba:	80a2      	strh	r2, [r4, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80022bc:	7dda      	ldrb	r2, [r3, #23]
 80022be:	7d9b      	ldrb	r3, [r3, #22]
 80022c0:	0212      	lsls	r2, r2, #8
 80022c2:	4313      	orrs	r3, r2
 80022c4:	80e3      	strh	r3, [r4, #6]
	*p = 0;		/* Terminate SFN string by a \0 */
 80022c6:	2500      	movs	r5, #0
 80022c8:	700d      	strb	r5, [r1, #0]
	if (fno->lfname) {
 80022ca:	69a6      	ldr	r6, [r4, #24]
 80022cc:	42ae      	cmp	r6, r5
 80022ce:	d007      	beq.n	80022e0 <get_fileinfo+0x9c>
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 80022d0:	2382      	movs	r3, #130	; 0x82
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	58c3      	ldr	r3, [r0, r3]
 80022d6:	42ab      	cmp	r3, r5
 80022d8:	d103      	bne.n	80022e2 <get_fileinfo+0x9e>
		i = 0; p = fno->lfname;
 80022da:	2300      	movs	r3, #0
		p[i] = 0;	/* Terminate LFN string by a \0 */
 80022dc:	2200      	movs	r2, #0
 80022de:	54f2      	strb	r2, [r6, r3]
}
 80022e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 80022e2:	69e3      	ldr	r3, [r4, #28]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f8      	beq.n	80022da <get_fileinfo+0x96>
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <get_fileinfo+0xe4>)
 80022ea:	5ac2      	ldrh	r2, [r0, r3]
 80022ec:	4b0f      	ldr	r3, [pc, #60]	; (800232c <get_fileinfo+0xe8>)
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d0f3      	beq.n	80022da <get_fileinfo+0x96>
			lfn = dp->lfn;
 80022f2:	2384      	movs	r3, #132	; 0x84
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	58c7      	ldr	r7, [r0, r3]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 80022f8:	006a      	lsls	r2, r5, #1
 80022fa:	5ab8      	ldrh	r0, [r7, r2]
 80022fc:	002b      	movs	r3, r5
 80022fe:	2800      	cmp	r0, #0
 8002300:	d0ec      	beq.n	80022dc <get_fileinfo+0x98>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8002302:	2100      	movs	r1, #0
 8002304:	f001 fcb2 	bl	8003c6c <ff_convert>
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 8002308:	2800      	cmp	r0, #0
 800230a:	d0e6      	beq.n	80022da <get_fileinfo+0x96>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 800230c:	69e3      	ldr	r3, [r4, #28]
 800230e:	3b01      	subs	r3, #1
 8002310:	429d      	cmp	r5, r3
 8002312:	d2e2      	bcs.n	80022da <get_fileinfo+0x96>
				p[i++] = (TCHAR)w;
 8002314:	5570      	strb	r0, [r6, r5]
 8002316:	3501      	adds	r5, #1
 8002318:	e7ee      	b.n	80022f8 <get_fileinfo+0xb4>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800231a:	22e5      	movs	r2, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800231c:	2d09      	cmp	r5, #9
 800231e:	d1b6      	bne.n	800228e <get_fileinfo+0x4a>
 8002320:	e7a3      	b.n	800226a <get_fileinfo+0x26>
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	00000414 	.word	0x00000414
 8002328:	00000424 	.word	0x00000424
 800232c:	0000ffff 	.word	0x0000ffff

08002330 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8002330:	7eca      	ldrb	r2, [r1, #27]
DWORD ld_clust (
 8002332:	b510      	push	{r4, lr}
 8002334:	0004      	movs	r4, r0
	cl = LD_WORD(dir + DIR_FstClusLO);
 8002336:	7e88      	ldrb	r0, [r1, #26]
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	4310      	orrs	r0, r2
	if (fs->fs_type == FS_FAT32)
 800233c:	2c03      	cmp	r4, #3
 800233e:	d105      	bne.n	800234c <ld_clust.isra.0+0x1c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8002340:	7d4a      	ldrb	r2, [r1, #21]
 8002342:	7d0b      	ldrb	r3, [r1, #20]
 8002344:	0212      	lsls	r2, r2, #8
 8002346:	4313      	orrs	r3, r2
 8002348:	041b      	lsls	r3, r3, #16
 800234a:	4318      	orrs	r0, r3
}
 800234c:	bd10      	pop	{r4, pc}
	...

08002350 <sync_window.part.1>:
FRESULT sync_window (
 8002350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002352:	0004      	movs	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <sync_window.part.1+0x54>)
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002356:	4e14      	ldr	r6, [pc, #80]	; (80023a8 <sync_window.part.1+0x58>)
		wsect = fs->winsect;	/* Current sector number */
 8002358:	58c5      	ldr	r5, [r0, r3]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800235a:	0021      	movs	r1, r4
 800235c:	2301      	movs	r3, #1
 800235e:	5d80      	ldrb	r0, [r0, r6]
 8002360:	002a      	movs	r2, r5
 8002362:	f7ff fe39 	bl	8001fd8 <disk_write>
 8002366:	9601      	str	r6, [sp, #4]
			res = FR_DISK_ERR;
 8002368:	2301      	movs	r3, #1
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800236a:	2800      	cmp	r0, #0
 800236c:	d109      	bne.n	8002382 <sync_window.part.1+0x32>
			fs->wflag = 0;
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <sync_window.part.1+0x5c>)
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002370:	3617      	adds	r6, #23
			fs->wflag = 0;
 8002372:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002374:	331c      	adds	r3, #28
 8002376:	58e3      	ldr	r3, [r4, r3]
 8002378:	59a2      	ldr	r2, [r4, r6]
 800237a:	1aeb      	subs	r3, r5, r3
 800237c:	4293      	cmp	r3, r2
 800237e:	d302      	bcc.n	8002386 <sync_window.part.1+0x36>
	FRESULT res = FR_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	0018      	movs	r0, r3
 8002384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <sync_window.part.1+0x60>)
 8002388:	5ce7      	ldrb	r7, [r4, r3]
 800238a:	2f01      	cmp	r7, #1
 800238c:	d9f8      	bls.n	8002380 <sync_window.part.1+0x30>
					wsect += fs->fsize;
 800238e:	59a3      	ldr	r3, [r4, r6]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002390:	0021      	movs	r1, r4
					wsect += fs->fsize;
 8002392:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002394:	9b01      	ldr	r3, [sp, #4]
 8002396:	002a      	movs	r2, r5
 8002398:	5ce0      	ldrb	r0, [r4, r3]
 800239a:	2301      	movs	r3, #1
 800239c:	f7ff fe1c 	bl	8001fd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80023a0:	3f01      	subs	r7, #1
 80023a2:	e7f2      	b.n	800238a <sync_window.part.1+0x3a>
 80023a4:	0000042c 	.word	0x0000042c
 80023a8:	00000401 	.word	0x00000401
 80023ac:	00000404 	.word	0x00000404
 80023b0:	00000403 	.word	0x00000403

080023b4 <sync_window>:
{
 80023b4:	b510      	push	{r4, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <sync_window+0x18>)
 80023b8:	5cc2      	ldrb	r2, [r0, r3]
	FRESULT res = FR_OK;
 80023ba:	2300      	movs	r3, #0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80023bc:	429a      	cmp	r2, r3
 80023be:	d002      	beq.n	80023c6 <sync_window+0x12>
 80023c0:	f7ff ffc6 	bl	8002350 <sync_window.part.1>
 80023c4:	0003      	movs	r3, r0
}
 80023c6:	0018      	movs	r0, r3
 80023c8:	bd10      	pop	{r4, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	00000404 	.word	0x00000404

080023d0 <sync_fs>:
{
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	0004      	movs	r4, r0
	res = sync_window(fs);
 80023d4:	f7ff ffee 	bl	80023b4 <sync_window>
 80023d8:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 80023da:	d15e      	bne.n	800249a <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	5ce3      	ldrb	r3, [r4, r3]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d150      	bne.n	8002488 <sync_fs+0xb8>
 80023e6:	4e2d      	ldr	r6, [pc, #180]	; (800249c <sync_fs+0xcc>)
 80023e8:	5da7      	ldrb	r7, [r4, r6]
 80023ea:	2f01      	cmp	r7, #1
 80023ec:	d14c      	bne.n	8002488 <sync_fs+0xb8>
			mem_set(fs->win.d8, 0, SS(fs));
 80023ee:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <sync_fs+0xd0>)
 80023f0:	0001      	movs	r1, r0
 80023f2:	5ae2      	ldrh	r2, [r4, r3]
 80023f4:	0020      	movs	r0, r4
 80023f6:	f7ff fe14 	bl	8002022 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80023fa:	23ff      	movs	r3, #255	; 0xff
 80023fc:	2255      	movs	r2, #85	; 0x55
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80023fe:	20f2      	movs	r0, #242	; 0xf2
 8002400:	2172      	movs	r1, #114	; 0x72
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	54e2      	strb	r2, [r4, r3]
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <sync_fs+0xd4>)
 8002408:	1892      	adds	r2, r2, r2
 800240a:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800240c:	3bae      	subs	r3, #174	; 0xae
 800240e:	3bff      	subs	r3, #255	; 0xff
 8002410:	7023      	strb	r3, [r4, #0]
 8002412:	7063      	strb	r3, [r4, #1]
 8002414:	3a69      	subs	r2, #105	; 0x69
 8002416:	330f      	adds	r3, #15
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8002418:	0040      	lsls	r0, r0, #1
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800241a:	70a3      	strb	r3, [r4, #2]
 800241c:	70e2      	strb	r2, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800241e:	5421      	strb	r1, [r4, r0]
 8002420:	20e6      	movs	r0, #230	; 0xe6
 8002422:	30ff      	adds	r0, #255	; 0xff
 8002424:	5421      	strb	r1, [r4, r0]
 8002426:	3175      	adds	r1, #117	; 0x75
 8002428:	31ff      	adds	r1, #255	; 0xff
 800242a:	5462      	strb	r2, [r4, r1]
 800242c:	22e8      	movs	r2, #232	; 0xe8
 800242e:	32ff      	adds	r2, #255	; 0xff
 8002430:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8002432:	2382      	movs	r3, #130	; 0x82
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	58e3      	ldr	r3, [r4, r3]
 8002438:	3201      	adds	r2, #1
 800243a:	54a3      	strb	r3, [r4, r2]
 800243c:	22ea      	movs	r2, #234	; 0xea
 800243e:	0a19      	lsrs	r1, r3, #8
 8002440:	32ff      	adds	r2, #255	; 0xff
 8002442:	54a1      	strb	r1, [r4, r2]
 8002444:	0c19      	lsrs	r1, r3, #16
 8002446:	3201      	adds	r2, #1
 8002448:	54a1      	strb	r1, [r4, r2]
 800244a:	22ec      	movs	r2, #236	; 0xec
 800244c:	0e1b      	lsrs	r3, r3, #24
 800244e:	32ff      	adds	r2, #255	; 0xff
 8002450:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <sync_fs+0xd8>)
 8002454:	3201      	adds	r2, #1
 8002456:	58e3      	ldr	r3, [r4, r3]
 8002458:	54a3      	strb	r3, [r4, r2]
 800245a:	22ee      	movs	r2, #238	; 0xee
 800245c:	0a19      	lsrs	r1, r3, #8
 800245e:	32ff      	adds	r2, #255	; 0xff
 8002460:	54a1      	strb	r1, [r4, r2]
 8002462:	0c19      	lsrs	r1, r3, #16
 8002464:	3201      	adds	r2, #1
 8002466:	54a1      	strb	r1, [r4, r2]
 8002468:	22f0      	movs	r2, #240	; 0xf0
 800246a:	0e1b      	lsrs	r3, r3, #24
 800246c:	32ff      	adds	r2, #255	; 0xff
 800246e:	54a3      	strb	r3, [r4, r2]
			fs->winsect = fs->volbase + 1;
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <sync_fs+0xdc>)
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8002472:	0021      	movs	r1, r4
			fs->winsect = fs->volbase + 1;
 8002474:	58e2      	ldr	r2, [r4, r3]
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <sync_fs+0xe0>)
 8002478:	3201      	adds	r2, #1
 800247a:	50e2      	str	r2, [r4, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <sync_fs+0xe4>)
 800247e:	5ce0      	ldrb	r0, [r4, r3]
 8002480:	003b      	movs	r3, r7
 8002482:	f7ff fda9 	bl	8001fd8 <disk_write>
			fs->fsi_flag = 0;
 8002486:	55a5      	strb	r5, [r4, r6]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8002488:	2200      	movs	r2, #0
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <sync_fs+0xe4>)
 800248c:	0011      	movs	r1, r2
 800248e:	5ce0      	ldrb	r0, [r4, r3]
 8002490:	f7ff fdb0 	bl	8001ff4 <disk_ioctl>
 8002494:	1e43      	subs	r3, r0, #1
 8002496:	4198      	sbcs	r0, r3
 8002498:	b2c0      	uxtb	r0, r0
}
 800249a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800249c:	00000405 	.word	0x00000405
 80024a0:	0000040a 	.word	0x0000040a
 80024a4:	000001ff 	.word	0x000001ff
 80024a8:	0000040c 	.word	0x0000040c
 80024ac:	0000041c 	.word	0x0000041c
 80024b0:	0000042c 	.word	0x0000042c
 80024b4:	00000401 	.word	0x00000401

080024b8 <move_window>:
{
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80024ba:	4f0d      	ldr	r7, [pc, #52]	; (80024f0 <move_window+0x38>)
{
 80024bc:	0004      	movs	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80024be:	59c2      	ldr	r2, [r0, r7]
{
 80024c0:	000e      	movs	r6, r1
	FRESULT res = FR_OK;
 80024c2:	2500      	movs	r5, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80024c4:	428a      	cmp	r2, r1
 80024c6:	d010      	beq.n	80024ea <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 80024c8:	f7ff ff74 	bl	80023b4 <sync_window>
 80024cc:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
 80024ce:	d10c      	bne.n	80024ea <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <move_window+0x3c>)
 80024d2:	0032      	movs	r2, r6
 80024d4:	5ce0      	ldrb	r0, [r4, r3]
 80024d6:	0021      	movs	r1, r4
 80024d8:	2301      	movs	r3, #1
 80024da:	f7ff fd6f 	bl	8001fbc <disk_read>
 80024de:	2800      	cmp	r0, #0
 80024e0:	d002      	beq.n	80024e8 <move_window+0x30>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80024e2:	2601      	movs	r6, #1
				res = FR_DISK_ERR;
 80024e4:	3501      	adds	r5, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80024e6:	4276      	negs	r6, r6
			fs->winsect = sector;
 80024e8:	51e6      	str	r6, [r4, r7]
}
 80024ea:	0028      	movs	r0, r5
 80024ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	0000042c 	.word	0x0000042c
 80024f4:	00000401 	.word	0x00000401

080024f8 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80024f8:	2200      	movs	r2, #0
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <check_fs+0x64>)
{
 80024fc:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80024fe:	54c2      	strb	r2, [r0, r3]
 8002500:	4b17      	ldr	r3, [pc, #92]	; (8002560 <check_fs+0x68>)
 8002502:	3a01      	subs	r2, #1
 8002504:	50c2      	str	r2, [r0, r3]
{
 8002506:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8002508:	f7ff ffd6 	bl	80024b8 <move_window>
		return 3;
 800250c:	2303      	movs	r3, #3
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800250e:	2800      	cmp	r0, #0
 8002510:	d121      	bne.n	8002556 <check_fs+0x5e>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002512:	22ff      	movs	r2, #255	; 0xff
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <check_fs+0x6c>)
 8002516:	0052      	lsls	r2, r2, #1
 8002518:	5ce3      	ldrb	r3, [r4, r3]
 800251a:	5ca2      	ldrb	r2, [r4, r2]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	431a      	orrs	r2, r3
 8002520:	4911      	ldr	r1, [pc, #68]	; (8002568 <check_fs+0x70>)
 8002522:	b212      	sxth	r2, r2
		return 2;
 8002524:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002526:	428a      	cmp	r2, r1
 8002528:	d115      	bne.n	8002556 <check_fs+0x5e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800252a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800252c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800252e:	0412      	lsls	r2, r2, #16
 8002530:	431a      	orrs	r2, r3
 8002532:	490e      	ldr	r1, [pc, #56]	; (800256c <check_fs+0x74>)
 8002534:	0212      	lsls	r2, r2, #8
 8002536:	0a12      	lsrs	r2, r2, #8
		return 0;
 8002538:	0003      	movs	r3, r0
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800253a:	428a      	cmp	r2, r1
 800253c:	d00b      	beq.n	8002556 <check_fs+0x5e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800253e:	3452      	adds	r4, #82	; 0x52
 8002540:	8863      	ldrh	r3, [r4, #2]
 8002542:	8820      	ldrh	r0, [r4, #0]
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	4303      	orrs	r3, r0
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <check_fs+0x78>)
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	189b      	adds	r3, r3, r2
 8002550:	1e58      	subs	r0, r3, #1
 8002552:	4183      	sbcs	r3, r0
		return 3;
 8002554:	b2db      	uxtb	r3, r3
}
 8002556:	0018      	movs	r0, r3
 8002558:	bd10      	pop	{r4, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	00000404 	.word	0x00000404
 8002560:	0000042c 	.word	0x0000042c
 8002564:	000001ff 	.word	0x000001ff
 8002568:	ffffaa55 	.word	0xffffaa55
 800256c:	00544146 	.word	0x00544146
 8002570:	ffabbeba 	.word	0xffabbeba

08002574 <find_volume>:
	*rfs = 0;
 8002574:	2300      	movs	r3, #0
{
 8002576:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8002578:	6003      	str	r3, [r0, #0]
{
 800257a:	b08b      	sub	sp, #44	; 0x2c
 800257c:	0006      	movs	r6, r0
	vol = get_ldnumber(path);
 800257e:	0008      	movs	r0, r1
{
 8002580:	0017      	movs	r7, r2
	vol = get_ldnumber(path);
 8002582:	f7ff fe27 	bl	80021d4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002586:	230b      	movs	r3, #11
	vol = get_ldnumber(path);
 8002588:	1e05      	subs	r5, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 800258a:	db17      	blt.n	80025bc <find_volume+0x48>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800258c:	4baf      	ldr	r3, [pc, #700]	; (800284c <find_volume+0x2d8>)
 800258e:	0082      	lsls	r2, r0, #2
 8002590:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002592:	230c      	movs	r3, #12
 8002594:	2c00      	cmp	r4, #0
 8002596:	d011      	beq.n	80025bc <find_volume+0x48>
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002598:	2380      	movs	r3, #128	; 0x80
	*rfs = fs;							/* Return pointer to the file system object */
 800259a:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	5ce3      	ldrb	r3, [r4, r3]
 80025a0:	4eab      	ldr	r6, [pc, #684]	; (8002850 <find_volume+0x2dc>)
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00d      	beq.n	80025c2 <find_volume+0x4e>
		stat = disk_status(fs->drv);
 80025a6:	5da0      	ldrb	r0, [r4, r6]
 80025a8:	f7ff fce6 	bl	8001f78 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80025ac:	2301      	movs	r3, #1
 80025ae:	4003      	ands	r3, r0
 80025b0:	d107      	bne.n	80025c2 <find_volume+0x4e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80025b2:	2f00      	cmp	r7, #0
 80025b4:	d002      	beq.n	80025bc <find_volume+0x48>
 80025b6:	0742      	lsls	r2, r0, #29
 80025b8:	d500      	bpl.n	80025bc <find_volume+0x48>
				return FR_WRITE_PROTECTED;
 80025ba:	230a      	movs	r3, #10
}
 80025bc:	0018      	movs	r0, r3
 80025be:	b00b      	add	sp, #44	; 0x2c
 80025c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	2200      	movs	r2, #0
 80025c6:	00db      	lsls	r3, r3, #3
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80025c8:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 80025ca:	54e2      	strb	r2, [r4, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80025cc:	55a0      	strb	r0, [r4, r6]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80025ce:	f7ff fce1 	bl	8001f94 <disk_initialize>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80025d2:	2303      	movs	r3, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80025d4:	07c2      	lsls	r2, r0, #31
 80025d6:	d4f1      	bmi.n	80025bc <find_volume+0x48>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80025d8:	2f00      	cmp	r7, #0
 80025da:	d001      	beq.n	80025e0 <find_volume+0x6c>
 80025dc:	0743      	lsls	r3, r0, #29
 80025de:	d4ec      	bmi.n	80025ba <find_volume+0x46>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80025e0:	4b9c      	ldr	r3, [pc, #624]	; (8002854 <find_volume+0x2e0>)
 80025e2:	5da0      	ldrb	r0, [r4, r6]
 80025e4:	18e2      	adds	r2, r4, r3
 80025e6:	2102      	movs	r1, #2
 80025e8:	f7ff fd04 	bl	8001ff4 <disk_ioctl>
 80025ec:	1e06      	subs	r6, r0, #0
 80025ee:	d001      	beq.n	80025f4 <find_volume+0x80>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e7e3      	b.n	80025bc <find_volume+0x48>
 80025f4:	4d97      	ldr	r5, [pc, #604]	; (8002854 <find_volume+0x2e0>)
 80025f6:	4a98      	ldr	r2, [pc, #608]	; (8002858 <find_volume+0x2e4>)
 80025f8:	5b63      	ldrh	r3, [r4, r5]
 80025fa:	189b      	adds	r3, r3, r2
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	b29b      	uxth	r3, r3
 8002600:	0092      	lsls	r2, r2, #2
 8002602:	4293      	cmp	r3, r2
 8002604:	d8f4      	bhi.n	80025f0 <find_volume+0x7c>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8002606:	0001      	movs	r1, r0
 8002608:	0020      	movs	r0, r4
 800260a:	f7ff ff75 	bl	80024f8 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800260e:	2801      	cmp	r0, #1
 8002610:	d12b      	bne.n	800266a <find_volume+0xf6>
 8002612:	0023      	movs	r3, r4
 8002614:	33c7      	adds	r3, #199	; 0xc7
 8002616:	33ff      	adds	r3, #255	; 0xff
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8002618:	1f1a      	subs	r2, r3, #4
 800261a:	7811      	ldrb	r1, [r2, #0]
 800261c:	2200      	movs	r2, #0
 800261e:	4291      	cmp	r1, r2
 8002620:	d009      	beq.n	8002636 <find_volume+0xc2>
 8002622:	7859      	ldrb	r1, [r3, #1]
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	0209      	lsls	r1, r1, #8
 8002628:	4311      	orrs	r1, r2
 800262a:	789a      	ldrb	r2, [r3, #2]
 800262c:	0412      	lsls	r2, r2, #16
 800262e:	4311      	orrs	r1, r2
 8002630:	78da      	ldrb	r2, [r3, #3]
 8002632:	0612      	lsls	r2, r2, #24
 8002634:	430a      	orrs	r2, r1
 8002636:	a906      	add	r1, sp, #24
 8002638:	5072      	str	r2, [r6, r1]
 800263a:	3604      	adds	r6, #4
 800263c:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800263e:	2e10      	cmp	r6, #16
 8002640:	d1ea      	bne.n	8002618 <find_volume+0xa4>
 8002642:	2600      	movs	r6, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002644:	2702      	movs	r7, #2
			bsect = br[i];
 8002646:	ab06      	add	r3, sp, #24
 8002648:	599b      	ldr	r3, [r3, r6]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800264a:	0038      	movs	r0, r7
			bsect = br[i];
 800264c:	9300      	str	r3, [sp, #0]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <find_volume+0xea>
 8002652:	0019      	movs	r1, r3
 8002654:	0020      	movs	r0, r4
 8002656:	f7ff ff4f 	bl	80024f8 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800265a:	2800      	cmp	r0, #0
 800265c:	d00c      	beq.n	8002678 <find_volume+0x104>
 800265e:	3604      	adds	r6, #4
 8002660:	2e10      	cmp	r6, #16
 8002662:	d1f0      	bne.n	8002646 <find_volume+0xd2>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002664:	2803      	cmp	r0, #3
 8002666:	d104      	bne.n	8002672 <find_volume+0xfe>
 8002668:	e7c2      	b.n	80025f0 <find_volume+0x7c>
 800266a:	2803      	cmp	r0, #3
 800266c:	d0c0      	beq.n	80025f0 <find_volume+0x7c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800266e:	2800      	cmp	r0, #0
 8002670:	d001      	beq.n	8002676 <find_volume+0x102>
 8002672:	230d      	movs	r3, #13
 8002674:	e7a2      	b.n	80025bc <find_volume+0x48>
	bsect = 0;
 8002676:	9000      	str	r0, [sp, #0]
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002678:	7b23      	ldrb	r3, [r4, #12]
 800267a:	7ae2      	ldrb	r2, [r4, #11]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	431a      	orrs	r2, r3
 8002680:	9204      	str	r2, [sp, #16]
 8002682:	5b63      	ldrh	r3, [r4, r5]
 8002684:	4293      	cmp	r3, r2
 8002686:	d1f4      	bne.n	8002672 <find_volume+0xfe>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8002688:	7de2      	ldrb	r2, [r4, #23]
 800268a:	7da3      	ldrb	r3, [r4, #22]
 800268c:	0212      	lsls	r2, r2, #8
 800268e:	4313      	orrs	r3, r2
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8002690:	d100      	bne.n	8002694 <find_volume+0x120>
 8002692:	e0c6      	b.n	8002822 <find_volume+0x2ae>
 8002694:	9302      	str	r3, [sp, #8]
	fs->fsize = fasize;
 8002696:	2383      	movs	r3, #131	; 0x83
 8002698:	9a02      	ldr	r2, [sp, #8]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	50e2      	str	r2, [r4, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800269e:	7c26      	ldrb	r6, [r4, #16]
 80026a0:	4b6e      	ldr	r3, [pc, #440]	; (800285c <find_volume+0x2e8>)
 80026a2:	54e6      	strb	r6, [r4, r3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80026a4:	1e73      	subs	r3, r6, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d8e3      	bhi.n	8002672 <find_volume+0xfe>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80026aa:	7b65      	ldrb	r5, [r4, #13]
 80026ac:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <find_volume+0x2ec>)
 80026ae:	54e5      	strb	r5, [r4, r3]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80026b0:	2d00      	cmp	r5, #0
 80026b2:	d0de      	beq.n	8002672 <find_volume+0xfe>
 80026b4:	1e6b      	subs	r3, r5, #1
 80026b6:	421d      	tst	r5, r3
 80026b8:	d1db      	bne.n	8002672 <find_volume+0xfe>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80026ba:	7ca3      	ldrb	r3, [r4, #18]
 80026bc:	7c62      	ldrb	r2, [r4, #17]
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	431a      	orrs	r2, r3
 80026c2:	9201      	str	r2, [sp, #4]
 80026c4:	466a      	mov	r2, sp
 80026c6:	2381      	movs	r3, #129	; 0x81
 80026c8:	8892      	ldrh	r2, [r2, #4]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	52e2      	strh	r2, [r4, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80026ce:	9b04      	ldr	r3, [sp, #16]
 80026d0:	9801      	ldr	r0, [sp, #4]
 80026d2:	095f      	lsrs	r7, r3, #5
 80026d4:	0039      	movs	r1, r7
 80026d6:	f7fd fdb9 	bl	800024c <__aeabi_uidivmod>
 80026da:	b289      	uxth	r1, r1
 80026dc:	2900      	cmp	r1, #0
 80026de:	d1c8      	bne.n	8002672 <find_volume+0xfe>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80026e0:	7d20      	ldrb	r0, [r4, #20]
 80026e2:	7ce3      	ldrb	r3, [r4, #19]
 80026e4:	0200      	lsls	r0, r0, #8
 80026e6:	4303      	orrs	r3, r0
 80026e8:	9303      	str	r3, [sp, #12]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80026ea:	d101      	bne.n	80026f0 <find_volume+0x17c>
 80026ec:	6a23      	ldr	r3, [r4, #32]
 80026ee:	9303      	str	r3, [sp, #12]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80026f0:	7be3      	ldrb	r3, [r4, #15]
 80026f2:	7ba2      	ldrb	r2, [r4, #14]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	431a      	orrs	r2, r3
 80026f8:	9205      	str	r2, [sp, #20]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80026fa:	d0ba      	beq.n	8002672 <find_volume+0xfe>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80026fc:	9b02      	ldr	r3, [sp, #8]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80026fe:	0039      	movs	r1, r7
 8002700:	9801      	ldr	r0, [sp, #4]
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002702:	435e      	muls	r6, r3
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002704:	f7fd fd1c 	bl	8000140 <__udivsi3>
 8002708:	9b05      	ldr	r3, [sp, #20]
 800270a:	b287      	uxth	r7, r0
 800270c:	18ff      	adds	r7, r7, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800270e:	9b03      	ldr	r3, [sp, #12]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002710:	19bf      	adds	r7, r7, r6
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002712:	42bb      	cmp	r3, r7
 8002714:	d3ad      	bcc.n	8002672 <find_volume+0xfe>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002716:	1bd8      	subs	r0, r3, r7
 8002718:	0029      	movs	r1, r5
 800271a:	f7fd fd11 	bl	8000140 <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800271e:	2800      	cmp	r0, #0
 8002720:	d0a7      	beq.n	8002672 <find_volume+0xfe>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002722:	4b50      	ldr	r3, [pc, #320]	; (8002864 <find_volume+0x2f0>)
	fmt = FS_FAT12;
 8002724:	2501      	movs	r5, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002726:	4298      	cmp	r0, r3
 8002728:	d904      	bls.n	8002734 <find_volume+0x1c0>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800272a:	4b4f      	ldr	r3, [pc, #316]	; (8002868 <find_volume+0x2f4>)
 800272c:	4283      	cmp	r3, r0
 800272e:	419b      	sbcs	r3, r3
 8002730:	425d      	negs	r5, r3
 8002732:	3502      	adds	r5, #2
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002734:	4b4d      	ldr	r3, [pc, #308]	; (800286c <find_volume+0x2f8>)
 8002736:	3002      	adds	r0, #2
 8002738:	50e0      	str	r0, [r4, r3]
	fs->volbase = bsect;								/* Volume start sector */
 800273a:	9a00      	ldr	r2, [sp, #0]
 800273c:	4b4c      	ldr	r3, [pc, #304]	; (8002870 <find_volume+0x2fc>)
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800273e:	4694      	mov	ip, r2
	fs->volbase = bsect;								/* Volume start sector */
 8002740:	50e2      	str	r2, [r4, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002742:	2284      	movs	r2, #132	; 0x84
 8002744:	9b05      	ldr	r3, [sp, #20]
 8002746:	00d2      	lsls	r2, r2, #3
 8002748:	4463      	add	r3, ip
 800274a:	50a3      	str	r3, [r4, r2]
	fs->database = bsect + sysect;						/* Data start sector */
 800274c:	4662      	mov	r2, ip
 800274e:	19d7      	adds	r7, r2, r7
 8002750:	2285      	movs	r2, #133	; 0x85
 8002752:	00d2      	lsls	r2, r2, #3
 8002754:	50a7      	str	r7, [r4, r2]
	if (fmt == FS_FAT32) {
 8002756:	2d03      	cmp	r5, #3
 8002758:	d165      	bne.n	8002826 <find_volume+0x2b2>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800275a:	9b01      	ldr	r3, [sp, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d188      	bne.n	8002672 <find_volume+0xfe>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8002760:	4b44      	ldr	r3, [pc, #272]	; (8002874 <find_volume+0x300>)
 8002762:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8002764:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8002766:	50e2      	str	r2, [r4, r3]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002768:	9b04      	ldr	r3, [sp, #16]
 800276a:	9904      	ldr	r1, [sp, #16]
 800276c:	3b01      	subs	r3, #1
 800276e:	1818      	adds	r0, r3, r0
 8002770:	f7fd fce6 	bl	8000140 <__udivsi3>
 8002774:	9b02      	ldr	r3, [sp, #8]
 8002776:	4283      	cmp	r3, r0
 8002778:	d200      	bcs.n	800277c <find_volume+0x208>
 800277a:	e77a      	b.n	8002672 <find_volume+0xfe>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800277c:	2682      	movs	r6, #130	; 0x82
 800277e:	2301      	movs	r3, #1
 8002780:	4a3d      	ldr	r2, [pc, #244]	; (8002878 <find_volume+0x304>)
 8002782:	425b      	negs	r3, r3
 8002784:	00f6      	lsls	r6, r6, #3
	fs->fsi_flag = 0x80;
 8002786:	4f3d      	ldr	r7, [pc, #244]	; (800287c <find_volume+0x308>)
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002788:	51a3      	str	r3, [r4, r6]
 800278a:	50a3      	str	r3, [r4, r2]
	fs->fsi_flag = 0x80;
 800278c:	3381      	adds	r3, #129	; 0x81
 800278e:	55e3      	strb	r3, [r4, r7]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8002790:	2d03      	cmp	r5, #3
 8002792:	d12f      	bne.n	80027f4 <find_volume+0x280>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8002794:	0023      	movs	r3, r4
 8002796:	3331      	adds	r3, #49	; 0x31
 8002798:	781a      	ldrb	r2, [r3, #0]
 800279a:	3b01      	subs	r3, #1
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	0212      	lsls	r2, r2, #8
 80027a0:	4313      	orrs	r3, r2
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d126      	bne.n	80027f4 <find_volume+0x280>
		&& move_window(fs, bsect + 1) == FR_OK)
 80027a6:	9900      	ldr	r1, [sp, #0]
 80027a8:	0020      	movs	r0, r4
 80027aa:	3101      	adds	r1, #1
 80027ac:	f7ff fe84 	bl	80024b8 <move_window>
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d11f      	bne.n	80027f4 <find_volume+0x280>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80027b4:	4b32      	ldr	r3, [pc, #200]	; (8002880 <find_volume+0x30c>)
		fs->fsi_flag = 0;
 80027b6:	55e0      	strb	r0, [r4, r7]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80027b8:	5ce2      	ldrb	r2, [r4, r3]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	5ce3      	ldrb	r3, [r4, r3]
 80027be:	0212      	lsls	r2, r2, #8
 80027c0:	4313      	orrs	r3, r2
 80027c2:	4a30      	ldr	r2, [pc, #192]	; (8002884 <find_volume+0x310>)
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d114      	bne.n	80027f4 <find_volume+0x280>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80027ca:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <find_volume+0x314>)
 80027cc:	6822      	ldr	r2, [r4, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d110      	bne.n	80027f4 <find_volume+0x280>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80027d2:	22f2      	movs	r2, #242	; 0xf2
 80027d4:	0052      	lsls	r2, r2, #1
 80027d6:	4b2d      	ldr	r3, [pc, #180]	; (800288c <find_volume+0x318>)
 80027d8:	58a2      	ldr	r2, [r4, r2]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d10a      	bne.n	80027f4 <find_volume+0x280>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80027de:	23f4      	movs	r3, #244	; 0xf4
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	58e3      	ldr	r3, [r4, r3]
 80027e4:	51a3      	str	r3, [r4, r6]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80027e6:	23f6      	movs	r3, #246	; 0xf6
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	58e3      	ldr	r3, [r4, r3]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	9a00      	ldr	r2, [sp, #0]
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <find_volume+0x304>)
 80027f2:	50e2      	str	r2, [r4, r3]
	fs->fs_type = fmt;	/* FAT sub-type */
 80027f4:	2380      	movs	r3, #128	; 0x80
	fs->id = ++Fsid;	/* File system mount ID */
 80027f6:	4a26      	ldr	r2, [pc, #152]	; (8002890 <find_volume+0x31c>)
	fs->fs_type = fmt;	/* FAT sub-type */
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	54e5      	strb	r5, [r4, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 80027fc:	8813      	ldrh	r3, [r2, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	b29b      	uxth	r3, r3
 8002802:	8013      	strh	r3, [r2, #0]
 8002804:	4a23      	ldr	r2, [pc, #140]	; (8002894 <find_volume+0x320>)
 8002806:	52a3      	strh	r3, [r4, r2]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002808:	4a23      	ldr	r2, [pc, #140]	; (8002898 <find_volume+0x324>)
 800280a:	6813      	ldr	r3, [r2, #0]
 800280c:	429c      	cmp	r4, r3
 800280e:	d101      	bne.n	8002814 <find_volume+0x2a0>
 8002810:	2300      	movs	r3, #0
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	68d1      	ldr	r1, [r2, #12]
 8002816:	2300      	movs	r3, #0
 8002818:	428c      	cmp	r4, r1
 800281a:	d000      	beq.n	800281e <find_volume+0x2aa>
 800281c:	e6ce      	b.n	80025bc <find_volume+0x48>
 800281e:	60d3      	str	r3, [r2, #12]
 8002820:	e6cc      	b.n	80025bc <find_volume+0x48>
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8002822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002824:	e736      	b.n	8002694 <find_volume+0x120>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002826:	9a01      	ldr	r2, [sp, #4]
 8002828:	2a00      	cmp	r2, #0
 800282a:	d100      	bne.n	800282e <find_volume+0x2ba>
 800282c:	e721      	b.n	8002672 <find_volume+0xfe>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800282e:	18f6      	adds	r6, r6, r3
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <find_volume+0x300>)
 8002832:	50e6      	str	r6, [r4, r3]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002834:	2d02      	cmp	r5, #2
 8002836:	d101      	bne.n	800283c <find_volume+0x2c8>
 8002838:	0040      	lsls	r0, r0, #1
 800283a:	e795      	b.n	8002768 <find_volume+0x1f4>
 800283c:	2303      	movs	r3, #3
 800283e:	2201      	movs	r2, #1
 8002840:	4343      	muls	r3, r0
 8002842:	4010      	ands	r0, r2
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	1818      	adds	r0, r3, r0
 8002848:	e78e      	b.n	8002768 <find_volume+0x1f4>
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	200000a4 	.word	0x200000a4
 8002850:	00000401 	.word	0x00000401
 8002854:	0000040a 	.word	0x0000040a
 8002858:	fffffe00 	.word	0xfffffe00
 800285c:	00000403 	.word	0x00000403
 8002860:	00000402 	.word	0x00000402
 8002864:	00000ff5 	.word	0x00000ff5
 8002868:	0000fff5 	.word	0x0000fff5
 800286c:	00000414 	.word	0x00000414
 8002870:	0000041c 	.word	0x0000041c
 8002874:	00000424 	.word	0x00000424
 8002878:	0000040c 	.word	0x0000040c
 800287c:	00000405 	.word	0x00000405
 8002880:	000001ff 	.word	0x000001ff
 8002884:	ffffaa55 	.word	0xffffaa55
 8002888:	41615252 	.word	0x41615252
 800288c:	61417272 	.word	0x61417272
 8002890:	200000c0 	.word	0x200000c0
 8002894:	00000406 	.word	0x00000406
 8002898:	200000a8 	.word	0x200000a8

0800289c <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800289c:	4a07      	ldr	r2, [pc, #28]	; (80028bc <clust2sect+0x20>)
	clst -= 2;
 800289e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80028a0:	5882      	ldr	r2, [r0, r2]
{
 80028a2:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80028a4:	3a02      	subs	r2, #2
 80028a6:	2000      	movs	r0, #0
 80028a8:	4291      	cmp	r1, r2
 80028aa:	d205      	bcs.n	80028b8 <clust2sect+0x1c>
	return clst * fs->csize + fs->database;
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <clust2sect+0x24>)
 80028ae:	5c98      	ldrb	r0, [r3, r2]
 80028b0:	3226      	adds	r2, #38	; 0x26
 80028b2:	4341      	muls	r1, r0
 80028b4:	5898      	ldr	r0, [r3, r2]
 80028b6:	1808      	adds	r0, r1, r0
}
 80028b8:	4770      	bx	lr
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	00000414 	.word	0x00000414
 80028c0:	00000402 	.word	0x00000402

080028c4 <get_fat>:
{
 80028c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 80028c6:	2501      	movs	r5, #1
{
 80028c8:	0004      	movs	r4, r0
 80028ca:	000e      	movs	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80028cc:	42a9      	cmp	r1, r5
 80028ce:	d91f      	bls.n	8002910 <get_fat+0x4c>
 80028d0:	4b40      	ldr	r3, [pc, #256]	; (80029d4 <get_fat+0x110>)
 80028d2:	58c3      	ldr	r3, [r0, r3]
 80028d4:	4299      	cmp	r1, r3
 80028d6:	d21b      	bcs.n	8002910 <get_fat+0x4c>
		switch (fs->fs_type) {
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	5cc3      	ldrb	r3, [r0, r3]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d03e      	beq.n	8002960 <get_fat+0x9c>
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d055      	beq.n	8002992 <get_fat+0xce>
 80028e6:	42ab      	cmp	r3, r5
 80028e8:	d112      	bne.n	8002910 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <get_fat+0x114>)
			bc = (UINT)clst; bc += bc / 2;
 80028ec:	084f      	lsrs	r7, r1, #1
 80028ee:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80028f0:	5ac1      	ldrh	r1, [r0, r3]
 80028f2:	0038      	movs	r0, r7
 80028f4:	f7fd fc24 	bl	8000140 <__udivsi3>
 80028f8:	2384      	movs	r3, #132	; 0x84
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	58e3      	ldr	r3, [r4, r3]
 80028fe:	18c1      	adds	r1, r0, r3
 8002900:	0020      	movs	r0, r4
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f7ff fdd8 	bl	80024b8 <move_window>
 8002908:	2800      	cmp	r0, #0
 800290a:	d003      	beq.n	8002914 <get_fat+0x50>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800290c:	2501      	movs	r5, #1
 800290e:	426d      	negs	r5, r5
}
 8002910:	0028      	movs	r0, r5
 8002912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win.d8[bc++ % SS(fs)];
 8002914:	1c7b      	adds	r3, r7, #1
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <get_fat+0x114>)
 800291a:	0038      	movs	r0, r7
 800291c:	5ae3      	ldrh	r3, [r4, r3]
 800291e:	0019      	movs	r1, r3
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	f7fd fc93 	bl	800024c <__aeabi_uidivmod>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002926:	9800      	ldr	r0, [sp, #0]
			wc = fs->win.d8[bc++ % SS(fs)];
 8002928:	5c67      	ldrb	r7, [r4, r1]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800292a:	9901      	ldr	r1, [sp, #4]
 800292c:	f7fd fc08 	bl	8000140 <__udivsi3>
 8002930:	2384      	movs	r3, #132	; 0x84
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	58e1      	ldr	r1, [r4, r3]
 8002936:	1841      	adds	r1, r0, r1
 8002938:	0020      	movs	r0, r4
 800293a:	f7ff fdbd 	bl	80024b8 <move_window>
 800293e:	2800      	cmp	r0, #0
 8002940:	d1e4      	bne.n	800290c <get_fat+0x48>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002942:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <get_fat+0x114>)
 8002944:	9800      	ldr	r0, [sp, #0]
 8002946:	5ae1      	ldrh	r1, [r4, r3]
 8002948:	f7fd fc80 	bl	800024c <__aeabi_uidivmod>
 800294c:	5c63      	ldrb	r3, [r4, r1]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	431f      	orrs	r7, r3
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002952:	422e      	tst	r6, r5
 8002954:	d001      	beq.n	800295a <get_fat+0x96>
 8002956:	093d      	lsrs	r5, r7, #4
 8002958:	e7da      	b.n	8002910 <get_fat+0x4c>
 800295a:	053f      	lsls	r7, r7, #20
 800295c:	0d3d      	lsrs	r5, r7, #20
 800295e:	e7d7      	b.n	8002910 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002960:	4d1d      	ldr	r5, [pc, #116]	; (80029d8 <get_fat+0x114>)
 8002962:	5b41      	ldrh	r1, [r0, r5]
 8002964:	0030      	movs	r0, r6
 8002966:	0849      	lsrs	r1, r1, #1
 8002968:	f7fd fbea 	bl	8000140 <__udivsi3>
 800296c:	2384      	movs	r3, #132	; 0x84
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	58e1      	ldr	r1, [r4, r3]
 8002972:	1841      	adds	r1, r0, r1
 8002974:	0020      	movs	r0, r4
 8002976:	f7ff fd9f 	bl	80024b8 <move_window>
 800297a:	2800      	cmp	r0, #0
 800297c:	d1c6      	bne.n	800290c <get_fat+0x48>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800297e:	5b61      	ldrh	r1, [r4, r5]
 8002980:	0070      	lsls	r0, r6, #1
 8002982:	f7fd fc63 	bl	800024c <__aeabi_uidivmod>
			val = LD_WORD(p);
 8002986:	1863      	adds	r3, r4, r1
 8002988:	785d      	ldrb	r5, [r3, #1]
 800298a:	5c63      	ldrb	r3, [r4, r1]
 800298c:	022d      	lsls	r5, r5, #8
 800298e:	431d      	orrs	r5, r3
 8002990:	e7be      	b.n	8002910 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002992:	4d11      	ldr	r5, [pc, #68]	; (80029d8 <get_fat+0x114>)
 8002994:	5b41      	ldrh	r1, [r0, r5]
 8002996:	0030      	movs	r0, r6
 8002998:	0889      	lsrs	r1, r1, #2
 800299a:	f7fd fbd1 	bl	8000140 <__udivsi3>
 800299e:	2384      	movs	r3, #132	; 0x84
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	58e1      	ldr	r1, [r4, r3]
 80029a4:	1841      	adds	r1, r0, r1
 80029a6:	0020      	movs	r0, r4
 80029a8:	f7ff fd86 	bl	80024b8 <move_window>
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d1ad      	bne.n	800290c <get_fat+0x48>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80029b0:	5b61      	ldrh	r1, [r4, r5]
 80029b2:	00b0      	lsls	r0, r6, #2
 80029b4:	f7fd fc4a 	bl	800024c <__aeabi_uidivmod>
 80029b8:	1863      	adds	r3, r4, r1
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80029ba:	78dd      	ldrb	r5, [r3, #3]
 80029bc:	789a      	ldrb	r2, [r3, #2]
 80029be:	062d      	lsls	r5, r5, #24
 80029c0:	0412      	lsls	r2, r2, #16
 80029c2:	4315      	orrs	r5, r2
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	5c62      	ldrb	r2, [r4, r1]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	4315      	orrs	r5, r2
 80029cc:	431d      	orrs	r5, r3
 80029ce:	012d      	lsls	r5, r5, #4
 80029d0:	092d      	lsrs	r5, r5, #4
 80029d2:	e79d      	b.n	8002910 <get_fat+0x4c>
 80029d4:	00000414 	.word	0x00000414
 80029d8:	0000040a 	.word	0x0000040a

080029dc <dir_sdi>:
{
 80029dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029de:	0005      	movs	r5, r0
	dp->index = (WORD)idx;	/* Current index */
 80029e0:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <dir_sdi+0xcc>)
{
 80029e2:	000e      	movs	r6, r1
	dp->index = (WORD)idx;	/* Current index */
 80029e4:	52e9      	strh	r1, [r5, r3]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80029e6:	3302      	adds	r3, #2
 80029e8:	58c4      	ldr	r4, [r0, r3]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80029ea:	2c01      	cmp	r4, #1
 80029ec:	d101      	bne.n	80029f2 <dir_sdi+0x16>
		return FR_INT_ERR;
 80029ee:	2002      	movs	r0, #2
}
 80029f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80029f2:	2280      	movs	r2, #128	; 0x80
 80029f4:	00d2      	lsls	r2, r2, #3
 80029f6:	492d      	ldr	r1, [pc, #180]	; (8002aac <dir_sdi+0xd0>)
 80029f8:	5883      	ldr	r3, [r0, r2]
 80029fa:	9101      	str	r1, [sp, #4]
 80029fc:	5858      	ldr	r0, [r3, r1]
 80029fe:	4284      	cmp	r4, r0
 8002a00:	d2f5      	bcs.n	80029ee <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8002a02:	2c00      	cmp	r4, #0
 8002a04:	d12b      	bne.n	8002a5e <dir_sdi+0x82>
 8002a06:	5c9a      	ldrb	r2, [r3, r2]
 8002a08:	2a03      	cmp	r2, #3
 8002a0a:	d103      	bne.n	8002a14 <dir_sdi+0x38>
		clst = dp->fs->dirbase;
 8002a0c:	4a28      	ldr	r2, [pc, #160]	; (8002ab0 <dir_sdi+0xd4>)
 8002a0e:	589a      	ldr	r2, [r3, r2]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002a10:	2a00      	cmp	r2, #0
 8002a12:	d125      	bne.n	8002a60 <dir_sdi+0x84>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8002a14:	2281      	movs	r2, #129	; 0x81
 8002a16:	00d2      	lsls	r2, r2, #3
 8002a18:	5a9a      	ldrh	r2, [r3, r2]
 8002a1a:	4296      	cmp	r6, r2
 8002a1c:	d2e7      	bcs.n	80029ee <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8002a1e:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <dir_sdi+0xd4>)
 8002a20:	589f      	ldr	r7, [r3, r2]
	dp->clust = clst;	/* Current cluster# */
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <dir_sdi+0xd8>)
 8002a24:	50ec      	str	r4, [r5, r3]
	if (!sect) return FR_INT_ERR;
 8002a26:	2f00      	cmp	r7, #0
 8002a28:	d0e1      	beq.n	80029ee <dir_sdi+0x12>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002a2a:	3b0c      	subs	r3, #12
 8002a2c:	58eb      	ldr	r3, [r5, r3]
 8002a2e:	0030      	movs	r0, r6
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	9a00      	ldr	r2, [sp, #0]
 8002a34:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <dir_sdi+0xdc>)
 8002a36:	5ad4      	ldrh	r4, [r2, r3]
 8002a38:	0964      	lsrs	r4, r4, #5
 8002a3a:	0021      	movs	r1, r4
 8002a3c:	f7fd fb80 	bl	8000140 <__udivsi3>
 8002a40:	2382      	movs	r3, #130	; 0x82
 8002a42:	19c7      	adds	r7, r0, r7
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	50ef      	str	r7, [r5, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002a48:	0021      	movs	r1, r4
 8002a4a:	0030      	movs	r0, r6
 8002a4c:	f7fd fbfe 	bl	800024c <__aeabi_uidivmod>
 8002a50:	9b00      	ldr	r3, [sp, #0]
 8002a52:	0149      	lsls	r1, r1, #5
 8002a54:	1859      	adds	r1, r3, r1
 8002a56:	9b01      	ldr	r3, [sp, #4]
	return FR_OK;
 8002a58:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002a5a:	50e9      	str	r1, [r5, r3]
	return FR_OK;
 8002a5c:	e7c8      	b.n	80029f0 <dir_sdi+0x14>
 8002a5e:	0022      	movs	r2, r4
 8002a60:	2780      	movs	r7, #128	; 0x80
		while (idx >= ic) {	/* Follow cluster chain */
 8002a62:	0014      	movs	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8002a64:	4914      	ldr	r1, [pc, #80]	; (8002ab8 <dir_sdi+0xdc>)
 8002a66:	4815      	ldr	r0, [pc, #84]	; (8002abc <dir_sdi+0xe0>)
 8002a68:	5a59      	ldrh	r1, [r3, r1]
 8002a6a:	5c1b      	ldrb	r3, [r3, r0]
 8002a6c:	0949      	lsrs	r1, r1, #5
 8002a6e:	434b      	muls	r3, r1
 8002a70:	00ff      	lsls	r7, r7, #3
 8002a72:	9300      	str	r3, [sp, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8002a74:	9b00      	ldr	r3, [sp, #0]
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002a76:	0021      	movs	r1, r4
 8002a78:	59e8      	ldr	r0, [r5, r7]
		while (idx >= ic) {	/* Follow cluster chain */
 8002a7a:	429e      	cmp	r6, r3
 8002a7c:	d203      	bcs.n	8002a86 <dir_sdi+0xaa>
		sect = clust2sect(dp->fs, clst);
 8002a7e:	f7ff ff0d 	bl	800289c <clust2sect>
 8002a82:	0007      	movs	r7, r0
 8002a84:	e7cd      	b.n	8002a22 <dir_sdi+0x46>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002a86:	f7ff ff1d 	bl	80028c4 <get_fat>
 8002a8a:	0004      	movs	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002a8c:	1c43      	adds	r3, r0, #1
 8002a8e:	d009      	beq.n	8002aa4 <dir_sdi+0xc8>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8002a90:	2801      	cmp	r0, #1
 8002a92:	d9ac      	bls.n	80029ee <dir_sdi+0x12>
 8002a94:	59eb      	ldr	r3, [r5, r7]
 8002a96:	9a01      	ldr	r2, [sp, #4]
 8002a98:	589b      	ldr	r3, [r3, r2]
 8002a9a:	4298      	cmp	r0, r3
 8002a9c:	d2a7      	bcs.n	80029ee <dir_sdi+0x12>
			idx -= ic;
 8002a9e:	9b00      	ldr	r3, [sp, #0]
 8002aa0:	1af6      	subs	r6, r6, r3
 8002aa2:	e7e7      	b.n	8002a74 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	e7a3      	b.n	80029f0 <dir_sdi+0x14>
 8002aa8:	00000406 	.word	0x00000406
 8002aac:	00000414 	.word	0x00000414
 8002ab0:	00000424 	.word	0x00000424
 8002ab4:	0000040c 	.word	0x0000040c
 8002ab8:	0000040a 	.word	0x0000040a
 8002abc:	00000402 	.word	0x00000402

08002ac0 <put_fat>:
{
 8002ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	0004      	movs	r4, r0
 8002ac6:	000d      	movs	r5, r1
 8002ac8:	9201      	str	r2, [sp, #4]
		res = FR_INT_ERR;
 8002aca:	2602      	movs	r6, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002acc:	2901      	cmp	r1, #1
 8002ace:	d955      	bls.n	8002b7c <put_fat+0xbc>
 8002ad0:	4b4f      	ldr	r3, [pc, #316]	; (8002c10 <put_fat+0x150>)
 8002ad2:	58c3      	ldr	r3, [r0, r3]
 8002ad4:	4299      	cmp	r1, r3
 8002ad6:	d251      	bcs.n	8002b7c <put_fat+0xbc>
		switch (fs->fs_type) {
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	5cc3      	ldrb	r3, [r0, r3]
 8002ade:	9302      	str	r3, [sp, #8]
 8002ae0:	42b3      	cmp	r3, r6
 8002ae2:	d056      	beq.n	8002b92 <put_fat+0xd2>
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d100      	bne.n	8002aea <put_fat+0x2a>
 8002ae8:	e071      	b.n	8002bce <put_fat+0x10e>
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d146      	bne.n	8002b7c <put_fat+0xbc>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002aee:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <put_fat+0x154>)
			bc = (UINT)clst; bc += bc / 2;
 8002af0:	084f      	lsrs	r7, r1, #1
 8002af2:	187f      	adds	r7, r7, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002af4:	5ac1      	ldrh	r1, [r0, r3]
 8002af6:	0038      	movs	r0, r7
 8002af8:	f7fd fb22 	bl	8000140 <__udivsi3>
 8002afc:	2384      	movs	r3, #132	; 0x84
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	58e1      	ldr	r1, [r4, r3]
 8002b02:	1841      	adds	r1, r0, r1
 8002b04:	0020      	movs	r0, r4
 8002b06:	f7ff fcd7 	bl	80024b8 <move_window>
 8002b0a:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <put_fat+0x154>)
 8002b0c:	1e06      	subs	r6, r0, #0
 8002b0e:	9303      	str	r3, [sp, #12]
			if (res != FR_OK) break;
 8002b10:	d134      	bne.n	8002b7c <put_fat+0xbc>
			p = &fs->win.d8[bc++ % SS(fs)];
 8002b12:	1c7b      	adds	r3, r7, #1
 8002b14:	9303      	str	r3, [sp, #12]
 8002b16:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <put_fat+0x154>)
 8002b18:	0038      	movs	r0, r7
 8002b1a:	5ae6      	ldrh	r6, [r4, r3]
 8002b1c:	0031      	movs	r1, r6
 8002b1e:	f7fd fb95 	bl	800024c <__aeabi_uidivmod>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002b22:	466b      	mov	r3, sp
 8002b24:	9f02      	ldr	r7, [sp, #8]
 8002b26:	791b      	ldrb	r3, [r3, #4]
 8002b28:	402f      	ands	r7, r5
 8002b2a:	d009      	beq.n	8002b40 <put_fat+0x80>
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	20ff      	movs	r0, #255	; 0xff
 8002b30:	5c63      	ldrb	r3, [r4, r1]
 8002b32:	0100      	lsls	r0, r0, #4
 8002b34:	4013      	ands	r3, r2
 8002b36:	9a01      	ldr	r2, [sp, #4]
 8002b38:	0112      	lsls	r2, r2, #4
 8002b3a:	4002      	ands	r2, r0
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	5463      	strb	r3, [r4, r1]
			fs->wflag = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	4d34      	ldr	r5, [pc, #208]	; (8002c18 <put_fat+0x158>)
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002b46:	0031      	movs	r1, r6
			fs->wflag = 1;
 8002b48:	5563      	strb	r3, [r4, r5]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002b4a:	9803      	ldr	r0, [sp, #12]
 8002b4c:	f7fd faf8 	bl	8000140 <__udivsi3>
 8002b50:	2384      	movs	r3, #132	; 0x84
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	58e1      	ldr	r1, [r4, r3]
 8002b56:	1841      	adds	r1, r0, r1
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f7ff fcad 	bl	80024b8 <move_window>
 8002b5e:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 8002b60:	d10c      	bne.n	8002b7c <put_fat+0xbc>
			p = &fs->win.d8[bc % SS(fs)];
 8002b62:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <put_fat+0x154>)
 8002b64:	9803      	ldr	r0, [sp, #12]
 8002b66:	5ae1      	ldrh	r1, [r4, r3]
 8002b68:	f7fd fb70 	bl	800024c <__aeabi_uidivmod>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002b6c:	2f00      	cmp	r7, #0
 8002b6e:	d008      	beq.n	8002b82 <put_fat+0xc2>
 8002b70:	9b01      	ldr	r3, [sp, #4]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	5463      	strb	r3, [r4, r1]
			fs->wflag = 1;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	5563      	strb	r3, [r4, r5]
}
 8002b7c:	0030      	movs	r0, r6
 8002b7e:	b005      	add	sp, #20
 8002b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002b82:	200f      	movs	r0, #15
 8002b84:	9a01      	ldr	r2, [sp, #4]
 8002b86:	5c63      	ldrb	r3, [r4, r1]
 8002b88:	0a12      	lsrs	r2, r2, #8
 8002b8a:	4383      	bics	r3, r0
 8002b8c:	4002      	ands	r2, r0
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	e7f1      	b.n	8002b76 <put_fat+0xb6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002b92:	4f20      	ldr	r7, [pc, #128]	; (8002c14 <put_fat+0x154>)
 8002b94:	5bc1      	ldrh	r1, [r0, r7]
 8002b96:	0028      	movs	r0, r5
 8002b98:	0849      	lsrs	r1, r1, #1
 8002b9a:	f7fd fad1 	bl	8000140 <__udivsi3>
 8002b9e:	2384      	movs	r3, #132	; 0x84
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	58e1      	ldr	r1, [r4, r3]
 8002ba4:	1841      	adds	r1, r0, r1
 8002ba6:	0020      	movs	r0, r4
 8002ba8:	f7ff fc86 	bl	80024b8 <move_window>
 8002bac:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 8002bae:	d1e5      	bne.n	8002b7c <put_fat+0xbc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002bb0:	5be1      	ldrh	r1, [r4, r7]
 8002bb2:	0068      	lsls	r0, r5, #1
 8002bb4:	f7fd fb4a 	bl	800024c <__aeabi_uidivmod>
			ST_WORD(p, (WORD)val);
 8002bb8:	466b      	mov	r3, sp
 8002bba:	791b      	ldrb	r3, [r3, #4]
 8002bbc:	5463      	strb	r3, [r4, r1]
 8002bbe:	9b01      	ldr	r3, [sp, #4]
 8002bc0:	1861      	adds	r1, r4, r1
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	704b      	strb	r3, [r1, #1]
			fs->wflag = 1;
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <put_fat+0x158>)
 8002bca:	54e2      	strb	r2, [r4, r3]
 8002bcc:	e7d6      	b.n	8002b7c <put_fat+0xbc>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002bce:	4f11      	ldr	r7, [pc, #68]	; (8002c14 <put_fat+0x154>)
 8002bd0:	5bc1      	ldrh	r1, [r0, r7]
 8002bd2:	0028      	movs	r0, r5
 8002bd4:	0889      	lsrs	r1, r1, #2
 8002bd6:	f7fd fab3 	bl	8000140 <__udivsi3>
 8002bda:	2384      	movs	r3, #132	; 0x84
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	58e1      	ldr	r1, [r4, r3]
 8002be0:	1841      	adds	r1, r0, r1
 8002be2:	0020      	movs	r0, r4
 8002be4:	f7ff fc68 	bl	80024b8 <move_window>
 8002be8:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 8002bea:	d1c7      	bne.n	8002b7c <put_fat+0xbc>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002bec:	5be1      	ldrh	r1, [r4, r7]
 8002bee:	00a8      	lsls	r0, r5, #2
 8002bf0:	f7fd fb2c 	bl	800024c <__aeabi_uidivmod>
 8002bf4:	1862      	adds	r2, r4, r1
			val |= LD_DWORD(p) & 0xF0000000;
 8002bf6:	78d3      	ldrb	r3, [r2, #3]
 8002bf8:	9801      	ldr	r0, [sp, #4]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	071b      	lsls	r3, r3, #28
 8002bfe:	4303      	orrs	r3, r0
			ST_DWORD(p, val);
 8002c00:	5463      	strb	r3, [r4, r1]
 8002c02:	0a19      	lsrs	r1, r3, #8
 8002c04:	7051      	strb	r1, [r2, #1]
 8002c06:	0c19      	lsrs	r1, r3, #16
 8002c08:	0e1b      	lsrs	r3, r3, #24
 8002c0a:	7091      	strb	r1, [r2, #2]
 8002c0c:	70d3      	strb	r3, [r2, #3]
 8002c0e:	e7da      	b.n	8002bc6 <put_fat+0x106>
 8002c10:	00000414 	.word	0x00000414
 8002c14:	0000040a 	.word	0x0000040a
 8002c18:	00000404 	.word	0x00000404

08002c1c <create_chain>:
{
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	0005      	movs	r5, r0
 8002c20:	1e0f      	subs	r7, r1, #0
	if (clst == 0) {		/* Create a new chain */
 8002c22:	d109      	bne.n	8002c38 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
 8002c24:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <create_chain+0xb4>)
 8002c26:	58c6      	ldr	r6, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8002c28:	2e00      	cmp	r6, #0
 8002c2a:	d003      	beq.n	8002c34 <create_chain+0x18>
 8002c2c:	4b29      	ldr	r3, [pc, #164]	; (8002cd4 <create_chain+0xb8>)
 8002c2e:	58c3      	ldr	r3, [r0, r3]
 8002c30:	429e      	cmp	r6, r3
 8002c32:	d311      	bcc.n	8002c58 <create_chain+0x3c>
 8002c34:	2601      	movs	r6, #1
 8002c36:	e00f      	b.n	8002c58 <create_chain+0x3c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8002c38:	f7ff fe44 	bl	80028c4 <get_fat>
 8002c3c:	0004      	movs	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8002c3e:	2801      	cmp	r0, #1
 8002c40:	d943      	bls.n	8002cca <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002c42:	1c43      	adds	r3, r0, #1
 8002c44:	d103      	bne.n	8002c4e <create_chain+0x32>
			ncl = 2;
 8002c46:	2401      	movs	r4, #1
 8002c48:	4264      	negs	r4, r4
}
 8002c4a:	0020      	movs	r0, r4
 8002c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002c4e:	4b21      	ldr	r3, [pc, #132]	; (8002cd4 <create_chain+0xb8>)
 8002c50:	003e      	movs	r6, r7
 8002c52:	58eb      	ldr	r3, [r5, r3]
 8002c54:	4298      	cmp	r0, r3
 8002c56:	d3f8      	bcc.n	8002c4a <create_chain+0x2e>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8002c58:	0034      	movs	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <create_chain+0xb8>)
		ncl++;							/* Next cluster */
 8002c5c:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8002c5e:	58eb      	ldr	r3, [r5, r3]
 8002c60:	429c      	cmp	r4, r3
 8002c62:	d304      	bcc.n	8002c6e <create_chain+0x52>
			if (ncl > scl) return 0;	/* No free cluster */
 8002c64:	2e01      	cmp	r6, #1
 8002c66:	d801      	bhi.n	8002c6c <create_chain+0x50>
 8002c68:	2400      	movs	r4, #0
 8002c6a:	e7ee      	b.n	8002c4a <create_chain+0x2e>
			ncl = 2;
 8002c6c:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8002c6e:	0021      	movs	r1, r4
 8002c70:	0028      	movs	r0, r5
 8002c72:	f7ff fe27 	bl	80028c4 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8002c76:	2800      	cmp	r0, #0
 8002c78:	d006      	beq.n	8002c88 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8002c7a:	1c43      	adds	r3, r0, #1
 8002c7c:	d0e3      	beq.n	8002c46 <create_chain+0x2a>
 8002c7e:	2801      	cmp	r0, #1
 8002c80:	d023      	beq.n	8002cca <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 8002c82:	42b4      	cmp	r4, r6
 8002c84:	d1e9      	bne.n	8002c5a <create_chain+0x3e>
 8002c86:	e7ef      	b.n	8002c68 <create_chain+0x4c>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8002c88:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <create_chain+0xbc>)
 8002c8a:	0021      	movs	r1, r4
 8002c8c:	0028      	movs	r0, r5
 8002c8e:	f7ff ff17 	bl	8002ac0 <put_fat>
	if (res == FR_OK && clst != 0) {
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d117      	bne.n	8002cc6 <create_chain+0xaa>
 8002c96:	2f00      	cmp	r7, #0
 8002c98:	d10e      	bne.n	8002cb8 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 8002c9a:	2282      	movs	r2, #130	; 0x82
		fs->last_clust = ncl;			/* Update FSINFO */
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <create_chain+0xb4>)
		if (fs->free_clust != 0xFFFFFFFF) {
 8002c9e:	00d2      	lsls	r2, r2, #3
		fs->last_clust = ncl;			/* Update FSINFO */
 8002ca0:	50ec      	str	r4, [r5, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8002ca2:	58ab      	ldr	r3, [r5, r2]
 8002ca4:	1c59      	adds	r1, r3, #1
 8002ca6:	d0d0      	beq.n	8002c4a <create_chain+0x2e>
			fs->free_clust--;
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	50ab      	str	r3, [r5, r2]
			fs->fsi_flag |= 1;
 8002cac:	2301      	movs	r3, #1
 8002cae:	4a0b      	ldr	r2, [pc, #44]	; (8002cdc <create_chain+0xc0>)
 8002cb0:	5ca9      	ldrb	r1, [r5, r2]
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	54ab      	strb	r3, [r5, r2]
 8002cb6:	e7c8      	b.n	8002c4a <create_chain+0x2e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8002cb8:	0022      	movs	r2, r4
 8002cba:	0039      	movs	r1, r7
 8002cbc:	0028      	movs	r0, r5
 8002cbe:	f7ff feff 	bl	8002ac0 <put_fat>
	if (res == FR_OK) {
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d0e9      	beq.n	8002c9a <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8002cc6:	2801      	cmp	r0, #1
 8002cc8:	d0bd      	beq.n	8002c46 <create_chain+0x2a>
 8002cca:	2401      	movs	r4, #1
 8002ccc:	e7bd      	b.n	8002c4a <create_chain+0x2e>
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	0000040c 	.word	0x0000040c
 8002cd4:	00000414 	.word	0x00000414
 8002cd8:	0fffffff 	.word	0x0fffffff
 8002cdc:	00000405 	.word	0x00000405

08002ce0 <dir_next>:
{
 8002ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
	i = dp->index + 1;
 8002ce2:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <dir_next+0x158>)
{
 8002ce4:	b089      	sub	sp, #36	; 0x24
 8002ce6:	9105      	str	r1, [sp, #20]
	i = dp->index + 1;
 8002ce8:	5ac2      	ldrh	r2, [r0, r3]
{
 8002cea:	0004      	movs	r4, r0
	i = dp->index + 1;
 8002cec:	3201      	adds	r2, #1
 8002cee:	9200      	str	r2, [sp, #0]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002cf0:	466a      	mov	r2, sp
 8002cf2:	8812      	ldrh	r2, [r2, #0]
 8002cf4:	9306      	str	r3, [sp, #24]
 8002cf6:	2a00      	cmp	r2, #0
 8002cf8:	d102      	bne.n	8002d00 <dir_next+0x20>
		return FR_NO_FILE;
 8002cfa:	2004      	movs	r0, #4
}
 8002cfc:	b009      	add	sp, #36	; 0x24
 8002cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002d00:	2682      	movs	r6, #130	; 0x82
 8002d02:	00f6      	lsls	r6, r6, #3
 8002d04:	5985      	ldr	r5, [r0, r6]
 8002d06:	2d00      	cmp	r5, #0
 8002d08:	d0f7      	beq.n	8002cfa <dir_next+0x1a>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	58c3      	ldr	r3, [r0, r3]
 8002d10:	4f4a      	ldr	r7, [pc, #296]	; (8002e3c <dir_next+0x15c>)
 8002d12:	9302      	str	r3, [sp, #8]
 8002d14:	5bdb      	ldrh	r3, [r3, r7]
 8002d16:	9800      	ldr	r0, [sp, #0]
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	f7fd fa95 	bl	800024c <__aeabi_uidivmod>
 8002d22:	9703      	str	r7, [sp, #12]
 8002d24:	2900      	cmp	r1, #0
 8002d26:	d10c      	bne.n	8002d42 <dir_next+0x62>
		if (!dp->clust) {		/* Static table */
 8002d28:	4b45      	ldr	r3, [pc, #276]	; (8002e40 <dir_next+0x160>)
		dp->sect++;					/* Next sector */
 8002d2a:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 8002d2c:	58e7      	ldr	r7, [r4, r3]
		dp->sect++;					/* Next sector */
 8002d2e:	51a5      	str	r5, [r4, r6]
 8002d30:	9304      	str	r3, [sp, #16]
		if (!dp->clust) {		/* Static table */
 8002d32:	2f00      	cmp	r7, #0
 8002d34:	d118      	bne.n	8002d68 <dir_next+0x88>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8002d36:	9a02      	ldr	r2, [sp, #8]
 8002d38:	3b04      	subs	r3, #4
 8002d3a:	5ad3      	ldrh	r3, [r2, r3]
 8002d3c:	9a00      	ldr	r2, [sp, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d2db      	bcs.n	8002cfa <dir_next+0x1a>
	dp->index = (WORD)i;	/* Current index */
 8002d42:	466a      	mov	r2, sp
 8002d44:	9b06      	ldr	r3, [sp, #24]
 8002d46:	8812      	ldrh	r2, [r2, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8002d48:	9800      	ldr	r0, [sp, #0]
	dp->index = (WORD)i;	/* Current index */
 8002d4a:	52e2      	strh	r2, [r4, r3]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	58e5      	ldr	r5, [r4, r3]
 8002d52:	9b03      	ldr	r3, [sp, #12]
 8002d54:	5ae9      	ldrh	r1, [r5, r3]
 8002d56:	0949      	lsrs	r1, r1, #5
 8002d58:	f7fd fa78 	bl	800024c <__aeabi_uidivmod>
 8002d5c:	4b39      	ldr	r3, [pc, #228]	; (8002e44 <dir_next+0x164>)
 8002d5e:	0149      	lsls	r1, r1, #5
 8002d60:	186d      	adds	r5, r5, r1
 8002d62:	50e5      	str	r5, [r4, r3]
	return FR_OK;
 8002d64:	2000      	movs	r0, #0
 8002d66:	e7c9      	b.n	8002cfc <dir_next+0x1c>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002d68:	4e37      	ldr	r6, [pc, #220]	; (8002e48 <dir_next+0x168>)
 8002d6a:	9b02      	ldr	r3, [sp, #8]
 8002d6c:	9901      	ldr	r1, [sp, #4]
 8002d6e:	9800      	ldr	r0, [sp, #0]
 8002d70:	5d9d      	ldrb	r5, [r3, r6]
 8002d72:	f7fd f9e5 	bl	8000140 <__udivsi3>
 8002d76:	3d01      	subs	r5, #1
 8002d78:	4028      	ands	r0, r5
 8002d7a:	9001      	str	r0, [sp, #4]
 8002d7c:	9607      	str	r6, [sp, #28]
 8002d7e:	d1e0      	bne.n	8002d42 <dir_next+0x62>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8002d80:	0039      	movs	r1, r7
 8002d82:	9802      	ldr	r0, [sp, #8]
 8002d84:	f7ff fd9e 	bl	80028c4 <get_fat>
 8002d88:	0006      	movs	r6, r0
				if (clst <= 1) return FR_INT_ERR;
 8002d8a:	2801      	cmp	r0, #1
 8002d8c:	d801      	bhi.n	8002d92 <dir_next+0xb2>
 8002d8e:	2002      	movs	r0, #2
 8002d90:	e7b4      	b.n	8002cfc <dir_next+0x1c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002d92:	1c43      	adds	r3, r0, #1
 8002d94:	d101      	bne.n	8002d9a <dir_next+0xba>
 8002d96:	2001      	movs	r0, #1
 8002d98:	e7b0      	b.n	8002cfc <dir_next+0x1c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	58e0      	ldr	r0, [r4, r3]
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <dir_next+0x164>)
 8002da2:	58c3      	ldr	r3, [r0, r3]
 8002da4:	429e      	cmp	r6, r3
 8002da6:	d32c      	bcc.n	8002e02 <dir_next+0x122>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8002da8:	9b05      	ldr	r3, [sp, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0a5      	beq.n	8002cfa <dir_next+0x1a>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8002dae:	9b04      	ldr	r3, [sp, #16]
 8002db0:	58e1      	ldr	r1, [r4, r3]
 8002db2:	f7ff ff33 	bl	8002c1c <create_chain>
 8002db6:	0006      	movs	r6, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002db8:	2007      	movs	r0, #7
 8002dba:	2e00      	cmp	r6, #0
 8002dbc:	d09e      	beq.n	8002cfc <dir_next+0x1c>
					if (clst == 1) return FR_INT_ERR;
 8002dbe:	2e01      	cmp	r6, #1
 8002dc0:	d0e5      	beq.n	8002d8e <dir_next+0xae>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002dc2:	1c73      	adds	r3, r6, #1
 8002dc4:	d0e7      	beq.n	8002d96 <dir_next+0xb6>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8002dc6:	2580      	movs	r5, #128	; 0x80
 8002dc8:	00ed      	lsls	r5, r5, #3
 8002dca:	5960      	ldr	r0, [r4, r5]
 8002dcc:	f7ff faf2 	bl	80023b4 <sync_window>
 8002dd0:	1e01      	subs	r1, r0, #0
 8002dd2:	d1e0      	bne.n	8002d96 <dir_next+0xb6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8002dd4:	5963      	ldr	r3, [r4, r5]
 8002dd6:	9a03      	ldr	r2, [sp, #12]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	5a9a      	ldrh	r2, [r3, r2]
 8002ddc:	f7ff f921 	bl	8002022 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8002de0:	5967      	ldr	r7, [r4, r5]
 8002de2:	0031      	movs	r1, r6
 8002de4:	0038      	movs	r0, r7
 8002de6:	f7ff fd59 	bl	800289c <clust2sect>
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <dir_next+0x16c>)
 8002dec:	50f8      	str	r0, [r7, r3]
 8002dee:	001f      	movs	r7, r3
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002df0:	5960      	ldr	r0, [r4, r5]
 8002df2:	9b07      	ldr	r3, [sp, #28]
 8002df4:	9a01      	ldr	r2, [sp, #4]
 8002df6:	5cc3      	ldrb	r3, [r0, r3]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d30e      	bcc.n	8002e1a <dir_next+0x13a>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8002dfc:	59c3      	ldr	r3, [r0, r7]
 8002dfe:	1a9d      	subs	r5, r3, r2
 8002e00:	51c5      	str	r5, [r0, r7]
				dp->clust = clst;				/* Initialize data for new cluster */
 8002e02:	9b04      	ldr	r3, [sp, #16]
				dp->sect = clust2sect(dp->fs, clst);
 8002e04:	0031      	movs	r1, r6
				dp->clust = clst;				/* Initialize data for new cluster */
 8002e06:	50e6      	str	r6, [r4, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	58e0      	ldr	r0, [r4, r3]
 8002e0e:	f7ff fd45 	bl	800289c <clust2sect>
 8002e12:	2382      	movs	r3, #130	; 0x82
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	50e0      	str	r0, [r4, r3]
 8002e18:	e793      	b.n	8002d42 <dir_next+0x62>
						dp->fs->wflag = 1;
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <dir_next+0x170>)
 8002e1e:	54c2      	strb	r2, [r0, r3]
 8002e20:	f7ff fa96 	bl	8002350 <sync_window.part.1>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d1b6      	bne.n	8002d96 <dir_next+0xb6>
						dp->fs->winsect++;
 8002e28:	5962      	ldr	r2, [r4, r5]
 8002e2a:	59d3      	ldr	r3, [r2, r7]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	51d3      	str	r3, [r2, r7]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002e30:	9b01      	ldr	r3, [sp, #4]
 8002e32:	3301      	adds	r3, #1
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	e7db      	b.n	8002df0 <dir_next+0x110>
 8002e38:	00000406 	.word	0x00000406
 8002e3c:	0000040a 	.word	0x0000040a
 8002e40:	0000040c 	.word	0x0000040c
 8002e44:	00000414 	.word	0x00000414
 8002e48:	00000402 	.word	0x00000402
 8002e4c:	0000042c 	.word	0x0000042c
 8002e50:	00000404 	.word	0x00000404

08002e54 <dir_find.part.6>:
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002e54:	2201      	movs	r2, #1
 8002e56:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <dir_find.part.6+0x144>)
 8002e58:	4252      	negs	r2, r2
FRESULT dir_find (
 8002e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002e5c:	52c2      	strh	r2, [r0, r3]
 8002e5e:	3201      	adds	r2, #1
 8002e60:	32ff      	adds	r2, #255	; 0xff
FRESULT dir_find (
 8002e62:	0005      	movs	r5, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002e64:	0014      	movs	r4, r2
FRESULT dir_find (
 8002e66:	b087      	sub	sp, #28
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002e68:	9202      	str	r2, [sp, #8]
 8002e6a:	9303      	str	r3, [sp, #12]
		res = move_window(dp->fs, dp->sect);
 8002e6c:	2382      	movs	r3, #130	; 0x82
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	58e9      	ldr	r1, [r5, r3]
 8002e72:	3b10      	subs	r3, #16
 8002e74:	58e8      	ldr	r0, [r5, r3]
 8002e76:	f7ff fb1f 	bl	80024b8 <move_window>
 8002e7a:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
 8002e7c:	d000      	beq.n	8002e80 <dir_find.part.6+0x2c>
 8002e7e:	e085      	b.n	8002f8c <dir_find.part.6+0x138>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8002e80:	4b46      	ldr	r3, [pc, #280]	; (8002f9c <dir_find.part.6+0x148>)
 8002e82:	58ee      	ldr	r6, [r5, r3]
		c = dir[DIR_Name];
 8002e84:	7833      	ldrb	r3, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d100      	bne.n	8002e8c <dir_find.part.6+0x38>
 8002e8a:	e082      	b.n	8002f92 <dir_find.part.6+0x13e>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8002e8c:	2be5      	cmp	r3, #229	; 0xe5
 8002e8e:	d006      	beq.n	8002e9e <dir_find.part.6+0x4a>
		a = dir[DIR_Attr] & AM_MASK;
 8002e90:	223f      	movs	r2, #63	; 0x3f
 8002e92:	7af1      	ldrb	r1, [r6, #11]
 8002e94:	400a      	ands	r2, r1
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8002e96:	0709      	lsls	r1, r1, #28
 8002e98:	d506      	bpl.n	8002ea8 <dir_find.part.6+0x54>
 8002e9a:	2a0f      	cmp	r2, #15
 8002e9c:	d006      	beq.n	8002eac <dir_find.part.6+0x58>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	9a03      	ldr	r2, [sp, #12]
 8002ea2:	425b      	negs	r3, r3
 8002ea4:	52ab      	strh	r3, [r5, r2]
 8002ea6:	e04e      	b.n	8002f46 <dir_find.part.6+0xf2>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8002ea8:	2a0f      	cmp	r2, #15
 8002eaa:	d158      	bne.n	8002f5e <dir_find.part.6+0x10a>
				if (dp->lfn) {
 8002eac:	2284      	movs	r2, #132	; 0x84
 8002eae:	00d2      	lsls	r2, r2, #3
 8002eb0:	58aa      	ldr	r2, [r5, r2]
 8002eb2:	9201      	str	r2, [sp, #4]
 8002eb4:	2a00      	cmp	r2, #0
 8002eb6:	d047      	beq.n	8002f48 <dir_find.part.6+0xf4>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8002eb8:	2240      	movs	r2, #64	; 0x40
 8002eba:	4213      	tst	r3, r2
 8002ebc:	d041      	beq.n	8002f42 <dir_find.part.6+0xee>
						c &= ~LLEF; ord = c;	/* LFN start order */
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	001c      	movs	r4, r3
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8002ec2:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <dir_find.part.6+0x14c>)
						sum = dir[LDIR_Chksum];
 8002ec4:	7b71      	ldrb	r1, [r6, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8002ec6:	5aeb      	ldrh	r3, [r5, r3]
 8002ec8:	9a03      	ldr	r2, [sp, #12]
						sum = dir[LDIR_Chksum];
 8002eca:	9102      	str	r1, [sp, #8]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8002ecc:	52ab      	strh	r3, [r5, r2]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8002ece:	7b73      	ldrb	r3, [r6, #13]
 8002ed0:	9a02      	ldr	r2, [sp, #8]
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d137      	bne.n	8002f46 <dir_find.part.6+0xf2>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8002ed6:	2240      	movs	r2, #64	; 0x40
 8002ed8:	270d      	movs	r7, #13
 8002eda:	7833      	ldrb	r3, [r6, #0]
 8002edc:	4393      	bics	r3, r2
 8002ede:	3b01      	subs	r3, #1
	s = 0; wc = 1;
 8002ee0:	2200      	movs	r2, #0
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8002ee2:	435f      	muls	r7, r3
	s = 0; wc = 1;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	9200      	str	r2, [sp, #0]
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8002ee8:	4a2e      	ldr	r2, [pc, #184]	; (8002fa4 <dir_find.part.6+0x150>)
 8002eea:	9900      	ldr	r1, [sp, #0]
 8002eec:	5c89      	ldrb	r1, [r1, r2]
 8002eee:	1872      	adds	r2, r6, r1
 8002ef0:	7852      	ldrb	r2, [r2, #1]
 8002ef2:	5c70      	ldrb	r0, [r6, r1]
 8002ef4:	0212      	lsls	r2, r2, #8
 8002ef6:	4310      	orrs	r0, r2
		if (wc) {	/* Last character has not been processed */
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02c      	beq.n	8002f56 <dir_find.part.6+0x102>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8002efc:	f000 fed4 	bl	8003ca8 <ff_wtoupper>
 8002f00:	9005      	str	r0, [sp, #20]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8002f02:	2ffe      	cmp	r7, #254	; 0xfe
 8002f04:	d81f      	bhi.n	8002f46 <dir_find.part.6+0xf2>
 8002f06:	1c7b      	adds	r3, r7, #1
 8002f08:	9304      	str	r3, [sp, #16]
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	007f      	lsls	r7, r7, #1
 8002f0e:	5af8      	ldrh	r0, [r7, r3]
 8002f10:	f000 feca 	bl	8003ca8 <ff_wtoupper>
 8002f14:	9a05      	ldr	r2, [sp, #20]
 8002f16:	0003      	movs	r3, r0
 8002f18:	4282      	cmp	r2, r0
 8002f1a:	d114      	bne.n	8002f46 <dir_find.part.6+0xf2>
 8002f1c:	9f04      	ldr	r7, [sp, #16]
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8002f1e:	9a00      	ldr	r2, [sp, #0]
 8002f20:	3201      	adds	r2, #1
 8002f22:	9200      	str	r2, [sp, #0]
 8002f24:	2a0d      	cmp	r2, #13
 8002f26:	d1df      	bne.n	8002ee8 <dir_find.part.6+0x94>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8002f28:	7832      	ldrb	r2, [r6, #0]
 8002f2a:	0652      	lsls	r2, r2, #25
 8002f2c:	d506      	bpl.n	8002f3c <dir_find.part.6+0xe8>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <dir_find.part.6+0xe8>
 8002f32:	9a01      	ldr	r2, [sp, #4]
 8002f34:	007b      	lsls	r3, r7, #1
 8002f36:	5a9b      	ldrh	r3, [r3, r2]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d104      	bne.n	8002f46 <dir_find.part.6+0xf2>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8002f3c:	3c01      	subs	r4, #1
 8002f3e:	b2e4      	uxtb	r4, r4
 8002f40:	e002      	b.n	8002f48 <dir_find.part.6+0xf4>
 8002f42:	42a3      	cmp	r3, r4
 8002f44:	d0c3      	beq.n	8002ece <dir_find.part.6+0x7a>
 8002f46:	24ff      	movs	r4, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8002f48:	2100      	movs	r1, #0
 8002f4a:	0028      	movs	r0, r5
 8002f4c:	f7ff fec8 	bl	8002ce0 <dir_next>
 8002f50:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
 8002f52:	d08b      	beq.n	8002e6c <dir_find.part.6+0x18>
 8002f54:	e01a      	b.n	8002f8c <dir_find.part.6+0x138>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8002f56:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <dir_find.part.6+0x154>)
 8002f58:	4290      	cmp	r0, r2
 8002f5a:	d0e0      	beq.n	8002f1e <dir_find.part.6+0xca>
 8002f5c:	e7f3      	b.n	8002f46 <dir_find.part.6+0xf2>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8002f5e:	2c00      	cmp	r4, #0
 8002f60:	d105      	bne.n	8002f6e <dir_find.part.6+0x11a>
 8002f62:	0030      	movs	r0, r6
 8002f64:	f7ff f928 	bl	80021b8 <sum_sfn>
 8002f68:	9b02      	ldr	r3, [sp, #8]
 8002f6a:	4298      	cmp	r0, r3
 8002f6c:	d00e      	beq.n	8002f8c <dir_find.part.6+0x138>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8002f6e:	2383      	movs	r3, #131	; 0x83
 8002f70:	2101      	movs	r1, #1
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	58ea      	ldr	r2, [r5, r3]
 8002f76:	7ad3      	ldrb	r3, [r2, #11]
 8002f78:	400b      	ands	r3, r1
 8002f7a:	d190      	bne.n	8002e9e <dir_find.part.6+0x4a>
 8002f7c:	1c58      	adds	r0, r3, #1
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8002f7e:	5cf1      	ldrb	r1, [r6, r3]
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	4299      	cmp	r1, r3
 8002f84:	d18b      	bne.n	8002e9e <dir_find.part.6+0x4a>
 8002f86:	0003      	movs	r3, r0
 8002f88:	280b      	cmp	r0, #11
 8002f8a:	d1f7      	bne.n	8002f7c <dir_find.part.6+0x128>
}
 8002f8c:	0038      	movs	r0, r7
 8002f8e:	b007      	add	sp, #28
 8002f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002f92:	2704      	movs	r7, #4
 8002f94:	e7fa      	b.n	8002f8c <dir_find.part.6+0x138>
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	00000424 	.word	0x00000424
 8002f9c:	00000414 	.word	0x00000414
 8002fa0:	00000406 	.word	0x00000406
 8002fa4:	08005538 	.word	0x08005538
 8002fa8:	0000ffff 	.word	0x0000ffff

08002fac <follow_path>:
{
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8002fae:	780b      	ldrb	r3, [r1, #0]
{
 8002fb0:	b087      	sub	sp, #28
 8002fb2:	0006      	movs	r6, r0
 8002fb4:	9101      	str	r1, [sp, #4]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8002fb6:	2b2f      	cmp	r3, #47	; 0x2f
 8002fb8:	d001      	beq.n	8002fbe <follow_path+0x12>
 8002fba:	2b5c      	cmp	r3, #92	; 0x5c
 8002fbc:	d102      	bne.n	8002fc4 <follow_path+0x18>
		path++;
 8002fbe:	9b01      	ldr	r3, [sp, #4]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	9301      	str	r3, [sp, #4]
	dp->sclust = 0;							/* Always start from the root directory */
 8002fc4:	2381      	movs	r3, #129	; 0x81
 8002fc6:	2400      	movs	r4, #0
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	50f4      	str	r4, [r6, r3]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002fcc:	9b01      	ldr	r3, [sp, #4]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b1f      	cmp	r3, #31
 8002fd2:	d80a      	bhi.n	8002fea <follow_path+0x3e>
		res = dir_sdi(dp, 0);
 8002fd4:	0021      	movs	r1, r4
 8002fd6:	0030      	movs	r0, r6
 8002fd8:	f7ff fd00 	bl	80029dc <dir_sdi>
		dp->dir = 0;
 8002fdc:	4b98      	ldr	r3, [pc, #608]	; (8003240 <follow_path+0x294>)
 8002fde:	50f4      	str	r4, [r6, r3]
}
 8002fe0:	b007      	add	sp, #28
 8002fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8002fe4:	9b01      	ldr	r3, [sp, #4]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	9b01      	ldr	r3, [sp, #4]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b2f      	cmp	r3, #47	; 0x2f
 8002ff0:	d0f8      	beq.n	8002fe4 <follow_path+0x38>
 8002ff2:	2b5c      	cmp	r3, #92	; 0x5c
 8002ff4:	d0f6      	beq.n	8002fe4 <follow_path+0x38>
	lfn = dp->lfn;
 8002ff6:	2384      	movs	r3, #132	; 0x84
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	58f3      	ldr	r3, [r6, r3]
 8002ffe:	9305      	str	r3, [sp, #20]
		w = p[si++];					/* Get a character */
 8003000:	9b01      	ldr	r3, [sp, #4]
 8003002:	0027      	movs	r7, r4
 8003004:	5d18      	ldrb	r0, [r3, r4]
 8003006:	1c65      	adds	r5, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8003008:	281f      	cmp	r0, #31
 800300a:	d91b      	bls.n	8003044 <follow_path+0x98>
 800300c:	282f      	cmp	r0, #47	; 0x2f
 800300e:	d019      	beq.n	8003044 <follow_path+0x98>
 8003010:	285c      	cmp	r0, #92	; 0x5c
 8003012:	d017      	beq.n	8003044 <follow_path+0x98>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8003014:	2cff      	cmp	r4, #255	; 0xff
 8003016:	d00e      	beq.n	8003036 <follow_path+0x8a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003018:	2101      	movs	r1, #1
 800301a:	f000 fe27 	bl	8003c6c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800301e:	2800      	cmp	r0, #0
 8003020:	d009      	beq.n	8003036 <follow_path+0x8a>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8003022:	287f      	cmp	r0, #127	; 0x7f
 8003024:	d809      	bhi.n	800303a <follow_path+0x8e>
 8003026:	2300      	movs	r3, #0
	while (*str && *str != chr) str++;
 8003028:	4986      	ldr	r1, [pc, #536]	; (8003244 <follow_path+0x298>)
 800302a:	5cca      	ldrb	r2, [r1, r3]
 800302c:	2a00      	cmp	r2, #0
 800302e:	d004      	beq.n	800303a <follow_path+0x8e>
 8003030:	3301      	adds	r3, #1
 8003032:	4282      	cmp	r2, r0
 8003034:	d1f9      	bne.n	800302a <follow_path+0x7e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003036:	2006      	movs	r0, #6
 8003038:	e7d2      	b.n	8002fe0 <follow_path+0x34>
		lfn[di++] = w;					/* Store the Unicode character */
 800303a:	9b05      	ldr	r3, [sp, #20]
 800303c:	0064      	lsls	r4, r4, #1
 800303e:	5318      	strh	r0, [r3, r4]
 8003040:	002c      	movs	r4, r5
 8003042:	e7dd      	b.n	8003000 <follow_path+0x54>
	*path = &p[si];						/* Return pointer to the next segment */
 8003044:	9b01      	ldr	r3, [sp, #4]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003046:	2400      	movs	r4, #0
	*path = &p[si];						/* Return pointer to the next segment */
 8003048:	195b      	adds	r3, r3, r5
 800304a:	9301      	str	r3, [sp, #4]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800304c:	231f      	movs	r3, #31
 800304e:	4283      	cmp	r3, r0
 8003050:	4164      	adcs	r4, r4
 8003052:	00a4      	lsls	r4, r4, #2
	while (di) {						/* Strip trailing spaces and dots */
 8003054:	2f00      	cmp	r7, #0
 8003056:	d0ee      	beq.n	8003036 <follow_path+0x8a>
 8003058:	9a05      	ldr	r2, [sp, #20]
 800305a:	007b      	lsls	r3, r7, #1
 800305c:	18d3      	adds	r3, r2, r3
		w = lfn[di - 1];
 800305e:	1e9a      	subs	r2, r3, #2
 8003060:	8812      	ldrh	r2, [r2, #0]
		if (w != ' ' && w != '.') break;
 8003062:	2a20      	cmp	r2, #32
 8003064:	d002      	beq.n	800306c <follow_path+0xc0>
 8003066:	2a2e      	cmp	r2, #46	; 0x2e
 8003068:	d000      	beq.n	800306c <follow_path+0xc0>
 800306a:	e086      	b.n	800317a <follow_path+0x1ce>
		di--;
 800306c:	3f01      	subs	r7, #1
 800306e:	e7f1      	b.n	8003054 <follow_path+0xa8>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003070:	3301      	adds	r3, #1
 8003072:	9905      	ldr	r1, [sp, #20]
 8003074:	005a      	lsls	r2, r3, #1
 8003076:	5a8a      	ldrh	r2, [r1, r2]
 8003078:	2a20      	cmp	r2, #32
 800307a:	d0f9      	beq.n	8003070 <follow_path+0xc4>
 800307c:	2a2e      	cmp	r2, #46	; 0x2e
 800307e:	d0f7      	beq.n	8003070 <follow_path+0xc4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <follow_path+0xde>
 8003084:	2203      	movs	r2, #3
 8003086:	4314      	orrs	r4, r2
 8003088:	b2e4      	uxtb	r4, r4
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800308a:	007a      	lsls	r2, r7, #1
 800308c:	9905      	ldr	r1, [sp, #20]
 800308e:	3a02      	subs	r2, #2
 8003090:	5a8a      	ldrh	r2, [r1, r2]
 8003092:	2a2e      	cmp	r2, #46	; 0x2e
 8003094:	d002      	beq.n	800309c <follow_path+0xf0>
 8003096:	3f01      	subs	r7, #1
 8003098:	2f00      	cmp	r7, #0
 800309a:	d1f6      	bne.n	800308a <follow_path+0xde>
		dp->fn[i++] = (BYTE)w;
 800309c:	2208      	movs	r2, #8
 800309e:	9202      	str	r2, [sp, #8]
 80030a0:	2200      	movs	r2, #0
 80030a2:	0015      	movs	r5, r2
 80030a4:	9204      	str	r2, [sp, #16]
		w = lfn[si++];					/* Get an LFN character */
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	9203      	str	r2, [sp, #12]
 80030aa:	9a05      	ldr	r2, [sp, #20]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d079      	beq.n	80031a8 <follow_path+0x1fc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80030b4:	2820      	cmp	r0, #32
 80030b6:	d004      	beq.n	80030c2 <follow_path+0x116>
 80030b8:	282e      	cmp	r0, #46	; 0x2e
 80030ba:	d107      	bne.n	80030cc <follow_path+0x120>
 80030bc:	9b03      	ldr	r3, [sp, #12]
 80030be:	42bb      	cmp	r3, r7
 80030c0:	d066      	beq.n	8003190 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
 80030c2:	2303      	movs	r3, #3
 80030c4:	431c      	orrs	r4, r3
 80030c6:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)w;
 80030c8:	9b03      	ldr	r3, [sp, #12]
 80030ca:	e7ec      	b.n	80030a6 <follow_path+0xfa>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80030cc:	9b04      	ldr	r3, [sp, #16]
 80030ce:	9a02      	ldr	r2, [sp, #8]
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d261      	bcs.n	8003198 <follow_path+0x1ec>
 80030d4:	9b03      	ldr	r3, [sp, #12]
 80030d6:	42bb      	cmp	r3, r7
 80030d8:	d114      	bne.n	8003104 <follow_path+0x158>
			if (ni == 11) {				/* Long extension */
 80030da:	9b02      	ldr	r3, [sp, #8]
 80030dc:	2b0b      	cmp	r3, #11
 80030de:	d109      	bne.n	80030f4 <follow_path+0x148>
 80030e0:	e05d      	b.n	800319e <follow_path+0x1f2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80030e2:	9b03      	ldr	r3, [sp, #12]
 80030e4:	42bb      	cmp	r3, r7
 80030e6:	d005      	beq.n	80030f4 <follow_path+0x148>
 80030e8:	2303      	movs	r3, #3
 80030ea:	431c      	orrs	r4, r3
			if (si > di) break;			/* No extension */
 80030ec:	9b03      	ldr	r3, [sp, #12]
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80030ee:	b2e4      	uxtb	r4, r4
			if (si > di) break;			/* No extension */
 80030f0:	42bb      	cmp	r3, r7
 80030f2:	d859      	bhi.n	80031a8 <follow_path+0x1fc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80030f4:	230b      	movs	r3, #11
			b <<= 2; continue;
 80030f6:	00ad      	lsls	r5, r5, #2
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80030f8:	9302      	str	r3, [sp, #8]
			b <<= 2; continue;
 80030fa:	b2ed      	uxtb	r5, r5
 80030fc:	9703      	str	r7, [sp, #12]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80030fe:	3b03      	subs	r3, #3
		dp->fn[i++] = (BYTE)w;
 8003100:	9304      	str	r3, [sp, #16]
 8003102:	e7e1      	b.n	80030c8 <follow_path+0x11c>
		if (w >= 0x80) {				/* Non ASCII character */
 8003104:	287f      	cmp	r0, #127	; 0x7f
 8003106:	d90f      	bls.n	8003128 <follow_path+0x17c>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003108:	2100      	movs	r1, #0
 800310a:	f000 fdaf 	bl	8003c6c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800310e:	2300      	movs	r3, #0
 8003110:	4298      	cmp	r0, r3
 8003112:	d003      	beq.n	800311c <follow_path+0x170>
 8003114:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <follow_path+0x29c>)
 8003116:	1818      	adds	r0, r3, r0
 8003118:	3880      	subs	r0, #128	; 0x80
 800311a:	7803      	ldrb	r3, [r0, #0]
 800311c:	b298      	uxth	r0, r3
			cf |= NS_LFN;				/* Force create LFN entry */
 800311e:	2302      	movs	r3, #2
 8003120:	431c      	orrs	r4, r3
 8003122:	b2e4      	uxtb	r4, r4
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003124:	2800      	cmp	r0, #0
 8003126:	d007      	beq.n	8003138 <follow_path+0x18c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003128:	2300      	movs	r3, #0
	while (*str && *str != chr) str++;
 800312a:	4948      	ldr	r1, [pc, #288]	; (800324c <follow_path+0x2a0>)
 800312c:	5cca      	ldrb	r2, [r1, r3]
 800312e:	2a00      	cmp	r2, #0
 8003130:	d078      	beq.n	8003224 <follow_path+0x278>
 8003132:	3301      	adds	r3, #1
 8003134:	4282      	cmp	r2, r0
 8003136:	d1f9      	bne.n	800312c <follow_path+0x180>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003138:	2303      	movs	r3, #3
 800313a:	205f      	movs	r0, #95	; 0x5f
 800313c:	431c      	orrs	r4, r3
 800313e:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)w;
 8003140:	2383      	movs	r3, #131	; 0x83
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	58f3      	ldr	r3, [r6, r3]
 8003146:	9a04      	ldr	r2, [sp, #16]
 8003148:	5498      	strb	r0, [r3, r2]
 800314a:	0013      	movs	r3, r2
 800314c:	3301      	adds	r3, #1
 800314e:	e7d7      	b.n	8003100 <follow_path+0x154>
					b |= 2;
 8003150:	2302      	movs	r3, #2
 8003152:	431d      	orrs	r5, r3
 8003154:	e7f4      	b.n	8003140 <follow_path+0x194>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003156:	075b      	lsls	r3, r3, #29
 8003158:	d500      	bpl.n	800315c <follow_path+0x1b0>
 800315a:	e741      	b.n	8002fe0 <follow_path+0x34>
			dir = dp->dir;						/* Follow the sub-directory */
 800315c:	4b38      	ldr	r3, [pc, #224]	; (8003240 <follow_path+0x294>)
 800315e:	58f1      	ldr	r1, [r6, r3]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8003160:	7acb      	ldrb	r3, [r1, #11]
 8003162:	06db      	lsls	r3, r3, #27
 8003164:	d55c      	bpl.n	8003220 <follow_path+0x274>
			dp->sclust = ld_clust(dp->fs, dir);
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	58f2      	ldr	r2, [r6, r3]
 800316c:	5cd0      	ldrb	r0, [r2, r3]
 800316e:	f7ff f8df 	bl	8002330 <ld_clust.isra.0>
 8003172:	2381      	movs	r3, #129	; 0x81
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	50f0      	str	r0, [r6, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003178:	e737      	b.n	8002fea <follow_path+0x3e>
	lfn[di] = 0;						/* LFN is created */
 800317a:	2500      	movs	r5, #0
 800317c:	801d      	strh	r5, [r3, #0]
	mem_set(dp->fn, ' ', 11);
 800317e:	2383      	movs	r3, #131	; 0x83
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	58f0      	ldr	r0, [r6, r3]
 8003184:	220b      	movs	r2, #11
 8003186:	2120      	movs	r1, #32
 8003188:	f7fe ff4b 	bl	8002022 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800318c:	002b      	movs	r3, r5
 800318e:	e770      	b.n	8003072 <follow_path+0xc6>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003190:	9b04      	ldr	r3, [sp, #16]
 8003192:	9a02      	ldr	r2, [sp, #8]
 8003194:	4293      	cmp	r3, r2
 8003196:	d3a0      	bcc.n	80030da <follow_path+0x12e>
			if (ni == 11) {				/* Long extension */
 8003198:	9b02      	ldr	r3, [sp, #8]
 800319a:	2b0b      	cmp	r3, #11
 800319c:	d1a1      	bne.n	80030e2 <follow_path+0x136>
				cf |= NS_LOSS | NS_LFN; break;
 800319e:	2303      	movs	r3, #3
 80031a0:	431c      	orrs	r4, r3
 80031a2:	3308      	adds	r3, #8
 80031a4:	b2e4      	uxtb	r4, r4
 80031a6:	9302      	str	r3, [sp, #8]
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80031a8:	2383      	movs	r3, #131	; 0x83
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	58f3      	ldr	r3, [r6, r3]
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	2ae5      	cmp	r2, #229	; 0xe5
 80031b2:	d101      	bne.n	80031b8 <follow_path+0x20c>
 80031b4:	3ae0      	subs	r2, #224	; 0xe0
 80031b6:	701a      	strb	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 80031b8:	9b02      	ldr	r3, [sp, #8]
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d101      	bne.n	80031c2 <follow_path+0x216>
 80031be:	00ad      	lsls	r5, r5, #2
 80031c0:	b2ed      	uxtb	r5, r5
 80031c2:	230c      	movs	r3, #12
 80031c4:	402b      	ands	r3, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d002      	beq.n	80031d0 <follow_path+0x224>
 80031ca:	43ea      	mvns	r2, r5
 80031cc:	0792      	lsls	r2, r2, #30
 80031ce:	d102      	bne.n	80031d6 <follow_path+0x22a>
		cf |= NS_LFN;
 80031d0:	2202      	movs	r2, #2
 80031d2:	4314      	orrs	r4, r2
 80031d4:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80031d6:	07a2      	lsls	r2, r4, #30
 80031d8:	d40b      	bmi.n	80031f2 <follow_path+0x246>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80031da:	2203      	movs	r2, #3
 80031dc:	4015      	ands	r5, r2
 80031de:	2d01      	cmp	r5, #1
 80031e0:	d102      	bne.n	80031e8 <follow_path+0x23c>
 80031e2:	320d      	adds	r2, #13
 80031e4:	4314      	orrs	r4, r2
 80031e6:	b2e4      	uxtb	r4, r4
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d102      	bne.n	80031f2 <follow_path+0x246>
 80031ec:	3304      	adds	r3, #4
 80031ee:	431c      	orrs	r4, r3
 80031f0:	b2e4      	uxtb	r4, r4
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80031f2:	2583      	movs	r5, #131	; 0x83
 80031f4:	00ed      	lsls	r5, r5, #3
 80031f6:	5973      	ldr	r3, [r6, r5]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80031f8:	2100      	movs	r1, #0
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80031fa:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80031fc:	0030      	movs	r0, r6
 80031fe:	f7ff fbed 	bl	80029dc <dir_sdi>
	if (res != FR_OK) return res;
 8003202:	2800      	cmp	r0, #0
 8003204:	d102      	bne.n	800320c <follow_path+0x260>
 8003206:	0030      	movs	r0, r6
 8003208:	f7ff fe24 	bl	8002e54 <dir_find.part.6>
			ns = dp->fn[NSFLAG];
 800320c:	5973      	ldr	r3, [r6, r5]
 800320e:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003210:	2800      	cmp	r0, #0
 8003212:	d0a0      	beq.n	8003156 <follow_path+0x1aa>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003214:	2804      	cmp	r0, #4
 8003216:	d000      	beq.n	800321a <follow_path+0x26e>
 8003218:	e6e2      	b.n	8002fe0 <follow_path+0x34>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800321a:	4203      	tst	r3, r0
 800321c:	d000      	beq.n	8003220 <follow_path+0x274>
 800321e:	e6df      	b.n	8002fe0 <follow_path+0x34>
 8003220:	2005      	movs	r0, #5
	return res;
 8003222:	e6dd      	b.n	8002fe0 <follow_path+0x34>
				if (IsUpper(w)) {		/* ASCII large capital */
 8003224:	0003      	movs	r3, r0
 8003226:	3b41      	subs	r3, #65	; 0x41
 8003228:	2b19      	cmp	r3, #25
 800322a:	d991      	bls.n	8003150 <follow_path+0x1a4>
					if (IsLower(w)) {	/* ASCII small capital */
 800322c:	0003      	movs	r3, r0
 800322e:	3b61      	subs	r3, #97	; 0x61
 8003230:	2b19      	cmp	r3, #25
 8003232:	d885      	bhi.n	8003140 <follow_path+0x194>
						b |= 1; w -= 0x20;
 8003234:	2301      	movs	r3, #1
 8003236:	3820      	subs	r0, #32
 8003238:	431d      	orrs	r5, r3
 800323a:	b280      	uxth	r0, r0
 800323c:	e780      	b.n	8003140 <follow_path+0x194>
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	00000414 	.word	0x00000414
 8003244:	08005545 	.word	0x08005545
 8003248:	080054b8 	.word	0x080054b8
 800324c:	0800554e 	.word	0x0800554e

08003250 <dir_register>:
	fn = dp->fn; lfn = dp->lfn;
 8003250:	2383      	movs	r3, #131	; 0x83
{
 8003252:	b5f0      	push	{r4, r5, r6, r7, lr}
	fn = dp->fn; lfn = dp->lfn;
 8003254:	2484      	movs	r4, #132	; 0x84
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	58c6      	ldr	r6, [r0, r3]
{
 800325a:	b08b      	sub	sp, #44	; 0x2c
	fn = dp->fn; lfn = dp->lfn;
 800325c:	00e4      	lsls	r4, r4, #3
 800325e:	5903      	ldr	r3, [r0, r4]
	mem_cpy(sn, fn, 12);
 8003260:	ad07      	add	r5, sp, #28
{
 8003262:	0007      	movs	r7, r0
	mem_cpy(sn, fn, 12);
 8003264:	220c      	movs	r2, #12
 8003266:	0028      	movs	r0, r5
 8003268:	0031      	movs	r1, r6
	fn = dp->fn; lfn = dp->lfn;
 800326a:	9301      	str	r3, [sp, #4]
	mem_cpy(sn, fn, 12);
 800326c:	f7fe fed0 	bl	8002010 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003270:	7aeb      	ldrb	r3, [r5, #11]
 8003272:	2501      	movs	r5, #1
 8003274:	422b      	tst	r3, r5
 8003276:	d100      	bne.n	800327a <dir_register+0x2a>
 8003278:	e077      	b.n	800336a <dir_register+0x11a>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800327a:	2300      	movs	r3, #0
 800327c:	72f3      	strb	r3, [r6, #11]
 800327e:	513b      	str	r3, [r7, r4]
	mem_cpy(dst, src, 11);
 8003280:	220b      	movs	r2, #11
 8003282:	a907      	add	r1, sp, #28
 8003284:	0030      	movs	r0, r6
 8003286:	f7fe fec3 	bl	8002010 <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800328a:	002b      	movs	r3, r5
 800328c:	2d05      	cmp	r5, #5
 800328e:	d847      	bhi.n	8003320 <dir_register+0xd0>
		c = (seq % 16) + '0';
 8003290:	210f      	movs	r1, #15
		while (*lfn) {	/* Create a CRC */
 8003292:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
 8003294:	468c      	mov	ip, r1
		ns[i--] = c;
 8003296:	a905      	add	r1, sp, #20
		c = (seq % 16) + '0';
 8003298:	4664      	mov	r4, ip
 800329a:	401c      	ands	r4, r3
 800329c:	0020      	movs	r0, r4
 800329e:	3030      	adds	r0, #48	; 0x30
		if (c > '9') c += 7;
 80032a0:	2839      	cmp	r0, #57	; 0x39
 80032a2:	d900      	bls.n	80032a6 <dir_register+0x56>
 80032a4:	3007      	adds	r0, #7
		ns[i--] = c;
 80032a6:	3a01      	subs	r2, #1
 80032a8:	188c      	adds	r4, r1, r2
 80032aa:	7060      	strb	r0, [r4, #1]
		seq /= 16;
 80032ac:	091b      	lsrs	r3, r3, #4
	} while (seq);
 80032ae:	d1f3      	bne.n	8003298 <dir_register+0x48>
	ns[i] = '~';
 80032b0:	207e      	movs	r0, #126	; 0x7e
 80032b2:	5488      	strb	r0, [r1, r2]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d037      	beq.n	8003328 <dir_register+0xd8>
 80032b8:	5cf0      	ldrb	r0, [r6, r3]
 80032ba:	2820      	cmp	r0, #32
 80032bc:	d132      	bne.n	8003324 <dir_register+0xd4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80032be:	2420      	movs	r4, #32
 80032c0:	0020      	movs	r0, r4
 80032c2:	2a07      	cmp	r2, #7
 80032c4:	d801      	bhi.n	80032ca <dir_register+0x7a>
 80032c6:	5c88      	ldrb	r0, [r1, r2]
 80032c8:	3201      	adds	r2, #1
 80032ca:	54f0      	strb	r0, [r6, r3]
 80032cc:	3301      	adds	r3, #1
	} while (j < 8);
 80032ce:	2b07      	cmp	r3, #7
 80032d0:	d9f6      	bls.n	80032c0 <dir_register+0x70>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80032d2:	2100      	movs	r1, #0
 80032d4:	0038      	movs	r0, r7
 80032d6:	f7ff fb81 	bl	80029dc <dir_sdi>
 80032da:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) return res;
 80032dc:	d13c      	bne.n	8003358 <dir_register+0x108>
 80032de:	0038      	movs	r0, r7
 80032e0:	f7ff fdb8 	bl	8002e54 <dir_find.part.6>
 80032e4:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
 80032e6:	d137      	bne.n	8003358 <dir_register+0x108>
		for (n = 1; n < 100; n++) {
 80032e8:	3501      	adds	r5, #1
 80032ea:	2d64      	cmp	r5, #100	; 0x64
 80032ec:	d1c8      	bne.n	8003280 <dir_register+0x30>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80032ee:	2407      	movs	r4, #7
}
 80032f0:	0020      	movs	r0, r4
 80032f2:	b00b      	add	sp, #44	; 0x2c
 80032f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			wc = *lfn++;
 80032f6:	2010      	movs	r0, #16
 80032f8:	3102      	adds	r1, #2
				sr = (sr << 1) + (wc & 1);
 80032fa:	2401      	movs	r4, #1
 80032fc:	4014      	ands	r4, r2
 80032fe:	46a4      	mov	ip, r4
				if (sr & 0x10000) sr ^= 0x11021;
 8003300:	2480      	movs	r4, #128	; 0x80
				sr = (sr << 1) + (wc & 1);
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4463      	add	r3, ip
				if (sr & 0x10000) sr ^= 0x11021;
 8003306:	0264      	lsls	r4, r4, #9
				wc >>= 1;
 8003308:	0852      	lsrs	r2, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800330a:	4223      	tst	r3, r4
 800330c:	d001      	beq.n	8003312 <dir_register+0xc2>
 800330e:	4c6b      	ldr	r4, [pc, #428]	; (80034bc <dir_register+0x26c>)
 8003310:	4063      	eors	r3, r4
 8003312:	3801      	subs	r0, #1
			for (i = 0; i < 16; i++) {
 8003314:	2800      	cmp	r0, #0
 8003316:	d1f0      	bne.n	80032fa <dir_register+0xaa>
		while (*lfn) {	/* Create a CRC */
 8003318:	880a      	ldrh	r2, [r1, #0]
 800331a:	2a00      	cmp	r2, #0
 800331c:	d1eb      	bne.n	80032f6 <dir_register+0xa6>
 800331e:	e7b7      	b.n	8003290 <dir_register+0x40>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003320:	9901      	ldr	r1, [sp, #4]
 8003322:	e7f9      	b.n	8003318 <dir_register+0xc8>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003324:	3301      	adds	r3, #1
 8003326:	e7c5      	b.n	80032b4 <dir_register+0x64>
 8003328:	0013      	movs	r3, r2
 800332a:	e7c8      	b.n	80032be <dir_register+0x6e>
		for (n = 0; lfn[n]; n++) ;
 800332c:	3001      	adds	r0, #1
 800332e:	9a01      	ldr	r2, [sp, #4]
 8003330:	0043      	lsls	r3, r0, #1
 8003332:	5ad3      	ldrh	r3, [r2, r3]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f9      	bne.n	800332c <dir_register+0xdc>
		nent = (n + 25) / 13;
 8003338:	3019      	adds	r0, #25
 800333a:	210d      	movs	r1, #13
 800333c:	f7fc ff00 	bl	8000140 <__udivsi3>
 8003340:	0005      	movs	r5, r0
 8003342:	e018      	b.n	8003376 <dir_register+0x126>
				n = 0;					/* Not a blank entry. Restart to search */
 8003344:	0006      	movs	r6, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003346:	2101      	movs	r1, #1
 8003348:	0038      	movs	r0, r7
 800334a:	f7ff fcc9 	bl	8002ce0 <dir_next>
 800334e:	1e04      	subs	r4, r0, #0
		} while (res == FR_OK);
 8003350:	d018      	beq.n	8003384 <dir_register+0x134>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003352:	2c04      	cmp	r4, #4
 8003354:	d0cb      	beq.n	80032ee <dir_register+0x9e>
 8003356:	e7cb      	b.n	80032f0 <dir_register+0xa0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003358:	2c04      	cmp	r4, #4
 800335a:	d1c9      	bne.n	80032f0 <dir_register+0xa0>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800335c:	ab07      	add	r3, sp, #28
 800335e:	7adb      	ldrb	r3, [r3, #11]
 8003360:	9a01      	ldr	r2, [sp, #4]
 8003362:	72f3      	strb	r3, [r6, #11]
 8003364:	2384      	movs	r3, #132	; 0x84
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	50fa      	str	r2, [r7, r3]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800336a:	ab07      	add	r3, sp, #28
 800336c:	7adb      	ldrb	r3, [r3, #11]
		nent = 1;
 800336e:	2501      	movs	r5, #1
 8003370:	2000      	movs	r0, #0
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8003372:	079b      	lsls	r3, r3, #30
 8003374:	d4db      	bmi.n	800332e <dir_register+0xde>
	res = dir_sdi(dp, 0);
 8003376:	2100      	movs	r1, #0
 8003378:	0038      	movs	r0, r7
 800337a:	f7ff fb2f 	bl	80029dc <dir_sdi>
 800337e:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 8003380:	d1e7      	bne.n	8003352 <dir_register+0x102>
 8003382:	0006      	movs	r6, r0
			res = move_window(dp->fs, dp->sect);
 8003384:	2382      	movs	r3, #130	; 0x82
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	58f9      	ldr	r1, [r7, r3]
 800338a:	3b10      	subs	r3, #16
 800338c:	58f8      	ldr	r0, [r7, r3]
 800338e:	f7ff f893 	bl	80024b8 <move_window>
 8003392:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
 8003394:	d1dd      	bne.n	8003352 <dir_register+0x102>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003396:	4a4a      	ldr	r2, [pc, #296]	; (80034c0 <dir_register+0x270>)
 8003398:	58bb      	ldr	r3, [r7, r2]
 800339a:	9201      	str	r2, [sp, #4]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2be5      	cmp	r3, #229	; 0xe5
 80033a0:	d001      	beq.n	80033a6 <dir_register+0x156>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1ce      	bne.n	8003344 <dir_register+0xf4>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80033a6:	3601      	adds	r6, #1
 80033a8:	42b5      	cmp	r5, r6
 80033aa:	d1cc      	bne.n	8003346 <dir_register+0xf6>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80033ac:	3d01      	subs	r5, #1
 80033ae:	2d00      	cmp	r5, #0
 80033b0:	d05f      	beq.n	8003472 <dir_register+0x222>
		res = dir_sdi(dp, dp->index - nent);
 80033b2:	4b44      	ldr	r3, [pc, #272]	; (80034c4 <dir_register+0x274>)
 80033b4:	0038      	movs	r0, r7
 80033b6:	5af9      	ldrh	r1, [r7, r3]
 80033b8:	1b49      	subs	r1, r1, r5
 80033ba:	f7ff fb0f 	bl	80029dc <dir_sdi>
 80033be:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 80033c0:	d000      	beq.n	80033c4 <dir_register+0x174>
 80033c2:	e795      	b.n	80032f0 <dir_register+0xa0>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80033c4:	2383      	movs	r3, #131	; 0x83
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	58f8      	ldr	r0, [r7, r3]
 80033ca:	f7fe fef5 	bl	80021b8 <sum_sfn>
 80033ce:	9003      	str	r0, [sp, #12]
				res = move_window(dp->fs, dp->sect);
 80033d0:	2382      	movs	r3, #130	; 0x82
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	58f9      	ldr	r1, [r7, r3]
 80033d6:	3b10      	subs	r3, #16
 80033d8:	58f8      	ldr	r0, [r7, r3]
 80033da:	f7ff f86d 	bl	80024b8 <move_window>
 80033de:	1e04      	subs	r4, r0, #0
				if (res != FR_OK) break;
 80033e0:	d000      	beq.n	80033e4 <dir_register+0x194>
 80033e2:	e785      	b.n	80032f0 <dir_register+0xa0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80033e4:	2384      	movs	r3, #132	; 0x84
 80033e6:	b2ea      	uxtb	r2, r5
 80033e8:	4694      	mov	ip, r2
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80033ea:	466a      	mov	r2, sp
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	58fb      	ldr	r3, [r7, r3]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80033f0:	7b12      	ldrb	r2, [r2, #12]
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80033f2:	9302      	str	r3, [sp, #8]
 80033f4:	9b01      	ldr	r3, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80033f6:	210d      	movs	r1, #13
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80033f8:	58fb      	ldr	r3, [r7, r3]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80033fa:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80033fc:	220f      	movs	r2, #15
 80033fe:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8003400:	b2ea      	uxtb	r2, r5
 8003402:	3a01      	subs	r2, #1
 8003404:	434a      	muls	r2, r1
	s = wc = 0;
 8003406:	0001      	movs	r1, r0
	dir[LDIR_Type] = 0;
 8003408:	7318      	strb	r0, [r3, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800340a:	7698      	strb	r0, [r3, #26]
 800340c:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800340e:	4c2e      	ldr	r4, [pc, #184]	; (80034c8 <dir_register+0x278>)
 8003410:	42a0      	cmp	r0, r4
 8003412:	d003      	beq.n	800341c <dir_register+0x1cc>
 8003414:	9c02      	ldr	r4, [sp, #8]
 8003416:	0050      	lsls	r0, r2, #1
 8003418:	5b00      	ldrh	r0, [r0, r4]
 800341a:	3201      	adds	r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800341c:	4c2b      	ldr	r4, [pc, #172]	; (80034cc <dir_register+0x27c>)
 800341e:	5d0c      	ldrb	r4, [r1, r4]
 8003420:	5518      	strb	r0, [r3, r4]
 8003422:	191c      	adds	r4, r3, r4
 8003424:	0026      	movs	r6, r4
 8003426:	0a04      	lsrs	r4, r0, #8
 8003428:	7074      	strb	r4, [r6, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800342a:	2800      	cmp	r0, #0
 800342c:	d100      	bne.n	8003430 <dir_register+0x1e0>
 800342e:	4826      	ldr	r0, [pc, #152]	; (80034c8 <dir_register+0x278>)
	} while (++s < 13);
 8003430:	3101      	adds	r1, #1
 8003432:	290d      	cmp	r1, #13
 8003434:	d1eb      	bne.n	800340e <dir_register+0x1be>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8003436:	4924      	ldr	r1, [pc, #144]	; (80034c8 <dir_register+0x278>)
 8003438:	4288      	cmp	r0, r1
 800343a:	d004      	beq.n	8003446 <dir_register+0x1f6>
 800343c:	9902      	ldr	r1, [sp, #8]
 800343e:	0052      	lsls	r2, r2, #1
 8003440:	5a52      	ldrh	r2, [r2, r1]
 8003442:	2a00      	cmp	r2, #0
 8003444:	d103      	bne.n	800344e <dir_register+0x1fe>
 8003446:	4661      	mov	r1, ip
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	4311      	orrs	r1, r2
 800344c:	468c      	mov	ip, r1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800344e:	4662      	mov	r2, ip
				dp->fs->wflag = 1;
 8003450:	2180      	movs	r1, #128	; 0x80
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003452:	701a      	strb	r2, [r3, #0]
				dp->fs->wflag = 1;
 8003454:	2201      	movs	r2, #1
 8003456:	00c9      	lsls	r1, r1, #3
 8003458:	5879      	ldr	r1, [r7, r1]
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <dir_register+0x280>)
				res = dir_next(dp, 0);	/* Next entry */
 800345c:	0038      	movs	r0, r7
				dp->fs->wflag = 1;
 800345e:	54ca      	strb	r2, [r1, r3]
				res = dir_next(dp, 0);	/* Next entry */
 8003460:	2100      	movs	r1, #0
 8003462:	f7ff fc3d 	bl	8002ce0 <dir_next>
 8003466:	1e04      	subs	r4, r0, #0
			} while (res == FR_OK && --nent);
 8003468:	d000      	beq.n	800346c <dir_register+0x21c>
 800346a:	e741      	b.n	80032f0 <dir_register+0xa0>
 800346c:	3d01      	subs	r5, #1
 800346e:	2d00      	cmp	r5, #0
 8003470:	d1ae      	bne.n	80033d0 <dir_register+0x180>
		res = move_window(dp->fs, dp->sect);
 8003472:	2580      	movs	r5, #128	; 0x80
 8003474:	2382      	movs	r3, #130	; 0x82
 8003476:	00ed      	lsls	r5, r5, #3
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	58f9      	ldr	r1, [r7, r3]
 800347c:	5978      	ldr	r0, [r7, r5]
 800347e:	f7ff f81b 	bl	80024b8 <move_window>
 8003482:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 8003484:	d000      	beq.n	8003488 <dir_register+0x238>
 8003486:	e733      	b.n	80032f0 <dir_register+0xa0>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8003488:	2683      	movs	r6, #131	; 0x83
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800348a:	9b01      	ldr	r3, [sp, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	58f8      	ldr	r0, [r7, r3]
 8003490:	0021      	movs	r1, r4
 8003492:	f7fe fdc6 	bl	8002022 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8003496:	9b01      	ldr	r3, [sp, #4]
 8003498:	00f6      	lsls	r6, r6, #3
 800349a:	220b      	movs	r2, #11
 800349c:	59b9      	ldr	r1, [r7, r6]
 800349e:	58f8      	ldr	r0, [r7, r3]
 80034a0:	f7fe fdb6 	bl	8002010 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80034a4:	2118      	movs	r1, #24
 80034a6:	9b01      	ldr	r3, [sp, #4]
 80034a8:	58fa      	ldr	r2, [r7, r3]
 80034aa:	59bb      	ldr	r3, [r7, r6]
 80034ac:	7adb      	ldrb	r3, [r3, #11]
 80034ae:	400b      	ands	r3, r1
 80034b0:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 80034b2:	597a      	ldr	r2, [r7, r5]
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <dir_register+0x280>)
 80034b6:	3917      	subs	r1, #23
 80034b8:	54d1      	strb	r1, [r2, r3]
 80034ba:	e719      	b.n	80032f0 <dir_register+0xa0>
 80034bc:	00011021 	.word	0x00011021
 80034c0:	00000414 	.word	0x00000414
 80034c4:	00000406 	.word	0x00000406
 80034c8:	0000ffff 	.word	0x0000ffff
 80034cc:	08005538 	.word	0x08005538
 80034d0:	00000404 	.word	0x00000404

080034d4 <remove_chain>:
{
 80034d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034d6:	0004      	movs	r4, r0
 80034d8:	000d      	movs	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80034da:	2901      	cmp	r1, #1
 80034dc:	d801      	bhi.n	80034e2 <remove_chain+0xe>
		res = FR_INT_ERR;
 80034de:	2002      	movs	r0, #2
}
 80034e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <remove_chain+0x68>)
 80034e4:	58c2      	ldr	r2, [r0, r3]
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	4291      	cmp	r1, r2
 80034ea:	d2f8      	bcs.n	80034de <remove_chain+0xa>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80034ec:	2782      	movs	r7, #130	; 0x82
 80034ee:	00ff      	lsls	r7, r7, #3
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80034f0:	9b01      	ldr	r3, [sp, #4]
 80034f2:	58e3      	ldr	r3, [r4, r3]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	429d      	cmp	r5, r3
 80034f8:	d205      	bcs.n	8003506 <remove_chain+0x32>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80034fa:	0029      	movs	r1, r5
 80034fc:	0020      	movs	r0, r4
 80034fe:	f7ff f9e1 	bl	80028c4 <get_fat>
 8003502:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
 8003504:	d101      	bne.n	800350a <remove_chain+0x36>
		res = FR_INT_ERR;
 8003506:	2000      	movs	r0, #0
 8003508:	e7ea      	b.n	80034e0 <remove_chain+0xc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800350a:	2801      	cmp	r0, #1
 800350c:	d0e7      	beq.n	80034de <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800350e:	1c43      	adds	r3, r0, #1
 8003510:	d012      	beq.n	8003538 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003512:	2200      	movs	r2, #0
 8003514:	0029      	movs	r1, r5
 8003516:	0020      	movs	r0, r4
 8003518:	f7ff fad2 	bl	8002ac0 <put_fat>
			if (res != FR_OK) break;
 800351c:	2800      	cmp	r0, #0
 800351e:	d1df      	bne.n	80034e0 <remove_chain+0xc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003520:	59e3      	ldr	r3, [r4, r7]
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	d006      	beq.n	8003534 <remove_chain+0x60>
				fs->fsi_flag |= 1;
 8003526:	2101      	movs	r1, #1
				fs->free_clust++;
 8003528:	3301      	adds	r3, #1
				fs->fsi_flag |= 1;
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <remove_chain+0x6c>)
				fs->free_clust++;
 800352c:	51e3      	str	r3, [r4, r7]
				fs->fsi_flag |= 1;
 800352e:	5ca3      	ldrb	r3, [r4, r2]
 8003530:	430b      	orrs	r3, r1
 8003532:	54a3      	strb	r3, [r4, r2]
{
 8003534:	0035      	movs	r5, r6
 8003536:	e7db      	b.n	80034f0 <remove_chain+0x1c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003538:	2001      	movs	r0, #1
 800353a:	e7d1      	b.n	80034e0 <remove_chain+0xc>
 800353c:	00000414 	.word	0x00000414
 8003540:	00000405 	.word	0x00000405

08003544 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003544:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003546:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8003548:	a803      	add	r0, sp, #12
{
 800354a:	0014      	movs	r4, r2
 800354c:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800354e:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8003550:	f7fe fe40 	bl	80021d4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003554:	220b      	movs	r2, #11
 8003556:	2800      	cmp	r0, #0
 8003558:	db24      	blt.n	80035a4 <f_mount+0x60>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800355a:	4d14      	ldr	r5, [pc, #80]	; (80035ac <f_mount+0x68>)
 800355c:	0080      	lsls	r0, r0, #2
 800355e:	5943      	ldr	r3, [r0, r5]

	if (cfs) {
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00d      	beq.n	8003580 <f_mount+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003564:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <f_mount+0x6c>)
 8003566:	6811      	ldr	r1, [r2, #0]
 8003568:	428b      	cmp	r3, r1
 800356a:	d101      	bne.n	8003570 <f_mount+0x2c>
 800356c:	2100      	movs	r1, #0
 800356e:	6011      	str	r1, [r2, #0]
 8003570:	68d6      	ldr	r6, [r2, #12]
 8003572:	2100      	movs	r1, #0
 8003574:	42b3      	cmp	r3, r6
 8003576:	d100      	bne.n	800357a <f_mount+0x36>
 8003578:	60d1      	str	r1, [r2, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	00d2      	lsls	r2, r2, #3
 800357e:	5499      	strb	r1, [r3, r2]
	}

	if (fs) {
 8003580:	9b01      	ldr	r3, [sp, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	2100      	movs	r1, #0
 800358a:	00d2      	lsls	r2, r2, #3
 800358c:	5499      	strb	r1, [r3, r2]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800358e:	502b      	str	r3, [r5, r0]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003590:	1e1a      	subs	r2, r3, #0
 8003592:	d007      	beq.n	80035a4 <f_mount+0x60>
 8003594:	2200      	movs	r2, #0
 8003596:	2c01      	cmp	r4, #1
 8003598:	d104      	bne.n	80035a4 <f_mount+0x60>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800359a:	4669      	mov	r1, sp
 800359c:	a801      	add	r0, sp, #4
 800359e:	f7fe ffe9 	bl	8002574 <find_volume>
 80035a2:	0002      	movs	r2, r0
	LEAVE_FF(fs, res);
}
 80035a4:	0010      	movs	r0, r2
 80035a6:	b004      	add	sp, #16
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	200000a4 	.word	0x200000a4
 80035b0:	200000a8 	.word	0x200000a8

080035b4 <f_open>:
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80035b4:	2309      	movs	r3, #9
{
 80035b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b8:	4c7a      	ldr	r4, [pc, #488]	; (80037a4 <f_open+0x1f0>)
 80035ba:	0015      	movs	r5, r2
 80035bc:	44a5      	add	sp, r4
 80035be:	9001      	str	r0, [sp, #4]
 80035c0:	9105      	str	r1, [sp, #20]
	if (!fp) return FR_INVALID_OBJECT;
 80035c2:	9302      	str	r3, [sp, #8]
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d100      	bne.n	80035ca <f_open+0x16>
 80035c8:	e086      	b.n	80036d8 <f_open+0x124>
	fp->fs = 0;			/* Clear file object */
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	2200      	movs	r2, #0
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	50c2      	str	r2, [r0, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80035d2:	321e      	adds	r2, #30
 80035d4:	a8ff      	add	r0, sp, #1020	; 0x3fc
 80035d6:	402a      	ands	r2, r5
 80035d8:	a905      	add	r1, sp, #20
 80035da:	302c      	adds	r0, #44	; 0x2c
 80035dc:	f7fe ffca 	bl	8002574 <find_volume>
 80035e0:	ae0a      	add	r6, sp, #40	; 0x28
 80035e2:	9002      	str	r0, [sp, #8]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d177      	bne.n	80036d8 <f_open+0x124>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80035e8:	331f      	adds	r3, #31
 80035ea:	402b      	ands	r3, r5
 80035ec:	9303      	str	r3, [sp, #12]
		INIT_BUF(dj);
 80035ee:	2383      	movs	r3, #131	; 0x83
 80035f0:	aa07      	add	r2, sp, #28
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	50f2      	str	r2, [r6, r3]
 80035f6:	4a6c      	ldr	r2, [pc, #432]	; (80037a8 <f_open+0x1f4>)
 80035f8:	3308      	adds	r3, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 80035fa:	9905      	ldr	r1, [sp, #20]
 80035fc:	0030      	movs	r0, r6
		INIT_BUF(dj);
 80035fe:	50f2      	str	r2, [r6, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8003600:	f7ff fcd4 	bl	8002fac <follow_path>
		dir = dj.dir;
 8003604:	4f69      	ldr	r7, [pc, #420]	; (80037ac <f_open+0x1f8>)
 8003606:	59f4      	ldr	r4, [r6, r7]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003608:	2800      	cmp	r0, #0
 800360a:	d10a      	bne.n	8003622 <f_open+0x6e>
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
 800360c:	3006      	adds	r0, #6
			if (!dir)	/* Default directory itself */
 800360e:	2c00      	cmp	r4, #0
 8003610:	d007      	beq.n	8003622 <f_open+0x6e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003612:	2301      	movs	r3, #1
 8003614:	9903      	ldr	r1, [sp, #12]
 8003616:	0030      	movs	r0, r6
 8003618:	4399      	bics	r1, r3
 800361a:	1e4b      	subs	r3, r1, #1
 800361c:	4199      	sbcs	r1, r3
 800361e:	f7fe fd07 	bl	8002030 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003622:	231c      	movs	r3, #28
 8003624:	421d      	tst	r5, r3
 8003626:	d05b      	beq.n	80036e0 <f_open+0x12c>
			if (res != FR_OK) {					/* No file, create new */
 8003628:	2800      	cmp	r0, #0
 800362a:	d04d      	beq.n	80036c8 <f_open+0x114>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800362c:	2804      	cmp	r0, #4
 800362e:	d149      	bne.n	80036c4 <f_open+0x110>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003630:	4b5f      	ldr	r3, [pc, #380]	; (80037b0 <f_open+0x1fc>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2a00      	cmp	r2, #0
 8003636:	d003      	beq.n	8003640 <f_open+0x8c>
 8003638:	68db      	ldr	r3, [r3, #12]
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800363a:	300e      	adds	r0, #14
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800363c:	2b00      	cmp	r3, #0
 800363e:	d141      	bne.n	80036c4 <f_open+0x110>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003640:	ac0a      	add	r4, sp, #40	; 0x28
 8003642:	0020      	movs	r0, r4
 8003644:	f7ff fe04 	bl	8003250 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003648:	2800      	cmp	r0, #0
 800364a:	d13b      	bne.n	80036c4 <f_open+0x110>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800364c:	2308      	movs	r3, #8
 800364e:	9a03      	ldr	r2, [sp, #12]
				dir = dj.dir;					/* New entry */
 8003650:	59e4      	ldr	r4, [r4, r7]
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003652:	431a      	orrs	r2, r3
 8003654:	9203      	str	r2, [sp, #12]
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003656:	9b03      	ldr	r3, [sp, #12]
 8003658:	071b      	lsls	r3, r3, #28
 800365a:	d54a      	bpl.n	80036f2 <f_open+0x13e>
				dw = GET_FATTIME();				/* Created time */
 800365c:	f000 fb44 	bl	8003ce8 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8003660:	2500      	movs	r5, #0
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8003662:	2780      	movs	r7, #128	; 0x80
				ST_DWORD(dir + DIR_CrtTime, dw);
 8003664:	0a03      	lsrs	r3, r0, #8
 8003666:	73a0      	strb	r0, [r4, #14]
 8003668:	73e3      	strb	r3, [r4, #15]
 800366a:	0c03      	lsrs	r3, r0, #16
 800366c:	0e00      	lsrs	r0, r0, #24
 800366e:	7423      	strb	r3, [r4, #16]
 8003670:	7460      	strb	r0, [r4, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8003672:	72e5      	strb	r5, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8003674:	7725      	strb	r5, [r4, #28]
 8003676:	7765      	strb	r5, [r4, #29]
 8003678:	77a5      	strb	r5, [r4, #30]
 800367a:	77e5      	strb	r5, [r4, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800367c:	00ff      	lsls	r7, r7, #3
 800367e:	ae0a      	add	r6, sp, #40	; 0x28
 8003680:	59f3      	ldr	r3, [r6, r7]
 8003682:	0021      	movs	r1, r4
 8003684:	5dd8      	ldrb	r0, [r3, r7]
 8003686:	f7fe fe53 	bl	8002330 <ld_clust.isra.0>
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 800368a:	2201      	movs	r2, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 800368c:	76a5      	strb	r5, [r4, #26]
 800368e:	76e5      	strb	r5, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003690:	7525      	strb	r5, [r4, #20]
 8003692:	7565      	strb	r5, [r4, #21]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8003694:	9004      	str	r0, [sp, #16]
				dj.fs->wflag = 1;
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <f_open+0x200>)
 8003698:	59f0      	ldr	r0, [r6, r7]
 800369a:	54c2      	strb	r2, [r0, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 800369c:	9b04      	ldr	r3, [sp, #16]
 800369e:	42ab      	cmp	r3, r5
 80036a0:	d027      	beq.n	80036f2 <f_open+0x13e>
					dw = dj.fs->winsect;
 80036a2:	4b45      	ldr	r3, [pc, #276]	; (80037b8 <f_open+0x204>)
					res = remove_chain(dj.fs, cl);
 80036a4:	9904      	ldr	r1, [sp, #16]
					dw = dj.fs->winsect;
 80036a6:	58c5      	ldr	r5, [r0, r3]
					res = remove_chain(dj.fs, cl);
 80036a8:	f7ff ff14 	bl	80034d4 <remove_chain>
					if (res == FR_OK) {
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d109      	bne.n	80036c4 <f_open+0x110>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80036b0:	9b04      	ldr	r3, [sp, #16]
 80036b2:	59f0      	ldr	r0, [r6, r7]
 80036b4:	4a41      	ldr	r2, [pc, #260]	; (80037bc <f_open+0x208>)
 80036b6:	3b01      	subs	r3, #1
 80036b8:	5083      	str	r3, [r0, r2]
						res = move_window(dj.fs, dw);
 80036ba:	0029      	movs	r1, r5
 80036bc:	f7fe fefc 	bl	80024b8 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 80036c0:	2800      	cmp	r0, #0
 80036c2:	d016      	beq.n	80036f2 <f_open+0x13e>
					res = FR_DENIED;
 80036c4:	9002      	str	r0, [sp, #8]
 80036c6:	e007      	b.n	80036d8 <f_open+0x124>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80036c8:	2311      	movs	r3, #17
 80036ca:	7ae2      	ldrb	r2, [r4, #11]
 80036cc:	421a      	tst	r2, r3
 80036ce:	d166      	bne.n	800379e <f_open+0x1ea>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80036d0:	076b      	lsls	r3, r5, #29
 80036d2:	d5c0      	bpl.n	8003656 <f_open+0xa2>
						res = FR_EXIST;
 80036d4:	2308      	movs	r3, #8
					res = FR_DENIED;
 80036d6:	9302      	str	r3, [sp, #8]
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80036d8:	9802      	ldr	r0, [sp, #8]
 80036da:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <f_open+0x20c>)
 80036dc:	449d      	add	sp, r3
 80036de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_OK) {					/* Follow succeeded */
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d1ef      	bne.n	80036c4 <f_open+0x110>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80036e4:	7ae3      	ldrb	r3, [r4, #11]
 80036e6:	06da      	lsls	r2, r3, #27
 80036e8:	d457      	bmi.n	800379a <f_open+0x1e6>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80036ea:	07aa      	lsls	r2, r5, #30
 80036ec:	d501      	bpl.n	80036f2 <f_open+0x13e>
 80036ee:	07db      	lsls	r3, r3, #31
 80036f0:	d455      	bmi.n	800379e <f_open+0x1ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80036f2:	9b03      	ldr	r3, [sp, #12]
 80036f4:	071b      	lsls	r3, r3, #28
 80036f6:	d503      	bpl.n	8003700 <f_open+0x14c>
				mode |= FA__WRITTEN;
 80036f8:	2320      	movs	r3, #32
 80036fa:	9a03      	ldr	r2, [sp, #12]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	9203      	str	r2, [sp, #12]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8003700:	2218      	movs	r2, #24
 8003702:	2580      	movs	r5, #128	; 0x80
 8003704:	ab04      	add	r3, sp, #16
 8003706:	189b      	adds	r3, r3, r2
 8003708:	00ed      	lsls	r5, r5, #3
 800370a:	595b      	ldr	r3, [r3, r5]
 800370c:	9901      	ldr	r1, [sp, #4]
 800370e:	9304      	str	r3, [sp, #16]
 8003710:	9a04      	ldr	r2, [sp, #16]
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <f_open+0x204>)
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003714:	a80a      	add	r0, sp, #40	; 0x28
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8003716:	58d2      	ldr	r2, [r2, r3]
 8003718:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <f_open+0x210>)
 800371a:	50ca      	str	r2, [r1, r3]
			fp->dir_ptr = dir;
 800371c:	3304      	adds	r3, #4
 800371e:	50cc      	str	r4, [r1, r3]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003720:	2301      	movs	r3, #1
 8003722:	9903      	ldr	r1, [sp, #12]
 8003724:	4399      	bics	r1, r3
 8003726:	1e4b      	subs	r3, r1, #1
 8003728:	4199      	sbcs	r1, r3
 800372a:	f7fe fcb7 	bl	800209c <inc_lock>
 800372e:	2385      	movs	r3, #133	; 0x85
 8003730:	9a01      	ldr	r2, [sp, #4]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	50d0      	str	r0, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8003736:	2302      	movs	r3, #2
 8003738:	2800      	cmp	r0, #0
 800373a:	d0cc      	beq.n	80036d6 <f_open+0x122>
			fp->flag = mode;					/* File access mode */
 800373c:	4669      	mov	r1, sp
			fp->err = 0;						/* Clear error flag */
 800373e:	2600      	movs	r6, #0
			fp->flag = mode;					/* File access mode */
 8003740:	9b01      	ldr	r3, [sp, #4]
 8003742:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <f_open+0x214>)
 8003744:	7b09      	ldrb	r1, [r1, #12]
 8003746:	5499      	strb	r1, [r3, r2]
			fp->err = 0;						/* Clear error flag */
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <f_open+0x218>)
 800374a:	9a01      	ldr	r2, [sp, #4]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800374c:	0021      	movs	r1, r4
			fp->err = 0;						/* Clear error flag */
 800374e:	54d6      	strb	r6, [r2, r3]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8003750:	2218      	movs	r2, #24
 8003752:	ab04      	add	r3, sp, #16
 8003754:	189b      	adds	r3, r3, r2
 8003756:	595f      	ldr	r7, [r3, r5]
 8003758:	5d78      	ldrb	r0, [r7, r5]
 800375a:	f7fe fde9 	bl	8002330 <ld_clust.isra.0>
 800375e:	2382      	movs	r3, #130	; 0x82
 8003760:	9a01      	ldr	r2, [sp, #4]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	50d0      	str	r0, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8003766:	7f62      	ldrb	r2, [r4, #29]
 8003768:	7f23      	ldrb	r3, [r4, #28]
 800376a:	0212      	lsls	r2, r2, #8
 800376c:	431a      	orrs	r2, r3
 800376e:	7fa3      	ldrb	r3, [r4, #30]
 8003770:	9901      	ldr	r1, [sp, #4]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	7fe3      	ldrb	r3, [r4, #31]
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	4313      	orrs	r3, r2
 800377c:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <f_open+0x208>)
 800377e:	508b      	str	r3, [r1, r2]
			fp->fptr = 0;						/* File pointer */
 8003780:	2381      	movs	r3, #129	; 0x81
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	50ce      	str	r6, [r1, r3]
			fp->dsect = 0;
 8003786:	3310      	adds	r3, #16
 8003788:	50ce      	str	r6, [r1, r3]
			fp->cltbl = 0;						/* Normal seek mode */
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <f_open+0x21c>)
 800378c:	50ce      	str	r6, [r1, r3]
			fp->id = fp->fs->id;
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <f_open+0x214>)
			fp->fs = dj.fs;	 					/* Validate file object */
 8003790:	514f      	str	r7, [r1, r5]
			fp->id = fp->fs->id;
 8003792:	5afa      	ldrh	r2, [r7, r3]
 8003794:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <f_open+0x200>)
 8003796:	52ca      	strh	r2, [r1, r3]
 8003798:	e79e      	b.n	80036d8 <f_open+0x124>
					res = FR_NO_FILE;
 800379a:	2304      	movs	r3, #4
 800379c:	e79b      	b.n	80036d6 <f_open+0x122>
					res = FR_DENIED;
 800379e:	2307      	movs	r3, #7
 80037a0:	e799      	b.n	80036d6 <f_open+0x122>
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	fffffbac 	.word	0xfffffbac
 80037a8:	200000c2 	.word	0x200000c2
 80037ac:	00000414 	.word	0x00000414
 80037b0:	200000a8 	.word	0x200000a8
 80037b4:	00000404 	.word	0x00000404
 80037b8:	0000042c 	.word	0x0000042c
 80037bc:	0000040c 	.word	0x0000040c
 80037c0:	00000454 	.word	0x00000454
 80037c4:	0000041c 	.word	0x0000041c
 80037c8:	00000406 	.word	0x00000406
 80037cc:	00000407 	.word	0x00000407
 80037d0:	00000424 	.word	0x00000424

080037d4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80037d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d6:	b08b      	sub	sp, #44	; 0x2c
 80037d8:	9308      	str	r3, [sp, #32]
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80037da:	2300      	movs	r3, #0
{
 80037dc:	9202      	str	r2, [sp, #8]
	*bw = 0;	/* Clear write byte counter */
 80037de:	9a08      	ldr	r2, [sp, #32]
{
 80037e0:	0004      	movs	r4, r0
	*bw = 0;	/* Clear write byte counter */
 80037e2:	6013      	str	r3, [r2, #0]
{
 80037e4:	000d      	movs	r5, r1

	res = validate(fp);						/* Check validity */
 80037e6:	f7fe fd0b 	bl	8002200 <validate>
 80037ea:	9003      	str	r0, [sp, #12]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d159      	bne.n	80038a4 <f_write+0xd0>
	if (fp->err)							/* Check error */
 80037f0:	4a87      	ldr	r2, [pc, #540]	; (8003a10 <f_write+0x23c>)
 80037f2:	5ca3      	ldrb	r3, [r4, r2]
 80037f4:	9209      	str	r2, [sp, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d13a      	bne.n	8003870 <f_write+0x9c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80037fa:	4b86      	ldr	r3, [pc, #536]	; (8003a14 <f_write+0x240>)
 80037fc:	5ce2      	ldrb	r2, [r4, r3]
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	0793      	lsls	r3, r2, #30
 8003802:	d400      	bmi.n	8003806 <f_write+0x32>
 8003804:	e101      	b.n	8003a0a <f_write+0x236>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8003806:	2381      	movs	r3, #129	; 0x81
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	58e2      	ldr	r2, [r4, r3]
 800380c:	9902      	ldr	r1, [sp, #8]
 800380e:	1889      	adds	r1, r1, r2
 8003810:	428a      	cmp	r2, r1
 8003812:	d839      	bhi.n	8003888 <f_write+0xb4>

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8003814:	2780      	movs	r7, #128	; 0x80
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8003816:	9505      	str	r5, [sp, #20]
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8003818:	9306      	str	r3, [sp, #24]
 800381a:	00ff      	lsls	r7, r7, #3
	for ( ;  btw;							/* Repeat until all data written */
 800381c:	9b02      	ldr	r3, [sp, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d032      	beq.n	8003888 <f_write+0xb4>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8003822:	9b06      	ldr	r3, [sp, #24]
 8003824:	4a7c      	ldr	r2, [pc, #496]	; (8003a18 <f_write+0x244>)
 8003826:	58e5      	ldr	r5, [r4, r3]
 8003828:	59e3      	ldr	r3, [r4, r7]
 800382a:	0028      	movs	r0, r5
 800382c:	9304      	str	r3, [sp, #16]
 800382e:	5a9b      	ldrh	r3, [r3, r2]
 8003830:	0019      	movs	r1, r3
 8003832:	9307      	str	r3, [sp, #28]
 8003834:	f7fc fd0a 	bl	800024c <__aeabi_uidivmod>
 8003838:	2900      	cmp	r1, #0
 800383a:	d000      	beq.n	800383e <f_write+0x6a>
 800383c:	e0c8      	b.n	80039d0 <f_write+0x1fc>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800383e:	9b04      	ldr	r3, [sp, #16]
 8003840:	4a76      	ldr	r2, [pc, #472]	; (8003a1c <f_write+0x248>)
 8003842:	9907      	ldr	r1, [sp, #28]
 8003844:	0028      	movs	r0, r5
 8003846:	5c9e      	ldrb	r6, [r3, r2]
 8003848:	f7fc fc7a 	bl	8000140 <__udivsi3>
 800384c:	3e01      	subs	r6, #1
 800384e:	4006      	ands	r6, r0
 8003850:	b2f3      	uxtb	r3, r6
 8003852:	9307      	str	r3, [sp, #28]
			if (!csect) {					/* On the cluster boundary? */
 8003854:	2b00      	cmp	r3, #0
 8003856:	d139      	bne.n	80038cc <f_write+0xf8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8003858:	2d00      	cmp	r5, #0
 800385a:	d10b      	bne.n	8003874 <f_write+0xa0>
					clst = fp->sclust;		/* Follow from the origin */
 800385c:	2382      	movs	r3, #130	; 0x82
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	58e0      	ldr	r0, [r4, r3]
					if (clst == 0)			/* When no cluster is allocated, */
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8003862:	1e01      	subs	r1, r0, #0
					if (clst == 0)			/* When no cluster is allocated, */
 8003864:	d023      	beq.n	80038ae <f_write+0xda>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003866:	2801      	cmp	r0, #1
 8003868:	d125      	bne.n	80038b6 <f_write+0xe2>
 800386a:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800386c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800386e:	54a3      	strb	r3, [r4, r2]
		LEAVE_FF(fp->fs, FR_DENIED);
 8003870:	9303      	str	r3, [sp, #12]
 8003872:	e017      	b.n	80038a4 <f_write+0xd0>
					if (fp->cltbl)
 8003874:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <f_write+0x24c>)
 8003876:	58e3      	ldr	r3, [r4, r3]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d016      	beq.n	80038aa <f_write+0xd6>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800387c:	0029      	movs	r1, r5
 800387e:	0020      	movs	r0, r4
 8003880:	f7fe fc78 	bl	8002174 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003884:	2800      	cmp	r0, #0
 8003886:	d1ee      	bne.n	8003866 <f_write+0x92>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8003888:	2381      	movs	r3, #129	; 0x81
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	58e2      	ldr	r2, [r4, r3]
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <f_write+0x250>)
 8003890:	58e1      	ldr	r1, [r4, r3]
 8003892:	428a      	cmp	r2, r1
 8003894:	d900      	bls.n	8003898 <f_write+0xc4>
 8003896:	e0b6      	b.n	8003a06 <f_write+0x232>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8003898:	9b01      	ldr	r3, [sp, #4]
 800389a:	5ce2      	ldrb	r2, [r4, r3]
 800389c:	2320      	movs	r3, #32
 800389e:	4313      	orrs	r3, r2
 80038a0:	9a01      	ldr	r2, [sp, #4]
 80038a2:	54a3      	strb	r3, [r4, r2]

	LEAVE_FF(fp->fs, FR_OK);
}
 80038a4:	9803      	ldr	r0, [sp, #12]
 80038a6:	b00b      	add	sp, #44	; 0x2c
 80038a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80038aa:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <f_write+0x254>)
 80038ac:	58e1      	ldr	r1, [r4, r3]
 80038ae:	9804      	ldr	r0, [sp, #16]
 80038b0:	f7ff f9b4 	bl	8002c1c <create_chain>
 80038b4:	e7e6      	b.n	8003884 <f_write+0xb0>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80038b6:	1c43      	adds	r3, r0, #1
 80038b8:	d101      	bne.n	80038be <f_write+0xea>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e7d6      	b.n	800386c <f_write+0x98>
				fp->clust = clst;			/* Update current cluster */
 80038be:	4b5a      	ldr	r3, [pc, #360]	; (8003a28 <f_write+0x254>)
 80038c0:	50e0      	str	r0, [r4, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80038c2:	3b04      	subs	r3, #4
 80038c4:	58e2      	ldr	r2, [r4, r3]
 80038c6:	2a00      	cmp	r2, #0
 80038c8:	d100      	bne.n	80038cc <f_write+0xf8>
 80038ca:	50e0      	str	r0, [r4, r3]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80038cc:	2540      	movs	r5, #64	; 0x40
 80038ce:	9b01      	ldr	r3, [sp, #4]
 80038d0:	5ce3      	ldrb	r3, [r4, r3]
 80038d2:	422b      	tst	r3, r5
 80038d4:	d010      	beq.n	80038f8 <f_write+0x124>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80038d6:	4b55      	ldr	r3, [pc, #340]	; (8003a2c <f_write+0x258>)
 80038d8:	59e2      	ldr	r2, [r4, r7]
 80038da:	0021      	movs	r1, r4
 80038dc:	5cd0      	ldrb	r0, [r2, r3]
 80038de:	2283      	movs	r2, #131	; 0x83
 80038e0:	00d2      	lsls	r2, r2, #3
 80038e2:	2301      	movs	r3, #1
 80038e4:	58a2      	ldr	r2, [r4, r2]
 80038e6:	f7fe fb77 	bl	8001fd8 <disk_write>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d1e5      	bne.n	80038ba <f_write+0xe6>
				fp->flag &= ~FA__DIRTY;
 80038ee:	9b01      	ldr	r3, [sp, #4]
 80038f0:	9a01      	ldr	r2, [sp, #4]
 80038f2:	5ce3      	ldrb	r3, [r4, r3]
 80038f4:	43ab      	bics	r3, r5
 80038f6:	54a3      	strb	r3, [r4, r2]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80038f8:	59e3      	ldr	r3, [r4, r7]
 80038fa:	9304      	str	r3, [sp, #16]
 80038fc:	4b4a      	ldr	r3, [pc, #296]	; (8003a28 <f_write+0x254>)
 80038fe:	9804      	ldr	r0, [sp, #16]
 8003900:	58e1      	ldr	r1, [r4, r3]
 8003902:	f7fe ffcb 	bl	800289c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8003906:	2800      	cmp	r0, #0
 8003908:	d0af      	beq.n	800386a <f_write+0x96>
			sect += csect;
 800390a:	9b07      	ldr	r3, [sp, #28]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800390c:	4a42      	ldr	r2, [pc, #264]	; (8003a18 <f_write+0x244>)
			sect += csect;
 800390e:	18c5      	adds	r5, r0, r3
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8003910:	9b04      	ldr	r3, [sp, #16]
 8003912:	9802      	ldr	r0, [sp, #8]
 8003914:	5a99      	ldrh	r1, [r3, r2]
 8003916:	f7fc fc13 	bl	8000140 <__udivsi3>
 800391a:	1e06      	subs	r6, r0, #0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800391c:	d03d      	beq.n	800399a <f_write+0x1c6>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800391e:	4a3f      	ldr	r2, [pc, #252]	; (8003a1c <f_write+0x248>)
 8003920:	9b04      	ldr	r3, [sp, #16]
 8003922:	5c9b      	ldrb	r3, [r3, r2]
 8003924:	9a07      	ldr	r2, [sp, #28]
 8003926:	1812      	adds	r2, r2, r0
 8003928:	429a      	cmp	r2, r3
 800392a:	d901      	bls.n	8003930 <f_write+0x15c>
					cc = fp->fs->csize - csect;
 800392c:	9a07      	ldr	r2, [sp, #28]
 800392e:	1a9e      	subs	r6, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8003930:	4b3e      	ldr	r3, [pc, #248]	; (8003a2c <f_write+0x258>)
 8003932:	9a04      	ldr	r2, [sp, #16]
 8003934:	9905      	ldr	r1, [sp, #20]
 8003936:	5cd0      	ldrb	r0, [r2, r3]
 8003938:	0033      	movs	r3, r6
 800393a:	002a      	movs	r2, r5
 800393c:	f7fe fb4c 	bl	8001fd8 <disk_write>
 8003940:	2800      	cmp	r0, #0
 8003942:	d1ba      	bne.n	80038ba <f_write+0xe6>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003944:	2383      	movs	r3, #131	; 0x83
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	58e0      	ldr	r0, [r4, r3]
 800394a:	1b45      	subs	r5, r0, r5
 800394c:	42ae      	cmp	r6, r5
 800394e:	d90e      	bls.n	800396e <f_write+0x19a>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8003950:	59e3      	ldr	r3, [r4, r7]
 8003952:	4a31      	ldr	r2, [pc, #196]	; (8003a18 <f_write+0x244>)
 8003954:	0020      	movs	r0, r4
 8003956:	5a9a      	ldrh	r2, [r3, r2]
 8003958:	9b05      	ldr	r3, [sp, #20]
 800395a:	4355      	muls	r5, r2
 800395c:	1959      	adds	r1, r3, r5
 800395e:	f7fe fb57 	bl	8002010 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8003962:	2240      	movs	r2, #64	; 0x40
 8003964:	9b01      	ldr	r3, [sp, #4]
 8003966:	5ce3      	ldrb	r3, [r4, r3]
 8003968:	4393      	bics	r3, r2
 800396a:	9a01      	ldr	r2, [sp, #4]
 800396c:	54a3      	strb	r3, [r4, r2]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800396e:	59e3      	ldr	r3, [r4, r7]
 8003970:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <f_write+0x244>)
 8003972:	5a9b      	ldrh	r3, [r3, r2]
 8003974:	435e      	muls	r6, r3
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8003976:	9b05      	ldr	r3, [sp, #20]
 8003978:	9a06      	ldr	r2, [sp, #24]
 800397a:	199b      	adds	r3, r3, r6
 800397c:	9305      	str	r3, [sp, #20]
 800397e:	9b06      	ldr	r3, [sp, #24]
 8003980:	58e3      	ldr	r3, [r4, r3]
 8003982:	199b      	adds	r3, r3, r6
 8003984:	50a3      	str	r3, [r4, r2]
 8003986:	9b08      	ldr	r3, [sp, #32]
 8003988:	9a08      	ldr	r2, [sp, #32]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	9304      	str	r3, [sp, #16]
 800398e:	199b      	adds	r3, r3, r6
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	9b02      	ldr	r3, [sp, #8]
 8003994:	1b9b      	subs	r3, r3, r6
 8003996:	9302      	str	r3, [sp, #8]
 8003998:	e740      	b.n	800381c <f_write+0x48>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800399a:	2383      	movs	r3, #131	; 0x83
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	58e3      	ldr	r3, [r4, r3]
 80039a0:	429d      	cmp	r5, r3
 80039a2:	d012      	beq.n	80039ca <f_write+0x1f6>
				if (fp->fptr < fp->fsize &&
 80039a4:	9b06      	ldr	r3, [sp, #24]
 80039a6:	58e3      	ldr	r3, [r4, r3]
 80039a8:	9307      	str	r3, [sp, #28]
 80039aa:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <f_write+0x250>)
 80039ac:	9a07      	ldr	r2, [sp, #28]
 80039ae:	58e3      	ldr	r3, [r4, r3]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d20a      	bcs.n	80039ca <f_write+0x1f6>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <f_write+0x258>)
 80039b6:	9a04      	ldr	r2, [sp, #16]
 80039b8:	0021      	movs	r1, r4
 80039ba:	5cd0      	ldrb	r0, [r2, r3]
 80039bc:	2301      	movs	r3, #1
 80039be:	002a      	movs	r2, r5
 80039c0:	f7fe fafc 	bl	8001fbc <disk_read>
				if (fp->fptr < fp->fsize &&
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d000      	beq.n	80039ca <f_write+0x1f6>
 80039c8:	e777      	b.n	80038ba <f_write+0xe6>
			fp->dsect = sect;
 80039ca:	2383      	movs	r3, #131	; 0x83
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	50e5      	str	r5, [r4, r3]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80039d0:	59e3      	ldr	r3, [r4, r7]
 80039d2:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <f_write+0x244>)
 80039d4:	5a9d      	ldrh	r5, [r3, r2]
 80039d6:	9b06      	ldr	r3, [sp, #24]
 80039d8:	0029      	movs	r1, r5
 80039da:	58e3      	ldr	r3, [r4, r3]
 80039dc:	0018      	movs	r0, r3
 80039de:	9304      	str	r3, [sp, #16]
 80039e0:	f7fc fc34 	bl	800024c <__aeabi_uidivmod>
 80039e4:	9e02      	ldr	r6, [sp, #8]
 80039e6:	1a6d      	subs	r5, r5, r1
 80039e8:	42ae      	cmp	r6, r5
 80039ea:	d900      	bls.n	80039ee <f_write+0x21a>
 80039ec:	002e      	movs	r6, r5
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80039ee:	1860      	adds	r0, r4, r1
 80039f0:	0032      	movs	r2, r6
 80039f2:	9905      	ldr	r1, [sp, #20]
 80039f4:	f7fe fb0c 	bl	8002010 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80039f8:	9b01      	ldr	r3, [sp, #4]
 80039fa:	5ce2      	ldrb	r2, [r4, r3]
 80039fc:	2340      	movs	r3, #64	; 0x40
 80039fe:	4313      	orrs	r3, r2
 8003a00:	9a01      	ldr	r2, [sp, #4]
 8003a02:	54a3      	strb	r3, [r4, r2]
 8003a04:	e7b7      	b.n	8003976 <f_write+0x1a2>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8003a06:	50e2      	str	r2, [r4, r3]
 8003a08:	e746      	b.n	8003898 <f_write+0xc4>
		LEAVE_FF(fp->fs, FR_DENIED);
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	e730      	b.n	8003870 <f_write+0x9c>
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	00000407 	.word	0x00000407
 8003a14:	00000406 	.word	0x00000406
 8003a18:	0000040a 	.word	0x0000040a
 8003a1c:	00000402 	.word	0x00000402
 8003a20:	00000424 	.word	0x00000424
 8003a24:	0000040c 	.word	0x0000040c
 8003a28:	00000414 	.word	0x00000414
 8003a2c:	00000401 	.word	0x00000401

08003a30 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8003a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a32:	0004      	movs	r4, r0
 8003a34:	000e      	movs	r6, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8003a36:	290a      	cmp	r1, #10
 8003a38:	d102      	bne.n	8003a40 <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 8003a3a:	210d      	movs	r1, #13
 8003a3c:	f7ff fff8 	bl	8003a30 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8003a40:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db14      	blt.n	8003a70 <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8003a46:	1c5d      	adds	r5, r3, #1
 8003a48:	18e3      	adds	r3, r4, r3
 8003a4a:	731e      	strb	r6, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8003a4c:	2d3c      	cmp	r5, #60	; 0x3c
 8003a4e:	dd0b      	ble.n	8003a68 <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8003a50:	0021      	movs	r1, r4
 8003a52:	ab01      	add	r3, sp, #4
 8003a54:	002a      	movs	r2, r5
 8003a56:	310c      	adds	r1, #12
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	f7ff febb 	bl	80037d4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8003a5e:	9b01      	ldr	r3, [sp, #4]
 8003a60:	1b5d      	subs	r5, r3, r5
 8003a62:	1e6b      	subs	r3, r5, #1
 8003a64:	419d      	sbcs	r5, r3
 8003a66:	426d      	negs	r5, r5
	}
	pb->idx = i;
	pb->nchr++;
 8003a68:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 8003a6a:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	60a3      	str	r3, [r4, #8]
}
 8003a70:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	...

08003a74 <f_sync>:
{
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	0004      	movs	r4, r0
	res = validate(fp);					/* Check validity of the object */
 8003a78:	f7fe fbc2 	bl	8002200 <validate>
 8003a7c:	1e06      	subs	r6, r0, #0
	if (res == FR_OK) {
 8003a7e:	d155      	bne.n	8003b2c <f_sync+0xb8>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8003a80:	4f2b      	ldr	r7, [pc, #172]	; (8003b30 <f_sync+0xbc>)
 8003a82:	5de3      	ldrb	r3, [r4, r7]
 8003a84:	069a      	lsls	r2, r3, #26
 8003a86:	d551      	bpl.n	8003b2c <f_sync+0xb8>
			if (fp->flag & FA__DIRTY) {
 8003a88:	2540      	movs	r5, #64	; 0x40
 8003a8a:	422b      	tst	r3, r5
 8003a8c:	d011      	beq.n	8003ab2 <f_sync+0x3e>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	58e2      	ldr	r2, [r4, r3]
 8003a94:	4b27      	ldr	r3, [pc, #156]	; (8003b34 <f_sync+0xc0>)
 8003a96:	0021      	movs	r1, r4
 8003a98:	5cd0      	ldrb	r0, [r2, r3]
 8003a9a:	2283      	movs	r2, #131	; 0x83
 8003a9c:	00d2      	lsls	r2, r2, #3
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	58a2      	ldr	r2, [r4, r2]
 8003aa2:	f7fe fa99 	bl	8001fd8 <disk_write>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8003aa6:	3601      	adds	r6, #1
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d13f      	bne.n	8003b2c <f_sync+0xb8>
				fp->flag &= ~FA__DIRTY;
 8003aac:	5de3      	ldrb	r3, [r4, r7]
 8003aae:	43ab      	bics	r3, r5
 8003ab0:	55e3      	strb	r3, [r4, r7]
			res = move_window(fp->fs, fp->dir_sect);
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <f_sync+0xc4>)
 8003ab4:	58e1      	ldr	r1, [r4, r3]
 8003ab6:	3b1c      	subs	r3, #28
 8003ab8:	58e0      	ldr	r0, [r4, r3]
 8003aba:	f7fe fcfd 	bl	80024b8 <move_window>
 8003abe:	1e06      	subs	r6, r0, #0
			if (res == FR_OK) {
 8003ac0:	d134      	bne.n	8003b2c <f_sync+0xb8>
				dir = fp->dir_ptr;
 8003ac2:	2384      	movs	r3, #132	; 0x84
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8003ac4:	2220      	movs	r2, #32
				dir = fp->dir_ptr;
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	58e5      	ldr	r5, [r4, r3]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8003aca:	7aeb      	ldrb	r3, [r5, #11]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8003ad0:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <f_sync+0xc8>)
 8003ad2:	5ce2      	ldrb	r2, [r4, r3]
 8003ad4:	772a      	strb	r2, [r5, #28]
 8003ad6:	58e2      	ldr	r2, [r4, r3]
 8003ad8:	0a12      	lsrs	r2, r2, #8
 8003ada:	776a      	strb	r2, [r5, #29]
 8003adc:	58e2      	ldr	r2, [r4, r3]
 8003ade:	0c12      	lsrs	r2, r2, #16
 8003ae0:	77aa      	strb	r2, [r5, #30]
 8003ae2:	58e3      	ldr	r3, [r4, r3]
 8003ae4:	0e1b      	lsrs	r3, r3, #24
 8003ae6:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8003ae8:	2382      	movs	r3, #130	; 0x82
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	58e3      	ldr	r3, [r4, r3]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003aee:	0a1a      	lsrs	r2, r3, #8
 8003af0:	76ab      	strb	r3, [r5, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003af2:	0c1b      	lsrs	r3, r3, #16
 8003af4:	752b      	strb	r3, [r5, #20]
 8003af6:	0a1b      	lsrs	r3, r3, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003af8:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003afa:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 8003afc:	f000 f8f4 	bl	8003ce8 <get_fattime>
				fp->flag &= ~FA__WRITTEN;
 8003b00:	2220      	movs	r2, #32
				ST_DWORD(dir + DIR_WrtTime, tm);
 8003b02:	0a03      	lsrs	r3, r0, #8
 8003b04:	75a8      	strb	r0, [r5, #22]
 8003b06:	75eb      	strb	r3, [r5, #23]
 8003b08:	0c03      	lsrs	r3, r0, #16
 8003b0a:	0e00      	lsrs	r0, r0, #24
				ST_WORD(dir + DIR_LstAccDate, 0);
 8003b0c:	74ae      	strb	r6, [r5, #18]
 8003b0e:	74ee      	strb	r6, [r5, #19]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8003b10:	762b      	strb	r3, [r5, #24]
 8003b12:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
 8003b14:	5de3      	ldrb	r3, [r4, r7]
 8003b16:	4393      	bics	r3, r2
 8003b18:	55e3      	strb	r3, [r4, r7]
				fp->fs->wflag = 1;
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	58e0      	ldr	r0, [r4, r3]
 8003b20:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <f_sync+0xcc>)
 8003b22:	3a1f      	subs	r2, #31
 8003b24:	54c2      	strb	r2, [r0, r3]
				res = sync_fs(fp->fs);
 8003b26:	f7fe fc53 	bl	80023d0 <sync_fs>
 8003b2a:	0006      	movs	r6, r0
}
 8003b2c:	0030      	movs	r0, r6
 8003b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b30:	00000406 	.word	0x00000406
 8003b34:	00000401 	.word	0x00000401
 8003b38:	0000041c 	.word	0x0000041c
 8003b3c:	0000040c 	.word	0x0000040c
 8003b40:	00000404 	.word	0x00000404

08003b44 <f_close>:
{
 8003b44:	b510      	push	{r4, lr}
 8003b46:	0004      	movs	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8003b48:	f7ff ff94 	bl	8003a74 <f_sync>
	if (res == FR_OK)
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d10e      	bne.n	8003b6e <f_close+0x2a>
		res = validate(fp);				/* Lock volume */
 8003b50:	0020      	movs	r0, r4
 8003b52:	f7fe fb55 	bl	8002200 <validate>
		if (res == FR_OK) {
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d109      	bne.n	8003b6e <f_close+0x2a>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8003b5a:	2385      	movs	r3, #133	; 0x85
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	58e0      	ldr	r0, [r4, r3]
 8003b60:	f7fe faec 	bl	800213c <dec_lock>
			if (res == FR_OK)
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d102      	bne.n	8003b6e <f_close+0x2a>
				fp->fs = 0;				/* Invalidate file object */
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	50e0      	str	r0, [r4, r3]
}
 8003b6e:	bd10      	pop	{r4, pc}

08003b70 <f_stat>:
{
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	4c15      	ldr	r4, [pc, #84]	; (8003bc8 <f_stat+0x58>)
 8003b74:	000e      	movs	r6, r1
 8003b76:	44a5      	add	sp, r4
 8003b78:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 0);
 8003b7a:	a8ff      	add	r0, sp, #1020	; 0x3fc
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	a901      	add	r1, sp, #4
 8003b80:	301c      	adds	r0, #28
 8003b82:	f7fe fcf7 	bl	8002574 <find_volume>
 8003b86:	ad06      	add	r5, sp, #24
 8003b88:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 8003b8a:	d116      	bne.n	8003bba <f_stat+0x4a>
		INIT_BUF(dj);
 8003b8c:	2383      	movs	r3, #131	; 0x83
 8003b8e:	aa03      	add	r2, sp, #12
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	50ea      	str	r2, [r5, r3]
 8003b94:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <f_stat+0x5c>)
 8003b96:	3308      	adds	r3, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 8003b98:	9901      	ldr	r1, [sp, #4]
 8003b9a:	0028      	movs	r0, r5
		INIT_BUF(dj);
 8003b9c:	50ea      	str	r2, [r5, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8003b9e:	f7ff fa05 	bl	8002fac <follow_path>
 8003ba2:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {				/* Follow completed */
 8003ba4:	d109      	bne.n	8003bba <f_stat+0x4a>
			if (dj.dir) {		/* Found an object */
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <f_stat+0x60>)
 8003ba8:	58eb      	ldr	r3, [r5, r3]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <f_stat+0x54>
				if (fno) get_fileinfo(&dj, fno);
 8003bae:	2e00      	cmp	r6, #0
 8003bb0:	d003      	beq.n	8003bba <f_stat+0x4a>
 8003bb2:	0031      	movs	r1, r6
 8003bb4:	0028      	movs	r0, r5
 8003bb6:	f7fe fb45 	bl	8002244 <get_fileinfo>
}
 8003bba:	0020      	movs	r0, r4
 8003bbc:	2388      	movs	r3, #136	; 0x88
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	449d      	add	sp, r3
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}
				res = FR_INVALID_NAME;
 8003bc4:	2406      	movs	r4, #6
 8003bc6:	e7f8      	b.n	8003bba <f_stat+0x4a>
 8003bc8:	fffffbc0 	.word	0xfffffbc0
 8003bcc:	200000c2 	.word	0x200000c2
 8003bd0:	00000414 	.word	0x00000414

08003bd4 <f_puts>:
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 8003bd4:	2300      	movs	r3, #0
{
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	0004      	movs	r4, r0
 8003bda:	b096      	sub	sp, #88	; 0x58
	pb.fp = fp;				/* Initialize output buffer */
 8003bdc:	9103      	str	r1, [sp, #12]
	pb.nchr = pb.idx = 0;
 8003bde:	9304      	str	r3, [sp, #16]
 8003be0:	9305      	str	r3, [sp, #20]

	while (*str)			/* Put the string */
 8003be2:	7821      	ldrb	r1, [r4, #0]
 8003be4:	2900      	cmp	r1, #0
 8003be6:	d106      	bne.n	8003bf6 <f_puts+0x22>
		putc_bfd(&pb, *str++);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8003be8:	9a04      	ldr	r2, [sp, #16]
 8003bea:	2a00      	cmp	r2, #0
 8003bec:	da08      	bge.n	8003c00 <f_puts+0x2c>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 8003bee:	2001      	movs	r0, #1
 8003bf0:	4240      	negs	r0, r0
}
 8003bf2:	b016      	add	sp, #88	; 0x58
 8003bf4:	bd10      	pop	{r4, pc}
		putc_bfd(&pb, *str++);
 8003bf6:	a803      	add	r0, sp, #12
 8003bf8:	3401      	adds	r4, #1
 8003bfa:	f7ff ff19 	bl	8003a30 <putc_bfd>
 8003bfe:	e7f0      	b.n	8003be2 <f_puts+0xe>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8003c00:	ab02      	add	r3, sp, #8
 8003c02:	a906      	add	r1, sp, #24
 8003c04:	9803      	ldr	r0, [sp, #12]
 8003c06:	f7ff fde5 	bl	80037d4 <f_write>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d1ef      	bne.n	8003bee <f_puts+0x1a>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8003c0e:	9b04      	ldr	r3, [sp, #16]
 8003c10:	9a02      	ldr	r2, [sp, #8]
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d1ea      	bne.n	8003bee <f_puts+0x1a>
 8003c18:	9805      	ldr	r0, [sp, #20]
 8003c1a:	e7ea      	b.n	8003bf2 <f_puts+0x1e>

08003c1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003c1c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
 8003c1e:	2401      	movs	r4, #1
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <FATFS_LinkDriverEx+0x40>)
 8003c22:	7a5d      	ldrb	r5, [r3, #9]
 8003c24:	42a5      	cmp	r5, r4
 8003c26:	d816      	bhi.n	8003c56 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003c28:	2400      	movs	r4, #0
 8003c2a:	7a5d      	ldrb	r5, [r3, #9]
 8003c2c:	b2ed      	uxtb	r5, r5
 8003c2e:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8003c30:	7a5d      	ldrb	r5, [r3, #9]
 8003c32:	00ad      	lsls	r5, r5, #2
 8003c34:	195d      	adds	r5, r3, r5
 8003c36:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8003c38:	7a58      	ldrb	r0, [r3, #9]
 8003c3a:	1818      	adds	r0, r3, r0
 8003c3c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8003c3e:	7a5a      	ldrb	r2, [r3, #9]
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	1c50      	adds	r0, r2, #1
 8003c44:	b2c0      	uxtb	r0, r0
 8003c46:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8003c48:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8003c4a:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8003c4c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8003c4e:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 8003c50:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8003c52:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003c54:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 8003c56:	0020      	movs	r0, r4
 8003c58:	bd30      	pop	{r4, r5, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	200002c4 	.word	0x200002c4

08003c60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003c60:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	f7ff ffda 	bl	8003c1c <FATFS_LinkDriverEx>
}
 8003c68:	bd10      	pop	{r4, pc}
	...

08003c6c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8003c6c:	b510      	push	{r4, lr}
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8003c6e:	287f      	cmp	r0, #127	; 0x7f
 8003c70:	d907      	bls.n	8003c82 <ff_convert+0x16>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8003c72:	2900      	cmp	r1, #0
 8003c74:	d006      	beq.n	8003c84 <ff_convert+0x18>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8003c76:	28ff      	cmp	r0, #255	; 0xff
 8003c78:	d811      	bhi.n	8003c9e <ff_convert+0x32>
 8003c7a:	3880      	subs	r0, #128	; 0x80
 8003c7c:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <ff_convert+0x38>)
 8003c7e:	0040      	lsls	r0, r0, #1
 8003c80:	5ac0      	ldrh	r0, [r0, r3]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8003c82:	bd10      	pop	{r4, pc}
				if (chr == Tbl[c]) break;
 8003c84:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <ff_convert+0x38>)
 8003c86:	004c      	lsls	r4, r1, #1
 8003c88:	5aa4      	ldrh	r4, [r4, r2]
 8003c8a:	b28b      	uxth	r3, r1
 8003c8c:	4284      	cmp	r4, r0
 8003c8e:	d003      	beq.n	8003c98 <ff_convert+0x2c>
 8003c90:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8003c92:	2980      	cmp	r1, #128	; 0x80
 8003c94:	d1f7      	bne.n	8003c86 <ff_convert+0x1a>
 8003c96:	000b      	movs	r3, r1
			c = (c + 0x80) & 0xFF;
 8003c98:	3380      	adds	r3, #128	; 0x80
 8003c9a:	b2d8      	uxtb	r0, r3
 8003c9c:	e7f1      	b.n	8003c82 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	e7ef      	b.n	8003c82 <ff_convert+0x16>
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	08005556 	.word	0x08005556

08003ca8 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8003ca8:	2300      	movs	r3, #0
{
 8003caa:	b510      	push	{r4, lr}
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8003cac:	4c05      	ldr	r4, [pc, #20]	; (8003cc4 <ff_wtoupper+0x1c>)
 8003cae:	005a      	lsls	r2, r3, #1
 8003cb0:	5b11      	ldrh	r1, [r2, r4]
 8003cb2:	2900      	cmp	r1, #0
 8003cb4:	d003      	beq.n	8003cbe <ff_wtoupper+0x16>
 8003cb6:	4281      	cmp	r1, r0
 8003cb8:	d102      	bne.n	8003cc0 <ff_wtoupper+0x18>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8003cba:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <ff_wtoupper+0x20>)
 8003cbc:	5ad0      	ldrh	r0, [r2, r3]
}
 8003cbe:	bd10      	pop	{r4, pc}
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	e7f4      	b.n	8003cae <ff_wtoupper+0x6>
 8003cc4:	08005656 	.word	0x08005656
 8003cc8:	08005836 	.word	0x08005836

08003ccc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003ccc:	b510      	push	{r4, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003cce:	4903      	ldr	r1, [pc, #12]	; (8003cdc <MX_FATFS_Init+0x10>)
 8003cd0:	4803      	ldr	r0, [pc, #12]	; (8003ce0 <MX_FATFS_Init+0x14>)
 8003cd2:	f7ff ffc5 	bl	8003c60 <FATFS_LinkDriver>
 8003cd6:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <MX_FATFS_Init+0x18>)
 8003cd8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8003cda:	bd10      	pop	{r4, pc}
 8003cdc:	200002fc 	.word	0x200002fc
 8003ce0:	20000010 	.word	0x20000010
 8003ce4:	20000300 	.word	0x20000300

08003ce8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8003ce8:	2000      	movs	r0, #0
 8003cea:	4770      	bx	lr

08003cec <SPI_TxByte>:
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
}

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8003cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cee:	466b      	mov	r3, sp
 8003cf0:	1ddd      	adds	r5, r3, #7
 8003cf2:	7028      	strb	r0, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003cf4:	4c06      	ldr	r4, [pc, #24]	; (8003d10 <SPI_TxByte+0x24>)
 8003cf6:	0020      	movs	r0, r4
 8003cf8:	f7fd fd92 	bl	8001820 <HAL_SPI_GetState>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	2801      	cmp	r0, #1
 8003d00:	d1f8      	bne.n	8003cf4 <SPI_TxByte+0x8>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8003d02:	23fa      	movs	r3, #250	; 0xfa
 8003d04:	0029      	movs	r1, r5
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	0020      	movs	r0, r4
 8003d0a:	f7fd fb87 	bl	800141c <HAL_SPI_Transmit>
}
 8003d0e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8003d10:	20001458 	.word	0x20001458

08003d14 <SELECT>:
{
 8003d14:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2140      	movs	r1, #64	; 0x40
 8003d1a:	4802      	ldr	r0, [pc, #8]	; (8003d24 <SELECT+0x10>)
 8003d1c:	f7fc ff32 	bl	8000b84 <HAL_GPIO_WritePin>
}
 8003d20:	bd10      	pop	{r4, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	48000400 	.word	0x48000400

08003d28 <DESELECT>:
{
 8003d28:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	2140      	movs	r1, #64	; 0x40
 8003d2e:	4802      	ldr	r0, [pc, #8]	; (8003d38 <DESELECT+0x10>)
 8003d30:	f7fc ff28 	bl	8000b84 <HAL_GPIO_WritePin>
}
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	48000400 	.word	0x48000400

08003d3c <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8003d3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t dummy, data;
  dummy = 0xFF;
 8003d3e:	260e      	movs	r6, #14
 8003d40:	23ff      	movs	r3, #255	; 0xff
 8003d42:	446e      	add	r6, sp
  data = 0;
 8003d44:	240f      	movs	r4, #15
  dummy = 0xFF;
 8003d46:	7033      	strb	r3, [r6, #0]
  data = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	446c      	add	r4, sp
 8003d4c:	7023      	strb	r3, [r4, #0]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8003d4e:	4d09      	ldr	r5, [pc, #36]	; (8003d74 <SPI_RxByte+0x38>)
 8003d50:	0028      	movs	r0, r5
 8003d52:	f7fd fd65 	bl	8001820 <HAL_SPI_GetState>
 8003d56:	0003      	movs	r3, r0
 8003d58:	2801      	cmp	r0, #1
 8003d5a:	d1f8      	bne.n	8003d4e <SPI_RxByte+0x12>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8003d5c:	22fa      	movs	r2, #250	; 0xfa
 8003d5e:	0092      	lsls	r2, r2, #2
 8003d60:	9200      	str	r2, [sp, #0]
 8003d62:	0031      	movs	r1, r6
 8003d64:	0022      	movs	r2, r4
 8003d66:	0028      	movs	r0, r5
 8003d68:	f7fd fc28 	bl	80015bc <HAL_SPI_TransmitReceive>
  
  return data;
 8003d6c:	7820      	ldrb	r0, [r4, #0]
}
 8003d6e:	b004      	add	sp, #16
 8003d70:	bd70      	pop	{r4, r5, r6, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	20001458 	.word	0x20001458

08003d78 <SD_PowerOn>:
  return res;
}

/*Power on*/
static void SD_PowerOn(void) 
{
 8003d78:	b513      	push	{r0, r1, r4, lr}
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
  

  DESELECT();
 8003d7a:	f7ff ffd5 	bl	8003d28 <DESELECT>
 8003d7e:	240a      	movs	r4, #10
  
  for(int i = 0; i < 10; i++)
  {
    SPI_TxByte(0xFF);
 8003d80:	20ff      	movs	r0, #255	; 0xff
 8003d82:	3c01      	subs	r4, #1
 8003d84:	f7ff ffb2 	bl	8003cec <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8003d88:	2c00      	cmp	r4, #0
 8003d8a:	d1f9      	bne.n	8003d80 <SD_PowerOn+0x8>
  }
  
  /* SPI Chips Select */
  SELECT();
 8003d8c:	f7ff ffc2 	bl	8003d14 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8003d90:	466a      	mov	r2, sp
 8003d92:	2340      	movs	r3, #64	; 0x40
 8003d94:	7013      	strb	r3, [r2, #0]
  cmd_arg[1] = 0;
  cmd_arg[2] = 0;
  cmd_arg[3] = 0;
  cmd_arg[4] = 0;
  cmd_arg[5] = 0x95;
 8003d96:	2395      	movs	r3, #149	; 0x95
  cmd_arg[1] = 0;
 8003d98:	7054      	strb	r4, [r2, #1]
  cmd_arg[2] = 0;
 8003d9a:	7094      	strb	r4, [r2, #2]
  cmd_arg[3] = 0;
 8003d9c:	70d4      	strb	r4, [r2, #3]
  cmd_arg[4] = 0;
 8003d9e:	7114      	strb	r4, [r2, #4]
  cmd_arg[5] = 0x95;
 8003da0:	7153      	strb	r3, [r2, #5]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
  {
    SPI_TxByte(cmd_arg[i]);
 8003da2:	466b      	mov	r3, sp
 8003da4:	5d18      	ldrb	r0, [r3, r4]
  for (int i = 0; i < 6; i++)
 8003da6:	3401      	adds	r4, #1
    SPI_TxByte(cmd_arg[i]);
 8003da8:	f7ff ffa0 	bl	8003cec <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8003dac:	2c06      	cmp	r4, #6
 8003dae:	d1f8      	bne.n	8003da2 <SD_PowerOn+0x2a>
 8003db0:	2480      	movs	r4, #128	; 0x80
 8003db2:	01a4      	lsls	r4, r4, #6
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8003db4:	f7ff ffc2 	bl	8003d3c <SPI_RxByte>
 8003db8:	2801      	cmp	r0, #1
 8003dba:	d002      	beq.n	8003dc2 <SD_PowerOn+0x4a>
 8003dbc:	3c01      	subs	r4, #1
 8003dbe:	2c00      	cmp	r4, #0
 8003dc0:	d1f8      	bne.n	8003db4 <SD_PowerOn+0x3c>
  {
    Count--;
  }
  
  DESELECT();
 8003dc2:	f7ff ffb1 	bl	8003d28 <DESELECT>
  SPI_TxByte(0XFF);
 8003dc6:	20ff      	movs	r0, #255	; 0xff
 8003dc8:	f7ff ff90 	bl	8003cec <SPI_TxByte>
  
  PowerFlag = 1;
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4b01      	ldr	r3, [pc, #4]	; (8003dd4 <SD_PowerOn+0x5c>)
 8003dd0:	701a      	strb	r2, [r3, #0]
}
 8003dd2:	bd13      	pop	{r0, r1, r4, pc}
 8003dd4:	200002d1 	.word	0x200002d1

08003dd8 <SD_ReadyWait>:
  Timer2 = 50;
 8003dd8:	2332      	movs	r3, #50	; 0x32
{
 8003dda:	b510      	push	{r4, lr}
  Timer2 = 50;
 8003ddc:	4c05      	ldr	r4, [pc, #20]	; (8003df4 <SD_ReadyWait+0x1c>)
 8003dde:	7023      	strb	r3, [r4, #0]
  SPI_RxByte();
 8003de0:	f7ff ffac 	bl	8003d3c <SPI_RxByte>
    res = SPI_RxByte();
 8003de4:	f7ff ffaa 	bl	8003d3c <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 8003de8:	28ff      	cmp	r0, #255	; 0xff
 8003dea:	d002      	beq.n	8003df2 <SD_ReadyWait+0x1a>
 8003dec:	7823      	ldrb	r3, [r4, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f8      	bne.n	8003de4 <SD_ReadyWait+0xc>
}
 8003df2:	bd10      	pop	{r4, pc}
 8003df4:	200019f0 	.word	0x200019f0

08003df8 <SD_TxDataBlock>:
}

/* ë�°ì�´í„° ì „ì†¡ íŒ¨í‚· */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	0005      	movs	r5, r0
 8003dfc:	000e      	movs	r6, r1
  uint8_t resp, wc;
  uint8_t i = 0;
    
  /* SDì¹´ë“œ ì¤€ë¹„ ëŒ€ê¸° */
  if (SD_ReadyWait() != 0xFF)
 8003dfe:	f7ff ffeb 	bl	8003dd8 <SD_ReadyWait>
 8003e02:	0003      	movs	r3, r0
    return FALSE;
 8003e04:	2000      	movs	r0, #0
  if (SD_ReadyWait() != 0xFF)
 8003e06:	2bff      	cmp	r3, #255	; 0xff
 8003e08:	d12c      	bne.n	8003e64 <SD_TxDataBlock+0x6c>
  
  /* í† í�° ì „ì†¡ */
  SPI_TxByte(token);      
 8003e0a:	0030      	movs	r0, r6
 8003e0c:	f7ff ff6e 	bl	8003cec <SPI_TxByte>
  
  /* ë�°ì�´í„° í† í�°ì�¸ ê²½ìš° */
  if (token != 0xFD) 
 8003e10:	2efd      	cmp	r6, #253	; 0xfd
 8003e12:	d021      	beq.n	8003e58 <SD_TxDataBlock+0x60>
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	002c      	movs	r4, r5
 8003e1a:	18ed      	adds	r5, r5, r3
    wc = 0;
    
    /* 512 ë°”ì�´íŠ¸ ë�°ì�´í„° ì „ì†¡ */
    do 
    { 
      SPI_TxByte(*buff++);
 8003e1c:	7820      	ldrb	r0, [r4, #0]
 8003e1e:	f7ff ff65 	bl	8003cec <SPI_TxByte>
      SPI_TxByte(*buff++);
 8003e22:	7860      	ldrb	r0, [r4, #1]
 8003e24:	3402      	adds	r4, #2
 8003e26:	f7ff ff61 	bl	8003cec <SPI_TxByte>
    } while (--wc);
 8003e2a:	42ac      	cmp	r4, r5
 8003e2c:	d1f6      	bne.n	8003e1c <SD_TxDataBlock+0x24>
    
    SPI_RxByte();       /* CRC ë¬´ì‹œ */
 8003e2e:	f7ff ff85 	bl	8003d3c <SPI_RxByte>
    SPI_RxByte();
 8003e32:	2541      	movs	r5, #65	; 0x41
 8003e34:	f7ff ff82 	bl	8003d3c <SPI_RxByte>
    while (i <= 64) 
    {			
      resp = SPI_RxByte();
      
      /* ì—�ëŸ¬ ì�‘ë‹µ ì²˜ë¦¬ */
      if ((resp & 0x1F) == 0x05) 
 8003e38:	261f      	movs	r6, #31
      resp = SPI_RxByte();
 8003e3a:	f7ff ff7f 	bl	8003d3c <SPI_RxByte>
      if ((resp & 0x1F) == 0x05) 
 8003e3e:	0003      	movs	r3, r0
      resp = SPI_RxByte();
 8003e40:	0004      	movs	r4, r0
      if ((resp & 0x1F) == 0x05) 
 8003e42:	4033      	ands	r3, r6
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d003      	beq.n	8003e50 <SD_TxDataBlock+0x58>
 8003e48:	3d01      	subs	r5, #1
 8003e4a:	b2ed      	uxtb	r5, r5
    while (i <= 64) 
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	d1f4      	bne.n	8003e3a <SD_TxDataBlock+0x42>
      
      i++;
    }
    
    /* SPI ìˆ˜ì‹  ë²„í�¼ Clear */
    while (SPI_RxByte() == 0);
 8003e50:	f7ff ff74 	bl	8003d3c <SPI_RxByte>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d0fb      	beq.n	8003e50 <SD_TxDataBlock+0x58>
  }
  
  if ((resp & 0x1F) == 0x05)
 8003e58:	201f      	movs	r0, #31
 8003e5a:	4004      	ands	r4, r0
 8003e5c:	3c05      	subs	r4, #5
 8003e5e:	4260      	negs	r0, r4
 8003e60:	4160      	adcs	r0, r4
    return FALSE;
 8003e62:	b2c0      	uxtb	r0, r0
    return TRUE;
  else
    return FALSE;
}
 8003e64:	bd70      	pop	{r4, r5, r6, pc}

08003e66 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD íŒ¨í‚· ì „ì†¡ */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8003e66:	b570      	push	{r4, r5, r6, lr}
 8003e68:	0005      	movs	r5, r0
 8003e6a:	000c      	movs	r4, r1
  uint8_t crc, res;
  
  /* SDì¹´ë“œ ëŒ€ê¸° */
  if (SD_ReadyWait() != 0xFF)
 8003e6c:	f7ff ffb4 	bl	8003dd8 <SD_ReadyWait>
 8003e70:	0003      	movs	r3, r0
    return 0xFF;
 8003e72:	20ff      	movs	r0, #255	; 0xff
  if (SD_ReadyWait() != 0xFF)
 8003e74:	4283      	cmp	r3, r0
 8003e76:	d126      	bne.n	8003ec6 <SD_SendCmd+0x60>
  
  /* ëª…ë ¹ íŒ¨í‚· ì „ì†¡ */
  SPI_TxByte(cmd); 			/* Command */
 8003e78:	0028      	movs	r0, r5
 8003e7a:	f7ff ff37 	bl	8003cec <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8003e7e:	0e20      	lsrs	r0, r4, #24
 8003e80:	f7ff ff34 	bl	8003cec <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8003e84:	0c20      	lsrs	r0, r4, #16
 8003e86:	b2c0      	uxtb	r0, r0
 8003e88:	f7ff ff30 	bl	8003cec <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8003e8c:	0a20      	lsrs	r0, r4, #8
 8003e8e:	b2c0      	uxtb	r0, r0
 8003e90:	f7ff ff2c 	bl	8003cec <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8003e94:	b2e0      	uxtb	r0, r4
 8003e96:	f7ff ff29 	bl	8003cec <SPI_TxByte>
  
  /* ëª…ë ¹ë³„ CRC ì¤€ë¹„ */
  crc = 0;  
  if (cmd == CMD0)
    crc = 0x95; /* CRC for CMD0(0) */
 8003e9a:	2095      	movs	r0, #149	; 0x95
  if (cmd == CMD0)
 8003e9c:	2d40      	cmp	r5, #64	; 0x40
 8003e9e:	d003      	beq.n	8003ea8 <SD_SendCmd+0x42>
  crc = 0;  
 8003ea0:	2000      	movs	r0, #0
  
  if (cmd == CMD8)
 8003ea2:	2d48      	cmp	r5, #72	; 0x48
 8003ea4:	d100      	bne.n	8003ea8 <SD_SendCmd+0x42>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8003ea6:	3087      	adds	r0, #135	; 0x87
  
  /* CRC ì „ì†¡ */
  SPI_TxByte(crc);
 8003ea8:	f7ff ff20 	bl	8003cec <SPI_TxByte>
  
  /* CMD12 Stop Reading ëª…ë ¹ì�¸ ê²½ìš°ì—�ëŠ” ì�‘ë‹µ ë°”ì�´íŠ¸ í•˜ë‚˜ë¥¼ ë²„ë¦°ë‹¤ */
  if (cmd == CMD12)
 8003eac:	2d4c      	cmp	r5, #76	; 0x4c
 8003eae:	d101      	bne.n	8003eb4 <SD_SendCmd+0x4e>
    SPI_RxByte();
 8003eb0:	f7ff ff44 	bl	8003d3c <SPI_RxByte>
  crc = 0;  
 8003eb4:	240a      	movs	r4, #10
  
  /* 10íšŒ ë‚´ì—� ì •ìƒ� ë�°ì�´í„°ë¥¼ ìˆ˜ì‹ í•œë‹¤. */
  uint8_t n = 10; 
  do
  {
    res = SPI_RxByte();
 8003eb6:	f7ff ff41 	bl	8003d3c <SPI_RxByte>
  } while ((res & 0x80) && --n);
 8003eba:	0603      	lsls	r3, r0, #24
 8003ebc:	d503      	bpl.n	8003ec6 <SD_SendCmd+0x60>
 8003ebe:	3c01      	subs	r4, #1
 8003ec0:	b2e4      	uxtb	r4, r4
 8003ec2:	2c00      	cmp	r4, #0
 8003ec4:	d1f7      	bne.n	8003eb6 <SD_SendCmd+0x50>
  
  return res;
}
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}

08003ec8 <SD_RxDataBlock>:
  Timer1 = 10;
 8003ec8:	230a      	movs	r3, #10
{
 8003eca:	b570      	push	{r4, r5, r6, lr}
 8003ecc:	0004      	movs	r4, r0
 8003ece:	000d      	movs	r5, r1
  Timer1 = 10;
 8003ed0:	4e0f      	ldr	r6, [pc, #60]	; (8003f10 <SD_RxDataBlock+0x48>)
 8003ed2:	7033      	strb	r3, [r6, #0]
    token = SPI_RxByte();
 8003ed4:	f7ff ff32 	bl	8003d3c <SPI_RxByte>
 8003ed8:	0003      	movs	r3, r0
  } while((token == 0xFF) && Timer1);
 8003eda:	28ff      	cmp	r0, #255	; 0xff
 8003edc:	d104      	bne.n	8003ee8 <SD_RxDataBlock+0x20>
 8003ede:	7830      	ldrb	r0, [r6, #0]
 8003ee0:	b2c0      	uxtb	r0, r0
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	d1f6      	bne.n	8003ed4 <SD_RxDataBlock+0xc>
}
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 8003ee8:	2000      	movs	r0, #0
  if(token != 0xFE)
 8003eea:	2bfe      	cmp	r3, #254	; 0xfe
 8003eec:	d1fb      	bne.n	8003ee6 <SD_RxDataBlock+0x1e>
 8003eee:	0026      	movs	r6, r4
  *buff = SPI_RxByte();
 8003ef0:	f7ff ff24 	bl	8003d3c <SPI_RxByte>
 8003ef4:	7030      	strb	r0, [r6, #0]
 8003ef6:	f7ff ff21 	bl	8003d3c <SPI_RxByte>
 8003efa:	7070      	strb	r0, [r6, #1]
 8003efc:	3602      	adds	r6, #2
  } while(btr -= 2);
 8003efe:	1b73      	subs	r3, r6, r5
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	d1f5      	bne.n	8003ef0 <SD_RxDataBlock+0x28>
  SPI_RxByte(); /* CRC ë¬´ì‹œ */
 8003f04:	f7ff ff1a 	bl	8003d3c <SPI_RxByte>
  SPI_RxByte();
 8003f08:	f7ff ff18 	bl	8003d3c <SPI_RxByte>
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	e7ea      	b.n	8003ee6 <SD_RxDataBlock+0x1e>
 8003f10:	200019f1 	.word	0x200019f1

08003f14 <SD_disk_initialize>:
  user_diskio.c íŒŒì�¼ì—�ì„œ ì‚¬ìš©ë�œë‹¤.
-----------------------------------------------------------------------*/

/* SDì¹´ë“œ ì´ˆê¸°í™” */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t n, type, ocr[4];
  
  /* í•œì¢…ë¥˜ì�˜ ë“œë�¼ì�´ë¸Œë§Œ ì§€ì›� */
  if(drv)
    return STA_NOINIT;  
 8003f16:	2301      	movs	r3, #1
  if(drv)
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	d106      	bne.n	8003f2a <SD_disk_initialize+0x16>
  
  /* SDì¹´ë“œ ë¯¸ì‚½ìž… */
  if(Stat & STA_NODISK)
 8003f1c:	2602      	movs	r6, #2
 8003f1e:	4d46      	ldr	r5, [pc, #280]	; (8004038 <SD_disk_initialize+0x124>)
 8003f20:	782c      	ldrb	r4, [r5, #0]
 8003f22:	4034      	ands	r4, r6
 8003f24:	d003      	beq.n	8003f2e <SD_disk_initialize+0x1a>
  {
    /* Initialization failed */
    SD_PowerOff();
  }
  
  return Stat;
 8003f26:	782b      	ldrb	r3, [r5, #0]
 8003f28:	b2db      	uxtb	r3, r3
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  SD_PowerOn();         
 8003f2e:	f7ff ff23 	bl	8003d78 <SD_PowerOn>
  SELECT();             
 8003f32:	f7ff feef 	bl	8003d14 <SELECT>
  if (SD_SendCmd(CMD0, 0) == 1) 
 8003f36:	0021      	movs	r1, r4
 8003f38:	2040      	movs	r0, #64	; 0x40
 8003f3a:	f7ff ff94 	bl	8003e66 <SD_SendCmd>
 8003f3e:	2801      	cmp	r0, #1
 8003f40:	d16d      	bne.n	800401e <SD_disk_initialize+0x10a>
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8003f42:	21d5      	movs	r1, #213	; 0xd5
    Timer1 = 100;
 8003f44:	2364      	movs	r3, #100	; 0x64
 8003f46:	4f3d      	ldr	r7, [pc, #244]	; (800403c <SD_disk_initialize+0x128>)
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8003f48:	0049      	lsls	r1, r1, #1
 8003f4a:	3047      	adds	r0, #71	; 0x47
    Timer1 = 100;
 8003f4c:	703b      	strb	r3, [r7, #0]
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8003f4e:	f7ff ff8a 	bl	8003e66 <SD_SendCmd>
 8003f52:	2801      	cmp	r0, #1
 8003f54:	d140      	bne.n	8003fd8 <SD_disk_initialize+0xc4>
        ocr[n] = SPI_RxByte();
 8003f56:	f7ff fef1 	bl	8003d3c <SPI_RxByte>
 8003f5a:	ae01      	add	r6, sp, #4
 8003f5c:	55a0      	strb	r0, [r4, r6]
 8003f5e:	3401      	adds	r4, #1
      for (n = 0; n < 4; n++)
 8003f60:	2c04      	cmp	r4, #4
 8003f62:	d1f8      	bne.n	8003f56 <SD_disk_initialize+0x42>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8003f64:	78b3      	ldrb	r3, [r6, #2]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d159      	bne.n	800401e <SD_disk_initialize+0x10a>
 8003f6a:	78f3      	ldrb	r3, [r6, #3]
 8003f6c:	2baa      	cmp	r3, #170	; 0xaa
 8003f6e:	d156      	bne.n	800401e <SD_disk_initialize+0x10a>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8003f70:	2480      	movs	r4, #128	; 0x80
 8003f72:	05e4      	lsls	r4, r4, #23
 8003f74:	2100      	movs	r1, #0
 8003f76:	2077      	movs	r0, #119	; 0x77
 8003f78:	f7ff ff75 	bl	8003e66 <SD_SendCmd>
 8003f7c:	2801      	cmp	r0, #1
 8003f7e:	d924      	bls.n	8003fca <SD_disk_initialize+0xb6>
        } while (Timer1);
 8003f80:	783b      	ldrb	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f6      	bne.n	8003f74 <SD_disk_initialize+0x60>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8003f86:	783b      	ldrb	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d048      	beq.n	800401e <SD_disk_initialize+0x10a>
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	207a      	movs	r0, #122	; 0x7a
 8003f90:	f7ff ff69 	bl	8003e66 <SD_SendCmd>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d142      	bne.n	800401e <SD_disk_initialize+0x10a>
 8003f98:	0004      	movs	r4, r0
            ocr[n] = SPI_RxByte();
 8003f9a:	f7ff fecf 	bl	8003d3c <SPI_RxByte>
 8003f9e:	5530      	strb	r0, [r6, r4]
 8003fa0:	3401      	adds	r4, #1
          for (n = 0; n < 4; n++)
 8003fa2:	2c04      	cmp	r4, #4
 8003fa4:	d1f9      	bne.n	8003f9a <SD_disk_initialize+0x86>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8003fa6:	7833      	ldrb	r3, [r6, #0]
 8003fa8:	2606      	movs	r6, #6
 8003faa:	065b      	lsls	r3, r3, #25
 8003fac:	d400      	bmi.n	8003fb0 <SD_disk_initialize+0x9c>
 8003fae:	3e04      	subs	r6, #4
  CardType = type;
 8003fb0:	4b23      	ldr	r3, [pc, #140]	; (8004040 <SD_disk_initialize+0x12c>)
 8003fb2:	701e      	strb	r6, [r3, #0]
  DESELECT();
 8003fb4:	f7ff feb8 	bl	8003d28 <DESELECT>
  SPI_RxByte(); /* Idle ìƒ�íƒœ ì „í™˜ (Release DO) */
 8003fb8:	f7ff fec0 	bl	8003d3c <SPI_RxByte>
  if (type) 
 8003fbc:	2e00      	cmp	r6, #0
 8003fbe:	d037      	beq.n	8004030 <SD_disk_initialize+0x11c>
    Stat &= ~STA_NOINIT; 
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	782b      	ldrb	r3, [r5, #0]
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	702b      	strb	r3, [r5, #0]
 8003fc8:	e7ad      	b.n	8003f26 <SD_disk_initialize+0x12>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8003fca:	0021      	movs	r1, r4
 8003fcc:	2069      	movs	r0, #105	; 0x69
 8003fce:	f7ff ff4a 	bl	8003e66 <SD_SendCmd>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d1d4      	bne.n	8003f80 <SD_disk_initialize+0x6c>
 8003fd6:	e7d6      	b.n	8003f86 <SD_disk_initialize+0x72>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8003fd8:	0021      	movs	r1, r4
 8003fda:	2077      	movs	r0, #119	; 0x77
 8003fdc:	f7ff ff43 	bl	8003e66 <SD_SendCmd>
 8003fe0:	2801      	cmp	r0, #1
 8003fe2:	d805      	bhi.n	8003ff0 <SD_disk_initialize+0xdc>
 8003fe4:	0021      	movs	r1, r4
 8003fe6:	2069      	movs	r0, #105	; 0x69
 8003fe8:	f7ff ff3d 	bl	8003e66 <SD_SendCmd>
 8003fec:	2801      	cmp	r0, #1
 8003fee:	d900      	bls.n	8003ff2 <SD_disk_initialize+0xde>
 8003ff0:	2601      	movs	r6, #1
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8003ff2:	2100      	movs	r1, #0
          if (SD_SendCmd(CMD1, 0) == 0)
 8003ff4:	2041      	movs	r0, #65	; 0x41
        if (type == 2) 
 8003ff6:	2e02      	cmp	r6, #2
 8003ff8:	d115      	bne.n	8004026 <SD_disk_initialize+0x112>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8003ffa:	2077      	movs	r0, #119	; 0x77
 8003ffc:	f7ff ff33 	bl	8003e66 <SD_SendCmd>
 8004000:	2801      	cmp	r0, #1
 8004002:	d90e      	bls.n	8004022 <SD_disk_initialize+0x10e>
      } while (Timer1);
 8004004:	783b      	ldrb	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f3      	bne.n	8003ff2 <SD_disk_initialize+0xde>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800400a:	783b      	ldrb	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d006      	beq.n	800401e <SD_disk_initialize+0x10a>
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	2050      	movs	r0, #80	; 0x50
 8004014:	0089      	lsls	r1, r1, #2
 8004016:	f7ff ff26 	bl	8003e66 <SD_SendCmd>
 800401a:	2800      	cmp	r0, #0
 800401c:	d0c8      	beq.n	8003fb0 <SD_disk_initialize+0x9c>
        type = 0;
 800401e:	2600      	movs	r6, #0
 8004020:	e7c6      	b.n	8003fb0 <SD_disk_initialize+0x9c>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8004022:	2100      	movs	r1, #0
 8004024:	2069      	movs	r0, #105	; 0x69
 8004026:	f7ff ff1e 	bl	8003e66 <SD_SendCmd>
 800402a:	2800      	cmp	r0, #0
 800402c:	d1ea      	bne.n	8004004 <SD_disk_initialize+0xf0>
 800402e:	e7ec      	b.n	800400a <SD_disk_initialize+0xf6>
  PowerFlag = 0;
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <SD_disk_initialize+0x130>)
 8004032:	701e      	strb	r6, [r3, #0]
 8004034:	e777      	b.n	8003f26 <SD_disk_initialize+0x12>
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	20000008 	.word	0x20000008
 800403c:	200019f1 	.word	0x200019f1
 8004040:	200002d0 	.word	0x200002d0
 8004044:	200002d1 	.word	0x200002d1

08004048 <SD_disk_status>:

/* ë””ìŠ¤í�¬ ìƒ�íƒœ í™•ì�¸ */
DSTATUS SD_disk_status(BYTE drv) 
{
  if (drv)
    return STA_NOINIT; 
 8004048:	2301      	movs	r3, #1
  if (drv)
 800404a:	2800      	cmp	r0, #0
 800404c:	d102      	bne.n	8004054 <SD_disk_status+0xc>
  
  return Stat;
 800404e:	4b02      	ldr	r3, [pc, #8]	; (8004058 <SD_disk_status+0x10>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b2db      	uxtb	r3, r3
}
 8004054:	0018      	movs	r0, r3
 8004056:	4770      	bx	lr
 8004058:	20000008 	.word	0x20000008

0800405c <SD_disk_read>:

/* ì„¹í„° ì�½ê¸° */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	0007      	movs	r7, r0
 8004060:	000d      	movs	r5, r1
 8004062:	0016      	movs	r6, r2
 8004064:	001c      	movs	r4, r3
  if (pdrv || !count)
    return RES_PARERR;
 8004066:	2004      	movs	r0, #4
  if (pdrv || !count)
 8004068:	2f00      	cmp	r7, #0
 800406a:	d123      	bne.n	80040b4 <SD_disk_read+0x58>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d021      	beq.n	80040b4 <SD_disk_read+0x58>
  
  if (Stat & STA_NOINIT)
 8004070:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <SD_disk_read+0x8c>)
    return RES_NOTRDY;
 8004072:	3801      	subs	r0, #1
  if (Stat & STA_NOINIT)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	07db      	lsls	r3, r3, #31
 8004078:	d41c      	bmi.n	80040b4 <SD_disk_read+0x58>
  
  if (!(CardType & 4))
 800407a:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <SD_disk_read+0x90>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	075b      	lsls	r3, r3, #29
 8004080:	d400      	bmi.n	8004084 <SD_disk_read+0x28>
    sector *= 512;      /* ì§€ì • sectorë¥¼ Byte addressing ë‹¨ìœ„ë¡œ ë³€ê²½ */
 8004082:	0256      	lsls	r6, r2, #9
  
  SELECT();
 8004084:	f7ff fe46 	bl	8003d14 <SELECT>
  
  if (count == 1) 
  { 
    /* ì‹±ê¸€ ë¸”ë¡� ì�½ê¸° */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8004088:	0031      	movs	r1, r6
  if (count == 1) 
 800408a:	2c01      	cmp	r4, #1
 800408c:	d113      	bne.n	80040b6 <SD_disk_read+0x5a>
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800408e:	2051      	movs	r0, #81	; 0x51
 8004090:	f7ff fee9 	bl	8003e66 <SD_SendCmd>
 8004094:	2800      	cmp	r0, #0
 8004096:	d106      	bne.n	80040a6 <SD_disk_read+0x4a>
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	0028      	movs	r0, r5
 800409c:	0089      	lsls	r1, r1, #2
 800409e:	f7ff ff13 	bl	8003ec8 <SD_RxDataBlock>
 80040a2:	4244      	negs	r4, r0
 80040a4:	4144      	adcs	r4, r0
      /* STOP_TRANSMISSION, ëª¨ë“  ë¸”ëŸ­ì�„ ë‹¤ ì�½ì�€ í›„, ì „ì†¡ ì¤‘ì§€ ìš”ì²­ */
      SD_SendCmd(CMD12, 0); 
    }
  }
  
  DESELECT();
 80040a6:	f7ff fe3f 	bl	8003d28 <DESELECT>
  SPI_RxByte(); /* Idle ìƒ�íƒœ(Release DO) */
 80040aa:	f7ff fe47 	bl	8003d3c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80040ae:	1e60      	subs	r0, r4, #1
 80040b0:	4184      	sbcs	r4, r0
 80040b2:	b2e0      	uxtb	r0, r4
}
 80040b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (SD_SendCmd(CMD18, sector) == 0) 
 80040b6:	2052      	movs	r0, #82	; 0x52
 80040b8:	f7ff fed5 	bl	8003e66 <SD_SendCmd>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d1f2      	bne.n	80040a6 <SD_disk_read+0x4a>
        if (!SD_RxDataBlock(buff, 512))
 80040c0:	2680      	movs	r6, #128	; 0x80
 80040c2:	00b6      	lsls	r6, r6, #2
 80040c4:	0031      	movs	r1, r6
 80040c6:	0028      	movs	r0, r5
 80040c8:	f7ff fefe 	bl	8003ec8 <SD_RxDataBlock>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d005      	beq.n	80040dc <SD_disk_read+0x80>
        buff += 512;
 80040d0:	2380      	movs	r3, #128	; 0x80
      } while (--count);
 80040d2:	3c01      	subs	r4, #1
        buff += 512;
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	18ed      	adds	r5, r5, r3
      } while (--count);
 80040d8:	2c00      	cmp	r4, #0
 80040da:	d1f3      	bne.n	80040c4 <SD_disk_read+0x68>
      SD_SendCmd(CMD12, 0); 
 80040dc:	2100      	movs	r1, #0
 80040de:	204c      	movs	r0, #76	; 0x4c
 80040e0:	f7ff fec1 	bl	8003e66 <SD_SendCmd>
 80040e4:	e7df      	b.n	80040a6 <SD_disk_read+0x4a>
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	20000008 	.word	0x20000008
 80040ec:	200002d0 	.word	0x200002d0

080040f0 <SD_disk_write>:

/* ì„¹í„° ì“°ê¸° */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	0007      	movs	r7, r0
 80040f4:	000d      	movs	r5, r1
 80040f6:	0016      	movs	r6, r2
 80040f8:	001c      	movs	r4, r3
  if (pdrv || !count)
    return RES_PARERR;
 80040fa:	2004      	movs	r0, #4
  if (pdrv || !count)
 80040fc:	2f00      	cmp	r7, #0
 80040fe:	d127      	bne.n	8004150 <SD_disk_write+0x60>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d025      	beq.n	8004150 <SD_disk_write+0x60>
  
  if (Stat & STA_NOINIT)
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <SD_disk_write+0xac>)
    return RES_NOTRDY;
 8004106:	3801      	subs	r0, #1
  if (Stat & STA_NOINIT)
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	07d2      	lsls	r2, r2, #31
 800410c:	d420      	bmi.n	8004150 <SD_disk_write+0x60>
  
  if (Stat & STA_PROTECT)
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	2304      	movs	r3, #4
    return RES_WRPRT;
 8004112:	3801      	subs	r0, #1
  if (Stat & STA_PROTECT)
 8004114:	421a      	tst	r2, r3
 8004116:	d11b      	bne.n	8004150 <SD_disk_write+0x60>
  
  if (!(CardType & 4))
 8004118:	4f21      	ldr	r7, [pc, #132]	; (80041a0 <SD_disk_write+0xb0>)
 800411a:	783a      	ldrb	r2, [r7, #0]
 800411c:	421a      	tst	r2, r3
 800411e:	d100      	bne.n	8004122 <SD_disk_write+0x32>
    sector *= 512; /* ì§€ì • sectorë¥¼ Byte addressing ë‹¨ìœ„ë¡œ ë³€ê²½ */
 8004120:	0276      	lsls	r6, r6, #9
  
  SELECT();
 8004122:	f7ff fdf7 	bl	8003d14 <SELECT>
  
  if (count == 1) 
 8004126:	2c01      	cmp	r4, #1
 8004128:	d113      	bne.n	8004152 <SD_disk_write+0x62>
  { 
    /* ì‹±ê¸€ ë¸”ë¡� ì“°ê¸° */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800412a:	0031      	movs	r1, r6
 800412c:	2058      	movs	r0, #88	; 0x58
 800412e:	f7ff fe9a 	bl	8003e66 <SD_SendCmd>
 8004132:	2800      	cmp	r0, #0
 8004134:	d130      	bne.n	8004198 <SD_disk_write+0xa8>
 8004136:	21fe      	movs	r1, #254	; 0xfe
 8004138:	0028      	movs	r0, r5
 800413a:	f7ff fe5d 	bl	8003df8 <SD_TxDataBlock>
 800413e:	4244      	negs	r4, r0
 8004140:	4144      	adcs	r4, r0
        count = 1;
      }
    }
  }
  
  DESELECT();
 8004142:	f7ff fdf1 	bl	8003d28 <DESELECT>
  SPI_RxByte();
 8004146:	f7ff fdf9 	bl	8003d3c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800414a:	1e60      	subs	r0, r4, #1
 800414c:	4184      	sbcs	r4, r0
 800414e:	b2e0      	uxtb	r0, r4
}
 8004150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (CardType & 2) 
 8004152:	783b      	ldrb	r3, [r7, #0]
 8004154:	079b      	lsls	r3, r3, #30
 8004156:	d507      	bpl.n	8004168 <SD_disk_write+0x78>
      SD_SendCmd(CMD55, 0);
 8004158:	2100      	movs	r1, #0
 800415a:	2077      	movs	r0, #119	; 0x77
 800415c:	f7ff fe83 	bl	8003e66 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8004160:	0021      	movs	r1, r4
 8004162:	2057      	movs	r0, #87	; 0x57
 8004164:	f7ff fe7f 	bl	8003e66 <SD_SendCmd>
    if (SD_SendCmd(CMD25, sector) == 0) 
 8004168:	0031      	movs	r1, r6
 800416a:	2059      	movs	r0, #89	; 0x59
 800416c:	f7ff fe7b 	bl	8003e66 <SD_SendCmd>
 8004170:	2800      	cmp	r0, #0
 8004172:	d1e6      	bne.n	8004142 <SD_disk_write+0x52>
        if(!SD_TxDataBlock(buff, 0xFC))
 8004174:	21fc      	movs	r1, #252	; 0xfc
 8004176:	0028      	movs	r0, r5
 8004178:	f7ff fe3e 	bl	8003df8 <SD_TxDataBlock>
 800417c:	2800      	cmp	r0, #0
 800417e:	d005      	beq.n	800418c <SD_disk_write+0x9c>
        buff += 512;
 8004180:	2380      	movs	r3, #128	; 0x80
      } while (--count);
 8004182:	3c01      	subs	r4, #1
        buff += 512;
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	18ed      	adds	r5, r5, r3
      } while (--count);
 8004188:	2c00      	cmp	r4, #0
 800418a:	d1f3      	bne.n	8004174 <SD_disk_write+0x84>
      if(!SD_TxDataBlock(0, 0xFD))
 800418c:	21fd      	movs	r1, #253	; 0xfd
 800418e:	2000      	movs	r0, #0
 8004190:	f7ff fe32 	bl	8003df8 <SD_TxDataBlock>
 8004194:	2800      	cmp	r0, #0
 8004196:	d1d4      	bne.n	8004142 <SD_disk_write+0x52>
        count = 1;
 8004198:	2401      	movs	r4, #1
 800419a:	e7d2      	b.n	8004142 <SD_disk_write+0x52>
 800419c:	20000008 	.word	0x20000008
 80041a0:	200002d0 	.word	0x200002d0

080041a4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* ê¸°íƒ€ í•¨ìˆ˜ */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80041a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041a6:	0006      	movs	r6, r0
 80041a8:	b085      	sub	sp, #20
 80041aa:	000f      	movs	r7, r1
 80041ac:	0015      	movs	r5, r2
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;
  
  if (drv)
    return RES_PARERR;
 80041ae:	2404      	movs	r4, #4
  if (drv)
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d108      	bne.n	80041c6 <SD_disk_ioctl+0x22>
  
  res = RES_ERROR;
  
  if (ctrl == CTRL_POWER) 
 80041b4:	2905      	cmp	r1, #5
 80041b6:	d118      	bne.n	80041ea <SD_disk_ioctl+0x46>
  {
    switch (*ptr) 
 80041b8:	7813      	ldrb	r3, [r2, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d00d      	beq.n	80041da <SD_disk_ioctl+0x36>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d004      	beq.n	80041cc <SD_disk_ioctl+0x28>
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d00d      	beq.n	80041e2 <SD_disk_ioctl+0x3e>
    DESELECT();
    SPI_RxByte();
  }
  
  return res;
}
 80041c6:	0020      	movs	r0, r4
 80041c8:	b005      	add	sp, #20
 80041ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return PowerFlag;
 80041cc:	4a46      	ldr	r2, [pc, #280]	; (80042e8 <SD_disk_ioctl+0x144>)
      res = RES_OK;
 80041ce:	001c      	movs	r4, r3
      if (SD_CheckPower())
 80041d0:	7811      	ldrb	r1, [r2, #0]
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d0f7      	beq.n	80041c6 <SD_disk_ioctl+0x22>
  PowerFlag = 0;
 80041d6:	7013      	strb	r3, [r2, #0]
 80041d8:	e7f5      	b.n	80041c6 <SD_disk_ioctl+0x22>
      SD_PowerOn();             /* Power On */
 80041da:	f7ff fdcd 	bl	8003d78 <SD_PowerOn>
      res = RES_OK;             /* Power Check */
 80041de:	0034      	movs	r4, r6
      break;
 80041e0:	e7f1      	b.n	80041c6 <SD_disk_ioctl+0x22>
  return PowerFlag;
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <SD_disk_ioctl+0x144>)
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	7053      	strb	r3, [r2, #1]
 80041e8:	e7f9      	b.n	80041de <SD_disk_ioctl+0x3a>
    if (Stat & STA_NOINIT)
 80041ea:	4b40      	ldr	r3, [pc, #256]	; (80042ec <SD_disk_ioctl+0x148>)
      return RES_NOTRDY;
 80041ec:	2403      	movs	r4, #3
    if (Stat & STA_NOINIT)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	07db      	lsls	r3, r3, #31
 80041f2:	d4e8      	bmi.n	80041c6 <SD_disk_ioctl+0x22>
    SELECT();
 80041f4:	f7ff fd8e 	bl	8003d14 <SELECT>
    switch (ctrl) 
 80041f8:	2f0d      	cmp	r7, #13
 80041fa:	d86b      	bhi.n	80042d4 <SD_disk_ioctl+0x130>
 80041fc:	0038      	movs	r0, r7
 80041fe:	f7fb ff95 	bl	800012c <__gnu_thumb1_case_uqi>
 8004202:	074b      	.short	0x074b
 8004204:	69696946 	.word	0x69696946
 8004208:	69696969 	.word	0x69696969
 800420c:	63605369 	.word	0x63605369
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8004210:	2100      	movs	r1, #0
 8004212:	2049      	movs	r0, #73	; 0x49
 8004214:	f7ff fe27 	bl	8003e66 <SD_SendCmd>
 8004218:	1e04      	subs	r4, r0, #0
 800421a:	d005      	beq.n	8004228 <SD_disk_ioctl+0x84>
  res = RES_ERROR;
 800421c:	2401      	movs	r4, #1
    DESELECT();
 800421e:	f7ff fd83 	bl	8003d28 <DESELECT>
    SPI_RxByte();
 8004222:	f7ff fd8b 	bl	8003d3c <SPI_RxByte>
 8004226:	e7ce      	b.n	80041c6 <SD_disk_ioctl+0x22>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8004228:	2110      	movs	r1, #16
 800422a:	4668      	mov	r0, sp
 800422c:	f7ff fe4c 	bl	8003ec8 <SD_RxDataBlock>
 8004230:	2800      	cmp	r0, #0
 8004232:	d0f3      	beq.n	800421c <SD_disk_ioctl+0x78>
        if ((csd[0] >> 6) == 1) 
 8004234:	466b      	mov	r3, sp
 8004236:	7819      	ldrb	r1, [r3, #0]
 8004238:	7a5a      	ldrb	r2, [r3, #9]
 800423a:	0989      	lsrs	r1, r1, #6
 800423c:	7a1b      	ldrb	r3, [r3, #8]
 800423e:	2901      	cmp	r1, #1
 8004240:	d106      	bne.n	8004250 <SD_disk_ioctl+0xac>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004242:	3201      	adds	r2, #1
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	18d3      	adds	r3, r2, r3
          *(DWORD*) buff = (DWORD) csize << 10;
 8004248:	b29b      	uxth	r3, r3
 800424a:	029b      	lsls	r3, r3, #10
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	e7e6      	b.n	800421e <SD_disk_ioctl+0x7a>
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004250:	4669      	mov	r1, sp
 8004252:	79c9      	ldrb	r1, [r1, #7]
 8004254:	099b      	lsrs	r3, r3, #6
 8004256:	0089      	lsls	r1, r1, #2
 8004258:	185b      	adds	r3, r3, r1
 800425a:	4669      	mov	r1, sp
 800425c:	20c0      	movs	r0, #192	; 0xc0
 800425e:	7989      	ldrb	r1, [r1, #6]
 8004260:	0100      	lsls	r0, r0, #4
 8004262:	0289      	lsls	r1, r1, #10
 8004264:	4001      	ands	r1, r0
 8004266:	3301      	adds	r3, #1
 8004268:	185b      	adds	r3, r3, r1
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800426a:	4669      	mov	r1, sp
 800426c:	200f      	movs	r0, #15
 800426e:	7949      	ldrb	r1, [r1, #5]
 8004270:	0052      	lsls	r2, r2, #1
 8004272:	4001      	ands	r1, r0
 8004274:	4668      	mov	r0, sp
 8004276:	7a80      	ldrb	r0, [r0, #10]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8004278:	b29b      	uxth	r3, r3
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800427a:	09c0      	lsrs	r0, r0, #7
 800427c:	1809      	adds	r1, r1, r0
 800427e:	2006      	movs	r0, #6
 8004280:	3102      	adds	r1, #2
 8004282:	4002      	ands	r2, r0
 8004284:	188a      	adds	r2, r1, r2
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	3a09      	subs	r2, #9
 800428a:	4093      	lsls	r3, r2
 800428c:	e7de      	b.n	800424c <SD_disk_ioctl+0xa8>
      *(WORD*) buff = 512;
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	802b      	strh	r3, [r5, #0]
      res = RES_OK;
 8004294:	2400      	movs	r4, #0
      break;
 8004296:	e7c2      	b.n	800421e <SD_disk_ioctl+0x7a>
      if (SD_ReadyWait() == 0xFF)
 8004298:	f7ff fd9e 	bl	8003dd8 <SD_ReadyWait>
 800429c:	38ff      	subs	r0, #255	; 0xff
 800429e:	0004      	movs	r4, r0
 80042a0:	1e60      	subs	r0, r4, #1
 80042a2:	4184      	sbcs	r4, r0
  res = RES_ERROR;
 80042a4:	b2e4      	uxtb	r4, r4
 80042a6:	e7ba      	b.n	800421e <SD_disk_ioctl+0x7a>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80042a8:	2100      	movs	r1, #0
 80042aa:	2049      	movs	r0, #73	; 0x49
 80042ac:	f7ff fddb 	bl	8003e66 <SD_SendCmd>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d1b3      	bne.n	800421c <SD_disk_ioctl+0x78>
 80042b4:	2110      	movs	r1, #16
 80042b6:	0028      	movs	r0, r5
 80042b8:	f7ff fe06 	bl	8003ec8 <SD_RxDataBlock>
 80042bc:	4244      	negs	r4, r0
 80042be:	4144      	adcs	r4, r0
 80042c0:	e7f0      	b.n	80042a4 <SD_disk_ioctl+0x100>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80042c2:	2100      	movs	r1, #0
 80042c4:	204a      	movs	r0, #74	; 0x4a
 80042c6:	e7f1      	b.n	80042ac <SD_disk_ioctl+0x108>
      if (SD_SendCmd(CMD58, 0) == 0) 
 80042c8:	2100      	movs	r1, #0
 80042ca:	207a      	movs	r0, #122	; 0x7a
 80042cc:	f7ff fdcb 	bl	8003e66 <SD_SendCmd>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d001      	beq.n	80042d8 <SD_disk_ioctl+0x134>
      res = RES_PARERR;
 80042d4:	2404      	movs	r4, #4
 80042d6:	e7a2      	b.n	800421e <SD_disk_ioctl+0x7a>
 80042d8:	1d2c      	adds	r4, r5, #4
          *ptr++ = SPI_RxByte();
 80042da:	f7ff fd2f 	bl	8003d3c <SPI_RxByte>
 80042de:	7028      	strb	r0, [r5, #0]
 80042e0:	3501      	adds	r5, #1
        for (n = 0; n < 4; n++)
 80042e2:	42a5      	cmp	r5, r4
 80042e4:	d1f9      	bne.n	80042da <SD_disk_ioctl+0x136>
 80042e6:	e7f5      	b.n	80042d4 <SD_disk_ioctl+0x130>
 80042e8:	200002d1 	.word	0x200002d1
 80042ec:	20000008 	.word	0x20000008

080042f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042f0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042f2:	2410      	movs	r4, #16
{
 80042f4:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042f6:	2230      	movs	r2, #48	; 0x30
 80042f8:	2100      	movs	r1, #0
 80042fa:	a80a      	add	r0, sp, #40	; 0x28
 80042fc:	f000 fc9d 	bl	8004c3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004300:	0022      	movs	r2, r4
 8004302:	2100      	movs	r1, #0
 8004304:	a801      	add	r0, sp, #4
 8004306:	f000 fc98 	bl	8004c3a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800430a:	2214      	movs	r2, #20
 800430c:	2100      	movs	r1, #0
 800430e:	a805      	add	r0, sp, #20
 8004310:	f000 fc93 	bl	8004c3a <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8004314:	2312      	movs	r3, #18
 8004316:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004318:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800431a:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800431c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800431e:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004320:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004322:	3c0e      	subs	r4, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004324:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004326:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004328:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800432a:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800432c:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800432e:	f7fc fc41 	bl	8000bb4 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004332:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004334:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004336:	2307      	movs	r3, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004338:	0021      	movs	r1, r4
 800433a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800433c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800433e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004340:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004342:	f7fc fe6b 	bl	800101c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004346:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004348:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800434a:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800434c:	f7fc fefa 	bl	8001144 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004350:	b017      	add	sp, #92	; 0x5c
 8004352:	bd30      	pop	{r4, r5, pc}

08004354 <send_uart>:

/*********************User Defined Functions********************/

/* to send the data to the uart */
void send_uart(char *string)
{
 8004354:	b510      	push	{r4, lr}
 8004356:	0004      	movs	r4, r0
  uint8_t len = strlen(string);
 8004358:	f7fb fed6 	bl	8000108 <strlen>
  HAL_UART_Transmit(&huart1, (uint8_t *)string, len, 2000); // transmit in blocking mode
 800435c:	23fa      	movs	r3, #250	; 0xfa
 800435e:	b2c2      	uxtb	r2, r0
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	0021      	movs	r1, r4
 8004364:	4801      	ldr	r0, [pc, #4]	; (800436c <send_uart+0x18>)
 8004366:	f7fd fd39 	bl	8001ddc <HAL_UART_Transmit>
}
 800436a:	bd10      	pop	{r4, pc}
 800436c:	20000f9c 	.word	0x20000f9c

08004370 <bufclear>:
  return i;
}

void bufclear(void) // clear buffer
{
  for (int i = 0; i < 1024; i++)
 8004370:	2300      	movs	r3, #0
 8004372:	2280      	movs	r2, #128	; 0x80
  {
    buffer[i] = '\0';
 8004374:	0018      	movs	r0, r3
{
 8004376:	b510      	push	{r4, lr}
    buffer[i] = '\0';
 8004378:	4c03      	ldr	r4, [pc, #12]	; (8004388 <bufclear+0x18>)
  for (int i = 0; i < 1024; i++)
 800437a:	00d2      	lsls	r2, r2, #3
    buffer[i] = '\0';
 800437c:	1919      	adds	r1, r3, r4
  for (int i = 0; i < 1024; i++)
 800437e:	3301      	adds	r3, #1
    buffer[i] = '\0';
 8004380:	7008      	strb	r0, [r1, #0]
  for (int i = 0; i < 1024; i++)
 8004382:	4293      	cmp	r3, r2
 8004384:	d1fa      	bne.n	800437c <bufclear+0xc>
  }
}
 8004386:	bd10      	pop	{r4, pc}
 8004388:	2000101c 	.word	0x2000101c

0800438c <mount_sd>:

void mount_sd()
{
 800438c:	b510      	push	{r4, lr}
	/* Mount SD Card */
	fresult = f_mount(&fs, "", 1);
 800438e:	2201      	movs	r2, #1
 8004390:	4906      	ldr	r1, [pc, #24]	; (80043ac <mount_sd+0x20>)
 8004392:	4807      	ldr	r0, [pc, #28]	; (80043b0 <mount_sd+0x24>)
 8004394:	f7ff f8d6 	bl	8003544 <f_mount>
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <mount_sd+0x28>)
 800439a:	7018      	strb	r0, [r3, #0]
	if (fresult != FR_OK)
 800439c:	2800      	cmp	r0, #0
 800439e:	d003      	beq.n	80043a8 <mount_sd+0x1c>
	  send_uart("error in mounting SD CARD...\n");
 80043a0:	4805      	ldr	r0, [pc, #20]	; (80043b8 <mount_sd+0x2c>)
	else
	  send_uart("SD CARD mounted successfully...\n");
 80043a2:	f7ff ffd7 	bl	8004354 <send_uart>
  }
 80043a6:	bd10      	pop	{r4, pc}
	  send_uart("SD CARD mounted successfully...\n");
 80043a8:	4804      	ldr	r0, [pc, #16]	; (80043bc <mount_sd+0x30>)
 80043aa:	e7fa      	b.n	80043a2 <mount_sd+0x16>
 80043ac:	08005b0c 	.word	0x08005b0c
 80043b0:	20000b64 	.word	0x20000b64
 80043b4:	20001454 	.word	0x20001454
 80043b8:	08005b0d 	.word	0x08005b0d
 80043bc:	08005b2b 	.word	0x08005b2b

080043c0 <create_file>:
	sprintf(buffer, "SD CARD Free Space: \t%lu\n", free_space);
	send_uart(buffer);
  }

void create_file()
{
 80043c0:	b570      	push	{r4, r5, r6, lr}
	/*************** Create File For Data Storage ********************/

	int fileNumber = 0;

	//check if filename exist
	sprintf(name, "F%d.TXT", fileNumber);
 80043c2:	4e16      	ldr	r6, [pc, #88]	; (800441c <create_file+0x5c>)
 80043c4:	4c16      	ldr	r4, [pc, #88]	; (8004420 <create_file+0x60>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	0031      	movs	r1, r6
 80043ca:	0020      	movs	r0, r4
 80043cc:	f000 fc3e 	bl	8004c4c <siprintf>
	int fileNumber = 0;
 80043d0:	2500      	movs	r5, #0
	while (f_stat(name, NULL) == FR_OK)
 80043d2:	2100      	movs	r1, #0
 80043d4:	0020      	movs	r0, r4
 80043d6:	f7ff fbcb 	bl	8003b70 <f_stat>
 80043da:	2800      	cmp	r0, #0
 80043dc:	d017      	beq.n	800440e <create_file+0x4e>
	  fileNumber++;
	  sprintf(name, "F%d.TXT", fileNumber);
	}

	/* once filename is new create file */
	fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80043de:	4e11      	ldr	r6, [pc, #68]	; (8004424 <create_file+0x64>)
 80043e0:	2213      	movs	r2, #19
 80043e2:	0021      	movs	r1, r4
 80043e4:	0030      	movs	r0, r6
 80043e6:	f7ff f8e5 	bl	80035b4 <f_open>
 80043ea:	4d0f      	ldr	r5, [pc, #60]	; (8004428 <create_file+0x68>)

	/* Writing text */
	fresult = f_puts("ADC0 ADC1 ADC2 ADC3 ADC4 ADC5 ADC6 ADC7 ADC8 ADC9 AD10 AD11\n", &fil);
 80043ec:	0031      	movs	r1, r6
	fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80043ee:	7028      	strb	r0, [r5, #0]
	fresult = f_puts("ADC0 ADC1 ADC2 ADC3 ADC4 ADC5 ADC6 ADC7 ADC8 ADC9 AD10 AD11\n", &fil);
 80043f0:	480e      	ldr	r0, [pc, #56]	; (800442c <create_file+0x6c>)
 80043f2:	f7ff fbef 	bl	8003bd4 <f_puts>
 80043f6:	7028      	strb	r0, [r5, #0]

	/* Close file */
	fresult = f_close(&fil);
 80043f8:	0030      	movs	r0, r6
 80043fa:	f7ff fba3 	bl	8003b44 <f_close>
 80043fe:	7028      	strb	r0, [r5, #0]

	send_uart(name); //ex: File1.txt created and is ready for data to be written
 8004400:	0020      	movs	r0, r4
 8004402:	f7ff ffa7 	bl	8004354 <send_uart>

	send_uart(" created and header was written \n");
 8004406:	480a      	ldr	r0, [pc, #40]	; (8004430 <create_file+0x70>)
 8004408:	f7ff ffa4 	bl	8004354 <send_uart>
  }
 800440c:	bd70      	pop	{r4, r5, r6, pc}
	  fileNumber++;
 800440e:	3501      	adds	r5, #1
	  sprintf(name, "F%d.TXT", fileNumber);
 8004410:	002a      	movs	r2, r5
 8004412:	0031      	movs	r1, r6
 8004414:	0020      	movs	r0, r4
 8004416:	f000 fc19 	bl	8004c4c <siprintf>
 800441a:	e7da      	b.n	80043d2 <create_file+0x12>
 800441c:	08005a16 	.word	0x08005a16
 8004420:	200015b8 	.word	0x200015b8
 8004424:	200015c4 	.word	0x200015c4
 8004428:	20001454 	.word	0x20001454
 800442c:	08005a1e 	.word	0x08005a1e
 8004430:	08005a5b 	.word	0x08005a5b

08004434 <unmount_sd>:

void unmount_sd()
 {
 8004434:	b510      	push	{r4, lr}
	/* Unmount SDCARD */
	fresult = f_mount(NULL, "", 1);
 8004436:	2201      	movs	r2, #1
 8004438:	490b      	ldr	r1, [pc, #44]	; (8004468 <unmount_sd+0x34>)
 800443a:	2000      	movs	r0, #0
 800443c:	f7ff f882 	bl	8003544 <f_mount>
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <unmount_sd+0x38>)
 8004442:	7018      	strb	r0, [r3, #0]
	if (fresult == FR_OK)
 8004444:	2800      	cmp	r0, #0
 8004446:	d102      	bne.n	800444e <unmount_sd+0x1a>
	  send_uart("SD CARD UNMOUNTED successfully...\n");
 8004448:	4809      	ldr	r0, [pc, #36]	; (8004470 <unmount_sd+0x3c>)
 800444a:	f7ff ff83 	bl	8004354 <send_uart>

	sprintf(str, "line count: %d\n", line_count);
 800444e:	4c09      	ldr	r4, [pc, #36]	; (8004474 <unmount_sd+0x40>)
 8004450:	4b09      	ldr	r3, [pc, #36]	; (8004478 <unmount_sd+0x44>)
 8004452:	490a      	ldr	r1, [pc, #40]	; (800447c <unmount_sd+0x48>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	0020      	movs	r0, r4
 800445a:	f000 fbf7 	bl	8004c4c <siprintf>

	send_uart(str);
 800445e:	0020      	movs	r0, r4
 8004460:	f7ff ff78 	bl	8004354 <send_uart>
 }
 8004464:	bd10      	pop	{r4, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	08005b0c 	.word	0x08005b0c
 800446c:	20001454 	.word	0x20001454
 8004470:	08005b4c 	.word	0x08005b4c
 8004474:	200014f4 	.word	0x200014f4
 8004478:	200002e0 	.word	0x200002e0
 800447c:	08005b6f 	.word	0x08005b6f

08004480 <blink>:

/*Wrapper to blink LEDs*/
void blink(int num_blinks, GPIO_TypeDef* port, uint16_t pin)
{
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	000d      	movs	r5, r1
 8004484:	0016      	movs	r6, r2
	 //blink led <num_blink> times to show that data collection is initialized
	  for (int i = 0; i < num_blinks * 2; i++)
 8004486:	2700      	movs	r7, #0
 8004488:	0044      	lsls	r4, r0, #1
 800448a:	42a7      	cmp	r7, r4
 800448c:	db00      	blt.n	8004490 <blink+0x10>
	  {
	    HAL_GPIO_TogglePin(port, pin);
	    HAL_Delay(100); //1000ms delay
	  }
}
 800448e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    HAL_GPIO_TogglePin(port, pin);
 8004490:	0031      	movs	r1, r6
 8004492:	0028      	movs	r0, r5
 8004494:	f7fc fb7c 	bl	8000b90 <HAL_GPIO_TogglePin>
	    HAL_Delay(100); //1000ms delay
 8004498:	2064      	movs	r0, #100	; 0x64
 800449a:	f7fb ff23 	bl	80002e4 <HAL_Delay>
	  for (int i = 0; i < num_blinks * 2; i++)
 800449e:	3701      	adds	r7, #1
 80044a0:	e7f3      	b.n	800448a <blink+0xa>
	...

080044a4 <main>:
{
 80044a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a6:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 80044a8:	f7fb fefa 	bl	80002a0 <HAL_Init>
  SystemClock_Config();
 80044ac:	f7ff ff20 	bl	80042f0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b0:	2214      	movs	r2, #20
 80044b2:	2100      	movs	r1, #0
 80044b4:	a80f      	add	r0, sp, #60	; 0x3c
 80044b6:	f000 fbc0 	bl	8004c3a <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ba:	2180      	movs	r1, #128	; 0x80
 80044bc:	4db1      	ldr	r5, [pc, #708]	; (8004784 <main+0x2e0>)
 80044be:	0309      	lsls	r1, r1, #12
 80044c0:	696a      	ldr	r2, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, SEL_Pin|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80044c2:	26c2      	movs	r6, #194	; 0xc2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044c4:	430a      	orrs	r2, r1
 80044c6:	616a      	str	r2, [r5, #20]
 80044c8:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ca:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044cc:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ce:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d0:	930c      	str	r3, [sp, #48]	; 0x30
 80044d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d4:	696a      	ldr	r2, [r5, #20]
 80044d6:	0289      	lsls	r1, r1, #10
 80044d8:	430a      	orrs	r2, r1
 80044da:	616a      	str	r2, [r5, #20]
 80044dc:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80044de:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e0:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e2:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e4:	930d      	str	r3, [sp, #52]	; 0x34
 80044e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e8:	696a      	ldr	r2, [r5, #20]
 80044ea:	02c9      	lsls	r1, r1, #11
 80044ec:	430a      	orrs	r2, r1
 80044ee:	616a      	str	r2, [r5, #20]
 80044f0:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, SEL_Pin|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80044f2:	00b6      	lsls	r6, r6, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f4:	400b      	ands	r3, r1
 80044f6:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOC, SEL_Pin|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80044f8:	0031      	movs	r1, r6
 80044fa:	2200      	movs	r2, #0
 80044fc:	48a2      	ldr	r0, [pc, #648]	; (8004788 <main+0x2e4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOC, SEL_Pin|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 8004500:	f7fc fb40 	bl	8000b84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004504:	2200      	movs	r2, #0
 8004506:	2140      	movs	r1, #64	; 0x40
 8004508:	48a0      	ldr	r0, [pc, #640]	; (800478c <main+0x2e8>)
 800450a:	f7fc fb3b 	bl	8000b84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800450e:	4ba0      	ldr	r3, [pc, #640]	; (8004790 <main+0x2ec>)
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004510:	a90f      	add	r1, sp, #60	; 0x3c
 8004512:	489d      	ldr	r0, [pc, #628]	; (8004788 <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004514:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8004516:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004518:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800451a:	f7fc fa83 	bl	8000a24 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800451e:	a90f      	add	r1, sp, #60	; 0x3c
 8004520:	4899      	ldr	r0, [pc, #612]	; (8004788 <main+0x2e4>)
  GPIO_InitStruct.Pin = SEL_Pin|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin;
 8004522:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004524:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004526:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004528:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800452a:	f7fc fa7b 	bl	8000a24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800452e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004530:	a90f      	add	r1, sp, #60	; 0x3c
 8004532:	4896      	ldr	r0, [pc, #600]	; (800478c <main+0x2e8>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004534:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004536:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004538:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453a:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453c:	f7fc fa72 	bl	8000a24 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004540:	0022      	movs	r2, r4
 8004542:	0021      	movs	r1, r4
 8004544:	2005      	movs	r0, #5
 8004546:	f7fc f93d 	bl	80007c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800454a:	2005      	movs	r0, #5
 800454c:	f7fc f96a 	bl	8000824 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004550:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004552:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004554:	433b      	orrs	r3, r7
 8004556:	616b      	str	r3, [r5, #20]
 8004558:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800455a:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800455c:	403b      	ands	r3, r7
 800455e:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004560:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004564:	f7fc f92e 	bl	80007c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004568:	2009      	movs	r0, #9
 800456a:	f7fc f95b 	bl	8000824 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 800456e:	4889      	ldr	r0, [pc, #548]	; (8004794 <main+0x2f0>)
 8004570:	4b89      	ldr	r3, [pc, #548]	; (8004798 <main+0x2f4>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004572:	6084      	str	r4, [r0, #8]
  hspi1.Instance = SPI1;
 8004574:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004576:	2382      	movs	r3, #130	; 0x82
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800457c:	23e0      	movs	r3, #224	; 0xe0
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004588:	3bf1      	subs	r3, #241	; 0xf1
 800458a:	3bff      	subs	r3, #255	; 0xff
 800458c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 800458e:	3b09      	subs	r3, #9
 8004590:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004592:	19db      	adds	r3, r3, r7
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004594:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004596:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004598:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800459a:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800459c:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800459e:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80045a0:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80045a2:	f7fc fedd 	bl	8001360 <HAL_SPI_Init>
  huart1.Instance = USART1;
 80045a6:	4e7d      	ldr	r6, [pc, #500]	; (800479c <main+0x2f8>)
 80045a8:	4b7d      	ldr	r3, [pc, #500]	; (80047a0 <main+0x2fc>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045aa:	0030      	movs	r0, r6
  huart1.Instance = USART1;
 80045ac:	6033      	str	r3, [r6, #0]
  huart1.Init.BaudRate = 115200;
 80045ae:	23e1      	movs	r3, #225	; 0xe1
 80045b0:	025b      	lsls	r3, r3, #9
 80045b2:	6073      	str	r3, [r6, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045b4:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045b6:	60b4      	str	r4, [r6, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045b8:	6173      	str	r3, [r6, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045ba:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045bc:	6134      	str	r4, [r6, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045be:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045c0:	61f4      	str	r4, [r6, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045c2:	6234      	str	r4, [r6, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045c4:	6274      	str	r4, [r6, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045c6:	f7fd fca3 	bl	8001f10 <HAL_UART_Init>
  MX_FATFS_Init();
 80045ca:	f7ff fb7f 	bl	8003ccc <MX_FATFS_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80045ce:	220c      	movs	r2, #12
 80045d0:	0021      	movs	r1, r4
 80045d2:	a80f      	add	r0, sp, #60	; 0x3c
 80045d4:	f000 fb31 	bl	8004c3a <memset>
  hadc.Instance = ADC1;
 80045d8:	4d72      	ldr	r5, [pc, #456]	; (80047a4 <main+0x300>)
 80045da:	4b73      	ldr	r3, [pc, #460]	; (80047a8 <main+0x304>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80045dc:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 80045de:	602b      	str	r3, [r5, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80045e0:	2304      	movs	r3, #4
 80045e2:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80045e4:	23c2      	movs	r3, #194	; 0xc2
 80045e6:	33ff      	adds	r3, #255	; 0xff
 80045e8:	61eb      	str	r3, [r5, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80045ea:	1d6b      	adds	r3, r5, #5
 80045ec:	77dc      	strb	r4, [r3, #31]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80045ee:	606c      	str	r4, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80045f0:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045f2:	60ec      	str	r4, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80045f4:	612f      	str	r7, [r5, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80045f6:	762c      	strb	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80045f8:	766c      	strb	r4, [r5, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80045fa:	76ac      	strb	r4, [r5, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80045fc:	76ec      	strb	r4, [r5, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80045fe:	622c      	str	r4, [r5, #32]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004600:	62af      	str	r7, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004602:	f7fb fecd 	bl	80003a0 <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	015b      	lsls	r3, r3, #5
 800460a:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800460c:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800460e:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004610:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004612:	0028      	movs	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004614:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.Channel = ADC_CHANNEL_0;
 8004616:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004618:	f7fc f800 	bl	800061c <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800461c:	a90f      	add	r1, sp, #60	; 0x3c
 800461e:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8004620:	970f      	str	r7, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004622:	f7fb fffb 	bl	800061c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8004626:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004628:	a90f      	add	r1, sp, #60	; 0x3c
 800462a:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_2;
 800462c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800462e:	f7fb fff5 	bl	800061c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 8004632:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004634:	a90f      	add	r1, sp, #60	; 0x3c
 8004636:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_3;
 8004638:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800463a:	f7fb ffef 	bl	800061c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 800463e:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004640:	a90f      	add	r1, sp, #60	; 0x3c
 8004642:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 8004644:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Channel = ADC_CHANNEL_5;
 8004646:	3405      	adds	r4, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004648:	f7fb ffe8 	bl	800061c <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800464c:	a90f      	add	r1, sp, #60	; 0x3c
 800464e:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8004650:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004652:	f7fb ffe3 	bl	800061c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 8004656:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004658:	a90f      	add	r1, sp, #60	; 0x3c
 800465a:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_6;
 800465c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800465e:	f7fb ffdd 	bl	800061c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;
 8004662:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004664:	a90f      	add	r1, sp, #60	; 0x3c
 8004666:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_7;
 8004668:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800466a:	f7fb ffd7 	bl	800061c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 800466e:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004670:	a90f      	add	r1, sp, #60	; 0x3c
 8004672:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_8;
 8004674:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004676:	f7fb ffd1 	bl	800061c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_9;
 800467a:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800467c:	a90f      	add	r1, sp, #60	; 0x3c
 800467e:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 8004680:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004682:	f7fb ffcb 	bl	800061c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_11;
 8004686:	230b      	movs	r3, #11
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004688:	a90f      	add	r1, sp, #60	; 0x3c
 800468a:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 800468c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800468e:	f7fb ffc5 	bl	800061c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_12;
 8004692:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004694:	a90f      	add	r1, sp, #60	; 0x3c
 8004696:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_12;
 8004698:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800469a:	f7fb ffbf 	bl	800061c <HAL_ADC_ConfigChannel>
  HAL_UART_Receive_IT( &huart1, &RxData, UART_BUF_SIZE );
 800469e:	0022      	movs	r2, r4
 80046a0:	4942      	ldr	r1, [pc, #264]	; (80047ac <main+0x308>)
 80046a2:	0030      	movs	r0, r6
 80046a4:	f7fd f8d2 	bl	800184c <HAL_UART_Receive_IT>
  send_uart("Begin 8 Chan ADC to Micro SD\n");
 80046a8:	4841      	ldr	r0, [pc, #260]	; (80047b0 <main+0x30c>)
 80046aa:	f7ff fe53 	bl	8004354 <send_uart>
  HAL_ADCEx_Calibration_Start(&hadc);
 80046ae:	0028      	movs	r0, r5
 80046b0:	f7fc f834 	bl	800071c <HAL_ADCEx_Calibration_Start>
	  		  line_count++;
 80046b4:	2601      	movs	r6, #1
 80046b6:	2700      	movs	r7, #0
	  switch (cur_state)
 80046b8:	4c3e      	ldr	r4, [pc, #248]	; (80047b4 <main+0x310>)
 80046ba:	7823      	ldrb	r3, [r4, #0]
 80046bc:	2b06      	cmp	r3, #6
 80046be:	d8fd      	bhi.n	80046bc <main+0x218>
 80046c0:	0018      	movs	r0, r3
 80046c2:	f7fb fd29 	bl	8000118 <__gnu_thumb1_case_sqi>
 80046c6:	fb04      	.short	0xfb04
 80046c8:	0b1c1619 	.word	0x0b1c1619
 80046cc:	52          	.byte	0x52
 80046cd:	00          	.byte	0x00
	  	  blink(1, LD4_BLUE_LED_GPIO_Port, LD4_BLUE_LED_Pin);
 80046ce:	2280      	movs	r2, #128	; 0x80
 80046d0:	0052      	lsls	r2, r2, #1
	  	  blink(1, LD3_GREEN_LED_GPIO_Port, LD3_GREEN_LED_Pin);
 80046d2:	492d      	ldr	r1, [pc, #180]	; (8004788 <main+0x2e4>)
 80046d4:	2001      	movs	r0, #1
 80046d6:	f7ff fed3 	bl	8004480 <blink>
	  	  break;
 80046da:	e7ed      	b.n	80046b8 <main+0x214>
	  	  mount_sd();
 80046dc:	f7ff fe56 	bl	800438c <mount_sd>
	  	  create_file();
 80046e0:	f7ff fe6e 	bl	80043c0 <create_file>
	  	  fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_WRITE); // Open the file with write access
 80046e4:	2212      	movs	r2, #18
 80046e6:	4934      	ldr	r1, [pc, #208]	; (80047b8 <main+0x314>)
 80046e8:	4834      	ldr	r0, [pc, #208]	; (80047bc <main+0x318>)
 80046ea:	f7fe ff63 	bl	80035b4 <f_open>
 80046ee:	4b34      	ldr	r3, [pc, #208]	; (80047c0 <main+0x31c>)
 80046f0:	7018      	strb	r0, [r3, #0]
	  	  cur_state = LOADED;
 80046f2:	2302      	movs	r3, #2
	  	  cur_state = IDLE;
 80046f4:	7023      	strb	r3, [r4, #0]
	  	  break;
 80046f6:	e7df      	b.n	80046b8 <main+0x214>
	  	  blink(1, LD3_GREEN_LED_GPIO_Port, LD3_GREEN_LED_Pin);
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	0092      	lsls	r2, r2, #2
 80046fc:	e7e9      	b.n	80046d2 <main+0x22e>
	  	  if (adc_flag == 0) //restart adc collection
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <main+0x320>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	2a00      	cmp	r2, #0
 8004704:	d105      	bne.n	8004712 <main+0x26e>
	  		  HAL_ADC_Start_DMA(&hadc, adc_buf, ADC_NUM_CHANNELS); //start the adc in dma mode
 8004706:	320c      	adds	r2, #12
 8004708:	492f      	ldr	r1, [pc, #188]	; (80047c8 <main+0x324>)
 800470a:	0028      	movs	r0, r5
 800470c:	f7fb fef0 	bl	80004f0 <HAL_ADC_Start_DMA>
 8004710:	e7d2      	b.n	80046b8 <main+0x214>
	  		  adc_flag = 0; //clear adc_flag
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
	  		  sprintf(str, "%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d\n",
 8004716:	4a2d      	ldr	r2, [pc, #180]	; (80047cc <main+0x328>)
 8004718:	4c2d      	ldr	r4, [pc, #180]	; (80047d0 <main+0x32c>)
 800471a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800471c:	492d      	ldr	r1, [pc, #180]	; (80047d4 <main+0x330>)
 800471e:	9309      	str	r3, [sp, #36]	; 0x24
 8004720:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004722:	0020      	movs	r0, r4
 8004724:	9308      	str	r3, [sp, #32]
 8004726:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004728:	9307      	str	r3, [sp, #28]
 800472a:	6a13      	ldr	r3, [r2, #32]
 800472c:	9306      	str	r3, [sp, #24]
 800472e:	69d3      	ldr	r3, [r2, #28]
 8004730:	9305      	str	r3, [sp, #20]
 8004732:	6993      	ldr	r3, [r2, #24]
 8004734:	9304      	str	r3, [sp, #16]
 8004736:	6953      	ldr	r3, [r2, #20]
 8004738:	9303      	str	r3, [sp, #12]
 800473a:	6913      	ldr	r3, [r2, #16]
 800473c:	9302      	str	r3, [sp, #8]
 800473e:	68d3      	ldr	r3, [r2, #12]
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	6893      	ldr	r3, [r2, #8]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	6853      	ldr	r3, [r2, #4]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	f000 fa7f 	bl	8004c4c <siprintf>
	  		  fresult = f_puts(str, &fil);
 800474e:	491b      	ldr	r1, [pc, #108]	; (80047bc <main+0x318>)
 8004750:	0020      	movs	r0, r4
 8004752:	f7ff fa3f 	bl	8003bd4 <f_puts>
 8004756:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <main+0x31c>)
	  		  line_count++;
 8004758:	491f      	ldr	r1, [pc, #124]	; (80047d8 <main+0x334>)
	  		  fresult = f_puts(str, &fil);
 800475a:	7018      	strb	r0, [r3, #0]
	  		  line_count++;
 800475c:	680a      	ldr	r2, [r1, #0]
 800475e:	684b      	ldr	r3, [r1, #4]
 8004760:	1992      	adds	r2, r2, r6
 8004762:	417b      	adcs	r3, r7
 8004764:	600a      	str	r2, [r1, #0]
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	e7a6      	b.n	80046b8 <main+0x214>
	  	  f_close(&fil);
 800476a:	4814      	ldr	r0, [pc, #80]	; (80047bc <main+0x318>)
 800476c:	f7ff f9ea 	bl	8003b44 <f_close>
	  	  send_uart("Data Collection Halted.  Sending data written to serial stream\n\n");
 8004770:	481a      	ldr	r0, [pc, #104]	; (80047dc <main+0x338>)
 8004772:	f7ff fdef 	bl	8004354 <send_uart>
	  	  bufclear();
 8004776:	f7ff fdfb 	bl	8004370 <bufclear>
	  	  unmount_sd();
 800477a:	f7ff fe5b 	bl	8004434 <unmount_sd>
	  	  cur_state = IDLE;
 800477e:	2300      	movs	r3, #0
 8004780:	e7b8      	b.n	80046f4 <main+0x250>
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	40021000 	.word	0x40021000
 8004788:	48000800 	.word	0x48000800
 800478c:	48000400 	.word	0x48000400
 8004790:	10110000 	.word	0x10110000
 8004794:	20001458 	.word	0x20001458
 8004798:	40013000 	.word	0x40013000
 800479c:	20000f9c 	.word	0x20000f9c
 80047a0:	40013800 	.word	0x40013800
 80047a4:	20001578 	.word	0x20001578
 80047a8:	40012400 	.word	0x40012400
 80047ac:	200014bc 	.word	0x200014bc
 80047b0:	08005a7d 	.word	0x08005a7d
 80047b4:	200002dc 	.word	0x200002dc
 80047b8:	200015b8 	.word	0x200015b8
 80047bc:	200015c4 	.word	0x200015c4
 80047c0:	20001454 	.word	0x20001454
 80047c4:	200002d4 	.word	0x200002d4
 80047c8:	200014c4 	.word	0x200014c4
 80047cc:	2000141c 	.word	0x2000141c
 80047d0:	200014f4 	.word	0x200014f4
 80047d4:	08005a9b 	.word	0x08005a9b
 80047d8:	200002e0 	.word	0x200002e0
 80047dc:	08005acc 	.word	0x08005acc

080047e0 <HAL_GPIO_EXTI_Callback>:
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    /* Toggle LED1 */
    bp++;
 80047e0:	4a02      	ldr	r2, [pc, #8]	; (80047ec <HAL_GPIO_EXTI_Callback+0xc>)
 80047e2:	6813      	ldr	r3, [r2, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	6013      	str	r3, [r2, #0]
}
 80047e8:	4770      	bx	lr
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	200002d8 	.word	0x200002d8

080047f0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	SEL_GPIO_Port -> ODR ^= SEL_Pin; //toggle SEL pin
 80047f0:	2308      	movs	r3, #8
 80047f2:	4a08      	ldr	r2, [pc, #32]	; (8004814 <HAL_ADC_ConvCpltCallback+0x24>)
 80047f4:	6951      	ldr	r1, [r2, #20]
 80047f6:	404b      	eors	r3, r1
 80047f8:	6153      	str	r3, [r2, #20]
 80047fa:	2300      	movs	r3, #0

	for (int i =0; i < ADC_NUM_CHANNELS; i++)
	{
	   adc[i] = adc_buf[i];  // store the values in adc[]
 80047fc:	4a06      	ldr	r2, [pc, #24]	; (8004818 <HAL_ADC_ConvCpltCallback+0x28>)
 80047fe:	4907      	ldr	r1, [pc, #28]	; (800481c <HAL_ADC_ConvCpltCallback+0x2c>)
 8004800:	58c8      	ldr	r0, [r1, r3]
 8004802:	50d0      	str	r0, [r2, r3]
 8004804:	3304      	adds	r3, #4
	for (int i =0; i < ADC_NUM_CHANNELS; i++)
 8004806:	2b30      	cmp	r3, #48	; 0x30
 8004808:	d1fa      	bne.n	8004800 <HAL_ADC_ConvCpltCallback+0x10>
	}
	adc_flag = 1;
 800480a:	2201      	movs	r2, #1
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <HAL_ADC_ConvCpltCallback+0x30>)
 800480e:	601a      	str	r2, [r3, #0]
}
 8004810:	4770      	bx	lr
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	48000800 	.word	0x48000800
 8004818:	2000141c 	.word	0x2000141c
 800481c:	200014c4 	.word	0x200014c4
 8004820:	200002d4 	.word	0x200002d4

08004824 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback( UART_HandleTypeDef *handle )
{
	//echoback command for debugging
	HAL_UART_Transmit(&huart1, &RxData, UART_BUF_SIZE, 1000); // transmit in blocking mode
 8004824:	23fa      	movs	r3, #250	; 0xfa
{
 8004826:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_UART_Transmit(&huart1, &RxData, UART_BUF_SIZE, 1000); // transmit in blocking mode
 8004828:	4c1b      	ldr	r4, [pc, #108]	; (8004898 <HAL_UART_RxCpltCallback+0x74>)
 800482a:	4d1c      	ldr	r5, [pc, #112]	; (800489c <HAL_UART_RxCpltCallback+0x78>)
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	2205      	movs	r2, #5
 8004830:	0021      	movs	r1, r4
 8004832:	0028      	movs	r0, r5
 8004834:	f7fd fad2 	bl	8001ddc <HAL_UART_Transmit>
    send_uart("\n");
 8004838:	4819      	ldr	r0, [pc, #100]	; (80048a0 <HAL_UART_RxCpltCallback+0x7c>)
 800483a:	f7ff fd8b 	bl	8004354 <send_uart>
    HAL_UART_Receive_IT( &huart1, &RxData, UART_BUF_SIZE );  //restart listening for interrupt
 800483e:	2205      	movs	r2, #5
 8004840:	0021      	movs	r1, r4
 8004842:	0028      	movs	r0, r5
 8004844:	f7fd f802 	bl	800184c <HAL_UART_Receive_IT>

	int valid_cmd = 0;

	switch (cur_state)
 8004848:	4b16      	ldr	r3, [pc, #88]	; (80048a4 <HAL_UART_RxCpltCallback+0x80>)
 800484a:	781a      	ldrb	r2, [r3, #0]
 800484c:	2a02      	cmp	r2, #2
 800484e:	d009      	beq.n	8004864 <HAL_UART_RxCpltCallback+0x40>
 8004850:	2a04      	cmp	r2, #4
 8004852:	d010      	beq.n	8004876 <HAL_UART_RxCpltCallback+0x52>
 8004854:	2a00      	cmp	r2, #0
 8004856:	d113      	bne.n	8004880 <HAL_UART_RxCpltCallback+0x5c>
	{
	case IDLE:
		if (RxData[0] == CMD_CREATE_DEFAULT)
 8004858:	7822      	ldrb	r2, [r4, #0]
 800485a:	2a64      	cmp	r2, #100	; 0x64
 800485c:	d110      	bne.n	8004880 <HAL_UART_RxCpltCallback+0x5c>
		{
			valid_cmd = 1;
			cur_state = CREATING_FILE;
 800485e:	3a5f      	subs	r2, #95	; 0x5f
		break;
	case RUNNING:
		if (RxData[0] == CMD_HALT)
		{
			valid_cmd = 1;
			cur_state = CLOSING_FILE;
 8004860:	701a      	strb	r2, [r3, #0]
	{
		char c_buff = ACK_INVALID;
		HAL_UART_Transmit(&huart1, &c_buff, 1, 1000); // transmit in blocking mode

	}
}
 8004862:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		if (RxData[0] == CMD_START)
 8004864:	7822      	ldrb	r2, [r4, #0]
 8004866:	2a73      	cmp	r2, #115	; 0x73
 8004868:	d101      	bne.n	800486e <HAL_UART_RxCpltCallback+0x4a>
			cur_state = RUNNING;
 800486a:	3a6f      	subs	r2, #111	; 0x6f
 800486c:	e7f8      	b.n	8004860 <HAL_UART_RxCpltCallback+0x3c>
		else if (RxData[0] == CMD_VIEW)
 800486e:	2a76      	cmp	r2, #118	; 0x76
 8004870:	d106      	bne.n	8004880 <HAL_UART_RxCpltCallback+0x5c>
			cur_state = VIEWING;
 8004872:	3a73      	subs	r2, #115	; 0x73
 8004874:	e7f4      	b.n	8004860 <HAL_UART_RxCpltCallback+0x3c>
		if (RxData[0] == CMD_HALT)
 8004876:	7822      	ldrb	r2, [r4, #0]
 8004878:	2a68      	cmp	r2, #104	; 0x68
 800487a:	d101      	bne.n	8004880 <HAL_UART_RxCpltCallback+0x5c>
			cur_state = CLOSING_FILE;
 800487c:	3a62      	subs	r2, #98	; 0x62
 800487e:	e7ef      	b.n	8004860 <HAL_UART_RxCpltCallback+0x3c>
		char c_buff = ACK_INVALID;
 8004880:	466b      	mov	r3, sp
 8004882:	1dd9      	adds	r1, r3, #7
 8004884:	2365      	movs	r3, #101	; 0x65
 8004886:	700b      	strb	r3, [r1, #0]
		HAL_UART_Transmit(&huart1, &c_buff, 1, 1000); // transmit in blocking mode
 8004888:	23fa      	movs	r3, #250	; 0xfa
 800488a:	2201      	movs	r2, #1
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	0028      	movs	r0, r5
 8004890:	f7fd faa4 	bl	8001ddc <HAL_UART_Transmit>
 8004894:	e7e5      	b.n	8004862 <HAL_UART_RxCpltCallback+0x3e>
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	200014bc 	.word	0x200014bc
 800489c:	20000f9c 	.word	0x20000f9c
 80048a0:	08005b0b 	.word	0x08005b0b
 80048a4:	200002dc 	.word	0x200002dc

080048a8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ac:	2001      	movs	r0, #1
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <HAL_MspInit+0x2c>)
{
 80048b0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b2:	6999      	ldr	r1, [r3, #24]
 80048b4:	4301      	orrs	r1, r0
 80048b6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048b8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ba:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048bc:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048be:	4002      	ands	r2, r0
 80048c0:	9200      	str	r2, [sp, #0]
 80048c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	61da      	str	r2, [r3, #28]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	400b      	ands	r3, r1
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048d2:	b002      	add	sp, #8
 80048d4:	4770      	bx	lr
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	40021000 	.word	0x40021000

080048dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048de:	0005      	movs	r5, r0
 80048e0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e2:	2214      	movs	r2, #20
 80048e4:	2100      	movs	r1, #0
 80048e6:	a805      	add	r0, sp, #20
 80048e8:	f000 f9a7 	bl	8004c3a <memset>
  if(hadc->Instance==ADC1)
 80048ec:	4b2c      	ldr	r3, [pc, #176]	; (80049a0 <HAL_ADC_MspInit+0xc4>)
 80048ee:	682a      	ldr	r2, [r5, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d153      	bne.n	800499c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048f4:	2680      	movs	r6, #128	; 0x80

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048f6:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048f8:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <HAL_ADC_MspInit+0xc8>)
 80048fa:	00b6      	lsls	r6, r6, #2
 80048fc:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048fe:	0300      	lsls	r0, r0, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004900:	4332      	orrs	r2, r6
 8004902:	619a      	str	r2, [r3, #24]
 8004904:	699a      	ldr	r2, [r3, #24]
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004906:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004908:	4032      	ands	r2, r6
 800490a:	9201      	str	r2, [sp, #4]
 800490c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800490e:	6959      	ldr	r1, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004910:	2700      	movs	r7, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004912:	4301      	orrs	r1, r0
 8004914:	6159      	str	r1, [r3, #20]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800491a:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800491c:	9202      	str	r2, [sp, #8]
 800491e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004920:	6959      	ldr	r1, [r3, #20]
 8004922:	0280      	lsls	r0, r0, #10
 8004924:	4301      	orrs	r1, r0
 8004926:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004928:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800492a:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800492c:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800492e:	4002      	ands	r2, r0
 8004930:	9203      	str	r2, [sp, #12]
 8004932:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004934:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004936:	481c      	ldr	r0, [pc, #112]	; (80049a8 <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004938:	430a      	orrs	r2, r1
 800493a:	615a      	str	r2, [r3, #20]
 800493c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800493e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004940:	400b      	ands	r3, r1
 8004942:	9304      	str	r3, [sp, #16]
 8004944:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004946:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004948:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800494a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800494c:	f7fc f86a 	bl	8000a24 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004950:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004952:	23ff      	movs	r3, #255	; 0xff
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004954:	a905      	add	r1, sp, #20
 8004956:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004958:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800495a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495c:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800495e:	f7fc f861 	bl	8000a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004962:	4812      	ldr	r0, [pc, #72]	; (80049ac <HAL_ADC_MspInit+0xd0>)
 8004964:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004966:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004968:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496a:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800496c:	f7fc f85a 	bl	8000a24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8004970:	4c0f      	ldr	r4, [pc, #60]	; (80049b0 <HAL_ADC_MspInit+0xd4>)
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <HAL_ADC_MspInit+0xd8>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_NORMAL;
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004974:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 8004976:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	011b      	lsls	r3, r3, #4
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004980:	6067      	str	r7, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004982:	60a7      	str	r7, [r4, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004984:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004986:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8004988:	61a7      	str	r7, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800498a:	61e7      	str	r7, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800498c:	f7fb ff70 	bl	8000870 <HAL_DMA_Init>
 8004990:	42b8      	cmp	r0, r7
 8004992:	d001      	beq.n	8004998 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8004994:	f7ff ff88 	bl	80048a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004998:	632c      	str	r4, [r5, #48]	; 0x30
 800499a:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800499c:	b00b      	add	sp, #44	; 0x2c
 800499e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049a0:	40012400 	.word	0x40012400
 80049a4:	40021000 	.word	0x40021000
 80049a8:	48000800 	.word	0x48000800
 80049ac:	48000400 	.word	0x48000400
 80049b0:	20001534 	.word	0x20001534
 80049b4:	40020008 	.word	0x40020008

080049b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80049b8:	b510      	push	{r4, lr}
 80049ba:	0004      	movs	r4, r0
 80049bc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049be:	2214      	movs	r2, #20
 80049c0:	2100      	movs	r1, #0
 80049c2:	a803      	add	r0, sp, #12
 80049c4:	f000 f939 	bl	8004c3a <memset>
  if(hspi->Instance==SPI1)
 80049c8:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <HAL_SPI_MspInit+0x58>)
 80049ca:	6822      	ldr	r2, [r4, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d11c      	bne.n	8004a0a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80049d0:	2080      	movs	r0, #128	; 0x80
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <HAL_SPI_MspInit+0x5c>)
 80049d4:	0140      	lsls	r0, r0, #5
 80049d6:	6999      	ldr	r1, [r3, #24]
 80049d8:	4301      	orrs	r1, r0
 80049da:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049dc:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80049de:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049e0:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_SPI1_CLK_ENABLE();
 80049e2:	4002      	ands	r2, r0
 80049e4:	9201      	str	r2, [sp, #4]
 80049e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049e8:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ea:	480b      	ldr	r0, [pc, #44]	; (8004a18 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ec:	430a      	orrs	r2, r1
 80049ee:	615a      	str	r2, [r3, #20]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	400b      	ands	r3, r1
 80049f4:	9302      	str	r3, [sp, #8]
 80049f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80049f8:	2338      	movs	r3, #56	; 0x38
 80049fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fc:	3b36      	subs	r3, #54	; 0x36
 80049fe:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a00:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a02:	3301      	adds	r3, #1
 8004a04:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a06:	f7fc f80d 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004a0a:	b008      	add	sp, #32
 8004a0c:	bd10      	pop	{r4, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	40013000 	.word	0x40013000
 8004a14:	40021000 	.word	0x40021000
 8004a18:	48000400 	.word	0x48000400

08004a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a1c:	b510      	push	{r4, lr}
 8004a1e:	0004      	movs	r4, r0
 8004a20:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a22:	2214      	movs	r2, #20
 8004a24:	2100      	movs	r1, #0
 8004a26:	a803      	add	r0, sp, #12
 8004a28:	f000 f907 	bl	8004c3a <memset>
  if(huart->Instance==USART1)
 8004a2c:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <HAL_UART_MspInit+0x70>)
 8004a2e:	6822      	ldr	r2, [r4, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d128      	bne.n	8004a86 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a34:	2080      	movs	r0, #128	; 0x80
 8004a36:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <HAL_UART_MspInit+0x74>)
 8004a38:	01c0      	lsls	r0, r0, #7
 8004a3a:	6999      	ldr	r1, [r3, #24]
 8004a3c:	4301      	orrs	r1, r0
 8004a3e:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a40:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a42:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a44:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a46:	4002      	ands	r2, r0
 8004a48:	9201      	str	r2, [sp, #4]
 8004a4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4c:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a4e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a50:	430a      	orrs	r2, r1
 8004a52:	615a      	str	r2, [r3, #20]
 8004a54:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a56:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a58:	400b      	ands	r3, r1
 8004a5a:	9302      	str	r3, [sp, #8]
 8004a5c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a5e:	23c0      	movs	r3, #192	; 0xc0
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a64:	2302      	movs	r3, #2
 8004a66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a68:	3301      	adds	r3, #1
 8004a6a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a6c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004a6e:	3b02      	subs	r3, #2
 8004a70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a72:	f7fb ffd7 	bl	8000a24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a76:	2200      	movs	r2, #0
 8004a78:	201b      	movs	r0, #27
 8004a7a:	0011      	movs	r1, r2
 8004a7c:	f7fb fea2 	bl	80007c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a80:	201b      	movs	r0, #27
 8004a82:	f7fb fecf 	bl	8000824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a86:	b008      	add	sp, #32
 8004a88:	bd10      	pop	{r4, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	40013800 	.word	0x40013800
 8004a90:	40021000 	.word	0x40021000

08004a94 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 8004a94:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <SDTimer_Handler+0x24>)
 8004a96:	7813      	ldrb	r3, [r2, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <SDTimer_Handler+0x10>
    Timer1--;
 8004a9c:	7813      	ldrb	r3, [r2, #0]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 8004aa4:	4a05      	ldr	r2, [pc, #20]	; (8004abc <SDTimer_Handler+0x28>)
 8004aa6:	7813      	ldrb	r3, [r2, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <SDTimer_Handler+0x20>
    Timer2--;
 8004aac:	7813      	ldrb	r3, [r2, #0]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	7013      	strb	r3, [r2, #0]
}
 8004ab4:	4770      	bx	lr
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	200019f1 	.word	0x200019f1
 8004abc:	200019f0 	.word	0x200019f0

08004ac0 <NMI_Handler>:
 8004ac0:	4770      	bx	lr

08004ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ac2:	e7fe      	b.n	8004ac2 <HardFault_Handler>

08004ac4 <SVC_Handler>:
 8004ac4:	4770      	bx	lr

08004ac6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ac6:	4770      	bx	lr

08004ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ac8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8004aca:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <SysTick_Handler+0x20>)
 8004acc:	7813      	ldrb	r3, [r2, #0]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	7013      	strb	r3, [r2, #0]
    if(FatFsCnt >= 10)
 8004ad4:	7813      	ldrb	r3, [r2, #0]
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	d903      	bls.n	8004ae2 <SysTick_Handler+0x1a>
    {
	  FatFsCnt = 0;
 8004ada:	2300      	movs	r3, #0
 8004adc:	7013      	strb	r3, [r2, #0]
	  SDTimer_Handler();
 8004ade:	f7ff ffd9 	bl	8004a94 <SDTimer_Handler>
    }


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ae2:	f7fb fbed 	bl	80002c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ae6:	bd10      	pop	{r4, pc}
 8004ae8:	200002e8 	.word	0x200002e8

08004aec <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004aec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004aee:	2001      	movs	r0, #1
 8004af0:	f7fc f854 	bl	8000b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004af4:	bd10      	pop	{r4, pc}
	...

08004af8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004af8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004afa:	4802      	ldr	r0, [pc, #8]	; (8004b04 <DMA1_Channel1_IRQHandler+0xc>)
 8004afc:	f7fb ff48 	bl	8000990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004b00:	bd10      	pop	{r4, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	20001534 	.word	0x20001534

08004b08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004b08:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b0a:	4802      	ldr	r0, [pc, #8]	; (8004b14 <USART1_IRQHandler+0xc>)
 8004b0c:	f7fc ff5a 	bl	80019c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b10:	bd10      	pop	{r4, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	20000f9c 	.word	0x20000f9c

08004b18 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <_sbrk+0x2c>)
{
 8004b1a:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8004b1c:	6819      	ldr	r1, [r3, #0]
{
 8004b1e:	0002      	movs	r2, r0
	if (heap_end == 0)
 8004b20:	2900      	cmp	r1, #0
 8004b22:	d101      	bne.n	8004b28 <_sbrk+0x10>
		heap_end = &end;
 8004b24:	4908      	ldr	r1, [pc, #32]	; (8004b48 <_sbrk+0x30>)
 8004b26:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004b28:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8004b2a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004b2c:	1882      	adds	r2, r0, r2
 8004b2e:	428a      	cmp	r2, r1
 8004b30:	d906      	bls.n	8004b40 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004b32:	f000 f84f 	bl	8004bd4 <__errno>
 8004b36:	230c      	movs	r3, #12
 8004b38:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8004b3e:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8004b40:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8004b42:	e7fc      	b.n	8004b3e <_sbrk+0x26>
 8004b44:	200002ec 	.word	0x200002ec
 8004b48:	200019f8 	.word	0x200019f8

08004b4c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004b4c:	4770      	bx	lr

08004b4e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004b4e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8004b50:	f7ff f9e0 	bl	8003f14 <SD_disk_initialize>
 8004b54:	b2c0      	uxtb	r0, r0
  /* USER CODE END INIT */
}
 8004b56:	bd10      	pop	{r4, pc}

08004b58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004b58:	b510      	push	{r4, lr}
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8004b5a:	f7ff fa75 	bl	8004048 <SD_disk_status>
 8004b5e:	b2c0      	uxtb	r0, r0
  /* USER CODE END STATUS */
}
 8004b60:	bd10      	pop	{r4, pc}

08004b62 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b62:	b510      	push	{r4, lr}
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004b64:	f7ff fa7a 	bl	800405c <SD_disk_read>
 8004b68:	b2c0      	uxtb	r0, r0
  /* USER CODE END READ */
}
 8004b6a:	bd10      	pop	{r4, pc}

08004b6c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004b6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004b6e:	f7ff fabf 	bl	80040f0 <SD_disk_write>
 8004b72:	b2c0      	uxtb	r0, r0
  /* USER CODE END WRITE */
}
 8004b74:	bd10      	pop	{r4, pc}

08004b76 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004b76:	b510      	push	{r4, lr}
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004b78:	f7ff fb14 	bl	80041a4 <SD_disk_ioctl>
 8004b7c:	b2c0      	uxtb	r0, r0
  /* USER CODE END IOCTL */
}
 8004b7e:	bd10      	pop	{r4, pc}

08004b80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b80:	480d      	ldr	r0, [pc, #52]	; (8004bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b84:	480d      	ldr	r0, [pc, #52]	; (8004bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8004b86:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b88:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <LoopForever+0xe>)
  movs r3, #0
 8004b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b8c:	e002      	b.n	8004b94 <LoopCopyDataInit>

08004b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b92:	3304      	adds	r3, #4

08004b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b98:	d3f9      	bcc.n	8004b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b9a:	4a0b      	ldr	r2, [pc, #44]	; (8004bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b9c:	4c0b      	ldr	r4, [pc, #44]	; (8004bcc <LoopForever+0x16>)
  movs r3, #0
 8004b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ba0:	e001      	b.n	8004ba6 <LoopFillZerobss>

08004ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ba4:	3204      	adds	r2, #4

08004ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ba8:	d3fb      	bcc.n	8004ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004baa:	f7ff ffcf 	bl	8004b4c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004bae:	f000 f817 	bl	8004be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004bb2:	f7ff fc77 	bl	80044a4 <main>

08004bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8004bb6:	e7fe      	b.n	8004bb6 <LoopForever>
  ldr   r0, =_estack
 8004bb8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bc0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8004bc4:	08005bd4 	.word	0x08005bd4
  ldr r2, =_sbss
 8004bc8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8004bcc:	200019f8 	.word	0x200019f8

08004bd0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004bd0:	e7fe      	b.n	8004bd0 <ADC1_COMP_IRQHandler>
	...

08004bd4 <__errno>:
 8004bd4:	4b01      	ldr	r3, [pc, #4]	; (8004bdc <__errno+0x8>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	4770      	bx	lr
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	20000024 	.word	0x20000024

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	2600      	movs	r6, #0
 8004be4:	4d0c      	ldr	r5, [pc, #48]	; (8004c18 <__libc_init_array+0x38>)
 8004be6:	4c0d      	ldr	r4, [pc, #52]	; (8004c1c <__libc_init_array+0x3c>)
 8004be8:	1b64      	subs	r4, r4, r5
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	42a6      	cmp	r6, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	f000 fc43 	bl	800547c <_init>
 8004bf6:	4d0a      	ldr	r5, [pc, #40]	; (8004c20 <__libc_init_array+0x40>)
 8004bf8:	4c0a      	ldr	r4, [pc, #40]	; (8004c24 <__libc_init_array+0x44>)
 8004bfa:	1b64      	subs	r4, r4, r5
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	42a6      	cmp	r6, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	00b3      	lsls	r3, r6, #2
 8004c06:	58eb      	ldr	r3, [r5, r3]
 8004c08:	4798      	blx	r3
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	00b3      	lsls	r3, r6, #2
 8004c10:	58eb      	ldr	r3, [r5, r3]
 8004c12:	4798      	blx	r3
 8004c14:	3601      	adds	r6, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	08005bcc 	.word	0x08005bcc
 8004c1c:	08005bcc 	.word	0x08005bcc
 8004c20:	08005bcc 	.word	0x08005bcc
 8004c24:	08005bd0 	.word	0x08005bd0

08004c28 <memcpy>:
 8004c28:	2300      	movs	r3, #0
 8004c2a:	b510      	push	{r4, lr}
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d100      	bne.n	8004c32 <memcpy+0xa>
 8004c30:	bd10      	pop	{r4, pc}
 8004c32:	5ccc      	ldrb	r4, [r1, r3]
 8004c34:	54c4      	strb	r4, [r0, r3]
 8004c36:	3301      	adds	r3, #1
 8004c38:	e7f8      	b.n	8004c2c <memcpy+0x4>

08004c3a <memset>:
 8004c3a:	0003      	movs	r3, r0
 8004c3c:	1882      	adds	r2, r0, r2
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d100      	bne.n	8004c44 <memset+0xa>
 8004c42:	4770      	bx	lr
 8004c44:	7019      	strb	r1, [r3, #0]
 8004c46:	3301      	adds	r3, #1
 8004c48:	e7f9      	b.n	8004c3e <memset+0x4>
	...

08004c4c <siprintf>:
 8004c4c:	b40e      	push	{r1, r2, r3}
 8004c4e:	b510      	push	{r4, lr}
 8004c50:	b09d      	sub	sp, #116	; 0x74
 8004c52:	a902      	add	r1, sp, #8
 8004c54:	9002      	str	r0, [sp, #8]
 8004c56:	6108      	str	r0, [r1, #16]
 8004c58:	480b      	ldr	r0, [pc, #44]	; (8004c88 <siprintf+0x3c>)
 8004c5a:	2482      	movs	r4, #130	; 0x82
 8004c5c:	6088      	str	r0, [r1, #8]
 8004c5e:	6148      	str	r0, [r1, #20]
 8004c60:	2001      	movs	r0, #1
 8004c62:	4240      	negs	r0, r0
 8004c64:	ab1f      	add	r3, sp, #124	; 0x7c
 8004c66:	81c8      	strh	r0, [r1, #14]
 8004c68:	4808      	ldr	r0, [pc, #32]	; (8004c8c <siprintf+0x40>)
 8004c6a:	cb04      	ldmia	r3!, {r2}
 8004c6c:	00a4      	lsls	r4, r4, #2
 8004c6e:	6800      	ldr	r0, [r0, #0]
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	818c      	strh	r4, [r1, #12]
 8004c74:	f000 f86e 	bl	8004d54 <_svfiprintf_r>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	9a02      	ldr	r2, [sp, #8]
 8004c7c:	7013      	strb	r3, [r2, #0]
 8004c7e:	b01d      	add	sp, #116	; 0x74
 8004c80:	bc10      	pop	{r4}
 8004c82:	bc08      	pop	{r3}
 8004c84:	b003      	add	sp, #12
 8004c86:	4718      	bx	r3
 8004c88:	7fffffff 	.word	0x7fffffff
 8004c8c:	20000024 	.word	0x20000024

08004c90 <__ssputs_r>:
 8004c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c92:	688e      	ldr	r6, [r1, #8]
 8004c94:	b085      	sub	sp, #20
 8004c96:	0007      	movs	r7, r0
 8004c98:	000c      	movs	r4, r1
 8004c9a:	9203      	str	r2, [sp, #12]
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	429e      	cmp	r6, r3
 8004ca0:	d839      	bhi.n	8004d16 <__ssputs_r+0x86>
 8004ca2:	2390      	movs	r3, #144	; 0x90
 8004ca4:	898a      	ldrh	r2, [r1, #12]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	421a      	tst	r2, r3
 8004caa:	d034      	beq.n	8004d16 <__ssputs_r+0x86>
 8004cac:	2503      	movs	r5, #3
 8004cae:	6909      	ldr	r1, [r1, #16]
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	1a5b      	subs	r3, r3, r1
 8004cb4:	9302      	str	r3, [sp, #8]
 8004cb6:	6963      	ldr	r3, [r4, #20]
 8004cb8:	9802      	ldr	r0, [sp, #8]
 8004cba:	435d      	muls	r5, r3
 8004cbc:	0feb      	lsrs	r3, r5, #31
 8004cbe:	195d      	adds	r5, r3, r5
 8004cc0:	9b01      	ldr	r3, [sp, #4]
 8004cc2:	106d      	asrs	r5, r5, #1
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	181b      	adds	r3, r3, r0
 8004cc8:	42ab      	cmp	r3, r5
 8004cca:	d900      	bls.n	8004cce <__ssputs_r+0x3e>
 8004ccc:	001d      	movs	r5, r3
 8004cce:	0553      	lsls	r3, r2, #21
 8004cd0:	d532      	bpl.n	8004d38 <__ssputs_r+0xa8>
 8004cd2:	0029      	movs	r1, r5
 8004cd4:	0038      	movs	r0, r7
 8004cd6:	f000 fb31 	bl	800533c <_malloc_r>
 8004cda:	1e06      	subs	r6, r0, #0
 8004cdc:	d109      	bne.n	8004cf2 <__ssputs_r+0x62>
 8004cde:	230c      	movs	r3, #12
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	2340      	movs	r3, #64	; 0x40
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	89a2      	ldrh	r2, [r4, #12]
 8004ce8:	4240      	negs	r0, r0
 8004cea:	4313      	orrs	r3, r2
 8004cec:	81a3      	strh	r3, [r4, #12]
 8004cee:	b005      	add	sp, #20
 8004cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cf2:	9a02      	ldr	r2, [sp, #8]
 8004cf4:	6921      	ldr	r1, [r4, #16]
 8004cf6:	f7ff ff97 	bl	8004c28 <memcpy>
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	4a14      	ldr	r2, [pc, #80]	; (8004d50 <__ssputs_r+0xc0>)
 8004cfe:	401a      	ands	r2, r3
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	4313      	orrs	r3, r2
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	9b02      	ldr	r3, [sp, #8]
 8004d08:	6126      	str	r6, [r4, #16]
 8004d0a:	18f6      	adds	r6, r6, r3
 8004d0c:	6026      	str	r6, [r4, #0]
 8004d0e:	6165      	str	r5, [r4, #20]
 8004d10:	9e01      	ldr	r6, [sp, #4]
 8004d12:	1aed      	subs	r5, r5, r3
 8004d14:	60a5      	str	r5, [r4, #8]
 8004d16:	9b01      	ldr	r3, [sp, #4]
 8004d18:	42b3      	cmp	r3, r6
 8004d1a:	d200      	bcs.n	8004d1e <__ssputs_r+0x8e>
 8004d1c:	001e      	movs	r6, r3
 8004d1e:	0032      	movs	r2, r6
 8004d20:	9903      	ldr	r1, [sp, #12]
 8004d22:	6820      	ldr	r0, [r4, #0]
 8004d24:	f000 faad 	bl	8005282 <memmove>
 8004d28:	68a3      	ldr	r3, [r4, #8]
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	1b9b      	subs	r3, r3, r6
 8004d2e:	60a3      	str	r3, [r4, #8]
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	199e      	adds	r6, r3, r6
 8004d34:	6026      	str	r6, [r4, #0]
 8004d36:	e7da      	b.n	8004cee <__ssputs_r+0x5e>
 8004d38:	002a      	movs	r2, r5
 8004d3a:	0038      	movs	r0, r7
 8004d3c:	f000 fb5c 	bl	80053f8 <_realloc_r>
 8004d40:	1e06      	subs	r6, r0, #0
 8004d42:	d1e0      	bne.n	8004d06 <__ssputs_r+0x76>
 8004d44:	6921      	ldr	r1, [r4, #16]
 8004d46:	0038      	movs	r0, r7
 8004d48:	f000 faae 	bl	80052a8 <_free_r>
 8004d4c:	e7c7      	b.n	8004cde <__ssputs_r+0x4e>
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	fffffb7f 	.word	0xfffffb7f

08004d54 <_svfiprintf_r>:
 8004d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d56:	b09f      	sub	sp, #124	; 0x7c
 8004d58:	9002      	str	r0, [sp, #8]
 8004d5a:	9305      	str	r3, [sp, #20]
 8004d5c:	898b      	ldrh	r3, [r1, #12]
 8004d5e:	000f      	movs	r7, r1
 8004d60:	0016      	movs	r6, r2
 8004d62:	061b      	lsls	r3, r3, #24
 8004d64:	d511      	bpl.n	8004d8a <_svfiprintf_r+0x36>
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10e      	bne.n	8004d8a <_svfiprintf_r+0x36>
 8004d6c:	2140      	movs	r1, #64	; 0x40
 8004d6e:	f000 fae5 	bl	800533c <_malloc_r>
 8004d72:	6038      	str	r0, [r7, #0]
 8004d74:	6138      	str	r0, [r7, #16]
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d105      	bne.n	8004d86 <_svfiprintf_r+0x32>
 8004d7a:	230c      	movs	r3, #12
 8004d7c:	9a02      	ldr	r2, [sp, #8]
 8004d7e:	3801      	subs	r0, #1
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	b01f      	add	sp, #124	; 0x7c
 8004d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d86:	2340      	movs	r3, #64	; 0x40
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	ad06      	add	r5, sp, #24
 8004d8e:	616b      	str	r3, [r5, #20]
 8004d90:	3320      	adds	r3, #32
 8004d92:	766b      	strb	r3, [r5, #25]
 8004d94:	3310      	adds	r3, #16
 8004d96:	76ab      	strb	r3, [r5, #26]
 8004d98:	0034      	movs	r4, r6
 8004d9a:	7823      	ldrb	r3, [r4, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d147      	bne.n	8004e30 <_svfiprintf_r+0xdc>
 8004da0:	1ba3      	subs	r3, r4, r6
 8004da2:	9304      	str	r3, [sp, #16]
 8004da4:	d00d      	beq.n	8004dc2 <_svfiprintf_r+0x6e>
 8004da6:	1ba3      	subs	r3, r4, r6
 8004da8:	0032      	movs	r2, r6
 8004daa:	0039      	movs	r1, r7
 8004dac:	9802      	ldr	r0, [sp, #8]
 8004dae:	f7ff ff6f 	bl	8004c90 <__ssputs_r>
 8004db2:	1c43      	adds	r3, r0, #1
 8004db4:	d100      	bne.n	8004db8 <_svfiprintf_r+0x64>
 8004db6:	e0b5      	b.n	8004f24 <_svfiprintf_r+0x1d0>
 8004db8:	696a      	ldr	r2, [r5, #20]
 8004dba:	9b04      	ldr	r3, [sp, #16]
 8004dbc:	4694      	mov	ip, r2
 8004dbe:	4463      	add	r3, ip
 8004dc0:	616b      	str	r3, [r5, #20]
 8004dc2:	7823      	ldrb	r3, [r4, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d100      	bne.n	8004dca <_svfiprintf_r+0x76>
 8004dc8:	e0ac      	b.n	8004f24 <_svfiprintf_r+0x1d0>
 8004dca:	2201      	movs	r2, #1
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4252      	negs	r2, r2
 8004dd0:	606a      	str	r2, [r5, #4]
 8004dd2:	a902      	add	r1, sp, #8
 8004dd4:	3254      	adds	r2, #84	; 0x54
 8004dd6:	1852      	adds	r2, r2, r1
 8004dd8:	3401      	adds	r4, #1
 8004dda:	602b      	str	r3, [r5, #0]
 8004ddc:	60eb      	str	r3, [r5, #12]
 8004dde:	60ab      	str	r3, [r5, #8]
 8004de0:	7013      	strb	r3, [r2, #0]
 8004de2:	65ab      	str	r3, [r5, #88]	; 0x58
 8004de4:	4e58      	ldr	r6, [pc, #352]	; (8004f48 <_svfiprintf_r+0x1f4>)
 8004de6:	2205      	movs	r2, #5
 8004de8:	7821      	ldrb	r1, [r4, #0]
 8004dea:	0030      	movs	r0, r6
 8004dec:	f000 fa3e 	bl	800526c <memchr>
 8004df0:	1c62      	adds	r2, r4, #1
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d120      	bne.n	8004e38 <_svfiprintf_r+0xe4>
 8004df6:	6829      	ldr	r1, [r5, #0]
 8004df8:	06cb      	lsls	r3, r1, #27
 8004dfa:	d504      	bpl.n	8004e06 <_svfiprintf_r+0xb2>
 8004dfc:	2353      	movs	r3, #83	; 0x53
 8004dfe:	ae02      	add	r6, sp, #8
 8004e00:	3020      	adds	r0, #32
 8004e02:	199b      	adds	r3, r3, r6
 8004e04:	7018      	strb	r0, [r3, #0]
 8004e06:	070b      	lsls	r3, r1, #28
 8004e08:	d504      	bpl.n	8004e14 <_svfiprintf_r+0xc0>
 8004e0a:	2353      	movs	r3, #83	; 0x53
 8004e0c:	202b      	movs	r0, #43	; 0x2b
 8004e0e:	ae02      	add	r6, sp, #8
 8004e10:	199b      	adds	r3, r3, r6
 8004e12:	7018      	strb	r0, [r3, #0]
 8004e14:	7823      	ldrb	r3, [r4, #0]
 8004e16:	2b2a      	cmp	r3, #42	; 0x2a
 8004e18:	d016      	beq.n	8004e48 <_svfiprintf_r+0xf4>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	210a      	movs	r1, #10
 8004e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e20:	7822      	ldrb	r2, [r4, #0]
 8004e22:	3a30      	subs	r2, #48	; 0x30
 8004e24:	2a09      	cmp	r2, #9
 8004e26:	d955      	bls.n	8004ed4 <_svfiprintf_r+0x180>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	d015      	beq.n	8004e58 <_svfiprintf_r+0x104>
 8004e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e2e:	e013      	b.n	8004e58 <_svfiprintf_r+0x104>
 8004e30:	2b25      	cmp	r3, #37	; 0x25
 8004e32:	d0b5      	beq.n	8004da0 <_svfiprintf_r+0x4c>
 8004e34:	3401      	adds	r4, #1
 8004e36:	e7b0      	b.n	8004d9a <_svfiprintf_r+0x46>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	1b80      	subs	r0, r0, r6
 8004e3c:	4083      	lsls	r3, r0
 8004e3e:	6829      	ldr	r1, [r5, #0]
 8004e40:	0014      	movs	r4, r2
 8004e42:	430b      	orrs	r3, r1
 8004e44:	602b      	str	r3, [r5, #0]
 8004e46:	e7cd      	b.n	8004de4 <_svfiprintf_r+0x90>
 8004e48:	9b05      	ldr	r3, [sp, #20]
 8004e4a:	1d18      	adds	r0, r3, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	9005      	str	r0, [sp, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	db39      	blt.n	8004ec8 <_svfiprintf_r+0x174>
 8004e54:	9309      	str	r3, [sp, #36]	; 0x24
 8004e56:	0014      	movs	r4, r2
 8004e58:	7823      	ldrb	r3, [r4, #0]
 8004e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8004e5c:	d10b      	bne.n	8004e76 <_svfiprintf_r+0x122>
 8004e5e:	7863      	ldrb	r3, [r4, #1]
 8004e60:	1c62      	adds	r2, r4, #1
 8004e62:	2b2a      	cmp	r3, #42	; 0x2a
 8004e64:	d13e      	bne.n	8004ee4 <_svfiprintf_r+0x190>
 8004e66:	9b05      	ldr	r3, [sp, #20]
 8004e68:	3402      	adds	r4, #2
 8004e6a:	1d1a      	adds	r2, r3, #4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	9205      	str	r2, [sp, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	db34      	blt.n	8004ede <_svfiprintf_r+0x18a>
 8004e74:	9307      	str	r3, [sp, #28]
 8004e76:	4e35      	ldr	r6, [pc, #212]	; (8004f4c <_svfiprintf_r+0x1f8>)
 8004e78:	7821      	ldrb	r1, [r4, #0]
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	0030      	movs	r0, r6
 8004e7e:	f000 f9f5 	bl	800526c <memchr>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d006      	beq.n	8004e94 <_svfiprintf_r+0x140>
 8004e86:	2340      	movs	r3, #64	; 0x40
 8004e88:	1b80      	subs	r0, r0, r6
 8004e8a:	4083      	lsls	r3, r0
 8004e8c:	682a      	ldr	r2, [r5, #0]
 8004e8e:	3401      	adds	r4, #1
 8004e90:	4313      	orrs	r3, r2
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	7821      	ldrb	r1, [r4, #0]
 8004e96:	2206      	movs	r2, #6
 8004e98:	482d      	ldr	r0, [pc, #180]	; (8004f50 <_svfiprintf_r+0x1fc>)
 8004e9a:	1c66      	adds	r6, r4, #1
 8004e9c:	7629      	strb	r1, [r5, #24]
 8004e9e:	f000 f9e5 	bl	800526c <memchr>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d046      	beq.n	8004f34 <_svfiprintf_r+0x1e0>
 8004ea6:	4b2b      	ldr	r3, [pc, #172]	; (8004f54 <_svfiprintf_r+0x200>)
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d12f      	bne.n	8004f0c <_svfiprintf_r+0x1b8>
 8004eac:	6829      	ldr	r1, [r5, #0]
 8004eae:	9b05      	ldr	r3, [sp, #20]
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	05c9      	lsls	r1, r1, #23
 8004eb4:	d528      	bpl.n	8004f08 <_svfiprintf_r+0x1b4>
 8004eb6:	189b      	adds	r3, r3, r2
 8004eb8:	4393      	bics	r3, r2
 8004eba:	3308      	adds	r3, #8
 8004ebc:	9305      	str	r3, [sp, #20]
 8004ebe:	696b      	ldr	r3, [r5, #20]
 8004ec0:	9a03      	ldr	r2, [sp, #12]
 8004ec2:	189b      	adds	r3, r3, r2
 8004ec4:	616b      	str	r3, [r5, #20]
 8004ec6:	e767      	b.n	8004d98 <_svfiprintf_r+0x44>
 8004ec8:	425b      	negs	r3, r3
 8004eca:	60eb      	str	r3, [r5, #12]
 8004ecc:	2302      	movs	r3, #2
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	e7c0      	b.n	8004e56 <_svfiprintf_r+0x102>
 8004ed4:	434b      	muls	r3, r1
 8004ed6:	3401      	adds	r4, #1
 8004ed8:	189b      	adds	r3, r3, r2
 8004eda:	2001      	movs	r0, #1
 8004edc:	e7a0      	b.n	8004e20 <_svfiprintf_r+0xcc>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	425b      	negs	r3, r3
 8004ee2:	e7c7      	b.n	8004e74 <_svfiprintf_r+0x120>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	0014      	movs	r4, r2
 8004ee8:	200a      	movs	r0, #10
 8004eea:	001a      	movs	r2, r3
 8004eec:	606b      	str	r3, [r5, #4]
 8004eee:	7821      	ldrb	r1, [r4, #0]
 8004ef0:	3930      	subs	r1, #48	; 0x30
 8004ef2:	2909      	cmp	r1, #9
 8004ef4:	d903      	bls.n	8004efe <_svfiprintf_r+0x1aa>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0bd      	beq.n	8004e76 <_svfiprintf_r+0x122>
 8004efa:	9207      	str	r2, [sp, #28]
 8004efc:	e7bb      	b.n	8004e76 <_svfiprintf_r+0x122>
 8004efe:	4342      	muls	r2, r0
 8004f00:	3401      	adds	r4, #1
 8004f02:	1852      	adds	r2, r2, r1
 8004f04:	2301      	movs	r3, #1
 8004f06:	e7f2      	b.n	8004eee <_svfiprintf_r+0x19a>
 8004f08:	3307      	adds	r3, #7
 8004f0a:	e7d5      	b.n	8004eb8 <_svfiprintf_r+0x164>
 8004f0c:	ab05      	add	r3, sp, #20
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	003a      	movs	r2, r7
 8004f12:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <_svfiprintf_r+0x204>)
 8004f14:	0029      	movs	r1, r5
 8004f16:	9802      	ldr	r0, [sp, #8]
 8004f18:	e000      	b.n	8004f1c <_svfiprintf_r+0x1c8>
 8004f1a:	bf00      	nop
 8004f1c:	9003      	str	r0, [sp, #12]
 8004f1e:	9b03      	ldr	r3, [sp, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	d1cc      	bne.n	8004ebe <_svfiprintf_r+0x16a>
 8004f24:	89bb      	ldrh	r3, [r7, #12]
 8004f26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004f28:	065b      	lsls	r3, r3, #25
 8004f2a:	d400      	bmi.n	8004f2e <_svfiprintf_r+0x1da>
 8004f2c:	e729      	b.n	8004d82 <_svfiprintf_r+0x2e>
 8004f2e:	2001      	movs	r0, #1
 8004f30:	4240      	negs	r0, r0
 8004f32:	e726      	b.n	8004d82 <_svfiprintf_r+0x2e>
 8004f34:	ab05      	add	r3, sp, #20
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	003a      	movs	r2, r7
 8004f3a:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <_svfiprintf_r+0x204>)
 8004f3c:	0029      	movs	r1, r5
 8004f3e:	9802      	ldr	r0, [sp, #8]
 8004f40:	f000 f87a 	bl	8005038 <_printf_i>
 8004f44:	e7ea      	b.n	8004f1c <_svfiprintf_r+0x1c8>
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	08005b97 	.word	0x08005b97
 8004f4c:	08005b9d 	.word	0x08005b9d
 8004f50:	08005ba1 	.word	0x08005ba1
 8004f54:	00000000 	.word	0x00000000
 8004f58:	08004c91 	.word	0x08004c91

08004f5c <_printf_common>:
 8004f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f5e:	0015      	movs	r5, r2
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	688a      	ldr	r2, [r1, #8]
 8004f64:	690b      	ldr	r3, [r1, #16]
 8004f66:	9000      	str	r0, [sp, #0]
 8004f68:	000c      	movs	r4, r1
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	da00      	bge.n	8004f70 <_printf_common+0x14>
 8004f6e:	0013      	movs	r3, r2
 8004f70:	0022      	movs	r2, r4
 8004f72:	602b      	str	r3, [r5, #0]
 8004f74:	3243      	adds	r2, #67	; 0x43
 8004f76:	7812      	ldrb	r2, [r2, #0]
 8004f78:	2a00      	cmp	r2, #0
 8004f7a:	d001      	beq.n	8004f80 <_printf_common+0x24>
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	602b      	str	r3, [r5, #0]
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	069b      	lsls	r3, r3, #26
 8004f84:	d502      	bpl.n	8004f8c <_printf_common+0x30>
 8004f86:	682b      	ldr	r3, [r5, #0]
 8004f88:	3302      	adds	r3, #2
 8004f8a:	602b      	str	r3, [r5, #0]
 8004f8c:	2706      	movs	r7, #6
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	401f      	ands	r7, r3
 8004f92:	d027      	beq.n	8004fe4 <_printf_common+0x88>
 8004f94:	0023      	movs	r3, r4
 8004f96:	3343      	adds	r3, #67	; 0x43
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	1e5a      	subs	r2, r3, #1
 8004f9c:	4193      	sbcs	r3, r2
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	0692      	lsls	r2, r2, #26
 8004fa2:	d430      	bmi.n	8005006 <_printf_common+0xaa>
 8004fa4:	0022      	movs	r2, r4
 8004fa6:	9901      	ldr	r1, [sp, #4]
 8004fa8:	3243      	adds	r2, #67	; 0x43
 8004faa:	9800      	ldr	r0, [sp, #0]
 8004fac:	9e08      	ldr	r6, [sp, #32]
 8004fae:	47b0      	blx	r6
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d025      	beq.n	8005000 <_printf_common+0xa4>
 8004fb4:	2306      	movs	r3, #6
 8004fb6:	6820      	ldr	r0, [r4, #0]
 8004fb8:	682a      	ldr	r2, [r5, #0]
 8004fba:	68e1      	ldr	r1, [r4, #12]
 8004fbc:	4003      	ands	r3, r0
 8004fbe:	2500      	movs	r5, #0
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d103      	bne.n	8004fcc <_printf_common+0x70>
 8004fc4:	1a8d      	subs	r5, r1, r2
 8004fc6:	43eb      	mvns	r3, r5
 8004fc8:	17db      	asrs	r3, r3, #31
 8004fca:	401d      	ands	r5, r3
 8004fcc:	68a3      	ldr	r3, [r4, #8]
 8004fce:	6922      	ldr	r2, [r4, #16]
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	dd01      	ble.n	8004fd8 <_printf_common+0x7c>
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	18ed      	adds	r5, r5, r3
 8004fd8:	2700      	movs	r7, #0
 8004fda:	42bd      	cmp	r5, r7
 8004fdc:	d120      	bne.n	8005020 <_printf_common+0xc4>
 8004fde:	2000      	movs	r0, #0
 8004fe0:	e010      	b.n	8005004 <_printf_common+0xa8>
 8004fe2:	3701      	adds	r7, #1
 8004fe4:	68e3      	ldr	r3, [r4, #12]
 8004fe6:	682a      	ldr	r2, [r5, #0]
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	429f      	cmp	r7, r3
 8004fec:	dad2      	bge.n	8004f94 <_printf_common+0x38>
 8004fee:	0022      	movs	r2, r4
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	3219      	adds	r2, #25
 8004ff4:	9901      	ldr	r1, [sp, #4]
 8004ff6:	9800      	ldr	r0, [sp, #0]
 8004ff8:	9e08      	ldr	r6, [sp, #32]
 8004ffa:	47b0      	blx	r6
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d1f0      	bne.n	8004fe2 <_printf_common+0x86>
 8005000:	2001      	movs	r0, #1
 8005002:	4240      	negs	r0, r0
 8005004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005006:	2030      	movs	r0, #48	; 0x30
 8005008:	18e1      	adds	r1, r4, r3
 800500a:	3143      	adds	r1, #67	; 0x43
 800500c:	7008      	strb	r0, [r1, #0]
 800500e:	0021      	movs	r1, r4
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	3145      	adds	r1, #69	; 0x45
 8005014:	7809      	ldrb	r1, [r1, #0]
 8005016:	18a2      	adds	r2, r4, r2
 8005018:	3243      	adds	r2, #67	; 0x43
 800501a:	3302      	adds	r3, #2
 800501c:	7011      	strb	r1, [r2, #0]
 800501e:	e7c1      	b.n	8004fa4 <_printf_common+0x48>
 8005020:	0022      	movs	r2, r4
 8005022:	2301      	movs	r3, #1
 8005024:	321a      	adds	r2, #26
 8005026:	9901      	ldr	r1, [sp, #4]
 8005028:	9800      	ldr	r0, [sp, #0]
 800502a:	9e08      	ldr	r6, [sp, #32]
 800502c:	47b0      	blx	r6
 800502e:	1c43      	adds	r3, r0, #1
 8005030:	d0e6      	beq.n	8005000 <_printf_common+0xa4>
 8005032:	3701      	adds	r7, #1
 8005034:	e7d1      	b.n	8004fda <_printf_common+0x7e>
	...

08005038 <_printf_i>:
 8005038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503a:	b08b      	sub	sp, #44	; 0x2c
 800503c:	9206      	str	r2, [sp, #24]
 800503e:	000a      	movs	r2, r1
 8005040:	3243      	adds	r2, #67	; 0x43
 8005042:	9307      	str	r3, [sp, #28]
 8005044:	9005      	str	r0, [sp, #20]
 8005046:	9204      	str	r2, [sp, #16]
 8005048:	7e0a      	ldrb	r2, [r1, #24]
 800504a:	000c      	movs	r4, r1
 800504c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800504e:	2a6e      	cmp	r2, #110	; 0x6e
 8005050:	d100      	bne.n	8005054 <_printf_i+0x1c>
 8005052:	e08f      	b.n	8005174 <_printf_i+0x13c>
 8005054:	d817      	bhi.n	8005086 <_printf_i+0x4e>
 8005056:	2a63      	cmp	r2, #99	; 0x63
 8005058:	d02c      	beq.n	80050b4 <_printf_i+0x7c>
 800505a:	d808      	bhi.n	800506e <_printf_i+0x36>
 800505c:	2a00      	cmp	r2, #0
 800505e:	d100      	bne.n	8005062 <_printf_i+0x2a>
 8005060:	e099      	b.n	8005196 <_printf_i+0x15e>
 8005062:	2a58      	cmp	r2, #88	; 0x58
 8005064:	d054      	beq.n	8005110 <_printf_i+0xd8>
 8005066:	0026      	movs	r6, r4
 8005068:	3642      	adds	r6, #66	; 0x42
 800506a:	7032      	strb	r2, [r6, #0]
 800506c:	e029      	b.n	80050c2 <_printf_i+0x8a>
 800506e:	2a64      	cmp	r2, #100	; 0x64
 8005070:	d001      	beq.n	8005076 <_printf_i+0x3e>
 8005072:	2a69      	cmp	r2, #105	; 0x69
 8005074:	d1f7      	bne.n	8005066 <_printf_i+0x2e>
 8005076:	6821      	ldr	r1, [r4, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	0608      	lsls	r0, r1, #24
 800507c:	d523      	bpl.n	80050c6 <_printf_i+0x8e>
 800507e:	1d11      	adds	r1, r2, #4
 8005080:	6019      	str	r1, [r3, #0]
 8005082:	6815      	ldr	r5, [r2, #0]
 8005084:	e025      	b.n	80050d2 <_printf_i+0x9a>
 8005086:	2a73      	cmp	r2, #115	; 0x73
 8005088:	d100      	bne.n	800508c <_printf_i+0x54>
 800508a:	e088      	b.n	800519e <_printf_i+0x166>
 800508c:	d808      	bhi.n	80050a0 <_printf_i+0x68>
 800508e:	2a6f      	cmp	r2, #111	; 0x6f
 8005090:	d029      	beq.n	80050e6 <_printf_i+0xae>
 8005092:	2a70      	cmp	r2, #112	; 0x70
 8005094:	d1e7      	bne.n	8005066 <_printf_i+0x2e>
 8005096:	2220      	movs	r2, #32
 8005098:	6809      	ldr	r1, [r1, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	6022      	str	r2, [r4, #0]
 800509e:	e003      	b.n	80050a8 <_printf_i+0x70>
 80050a0:	2a75      	cmp	r2, #117	; 0x75
 80050a2:	d020      	beq.n	80050e6 <_printf_i+0xae>
 80050a4:	2a78      	cmp	r2, #120	; 0x78
 80050a6:	d1de      	bne.n	8005066 <_printf_i+0x2e>
 80050a8:	0022      	movs	r2, r4
 80050aa:	2178      	movs	r1, #120	; 0x78
 80050ac:	3245      	adds	r2, #69	; 0x45
 80050ae:	7011      	strb	r1, [r2, #0]
 80050b0:	4a6c      	ldr	r2, [pc, #432]	; (8005264 <_printf_i+0x22c>)
 80050b2:	e030      	b.n	8005116 <_printf_i+0xde>
 80050b4:	000e      	movs	r6, r1
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	3642      	adds	r6, #66	; 0x42
 80050ba:	1d11      	adds	r1, r2, #4
 80050bc:	6019      	str	r1, [r3, #0]
 80050be:	6813      	ldr	r3, [r2, #0]
 80050c0:	7033      	strb	r3, [r6, #0]
 80050c2:	2301      	movs	r3, #1
 80050c4:	e079      	b.n	80051ba <_printf_i+0x182>
 80050c6:	0649      	lsls	r1, r1, #25
 80050c8:	d5d9      	bpl.n	800507e <_printf_i+0x46>
 80050ca:	1d11      	adds	r1, r2, #4
 80050cc:	6019      	str	r1, [r3, #0]
 80050ce:	2300      	movs	r3, #0
 80050d0:	5ed5      	ldrsh	r5, [r2, r3]
 80050d2:	2d00      	cmp	r5, #0
 80050d4:	da03      	bge.n	80050de <_printf_i+0xa6>
 80050d6:	232d      	movs	r3, #45	; 0x2d
 80050d8:	9a04      	ldr	r2, [sp, #16]
 80050da:	426d      	negs	r5, r5
 80050dc:	7013      	strb	r3, [r2, #0]
 80050de:	4b62      	ldr	r3, [pc, #392]	; (8005268 <_printf_i+0x230>)
 80050e0:	270a      	movs	r7, #10
 80050e2:	9303      	str	r3, [sp, #12]
 80050e4:	e02f      	b.n	8005146 <_printf_i+0x10e>
 80050e6:	6820      	ldr	r0, [r4, #0]
 80050e8:	6819      	ldr	r1, [r3, #0]
 80050ea:	0605      	lsls	r5, r0, #24
 80050ec:	d503      	bpl.n	80050f6 <_printf_i+0xbe>
 80050ee:	1d08      	adds	r0, r1, #4
 80050f0:	6018      	str	r0, [r3, #0]
 80050f2:	680d      	ldr	r5, [r1, #0]
 80050f4:	e005      	b.n	8005102 <_printf_i+0xca>
 80050f6:	0640      	lsls	r0, r0, #25
 80050f8:	d5f9      	bpl.n	80050ee <_printf_i+0xb6>
 80050fa:	680d      	ldr	r5, [r1, #0]
 80050fc:	1d08      	adds	r0, r1, #4
 80050fe:	6018      	str	r0, [r3, #0]
 8005100:	b2ad      	uxth	r5, r5
 8005102:	4b59      	ldr	r3, [pc, #356]	; (8005268 <_printf_i+0x230>)
 8005104:	2708      	movs	r7, #8
 8005106:	9303      	str	r3, [sp, #12]
 8005108:	2a6f      	cmp	r2, #111	; 0x6f
 800510a:	d018      	beq.n	800513e <_printf_i+0x106>
 800510c:	270a      	movs	r7, #10
 800510e:	e016      	b.n	800513e <_printf_i+0x106>
 8005110:	3145      	adds	r1, #69	; 0x45
 8005112:	700a      	strb	r2, [r1, #0]
 8005114:	4a54      	ldr	r2, [pc, #336]	; (8005268 <_printf_i+0x230>)
 8005116:	9203      	str	r2, [sp, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	6821      	ldr	r1, [r4, #0]
 800511c:	1d10      	adds	r0, r2, #4
 800511e:	6018      	str	r0, [r3, #0]
 8005120:	6815      	ldr	r5, [r2, #0]
 8005122:	0608      	lsls	r0, r1, #24
 8005124:	d522      	bpl.n	800516c <_printf_i+0x134>
 8005126:	07cb      	lsls	r3, r1, #31
 8005128:	d502      	bpl.n	8005130 <_printf_i+0xf8>
 800512a:	2320      	movs	r3, #32
 800512c:	4319      	orrs	r1, r3
 800512e:	6021      	str	r1, [r4, #0]
 8005130:	2710      	movs	r7, #16
 8005132:	2d00      	cmp	r5, #0
 8005134:	d103      	bne.n	800513e <_printf_i+0x106>
 8005136:	2320      	movs	r3, #32
 8005138:	6822      	ldr	r2, [r4, #0]
 800513a:	439a      	bics	r2, r3
 800513c:	6022      	str	r2, [r4, #0]
 800513e:	0023      	movs	r3, r4
 8005140:	2200      	movs	r2, #0
 8005142:	3343      	adds	r3, #67	; 0x43
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	6863      	ldr	r3, [r4, #4]
 8005148:	60a3      	str	r3, [r4, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	db5c      	blt.n	8005208 <_printf_i+0x1d0>
 800514e:	2204      	movs	r2, #4
 8005150:	6821      	ldr	r1, [r4, #0]
 8005152:	4391      	bics	r1, r2
 8005154:	6021      	str	r1, [r4, #0]
 8005156:	2d00      	cmp	r5, #0
 8005158:	d158      	bne.n	800520c <_printf_i+0x1d4>
 800515a:	9e04      	ldr	r6, [sp, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d064      	beq.n	800522a <_printf_i+0x1f2>
 8005160:	0026      	movs	r6, r4
 8005162:	9b03      	ldr	r3, [sp, #12]
 8005164:	3642      	adds	r6, #66	; 0x42
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	7033      	strb	r3, [r6, #0]
 800516a:	e05e      	b.n	800522a <_printf_i+0x1f2>
 800516c:	0648      	lsls	r0, r1, #25
 800516e:	d5da      	bpl.n	8005126 <_printf_i+0xee>
 8005170:	b2ad      	uxth	r5, r5
 8005172:	e7d8      	b.n	8005126 <_printf_i+0xee>
 8005174:	6809      	ldr	r1, [r1, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	0608      	lsls	r0, r1, #24
 800517a:	d505      	bpl.n	8005188 <_printf_i+0x150>
 800517c:	1d11      	adds	r1, r2, #4
 800517e:	6019      	str	r1, [r3, #0]
 8005180:	6813      	ldr	r3, [r2, #0]
 8005182:	6962      	ldr	r2, [r4, #20]
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e006      	b.n	8005196 <_printf_i+0x15e>
 8005188:	0649      	lsls	r1, r1, #25
 800518a:	d5f7      	bpl.n	800517c <_printf_i+0x144>
 800518c:	1d11      	adds	r1, r2, #4
 800518e:	6019      	str	r1, [r3, #0]
 8005190:	6813      	ldr	r3, [r2, #0]
 8005192:	8aa2      	ldrh	r2, [r4, #20]
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	2300      	movs	r3, #0
 8005198:	9e04      	ldr	r6, [sp, #16]
 800519a:	6123      	str	r3, [r4, #16]
 800519c:	e054      	b.n	8005248 <_printf_i+0x210>
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	1d11      	adds	r1, r2, #4
 80051a2:	6019      	str	r1, [r3, #0]
 80051a4:	6816      	ldr	r6, [r2, #0]
 80051a6:	2100      	movs	r1, #0
 80051a8:	6862      	ldr	r2, [r4, #4]
 80051aa:	0030      	movs	r0, r6
 80051ac:	f000 f85e 	bl	800526c <memchr>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d001      	beq.n	80051b8 <_printf_i+0x180>
 80051b4:	1b80      	subs	r0, r0, r6
 80051b6:	6060      	str	r0, [r4, #4]
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	2300      	movs	r3, #0
 80051be:	9a04      	ldr	r2, [sp, #16]
 80051c0:	7013      	strb	r3, [r2, #0]
 80051c2:	e041      	b.n	8005248 <_printf_i+0x210>
 80051c4:	6923      	ldr	r3, [r4, #16]
 80051c6:	0032      	movs	r2, r6
 80051c8:	9906      	ldr	r1, [sp, #24]
 80051ca:	9805      	ldr	r0, [sp, #20]
 80051cc:	9d07      	ldr	r5, [sp, #28]
 80051ce:	47a8      	blx	r5
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d043      	beq.n	800525c <_printf_i+0x224>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	2500      	movs	r5, #0
 80051d8:	079b      	lsls	r3, r3, #30
 80051da:	d40f      	bmi.n	80051fc <_printf_i+0x1c4>
 80051dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051de:	68e0      	ldr	r0, [r4, #12]
 80051e0:	4298      	cmp	r0, r3
 80051e2:	da3d      	bge.n	8005260 <_printf_i+0x228>
 80051e4:	0018      	movs	r0, r3
 80051e6:	e03b      	b.n	8005260 <_printf_i+0x228>
 80051e8:	0022      	movs	r2, r4
 80051ea:	2301      	movs	r3, #1
 80051ec:	3219      	adds	r2, #25
 80051ee:	9906      	ldr	r1, [sp, #24]
 80051f0:	9805      	ldr	r0, [sp, #20]
 80051f2:	9e07      	ldr	r6, [sp, #28]
 80051f4:	47b0      	blx	r6
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	d030      	beq.n	800525c <_printf_i+0x224>
 80051fa:	3501      	adds	r5, #1
 80051fc:	68e3      	ldr	r3, [r4, #12]
 80051fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	429d      	cmp	r5, r3
 8005204:	dbf0      	blt.n	80051e8 <_printf_i+0x1b0>
 8005206:	e7e9      	b.n	80051dc <_printf_i+0x1a4>
 8005208:	2d00      	cmp	r5, #0
 800520a:	d0a9      	beq.n	8005160 <_printf_i+0x128>
 800520c:	9e04      	ldr	r6, [sp, #16]
 800520e:	0028      	movs	r0, r5
 8005210:	0039      	movs	r1, r7
 8005212:	f7fb f81b 	bl	800024c <__aeabi_uidivmod>
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	3e01      	subs	r6, #1
 800521a:	5c5b      	ldrb	r3, [r3, r1]
 800521c:	0028      	movs	r0, r5
 800521e:	7033      	strb	r3, [r6, #0]
 8005220:	0039      	movs	r1, r7
 8005222:	f7fa ff8d 	bl	8000140 <__udivsi3>
 8005226:	1e05      	subs	r5, r0, #0
 8005228:	d1f1      	bne.n	800520e <_printf_i+0x1d6>
 800522a:	2f08      	cmp	r7, #8
 800522c:	d109      	bne.n	8005242 <_printf_i+0x20a>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	07db      	lsls	r3, r3, #31
 8005232:	d506      	bpl.n	8005242 <_printf_i+0x20a>
 8005234:	6863      	ldr	r3, [r4, #4]
 8005236:	6922      	ldr	r2, [r4, #16]
 8005238:	4293      	cmp	r3, r2
 800523a:	dc02      	bgt.n	8005242 <_printf_i+0x20a>
 800523c:	2330      	movs	r3, #48	; 0x30
 800523e:	3e01      	subs	r6, #1
 8005240:	7033      	strb	r3, [r6, #0]
 8005242:	9b04      	ldr	r3, [sp, #16]
 8005244:	1b9b      	subs	r3, r3, r6
 8005246:	6123      	str	r3, [r4, #16]
 8005248:	9b07      	ldr	r3, [sp, #28]
 800524a:	aa09      	add	r2, sp, #36	; 0x24
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	0021      	movs	r1, r4
 8005250:	9b06      	ldr	r3, [sp, #24]
 8005252:	9805      	ldr	r0, [sp, #20]
 8005254:	f7ff fe82 	bl	8004f5c <_printf_common>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d1b3      	bne.n	80051c4 <_printf_i+0x18c>
 800525c:	2001      	movs	r0, #1
 800525e:	4240      	negs	r0, r0
 8005260:	b00b      	add	sp, #44	; 0x2c
 8005262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005264:	08005bb9 	.word	0x08005bb9
 8005268:	08005ba8 	.word	0x08005ba8

0800526c <memchr>:
 800526c:	b2c9      	uxtb	r1, r1
 800526e:	1882      	adds	r2, r0, r2
 8005270:	4290      	cmp	r0, r2
 8005272:	d101      	bne.n	8005278 <memchr+0xc>
 8005274:	2000      	movs	r0, #0
 8005276:	4770      	bx	lr
 8005278:	7803      	ldrb	r3, [r0, #0]
 800527a:	428b      	cmp	r3, r1
 800527c:	d0fb      	beq.n	8005276 <memchr+0xa>
 800527e:	3001      	adds	r0, #1
 8005280:	e7f6      	b.n	8005270 <memchr+0x4>

08005282 <memmove>:
 8005282:	b510      	push	{r4, lr}
 8005284:	4288      	cmp	r0, r1
 8005286:	d902      	bls.n	800528e <memmove+0xc>
 8005288:	188b      	adds	r3, r1, r2
 800528a:	4298      	cmp	r0, r3
 800528c:	d308      	bcc.n	80052a0 <memmove+0x1e>
 800528e:	2300      	movs	r3, #0
 8005290:	429a      	cmp	r2, r3
 8005292:	d007      	beq.n	80052a4 <memmove+0x22>
 8005294:	5ccc      	ldrb	r4, [r1, r3]
 8005296:	54c4      	strb	r4, [r0, r3]
 8005298:	3301      	adds	r3, #1
 800529a:	e7f9      	b.n	8005290 <memmove+0xe>
 800529c:	5c8b      	ldrb	r3, [r1, r2]
 800529e:	5483      	strb	r3, [r0, r2]
 80052a0:	3a01      	subs	r2, #1
 80052a2:	d2fb      	bcs.n	800529c <memmove+0x1a>
 80052a4:	bd10      	pop	{r4, pc}
	...

080052a8 <_free_r>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	0005      	movs	r5, r0
 80052ac:	2900      	cmp	r1, #0
 80052ae:	d010      	beq.n	80052d2 <_free_r+0x2a>
 80052b0:	1f0c      	subs	r4, r1, #4
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	da00      	bge.n	80052ba <_free_r+0x12>
 80052b8:	18e4      	adds	r4, r4, r3
 80052ba:	0028      	movs	r0, r5
 80052bc:	f000 f8d4 	bl	8005468 <__malloc_lock>
 80052c0:	4a1d      	ldr	r2, [pc, #116]	; (8005338 <_free_r+0x90>)
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d105      	bne.n	80052d4 <_free_r+0x2c>
 80052c8:	6063      	str	r3, [r4, #4]
 80052ca:	6014      	str	r4, [r2, #0]
 80052cc:	0028      	movs	r0, r5
 80052ce:	f000 f8cc 	bl	800546a <__malloc_unlock>
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d909      	bls.n	80052ec <_free_r+0x44>
 80052d8:	6821      	ldr	r1, [r4, #0]
 80052da:	1860      	adds	r0, r4, r1
 80052dc:	4283      	cmp	r3, r0
 80052de:	d1f3      	bne.n	80052c8 <_free_r+0x20>
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	1841      	adds	r1, r0, r1
 80052e6:	6021      	str	r1, [r4, #0]
 80052e8:	e7ee      	b.n	80052c8 <_free_r+0x20>
 80052ea:	0013      	movs	r3, r2
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	2a00      	cmp	r2, #0
 80052f0:	d001      	beq.n	80052f6 <_free_r+0x4e>
 80052f2:	42a2      	cmp	r2, r4
 80052f4:	d9f9      	bls.n	80052ea <_free_r+0x42>
 80052f6:	6819      	ldr	r1, [r3, #0]
 80052f8:	1858      	adds	r0, r3, r1
 80052fa:	42a0      	cmp	r0, r4
 80052fc:	d10b      	bne.n	8005316 <_free_r+0x6e>
 80052fe:	6820      	ldr	r0, [r4, #0]
 8005300:	1809      	adds	r1, r1, r0
 8005302:	1858      	adds	r0, r3, r1
 8005304:	6019      	str	r1, [r3, #0]
 8005306:	4282      	cmp	r2, r0
 8005308:	d1e0      	bne.n	80052cc <_free_r+0x24>
 800530a:	6810      	ldr	r0, [r2, #0]
 800530c:	6852      	ldr	r2, [r2, #4]
 800530e:	1841      	adds	r1, r0, r1
 8005310:	6019      	str	r1, [r3, #0]
 8005312:	605a      	str	r2, [r3, #4]
 8005314:	e7da      	b.n	80052cc <_free_r+0x24>
 8005316:	42a0      	cmp	r0, r4
 8005318:	d902      	bls.n	8005320 <_free_r+0x78>
 800531a:	230c      	movs	r3, #12
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	e7d5      	b.n	80052cc <_free_r+0x24>
 8005320:	6821      	ldr	r1, [r4, #0]
 8005322:	1860      	adds	r0, r4, r1
 8005324:	4282      	cmp	r2, r0
 8005326:	d103      	bne.n	8005330 <_free_r+0x88>
 8005328:	6810      	ldr	r0, [r2, #0]
 800532a:	6852      	ldr	r2, [r2, #4]
 800532c:	1841      	adds	r1, r0, r1
 800532e:	6021      	str	r1, [r4, #0]
 8005330:	6062      	str	r2, [r4, #4]
 8005332:	605c      	str	r4, [r3, #4]
 8005334:	e7ca      	b.n	80052cc <_free_r+0x24>
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	200002f0 	.word	0x200002f0

0800533c <_malloc_r>:
 800533c:	2303      	movs	r3, #3
 800533e:	b570      	push	{r4, r5, r6, lr}
 8005340:	1ccd      	adds	r5, r1, #3
 8005342:	439d      	bics	r5, r3
 8005344:	3508      	adds	r5, #8
 8005346:	0006      	movs	r6, r0
 8005348:	2d0c      	cmp	r5, #12
 800534a:	d21e      	bcs.n	800538a <_malloc_r+0x4e>
 800534c:	250c      	movs	r5, #12
 800534e:	42a9      	cmp	r1, r5
 8005350:	d81d      	bhi.n	800538e <_malloc_r+0x52>
 8005352:	0030      	movs	r0, r6
 8005354:	f000 f888 	bl	8005468 <__malloc_lock>
 8005358:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <_malloc_r+0xb4>)
 800535a:	6814      	ldr	r4, [r2, #0]
 800535c:	0021      	movs	r1, r4
 800535e:	2900      	cmp	r1, #0
 8005360:	d119      	bne.n	8005396 <_malloc_r+0x5a>
 8005362:	4c24      	ldr	r4, [pc, #144]	; (80053f4 <_malloc_r+0xb8>)
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d103      	bne.n	8005372 <_malloc_r+0x36>
 800536a:	0030      	movs	r0, r6
 800536c:	f000 f86a 	bl	8005444 <_sbrk_r>
 8005370:	6020      	str	r0, [r4, #0]
 8005372:	0029      	movs	r1, r5
 8005374:	0030      	movs	r0, r6
 8005376:	f000 f865 	bl	8005444 <_sbrk_r>
 800537a:	1c43      	adds	r3, r0, #1
 800537c:	d12c      	bne.n	80053d8 <_malloc_r+0x9c>
 800537e:	230c      	movs	r3, #12
 8005380:	0030      	movs	r0, r6
 8005382:	6033      	str	r3, [r6, #0]
 8005384:	f000 f871 	bl	800546a <__malloc_unlock>
 8005388:	e003      	b.n	8005392 <_malloc_r+0x56>
 800538a:	2d00      	cmp	r5, #0
 800538c:	dadf      	bge.n	800534e <_malloc_r+0x12>
 800538e:	230c      	movs	r3, #12
 8005390:	6033      	str	r3, [r6, #0]
 8005392:	2000      	movs	r0, #0
 8005394:	bd70      	pop	{r4, r5, r6, pc}
 8005396:	680b      	ldr	r3, [r1, #0]
 8005398:	1b5b      	subs	r3, r3, r5
 800539a:	d41a      	bmi.n	80053d2 <_malloc_r+0x96>
 800539c:	2b0b      	cmp	r3, #11
 800539e:	d903      	bls.n	80053a8 <_malloc_r+0x6c>
 80053a0:	600b      	str	r3, [r1, #0]
 80053a2:	18cc      	adds	r4, r1, r3
 80053a4:	6025      	str	r5, [r4, #0]
 80053a6:	e003      	b.n	80053b0 <_malloc_r+0x74>
 80053a8:	428c      	cmp	r4, r1
 80053aa:	d10e      	bne.n	80053ca <_malloc_r+0x8e>
 80053ac:	6863      	ldr	r3, [r4, #4]
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	0030      	movs	r0, r6
 80053b2:	f000 f85a 	bl	800546a <__malloc_unlock>
 80053b6:	0020      	movs	r0, r4
 80053b8:	2207      	movs	r2, #7
 80053ba:	300b      	adds	r0, #11
 80053bc:	1d23      	adds	r3, r4, #4
 80053be:	4390      	bics	r0, r2
 80053c0:	1ac3      	subs	r3, r0, r3
 80053c2:	d0e7      	beq.n	8005394 <_malloc_r+0x58>
 80053c4:	425a      	negs	r2, r3
 80053c6:	50e2      	str	r2, [r4, r3]
 80053c8:	e7e4      	b.n	8005394 <_malloc_r+0x58>
 80053ca:	684b      	ldr	r3, [r1, #4]
 80053cc:	6063      	str	r3, [r4, #4]
 80053ce:	000c      	movs	r4, r1
 80053d0:	e7ee      	b.n	80053b0 <_malloc_r+0x74>
 80053d2:	000c      	movs	r4, r1
 80053d4:	6849      	ldr	r1, [r1, #4]
 80053d6:	e7c2      	b.n	800535e <_malloc_r+0x22>
 80053d8:	2303      	movs	r3, #3
 80053da:	1cc4      	adds	r4, r0, #3
 80053dc:	439c      	bics	r4, r3
 80053de:	42a0      	cmp	r0, r4
 80053e0:	d0e0      	beq.n	80053a4 <_malloc_r+0x68>
 80053e2:	1a21      	subs	r1, r4, r0
 80053e4:	0030      	movs	r0, r6
 80053e6:	f000 f82d 	bl	8005444 <_sbrk_r>
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	d1da      	bne.n	80053a4 <_malloc_r+0x68>
 80053ee:	e7c6      	b.n	800537e <_malloc_r+0x42>
 80053f0:	200002f0 	.word	0x200002f0
 80053f4:	200002f4 	.word	0x200002f4

080053f8 <_realloc_r>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	0007      	movs	r7, r0
 80053fc:	000d      	movs	r5, r1
 80053fe:	0016      	movs	r6, r2
 8005400:	2900      	cmp	r1, #0
 8005402:	d105      	bne.n	8005410 <_realloc_r+0x18>
 8005404:	0011      	movs	r1, r2
 8005406:	f7ff ff99 	bl	800533c <_malloc_r>
 800540a:	0004      	movs	r4, r0
 800540c:	0020      	movs	r0, r4
 800540e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005410:	2a00      	cmp	r2, #0
 8005412:	d103      	bne.n	800541c <_realloc_r+0x24>
 8005414:	f7ff ff48 	bl	80052a8 <_free_r>
 8005418:	0034      	movs	r4, r6
 800541a:	e7f7      	b.n	800540c <_realloc_r+0x14>
 800541c:	f000 f826 	bl	800546c <_malloc_usable_size_r>
 8005420:	002c      	movs	r4, r5
 8005422:	4286      	cmp	r6, r0
 8005424:	d9f2      	bls.n	800540c <_realloc_r+0x14>
 8005426:	0031      	movs	r1, r6
 8005428:	0038      	movs	r0, r7
 800542a:	f7ff ff87 	bl	800533c <_malloc_r>
 800542e:	1e04      	subs	r4, r0, #0
 8005430:	d0ec      	beq.n	800540c <_realloc_r+0x14>
 8005432:	0029      	movs	r1, r5
 8005434:	0032      	movs	r2, r6
 8005436:	f7ff fbf7 	bl	8004c28 <memcpy>
 800543a:	0029      	movs	r1, r5
 800543c:	0038      	movs	r0, r7
 800543e:	f7ff ff33 	bl	80052a8 <_free_r>
 8005442:	e7e3      	b.n	800540c <_realloc_r+0x14>

08005444 <_sbrk_r>:
 8005444:	2300      	movs	r3, #0
 8005446:	b570      	push	{r4, r5, r6, lr}
 8005448:	4c06      	ldr	r4, [pc, #24]	; (8005464 <_sbrk_r+0x20>)
 800544a:	0005      	movs	r5, r0
 800544c:	0008      	movs	r0, r1
 800544e:	6023      	str	r3, [r4, #0]
 8005450:	f7ff fb62 	bl	8004b18 <_sbrk>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d103      	bne.n	8005460 <_sbrk_r+0x1c>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d000      	beq.n	8005460 <_sbrk_r+0x1c>
 800545e:	602b      	str	r3, [r5, #0]
 8005460:	bd70      	pop	{r4, r5, r6, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	200019f4 	.word	0x200019f4

08005468 <__malloc_lock>:
 8005468:	4770      	bx	lr

0800546a <__malloc_unlock>:
 800546a:	4770      	bx	lr

0800546c <_malloc_usable_size_r>:
 800546c:	1f0b      	subs	r3, r1, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	1f18      	subs	r0, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	da01      	bge.n	800547a <_malloc_usable_size_r+0xe>
 8005476:	580b      	ldr	r3, [r1, r0]
 8005478:	18c0      	adds	r0, r0, r3
 800547a:	4770      	bx	lr

0800547c <_init>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005482:	bc08      	pop	{r3}
 8005484:	469e      	mov	lr, r3
 8005486:	4770      	bx	lr

08005488 <_fini>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr
