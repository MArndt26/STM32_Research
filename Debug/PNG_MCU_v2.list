
PNG_MCU_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e2c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  08005eec  08005eec  00015eec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800662c  0800662c  0001662c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006630  08006630  00016630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08006634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001948  20000088  080066bc  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200019d0  080066bc  000219d0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a4a3  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b52  00000000  00000000  0003a553  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00010597  00000000  00000000  0003e0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001060  00000000  00000000  0004e640  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001740  00000000  00000000  0004f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009566  00000000  00000000  00050de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005125  00000000  00000000  0005a346  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005f46b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000358c  00000000  00000000  0005f4e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ed4 	.word	0x08005ed4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08005ed4 	.word	0x08005ed4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800025c:	20fa      	movs	r0, #250	; 0xfa
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <HAL_InitTick+0x3c>)
 8000260:	0080      	lsls	r0, r0, #2
 8000262:	7819      	ldrb	r1, [r3, #0]
 8000264:	f7ff ff6c 	bl	8000140 <__udivsi3>
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <HAL_InitTick+0x40>)
 800026a:	0001      	movs	r1, r0
 800026c:	6818      	ldr	r0, [r3, #0]
 800026e:	f7ff ff67 	bl	8000140 <__udivsi3>
 8000272:	f000 fb7f 	bl	8000974 <HAL_SYSTICK_Config>
 8000276:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000278:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800027a:	2c00      	cmp	r4, #0
 800027c:	d109      	bne.n	8000292 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	2d03      	cmp	r5, #3
 8000280:	d807      	bhi.n	8000292 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	3802      	subs	r0, #2
 8000284:	0022      	movs	r2, r4
 8000286:	0029      	movs	r1, r5
 8000288:	f000 fb38 	bl	80008fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800028c:	0020      	movs	r0, r4
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <HAL_InitTick+0x44>)
 8000290:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	20000000 	.word	0x20000000
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000004 	.word	0x20000004

080002a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a0:	2310      	movs	r3, #16
 80002a2:	4a06      	ldr	r2, [pc, #24]	; (80002bc <HAL_Init+0x1c>)
{
 80002a4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80002a8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002aa:	430b      	orrs	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ae:	f7ff ffd3 	bl	8000258 <HAL_InitTick>
  HAL_MspInit();
 80002b2:	f005 f821 	bl	80052f8 <HAL_MspInit>
}
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	40022000 	.word	0x40022000

080002c0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x10>)
 80002c2:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <HAL_IncTick+0x14>)
 80002c4:	6811      	ldr	r1, [r2, #0]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	185b      	adds	r3, r3, r1
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	200002f4 	.word	0x200002f4
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002d8:	4b01      	ldr	r3, [pc, #4]	; (80002e0 <HAL_GetTick+0x8>)
 80002da:	6818      	ldr	r0, [r3, #0]
}
 80002dc:	4770      	bx	lr
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	200002f4 	.word	0x200002f4

080002e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002e8:	f7ff fff6 	bl	80002d8 <HAL_GetTick>
 80002ec:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ee:	1c63      	adds	r3, r4, #1
 80002f0:	d002      	beq.n	80002f8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <HAL_Delay+0x20>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002f8:	f7ff ffee 	bl	80002d8 <HAL_GetTick>
 80002fc:	1b40      	subs	r0, r0, r5
 80002fe:	4284      	cmp	r4, r0
 8000300:	d8fa      	bhi.n	80002f8 <HAL_Delay+0x14>
  {
  }
}
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	20000000 	.word	0x20000000

08000308 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000308:	2103      	movs	r1, #3
 800030a:	6803      	ldr	r3, [r0, #0]
{
 800030c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800030e:	689a      	ldr	r2, [r3, #8]
{
 8000310:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000312:	400a      	ands	r2, r1
 8000314:	2a01      	cmp	r2, #1
 8000316:	d001      	beq.n	800031c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000318:	2000      	movs	r0, #0
}
 800031a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800031c:	6819      	ldr	r1, [r3, #0]
 800031e:	4211      	tst	r1, r2
 8000320:	d102      	bne.n	8000328 <ADC_Disable+0x20>
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	0412      	lsls	r2, r2, #16
 8000326:	d5f7      	bpl.n	8000318 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000328:	2205      	movs	r2, #5
 800032a:	689d      	ldr	r5, [r3, #8]
 800032c:	4015      	ands	r5, r2
 800032e:	2d01      	cmp	r5, #1
 8000330:	d11a      	bne.n	8000368 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 8000332:	2202      	movs	r2, #2
 8000334:	6899      	ldr	r1, [r3, #8]
 8000336:	430a      	orrs	r2, r1
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	2203      	movs	r2, #3
 800033c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800033e:	f7ff ffcb 	bl	80002d8 <HAL_GetTick>
 8000342:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000344:	6823      	ldr	r3, [r4, #0]
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	422b      	tst	r3, r5
 800034a:	d0e5      	beq.n	8000318 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800034c:	f7ff ffc4 	bl	80002d8 <HAL_GetTick>
 8000350:	1b80      	subs	r0, r0, r6
 8000352:	2802      	cmp	r0, #2
 8000354:	d9f6      	bls.n	8000344 <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000356:	2310      	movs	r3, #16
 8000358:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 800035a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800035c:	4313      	orrs	r3, r2
 800035e:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000360:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000362:	431d      	orrs	r5, r3
 8000364:	63e5      	str	r5, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000366:	e7d8      	b.n	800031a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000368:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800036a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800036c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800036e:	4313      	orrs	r3, r2
 8000370:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000372:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000374:	4303      	orrs	r3, r0
 8000376:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000378:	e7cf      	b.n	800031a <ADC_Disable+0x12>
	...

0800037c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800037c:	2300      	movs	r3, #0
{
 800037e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000380:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8000382:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000384:	6803      	ldr	r3, [r0, #0]
{
 8000386:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000388:	689a      	ldr	r2, [r3, #8]
 800038a:	400a      	ands	r2, r1
 800038c:	2a01      	cmp	r2, #1
 800038e:	d107      	bne.n	80003a0 <ADC_Enable+0x24>
 8000390:	6819      	ldr	r1, [r3, #0]
 8000392:	4211      	tst	r1, r2
 8000394:	d001      	beq.n	800039a <ADC_Enable+0x1e>
  return HAL_OK;
 8000396:	2000      	movs	r0, #0
}
 8000398:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800039a:	68da      	ldr	r2, [r3, #12]
 800039c:	0412      	lsls	r2, r2, #16
 800039e:	d4fa      	bmi.n	8000396 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80003a0:	6899      	ldr	r1, [r3, #8]
 80003a2:	4a19      	ldr	r2, [pc, #100]	; (8000408 <ADC_Enable+0x8c>)
 80003a4:	4211      	tst	r1, r2
 80003a6:	d008      	beq.n	80003ba <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003a8:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003aa:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80003ae:	4313      	orrs	r3, r2
 80003b0:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80003b4:	4303      	orrs	r3, r0
 80003b6:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80003b8:	e7ee      	b.n	8000398 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80003ba:	2201      	movs	r2, #1
 80003bc:	6899      	ldr	r1, [r3, #8]
 80003be:	430a      	orrs	r2, r1
 80003c0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <ADC_Enable+0x90>)
 80003c4:	4912      	ldr	r1, [pc, #72]	; (8000410 <ADC_Enable+0x94>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f7ff feba 	bl	8000140 <__udivsi3>
 80003cc:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80003ce:	9b01      	ldr	r3, [sp, #4]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d115      	bne.n	8000400 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 80003d4:	f7ff ff80 	bl	80002d8 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003d8:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80003da:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003dc:	6823      	ldr	r3, [r4, #0]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	422b      	tst	r3, r5
 80003e2:	d1d8      	bne.n	8000396 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003e4:	f7ff ff78 	bl	80002d8 <HAL_GetTick>
 80003e8:	1b80      	subs	r0, r0, r6
 80003ea:	2802      	cmp	r0, #2
 80003ec:	d9f6      	bls.n	80003dc <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ee:	2310      	movs	r3, #16
 80003f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 80003f2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003f4:	4313      	orrs	r3, r2
 80003f6:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80003fa:	432b      	orrs	r3, r5
 80003fc:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80003fe:	e7cb      	b.n	8000398 <ADC_Enable+0x1c>
      wait_loop_index--;
 8000400:	9b01      	ldr	r3, [sp, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	e7e2      	b.n	80003ce <ADC_Enable+0x52>
 8000408:	80000017 	.word	0x80000017
 800040c:	2000000c 	.word	0x2000000c
 8000410:	000f4240 	.word	0x000f4240

08000414 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000414:	2204      	movs	r2, #4
 8000416:	6803      	ldr	r3, [r0, #0]
{
 8000418:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800041a:	6899      	ldr	r1, [r3, #8]
{
 800041c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800041e:	4211      	tst	r1, r2
 8000420:	d101      	bne.n	8000426 <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000422:	2000      	movs	r0, #0
}
 8000424:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000426:	6899      	ldr	r1, [r3, #8]
 8000428:	4211      	tst	r1, r2
 800042a:	d006      	beq.n	800043a <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800042c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800042e:	0792      	lsls	r2, r2, #30
 8000430:	d403      	bmi.n	800043a <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000432:	2210      	movs	r2, #16
 8000434:	6899      	ldr	r1, [r3, #8]
 8000436:	430a      	orrs	r2, r1
 8000438:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800043a:	f7ff ff4d 	bl	80002d8 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800043e:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8000440:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000442:	6823      	ldr	r3, [r4, #0]
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	422b      	tst	r3, r5
 8000448:	d0eb      	beq.n	8000422 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800044a:	f7ff ff45 	bl	80002d8 <HAL_GetTick>
 800044e:	1b80      	subs	r0, r0, r6
 8000450:	2802      	cmp	r0, #2
 8000452:	d9f6      	bls.n	8000442 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000454:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000456:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000458:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800045a:	4313      	orrs	r3, r2
 800045c:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800045e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000460:	4303      	orrs	r3, r0
 8000462:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000464:	e7de      	b.n	8000424 <ADC_ConversionStop+0x10>
	...

08000468 <HAL_ADC_Init>:
{
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800046c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800046e:	2c00      	cmp	r4, #0
 8000470:	d073      	beq.n	800055a <HAL_ADC_Init+0xf2>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000474:	2b00      	cmp	r3, #0
 8000476:	d106      	bne.n	8000486 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000478:	0022      	movs	r2, r4
 800047a:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 800047c:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 800047e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000480:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000482:	f004 ff51 	bl	8005328 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000488:	06db      	lsls	r3, r3, #27
 800048a:	d500      	bpl.n	800048e <HAL_ADC_Init+0x26>
 800048c:	e07a      	b.n	8000584 <HAL_ADC_Init+0x11c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800048e:	2204      	movs	r2, #4
 8000490:	6823      	ldr	r3, [r4, #0]
 8000492:	6898      	ldr	r0, [r3, #8]
 8000494:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000496:	d000      	beq.n	800049a <HAL_ADC_Init+0x32>
 8000498:	e074      	b.n	8000584 <HAL_ADC_Init+0x11c>
    ADC_STATE_CLR_SET(hadc->State,
 800049a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800049c:	4943      	ldr	r1, [pc, #268]	; (80005ac <HAL_ADC_Init+0x144>)
 800049e:	4011      	ands	r1, r2
 80004a0:	2202      	movs	r2, #2
 80004a2:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80004a4:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80004a6:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	400a      	ands	r2, r1
 80004ac:	2a01      	cmp	r2, #1
 80004ae:	d000      	beq.n	80004b2 <HAL_ADC_Init+0x4a>
 80004b0:	e06e      	b.n	8000590 <HAL_ADC_Init+0x128>
 80004b2:	6819      	ldr	r1, [r3, #0]
 80004b4:	4211      	tst	r1, r2
 80004b6:	d102      	bne.n	80004be <HAL_ADC_Init+0x56>
 80004b8:	68da      	ldr	r2, [r3, #12]
 80004ba:	0412      	lsls	r2, r2, #16
 80004bc:	d568      	bpl.n	8000590 <HAL_ADC_Init+0x128>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	493b      	ldr	r1, [pc, #236]	; (80005b0 <HAL_ADC_Init+0x148>)
 80004c2:	400a      	ands	r2, r1
 80004c4:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80004c6:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80004c8:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80004ca:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80004cc:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80004ce:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80004d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80004d2:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80004d4:	3a01      	subs	r2, #1
 80004d6:	1e56      	subs	r6, r2, #1
 80004d8:	41b2      	sbcs	r2, r6
 80004da:	0316      	lsls	r6, r2, #12
 80004dc:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80004de:	034f      	lsls	r7, r1, #13
 80004e0:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80004e2:	6922      	ldr	r2, [r4, #16]
 80004e4:	432f      	orrs	r7, r5
 80004e6:	2a02      	cmp	r2, #2
 80004e8:	d100      	bne.n	80004ec <HAL_ADC_Init+0x84>
 80004ea:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80004ec:	1d62      	adds	r2, r4, #5
 80004ee:	7fd2      	ldrb	r2, [r2, #31]
 80004f0:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80004f2:	433a      	orrs	r2, r7
 80004f4:	4332      	orrs	r2, r6
 80004f6:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004f8:	7ee0      	ldrb	r0, [r4, #27]
 80004fa:	2801      	cmp	r0, #1
 80004fc:	d104      	bne.n	8000508 <HAL_ADC_Init+0xa0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004fe:	2900      	cmp	r1, #0
 8000500:	d12c      	bne.n	800055c <HAL_ADC_Init+0xf4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000508:	20c2      	movs	r0, #194	; 0xc2
 800050a:	69e1      	ldr	r1, [r4, #28]
 800050c:	30ff      	adds	r0, #255	; 0xff
 800050e:	4281      	cmp	r1, r0
 8000510:	d002      	beq.n	8000518 <HAL_ADC_Init+0xb0>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000512:	6a20      	ldr	r0, [r4, #32]
 8000514:	4301      	orrs	r1, r0
 8000516:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000518:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800051a:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800051c:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800051e:	4311      	orrs	r1, r2
 8000520:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000522:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000524:	4281      	cmp	r1, r0
 8000526:	d002      	beq.n	800052e <HAL_ADC_Init+0xc6>
 8000528:	1e48      	subs	r0, r1, #1
 800052a:	2806      	cmp	r0, #6
 800052c:	d807      	bhi.n	800053e <HAL_ADC_Init+0xd6>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800052e:	2507      	movs	r5, #7
 8000530:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000532:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000534:	43a8      	bics	r0, r5
 8000536:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000538:	6958      	ldr	r0, [r3, #20]
 800053a:	4301      	orrs	r1, r0
 800053c:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	491c      	ldr	r1, [pc, #112]	; (80005b4 <HAL_ADC_Init+0x14c>)
 8000542:	400b      	ands	r3, r1
 8000544:	429a      	cmp	r2, r3
 8000546:	d111      	bne.n	800056c <HAL_ADC_Init+0x104>
      ADC_CLEAR_ERRORCODE(hadc);
 8000548:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800054a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800054c:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800054e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000550:	4393      	bics	r3, r2
 8000552:	001a      	movs	r2, r3
 8000554:	2301      	movs	r3, #1
 8000556:	4313      	orrs	r3, r2
 8000558:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800055a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800055c:	2120      	movs	r1, #32
 800055e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000560:	4329      	orrs	r1, r5
 8000562:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000564:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000566:	4308      	orrs	r0, r1
 8000568:	63e0      	str	r0, [r4, #60]	; 0x3c
 800056a:	e7cd      	b.n	8000508 <HAL_ADC_Init+0xa0>
      ADC_STATE_CLR_SET(hadc->State,
 800056c:	2212      	movs	r2, #18
 800056e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000570:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000572:	4393      	bics	r3, r2
 8000574:	001a      	movs	r2, r3
 8000576:	2310      	movs	r3, #16
 8000578:	4313      	orrs	r3, r2
 800057a:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800057c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800057e:	4303      	orrs	r3, r0
 8000580:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000582:	e7ea      	b.n	800055a <HAL_ADC_Init+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000584:	2310      	movs	r3, #16
 8000586:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000588:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800058a:	4313      	orrs	r3, r2
 800058c:	63a3      	str	r3, [r4, #56]	; 0x38
 800058e:	e7e4      	b.n	800055a <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000590:	2118      	movs	r1, #24
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	438a      	bics	r2, r1
 8000596:	68a1      	ldr	r1, [r4, #8]
 8000598:	430a      	orrs	r2, r1
 800059a:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800059c:	6919      	ldr	r1, [r3, #16]
 800059e:	6862      	ldr	r2, [r4, #4]
 80005a0:	0089      	lsls	r1, r1, #2
 80005a2:	0889      	lsrs	r1, r1, #2
 80005a4:	4311      	orrs	r1, r2
 80005a6:	6119      	str	r1, [r3, #16]
 80005a8:	e789      	b.n	80004be <HAL_ADC_Init+0x56>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	fffffefd 	.word	0xfffffefd
 80005b0:	fffe0219 	.word	0xfffe0219
 80005b4:	833fffe7 	.word	0x833fffe7

080005b8 <HAL_ADC_Start_DMA>:
{
 80005b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005ba:	6803      	ldr	r3, [r0, #0]
{
 80005bc:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005be:	689b      	ldr	r3, [r3, #8]
{
 80005c0:	000f      	movs	r7, r1
 80005c2:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 80005c4:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005c6:	075b      	lsls	r3, r3, #29
 80005c8:	d430      	bmi.n	800062c <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 80005ca:	0026      	movs	r6, r4
 80005cc:	3634      	adds	r6, #52	; 0x34
 80005ce:	7833      	ldrb	r3, [r6, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d02b      	beq.n	800062c <HAL_ADC_Start_DMA+0x74>
 80005d4:	2301      	movs	r3, #1
 80005d6:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80005d8:	7e63      	ldrb	r3, [r4, #25]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d127      	bne.n	800062e <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 80005de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80005e0:	4a16      	ldr	r2, [pc, #88]	; (800063c <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 80005e2:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 80005e4:	401a      	ands	r2, r3
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4313      	orrs	r3, r2
 80005ec:	63a3      	str	r3, [r4, #56]	; 0x38
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 80005f2:	63e5      	str	r5, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 80005f4:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80005f6:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005fa:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80005fc:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_ADC_Start_DMA+0x90>)
 8000600:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000602:	231c      	movs	r3, #28
 8000604:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000606:	684a      	ldr	r2, [r1, #4]
 8000608:	3b0c      	subs	r3, #12
 800060a:	4313      	orrs	r3, r2
 800060c:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800060e:	2301      	movs	r3, #1
 8000610:	68ca      	ldr	r2, [r1, #12]
 8000612:	4313      	orrs	r3, r2
 8000614:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000616:	003a      	movs	r2, r7
 8000618:	3140      	adds	r1, #64	; 0x40
 800061a:	9b01      	ldr	r3, [sp, #4]
 800061c:	f000 f9f6 	bl	8000a0c <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000620:	2304      	movs	r3, #4
 8000622:	0028      	movs	r0, r5
 8000624:	6822      	ldr	r2, [r4, #0]
 8000626:	6891      	ldr	r1, [r2, #8]
 8000628:	430b      	orrs	r3, r1
 800062a:	6093      	str	r3, [r2, #8]
}
 800062c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800062e:	0020      	movs	r0, r4
 8000630:	f7ff fea4 	bl	800037c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000634:	2800      	cmp	r0, #0
 8000636:	d1f9      	bne.n	800062c <HAL_ADC_Start_DMA+0x74>
 8000638:	e7d1      	b.n	80005de <HAL_ADC_Start_DMA+0x26>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	fffff0fe 	.word	0xfffff0fe
 8000640:	080006bd 	.word	0x080006bd
 8000644:	0800072f 	.word	0x0800072f
 8000648:	0800073b 	.word	0x0800073b

0800064c <HAL_ADC_Stop_DMA>:
{  
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800064e:	0006      	movs	r6, r0
 8000650:	3634      	adds	r6, #52	; 0x34
 8000652:	7833      	ldrb	r3, [r6, #0]
{  
 8000654:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000656:	2502      	movs	r5, #2
 8000658:	2b01      	cmp	r3, #1
 800065a:	d020      	beq.n	800069e <HAL_ADC_Stop_DMA+0x52>
 800065c:	2701      	movs	r7, #1
 800065e:	7037      	strb	r7, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000660:	f7ff fed8 	bl	8000414 <ADC_ConversionStop>
 8000664:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8000666:	d118      	bne.n	800069a <HAL_ADC_Stop_DMA+0x4e>
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8000668:	6822      	ldr	r2, [r4, #0]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800066a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 800066c:	68d3      	ldr	r3, [r2, #12]
 800066e:	43bb      	bics	r3, r7
 8000670:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8000672:	f000 fa06 	bl	8000a82 <HAL_DMA_Abort>
 8000676:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status != HAL_OK)
 8000678:	d003      	beq.n	8000682 <HAL_ADC_Stop_DMA+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800067a:	2340      	movs	r3, #64	; 0x40
 800067c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800067e:	4313      	orrs	r3, r2
 8000680:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000682:	2110      	movs	r1, #16
 8000684:	6822      	ldr	r2, [r4, #0]
 8000686:	6853      	ldr	r3, [r2, #4]
 8000688:	438b      	bics	r3, r1
 800068a:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 800068c:	2800      	cmp	r0, #0
 800068e:	d108      	bne.n	80006a2 <HAL_ADC_Stop_DMA+0x56>
      tmp_hal_status = ADC_Disable(hadc);
 8000690:	0020      	movs	r0, r4
 8000692:	f7ff fe39 	bl	8000308 <ADC_Disable>
 8000696:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8000698:	d007      	beq.n	80006aa <HAL_ADC_Stop_DMA+0x5e>
  __HAL_UNLOCK(hadc);
 800069a:	2300      	movs	r3, #0
 800069c:	7033      	strb	r3, [r6, #0]
}
 800069e:	0028      	movs	r0, r5
 80006a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ADC_Disable(hadc);
 80006a2:	0020      	movs	r0, r4
 80006a4:	f7ff fe30 	bl	8000308 <ADC_Disable>
 80006a8:	e7f7      	b.n	800069a <HAL_ADC_Stop_DMA+0x4e>
      ADC_STATE_CLR_SET(hadc->State,
 80006aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80006ac:	4a02      	ldr	r2, [pc, #8]	; (80006b8 <HAL_ADC_Stop_DMA+0x6c>)
 80006ae:	401a      	ands	r2, r3
 80006b0:	2301      	movs	r3, #1
 80006b2:	4313      	orrs	r3, r2
 80006b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80006b6:	e7f0      	b.n	800069a <HAL_ADC_Stop_DMA+0x4e>
 80006b8:	fffffefe 	.word	0xfffffefe

080006bc <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80006bc:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80006be:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80006c0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80006c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006c4:	4211      	tst	r1, r2
 80006c6:	d12a      	bne.n	800071e <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80006c8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006ca:	32b1      	adds	r2, #177	; 0xb1
 80006cc:	32ff      	adds	r2, #255	; 0xff
 80006ce:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006d0:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80006d2:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	0109      	lsls	r1, r1, #4
 80006d8:	68d0      	ldr	r0, [r2, #12]
 80006da:	4208      	tst	r0, r1
 80006dc:	d112      	bne.n	8000704 <ADC_DMAConvCplt+0x48>
 80006de:	7e99      	ldrb	r1, [r3, #26]
 80006e0:	2900      	cmp	r1, #0
 80006e2:	d10f      	bne.n	8000704 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80006e4:	6811      	ldr	r1, [r2, #0]
 80006e6:	0709      	lsls	r1, r1, #28
 80006e8:	d50c      	bpl.n	8000704 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006ea:	6891      	ldr	r1, [r2, #8]
 80006ec:	0749      	lsls	r1, r1, #29
 80006ee:	d40d      	bmi.n	800070c <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80006f0:	200c      	movs	r0, #12
 80006f2:	6851      	ldr	r1, [r2, #4]
 80006f4:	4381      	bics	r1, r0
 80006f6:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80006f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006fa:	490b      	ldr	r1, [pc, #44]	; (8000728 <ADC_DMAConvCplt+0x6c>)
 80006fc:	4011      	ands	r1, r2
 80006fe:	2201      	movs	r2, #1
 8000700:	430a      	orrs	r2, r1
 8000702:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000704:	0018      	movs	r0, r3
 8000706:	f004 fd97 	bl	8005238 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800070a:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800070c:	2220      	movs	r2, #32
 800070e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000710:	430a      	orrs	r2, r1
 8000712:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000714:	2201      	movs	r2, #1
 8000716:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000718:	430a      	orrs	r2, r1
 800071a:	63da      	str	r2, [r3, #60]	; 0x3c
 800071c:	e7f2      	b.n	8000704 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4798      	blx	r3
}
 8000724:	e7f1      	b.n	800070a <ADC_DMAConvCplt+0x4e>
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	fffffefe 	.word	0xfffffefe

0800072c <HAL_ADC_ConvHalfCpltCallback>:
 800072c:	4770      	bx	lr

0800072e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800072e:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000730:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000732:	f7ff fffb 	bl	800072c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000736:	bd10      	pop	{r4, pc}

08000738 <HAL_ADC_ErrorCallback>:
}
 8000738:	4770      	bx	lr

0800073a <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800073a:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800073c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800073e:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000740:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000742:	4313      	orrs	r3, r2
 8000744:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000746:	2304      	movs	r3, #4
 8000748:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800074a:	4313      	orrs	r3, r2
 800074c:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800074e:	f7ff fff3 	bl	8000738 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000752:	bd10      	pop	{r4, pc}

08000754 <HAL_ADC_ConfigChannel>:
{
 8000754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000756:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8000758:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 800075a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800075c:	3434      	adds	r4, #52	; 0x34
 800075e:	7823      	ldrb	r3, [r4, #0]
{
 8000760:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8000762:	2002      	movs	r0, #2
 8000764:	2b01      	cmp	r3, #1
 8000766:	d02b      	beq.n	80007c0 <HAL_ADC_ConfigChannel+0x6c>
 8000768:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800076a:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800076c:	6aee      	ldr	r6, [r5, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800076e:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8000770:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000772:	0740      	lsls	r0, r0, #29
 8000774:	d45a      	bmi.n	800082c <HAL_ADC_ConfigChannel+0xd8>
    if (sConfig->Rank != ADC_RANK_NONE)
 8000776:	4830      	ldr	r0, [pc, #192]	; (8000838 <HAL_ADC_ConfigChannel+0xe4>)
 8000778:	684f      	ldr	r7, [r1, #4]
 800077a:	680d      	ldr	r5, [r1, #0]
 800077c:	4287      	cmp	r7, r0
 800077e:	d03f      	beq.n	8000800 <HAL_ADC_ConfigChannel+0xac>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000780:	40ab      	lsls	r3, r5
 8000782:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000784:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000786:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000788:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800078a:	4338      	orrs	r0, r7
 800078c:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800078e:	429e      	cmp	r6, r3
 8000790:	d00f      	beq.n	80007b2 <HAL_ADC_ConfigChannel+0x5e>
 8000792:	3e01      	subs	r6, #1
 8000794:	2e06      	cmp	r6, #6
 8000796:	d90c      	bls.n	80007b2 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000798:	688b      	ldr	r3, [r1, #8]
 800079a:	2107      	movs	r1, #7
 800079c:	6950      	ldr	r0, [r2, #20]
 800079e:	4008      	ands	r0, r1
 80007a0:	4283      	cmp	r3, r0
 80007a2:	d006      	beq.n	80007b2 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80007a4:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80007a6:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80007a8:	4388      	bics	r0, r1
 80007aa:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80007ac:	6950      	ldr	r0, [r2, #20]
 80007ae:	4303      	orrs	r3, r0
 80007b0:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80007b2:	002b      	movs	r3, r5
 80007b4:	3b10      	subs	r3, #16
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d903      	bls.n	80007c2 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007ba:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80007bc:	2300      	movs	r3, #0
 80007be:	7023      	strb	r3, [r4, #0]
}
 80007c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <HAL_ADC_ConfigChannel+0xe8>)
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	6811      	ldr	r1, [r2, #0]
 80007c8:	2d10      	cmp	r5, #16
 80007ca:	d015      	beq.n	80007f8 <HAL_ADC_ConfigChannel+0xa4>
 80007cc:	2d11      	cmp	r5, #17
 80007ce:	d015      	beq.n	80007fc <HAL_ADC_ConfigChannel+0xa8>
 80007d0:	045b      	lsls	r3, r3, #17
 80007d2:	430b      	orrs	r3, r1
 80007d4:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007d6:	2d10      	cmp	r5, #16
 80007d8:	d1ef      	bne.n	80007ba <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_ADC_ConfigChannel+0xec>)
 80007dc:	4919      	ldr	r1, [pc, #100]	; (8000844 <HAL_ADC_ConfigChannel+0xf0>)
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	f7ff fcae 	bl	8000140 <__udivsi3>
 80007e4:	230a      	movs	r3, #10
 80007e6:	4358      	muls	r0, r3
 80007e8:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 80007ea:	9b01      	ldr	r3, [sp, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d0e4      	beq.n	80007ba <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 80007f0:	9b01      	ldr	r3, [sp, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	e7f8      	b.n	80007ea <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007f8:	041b      	lsls	r3, r3, #16
 80007fa:	e7ea      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x7e>
 80007fc:	03db      	lsls	r3, r3, #15
 80007fe:	e7e8      	b.n	80007d2 <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000800:	40ab      	lsls	r3, r5
 8000802:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000804:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000806:	002b      	movs	r3, r5
 8000808:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800080a:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800080c:	2b02      	cmp	r3, #2
 800080e:	d8d4      	bhi.n	80007ba <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_ADC_ConfigChannel+0xe8>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	2d10      	cmp	r5, #16
 8000816:	d005      	beq.n	8000824 <HAL_ADC_ConfigChannel+0xd0>
 8000818:	2d11      	cmp	r5, #17
 800081a:	d005      	beq.n	8000828 <HAL_ADC_ConfigChannel+0xd4>
 800081c:	490a      	ldr	r1, [pc, #40]	; (8000848 <HAL_ADC_ConfigChannel+0xf4>)
 800081e:	400a      	ands	r2, r1
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	e7ca      	b.n	80007ba <HAL_ADC_ConfigChannel+0x66>
 8000824:	4909      	ldr	r1, [pc, #36]	; (800084c <HAL_ADC_ConfigChannel+0xf8>)
 8000826:	e7fa      	b.n	800081e <HAL_ADC_ConfigChannel+0xca>
 8000828:	4909      	ldr	r1, [pc, #36]	; (8000850 <HAL_ADC_ConfigChannel+0xfc>)
 800082a:	e7f8      	b.n	800081e <HAL_ADC_ConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800082c:	2220      	movs	r2, #32
 800082e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000830:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000832:	430a      	orrs	r2, r1
 8000834:	63aa      	str	r2, [r5, #56]	; 0x38
 8000836:	e7c1      	b.n	80007bc <HAL_ADC_ConfigChannel+0x68>
 8000838:	00001001 	.word	0x00001001
 800083c:	40012708 	.word	0x40012708
 8000840:	2000000c 	.word	0x2000000c
 8000844:	000f4240 	.word	0x000f4240
 8000848:	feffffff 	.word	0xfeffffff
 800084c:	ff7fffff 	.word	0xff7fffff
 8000850:	ffbfffff 	.word	0xffbfffff

08000854 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000856:	0006      	movs	r6, r0
 8000858:	3634      	adds	r6, #52	; 0x34
 800085a:	7833      	ldrb	r3, [r6, #0]
{
 800085c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
 8000860:	2b01      	cmp	r3, #1
 8000862:	d042      	beq.n	80008ea <HAL_ADCEx_Calibration_Start+0x96>
 8000864:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000866:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8000868:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	689a      	ldr	r2, [r3, #8]
 800086e:	400a      	ands	r2, r1
 8000870:	2a01      	cmp	r2, #1
 8000872:	d105      	bne.n	8000880 <HAL_ADCEx_Calibration_Start+0x2c>
 8000874:	6819      	ldr	r1, [r3, #0]
 8000876:	4211      	tst	r1, r2
 8000878:	d138      	bne.n	80008ec <HAL_ADCEx_Calibration_Start+0x98>
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	0412      	lsls	r2, r2, #16
 800087e:	d435      	bmi.n	80008ec <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8000880:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000882:	491d      	ldr	r1, [pc, #116]	; (80008f8 <HAL_ADCEx_Calibration_Start+0xa4>)
 8000884:	4011      	ands	r1, r2
 8000886:	2202      	movs	r2, #2
 8000888:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800088a:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800088c:	63a2      	str	r2, [r4, #56]	; 0x38
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800088e:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000890:	68da      	ldr	r2, [r3, #12]
 8000892:	438a      	bics	r2, r1
 8000894:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	6899      	ldr	r1, [r3, #8]
 800089a:	0612      	lsls	r2, r2, #24
 800089c:	430a      	orrs	r2, r1
 800089e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80008a0:	f7ff fd1a 	bl	80002d8 <HAL_GetTick>
 80008a4:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80008a6:	6823      	ldr	r3, [r4, #0]
 80008a8:	689a      	ldr	r2, [r3, #8]
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	db0e      	blt.n	80008cc <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80008ae:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80008b0:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80008b2:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80008b4:	430d      	orrs	r5, r1
 80008b6:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ba:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 80008bc:	4393      	bics	r3, r2
 80008be:	001a      	movs	r2, r3
 80008c0:	2301      	movs	r3, #1
 80008c2:	4313      	orrs	r3, r2
 80008c4:	63a3      	str	r3, [r4, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008c6:	2300      	movs	r3, #0
 80008c8:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 80008ca:	e00e      	b.n	80008ea <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80008cc:	f7ff fd04 	bl	80002d8 <HAL_GetTick>
 80008d0:	1bc0      	subs	r0, r0, r7
 80008d2:	2802      	cmp	r0, #2
 80008d4:	d9e7      	bls.n	80008a6 <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 80008d6:	2212      	movs	r2, #18
 80008d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80008da:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80008dc:	4393      	bics	r3, r2
 80008de:	001a      	movs	r2, r3
 80008e0:	2310      	movs	r3, #16
 80008e2:	4313      	orrs	r3, r2
 80008e4:	63a3      	str	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hadc);
 80008e6:	2300      	movs	r3, #0
 80008e8:	7033      	strb	r3, [r6, #0]
}
 80008ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008ec:	2320      	movs	r3, #32
 80008ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80008f0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008f2:	4313      	orrs	r3, r2
 80008f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80008f6:	e7e6      	b.n	80008c6 <HAL_ADCEx_Calibration_Start+0x72>
 80008f8:	fffffefd 	.word	0xfffffefd

080008fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000900:	2800      	cmp	r0, #0
 8000902:	db12      	blt.n	800092a <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000904:	0883      	lsrs	r3, r0, #2
 8000906:	4a13      	ldr	r2, [pc, #76]	; (8000954 <HAL_NVIC_SetPriority+0x58>)
 8000908:	2403      	movs	r4, #3
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	189b      	adds	r3, r3, r2
 800090e:	22ff      	movs	r2, #255	; 0xff
 8000910:	4020      	ands	r0, r4
 8000912:	40a0      	lsls	r0, r4
 8000914:	0014      	movs	r4, r2
 8000916:	25c0      	movs	r5, #192	; 0xc0
 8000918:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800091a:	4011      	ands	r1, r2
 800091c:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091e:	00ad      	lsls	r5, r5, #2
 8000920:	595e      	ldr	r6, [r3, r5]
 8000922:	43a6      	bics	r6, r4
 8000924:	4331      	orrs	r1, r6
 8000926:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000928:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800092a:	2403      	movs	r4, #3
 800092c:	230f      	movs	r3, #15
 800092e:	b2c0      	uxtb	r0, r0
 8000930:	4003      	ands	r3, r0
 8000932:	4020      	ands	r0, r4
 8000934:	40a0      	lsls	r0, r4
 8000936:	34fc      	adds	r4, #252	; 0xfc
 8000938:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800093a:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800093e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000940:	3b08      	subs	r3, #8
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <HAL_NVIC_SetPriority+0x5c>)
 8000944:	089b      	lsrs	r3, r3, #2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	189b      	adds	r3, r3, r2
 800094a:	69da      	ldr	r2, [r3, #28]
 800094c:	43aa      	bics	r2, r5
 800094e:	4311      	orrs	r1, r2
 8000950:	61d9      	str	r1, [r3, #28]
 8000952:	e7e9      	b.n	8000928 <HAL_NVIC_SetPriority+0x2c>
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800095c:	2800      	cmp	r0, #0
 800095e:	db05      	blt.n	800096c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000960:	231f      	movs	r3, #31
 8000962:	4018      	ands	r0, r3
 8000964:	3b1e      	subs	r3, #30
 8000966:	4083      	lsls	r3, r0
 8000968:	4a01      	ldr	r2, [pc, #4]	; (8000970 <HAL_NVIC_EnableIRQ+0x14>)
 800096a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800096c:	4770      	bx	lr
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	e000e100 	.word	0xe000e100

08000974 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	4a09      	ldr	r2, [pc, #36]	; (800099c <HAL_SYSTICK_Config+0x28>)
 8000976:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000978:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800097a:	4293      	cmp	r3, r2
 800097c:	d80d      	bhi.n	800099a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000982:	4808      	ldr	r0, [pc, #32]	; (80009a4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000984:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000986:	6a03      	ldr	r3, [r0, #32]
 8000988:	0609      	lsls	r1, r1, #24
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	430b      	orrs	r3, r1
 8000990:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000992:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000994:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000996:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000998:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800099a:	4770      	bx	lr
 800099c:	00ffffff 	.word	0x00ffffff
 80009a0:	e000e010 	.word	0xe000e010
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009a8:	b570      	push	{r4, r5, r6, lr}
 80009aa:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 80009ac:	2001      	movs	r0, #1
  if(NULL == hdma)
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	d024      	beq.n	80009fc <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009b2:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009b4:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80009b6:	1ca5      	adds	r5, r4, #2
 80009b8:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 80009ba:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009be:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009c0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80009c2:	6863      	ldr	r3, [r4, #4]
 80009c4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009c6:	68e1      	ldr	r1, [r4, #12]
 80009c8:	430b      	orrs	r3, r1
 80009ca:	6921      	ldr	r1, [r4, #16]
 80009cc:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ce:	6961      	ldr	r1, [r4, #20]
 80009d0:	430b      	orrs	r3, r1
 80009d2:	69a1      	ldr	r1, [r4, #24]
 80009d4:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80009d6:	69e1      	ldr	r1, [r4, #28]
 80009d8:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80009da:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80009dc:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_DMA_Init+0x5c>)
 80009e0:	2114      	movs	r1, #20
 80009e2:	18c0      	adds	r0, r0, r3
 80009e4:	f7ff fbac 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80009ea:	0080      	lsls	r0, r0, #2
 80009ec:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80009ee:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80009f2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f4:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80009f6:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80009f8:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80009fa:	77e0      	strb	r0, [r4, #31]
}  
 80009fc:	bd70      	pop	{r4, r5, r6, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	ffffc00f 	.word	0xffffc00f
 8000a04:	bffdfff8 	.word	0xbffdfff8
 8000a08:	40020000 	.word	0x40020000

08000a0c <HAL_DMA_Start_IT>:
{
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000a0e:	1c46      	adds	r6, r0, #1
 8000a10:	7ff5      	ldrb	r5, [r6, #31]
 8000a12:	2402      	movs	r4, #2
 8000a14:	2d01      	cmp	r5, #1
 8000a16:	d026      	beq.n	8000a66 <HAL_DMA_Start_IT+0x5a>
 8000a18:	2501      	movs	r5, #1
 8000a1a:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a1c:	1905      	adds	r5, r0, r4
 8000a1e:	46ac      	mov	ip, r5
 8000a20:	7fed      	ldrb	r5, [r5, #31]
 8000a22:	2700      	movs	r7, #0
 8000a24:	b2ed      	uxtb	r5, r5
 8000a26:	2d01      	cmp	r5, #1
 8000a28:	d129      	bne.n	8000a7e <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000a2a:	4666      	mov	r6, ip
 8000a2c:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a2e:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a30:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a32:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a34:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a36:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a38:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a3a:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a3c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000a3e:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000a40:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a42:	6843      	ldr	r3, [r0, #4]
 8000a44:	6805      	ldr	r5, [r0, #0]
 8000a46:	2b10      	cmp	r3, #16
 8000a48:	d10f      	bne.n	8000a6a <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8000a4a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000a4c:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000a4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a50:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00c      	beq.n	8000a70 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a56:	230e      	movs	r3, #14
 8000a58:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a5a:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000a5c:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8000a5e:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000a60:	682a      	ldr	r2, [r5, #0]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	602b      	str	r3, [r5, #0]
} 
 8000a66:	0020      	movs	r0, r4
 8000a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8000a6a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000a6c:	60e2      	str	r2, [r4, #12]
 8000a6e:	e7ee      	b.n	8000a4e <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000a70:	230a      	movs	r3, #10
 8000a72:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a74:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000a76:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	4393      	bics	r3, r2
 8000a7c:	e7ed      	b.n	8000a5a <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 8000a7e:	77f7      	strb	r7, [r6, #31]
 8000a80:	e7f1      	b.n	8000a66 <HAL_DMA_Start_IT+0x5a>

08000a82 <HAL_DMA_Abort>:
{
 8000a82:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a84:	1c85      	adds	r5, r0, #2
 8000a86:	7feb      	ldrb	r3, [r5, #31]
 8000a88:	1c44      	adds	r4, r0, #1
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d005      	beq.n	8000a9a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000a92:	2300      	movs	r3, #0
    return HAL_ERROR;
 8000a94:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8000a96:	77e3      	strb	r3, [r4, #31]
}
 8000a98:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a9a:	210e      	movs	r1, #14
 8000a9c:	6803      	ldr	r3, [r0, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	438a      	bics	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	6819      	ldr	r1, [r3, #0]
 8000aa8:	4391      	bics	r1, r2
 8000aaa:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000aac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000aae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000ab0:	0010      	movs	r0, r2
 8000ab2:	4088      	lsls	r0, r1
 8000ab4:	6058      	str	r0, [r3, #4]
  __HAL_UNLOCK(hdma);
 8000ab6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8000ab8:	77ea      	strb	r2, [r5, #31]
  __HAL_UNLOCK(hdma);
 8000aba:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8000abc:	e7ec      	b.n	8000a98 <HAL_DMA_Abort+0x16>

08000abe <HAL_DMA_Abort_IT>:
{  
 8000abe:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac0:	1c84      	adds	r4, r0, #2
 8000ac2:	7fe3      	ldrb	r3, [r4, #31]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d004      	beq.n	8000ad2 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000acc:	3b03      	subs	r3, #3
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ad2:	210e      	movs	r1, #14
 8000ad4:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ad6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	438a      	bics	r2, r1
 8000adc:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	6819      	ldr	r1, [r3, #0]
 8000ae2:	4391      	bics	r1, r2
 8000ae4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	40a9      	lsls	r1, r5
 8000aea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000aec:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000aee:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000af0:	2400      	movs	r4, #0
 8000af2:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8000af4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000af6:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000af8:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000afa:	42a2      	cmp	r2, r4
 8000afc:	d0e7      	beq.n	8000ace <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000afe:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000b00:	0023      	movs	r3, r4
 8000b02:	e7e4      	b.n	8000ace <HAL_DMA_Abort_IT+0x10>

08000b04 <HAL_DMA_IRQHandler>:
{
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b06:	2704      	movs	r7, #4
 8000b08:	003e      	movs	r6, r7
 8000b0a:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b0c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b0e:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b10:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000b12:	6803      	ldr	r3, [r0, #0]
 8000b14:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b16:	422e      	tst	r6, r5
 8000b18:	d00d      	beq.n	8000b36 <HAL_DMA_IRQHandler+0x32>
 8000b1a:	423c      	tst	r4, r7
 8000b1c:	d00b      	beq.n	8000b36 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b1e:	6819      	ldr	r1, [r3, #0]
 8000b20:	0689      	lsls	r1, r1, #26
 8000b22:	d402      	bmi.n	8000b2a <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b24:	6819      	ldr	r1, [r3, #0]
 8000b26:	43b9      	bics	r1, r7
 8000b28:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b2c:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d019      	beq.n	8000b66 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8000b32:	4798      	blx	r3
}  
 8000b34:	e017      	b.n	8000b66 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000b36:	2702      	movs	r7, #2
 8000b38:	003e      	movs	r6, r7
 8000b3a:	408e      	lsls	r6, r1
 8000b3c:	422e      	tst	r6, r5
 8000b3e:	d013      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x64>
 8000b40:	423c      	tst	r4, r7
 8000b42:	d011      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b44:	6819      	ldr	r1, [r3, #0]
 8000b46:	0689      	lsls	r1, r1, #26
 8000b48:	d406      	bmi.n	8000b58 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b4a:	240a      	movs	r4, #10
 8000b4c:	6819      	ldr	r1, [r3, #0]
 8000b4e:	43a1      	bics	r1, r4
 8000b50:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000b52:	2101      	movs	r1, #1
 8000b54:	19c3      	adds	r3, r0, r7
 8000b56:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b58:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	1c43      	adds	r3, r0, #1
 8000b5e:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8000b60:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d1e5      	bne.n	8000b32 <HAL_DMA_IRQHandler+0x2e>
}  
 8000b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b68:	2608      	movs	r6, #8
 8000b6a:	0037      	movs	r7, r6
 8000b6c:	408f      	lsls	r7, r1
 8000b6e:	423d      	tst	r5, r7
 8000b70:	d0f9      	beq.n	8000b66 <HAL_DMA_IRQHandler+0x62>
 8000b72:	4234      	tst	r4, r6
 8000b74:	d0f7      	beq.n	8000b66 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b76:	250e      	movs	r5, #14
 8000b78:	681c      	ldr	r4, [r3, #0]
 8000b7a:	43ac      	bics	r4, r5
 8000b7c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	001c      	movs	r4, r3
 8000b82:	408c      	lsls	r4, r1
 8000b84:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8000b86:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b88:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000b8a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	18c3      	adds	r3, r0, r3
 8000b90:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8000b92:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b94:	e7e5      	b.n	8000b62 <HAL_DMA_IRQHandler+0x5e>
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9a:	680b      	ldr	r3, [r1, #0]
{ 
 8000b9c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8000ba0:	2300      	movs	r3, #0
{ 
 8000ba2:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba4:	9a02      	ldr	r2, [sp, #8]
 8000ba6:	40da      	lsrs	r2, r3
 8000ba8:	d101      	bne.n	8000bae <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 8000baa:	b007      	add	sp, #28
 8000bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	9203      	str	r2, [sp, #12]
 8000bb4:	9903      	ldr	r1, [sp, #12]
 8000bb6:	9a02      	ldr	r2, [sp, #8]
 8000bb8:	400a      	ands	r2, r1
 8000bba:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8000bbc:	d100      	bne.n	8000bc0 <HAL_GPIO_Init+0x28>
 8000bbe:	e08c      	b.n	8000cda <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc0:	9a01      	ldr	r2, [sp, #4]
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	6852      	ldr	r2, [r2, #4]
 8000bc6:	0016      	movs	r6, r2
 8000bc8:	438e      	bics	r6, r1
 8000bca:	2e02      	cmp	r6, #2
 8000bcc:	d10e      	bne.n	8000bec <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bce:	2507      	movs	r5, #7
 8000bd0:	401d      	ands	r5, r3
 8000bd2:	00ad      	lsls	r5, r5, #2
 8000bd4:	3901      	subs	r1, #1
 8000bd6:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8000bd8:	08dc      	lsrs	r4, r3, #3
 8000bda:	00a4      	lsls	r4, r4, #2
 8000bdc:	1904      	adds	r4, r0, r4
 8000bde:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be0:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000be2:	9901      	ldr	r1, [sp, #4]
 8000be4:	6909      	ldr	r1, [r1, #16]
 8000be6:	40a9      	lsls	r1, r5
 8000be8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000bea:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bec:	2403      	movs	r4, #3
 8000bee:	005f      	lsls	r7, r3, #1
 8000bf0:	40bc      	lsls	r4, r7
 8000bf2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000bf4:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf6:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bf8:	4025      	ands	r5, r4
 8000bfa:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bfc:	2503      	movs	r5, #3
 8000bfe:	4015      	ands	r5, r2
 8000c00:	40bd      	lsls	r5, r7
 8000c02:	4661      	mov	r1, ip
 8000c04:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000c06:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c08:	2e01      	cmp	r6, #1
 8000c0a:	d80f      	bhi.n	8000c2c <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c0c:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8000c0e:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c10:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c12:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c14:	40bd      	lsls	r5, r7
 8000c16:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000c18:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c1a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c1c:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c1e:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c20:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c22:	2101      	movs	r1, #1
 8000c24:	400d      	ands	r5, r1
 8000c26:	409d      	lsls	r5, r3
 8000c28:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000c2a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c2c:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c2e:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c30:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c32:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c34:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c36:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c38:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c3a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000c3c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c3e:	420a      	tst	r2, r1
 8000c40:	d04b      	beq.n	8000cda <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2101      	movs	r1, #1
 8000c44:	4c26      	ldr	r4, [pc, #152]	; (8000ce0 <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c46:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c48:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4a:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4c:	430d      	orrs	r5, r1
 8000c4e:	61a5      	str	r5, [r4, #24]
 8000c50:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c52:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c54:	400c      	ands	r4, r1
 8000c56:	9405      	str	r4, [sp, #20]
 8000c58:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5a:	240f      	movs	r4, #15
 8000c5c:	4921      	ldr	r1, [pc, #132]	; (8000ce4 <HAL_GPIO_Init+0x14c>)
 8000c5e:	00ad      	lsls	r5, r5, #2
 8000c60:	00b6      	lsls	r6, r6, #2
 8000c62:	186d      	adds	r5, r5, r1
 8000c64:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c66:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c68:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c6a:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6c:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c6e:	2400      	movs	r4, #0
 8000c70:	4288      	cmp	r0, r1
 8000c72:	d00c      	beq.n	8000c8e <HAL_GPIO_Init+0xf6>
 8000c74:	491c      	ldr	r1, [pc, #112]	; (8000ce8 <HAL_GPIO_Init+0x150>)
 8000c76:	3401      	adds	r4, #1
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	d008      	beq.n	8000c8e <HAL_GPIO_Init+0xf6>
 8000c7c:	491b      	ldr	r1, [pc, #108]	; (8000cec <HAL_GPIO_Init+0x154>)
 8000c7e:	3401      	adds	r4, #1
 8000c80:	4288      	cmp	r0, r1
 8000c82:	d004      	beq.n	8000c8e <HAL_GPIO_Init+0xf6>
 8000c84:	491a      	ldr	r1, [pc, #104]	; (8000cf0 <HAL_GPIO_Init+0x158>)
 8000c86:	3403      	adds	r4, #3
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	d100      	bne.n	8000c8e <HAL_GPIO_Init+0xf6>
 8000c8c:	3c02      	subs	r4, #2
 8000c8e:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8000c90:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c92:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8000c94:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c96:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000c98:	4c16      	ldr	r4, [pc, #88]	; (8000cf4 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8000c9a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000c9c:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8000c9e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca0:	03d1      	lsls	r1, r2, #15
 8000ca2:	d401      	bmi.n	8000ca8 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8000ca4:	003e      	movs	r6, r7
 8000ca6:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000ca8:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000caa:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8000cac:	9e00      	ldr	r6, [sp, #0]
 8000cae:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb0:	0391      	lsls	r1, r2, #14
 8000cb2:	d401      	bmi.n	8000cb8 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8000cb4:	003e      	movs	r6, r7
 8000cb6:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000cb8:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000cba:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8000cbc:	9e00      	ldr	r6, [sp, #0]
 8000cbe:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cc0:	02d1      	lsls	r1, r2, #11
 8000cc2:	d401      	bmi.n	8000cc8 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8000cc4:	003e      	movs	r6, r7
 8000cc6:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000cc8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000cca:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8000ccc:	9f00      	ldr	r7, [sp, #0]
 8000cce:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd0:	0292      	lsls	r2, r2, #10
 8000cd2:	d401      	bmi.n	8000cd8 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8000cd4:	402e      	ands	r6, r5
 8000cd6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000cd8:	60e7      	str	r7, [r4, #12]
    position++;
 8000cda:	3301      	adds	r3, #1
 8000cdc:	e762      	b.n	8000ba4 <HAL_GPIO_Init+0xc>
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	48000c00 	.word	0x48000c00
 8000cf4:	40010400 	.word	0x40010400

08000cf8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cfc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cfe:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d00:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000d02:	e7fc      	b.n	8000cfe <HAL_GPIO_WritePin+0x6>

08000d04 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000d04:	6943      	ldr	r3, [r0, #20]
 8000d06:	4219      	tst	r1, r3
 8000d08:	d000      	beq.n	8000d0c <HAL_GPIO_TogglePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d0a:	0409      	lsls	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d0c:	6181      	str	r1, [r0, #24]
  }
}
 8000d0e:	4770      	bx	lr

08000d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000d12:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	4210      	tst	r0, r2
 8000d18:	d002      	beq.n	8000d20 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d1a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d1c:	f004 fa84 	bl	8005228 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d20:	bd10      	pop	{r4, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40010400 	.word	0x40010400

08000d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	0004      	movs	r4, r0
 8000d2c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d102      	bne.n	8000d38 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000d32:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000d34:	b005      	add	sp, #20
 8000d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d38:	6803      	ldr	r3, [r0, #0]
 8000d3a:	07db      	lsls	r3, r3, #31
 8000d3c:	d42e      	bmi.n	8000d9c <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	079b      	lsls	r3, r3, #30
 8000d42:	d47e      	bmi.n	8000e42 <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	071b      	lsls	r3, r3, #28
 8000d48:	d500      	bpl.n	8000d4c <HAL_RCC_OscConfig+0x24>
 8000d4a:	e0ba      	b.n	8000ec2 <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	075b      	lsls	r3, r3, #29
 8000d50:	d500      	bpl.n	8000d54 <HAL_RCC_OscConfig+0x2c>
 8000d52:	e0dd      	b.n	8000f10 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	06db      	lsls	r3, r3, #27
 8000d58:	d51a      	bpl.n	8000d90 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000d5a:	6962      	ldr	r2, [r4, #20]
 8000d5c:	4db4      	ldr	r5, [pc, #720]	; (8001030 <HAL_RCC_OscConfig+0x308>)
 8000d5e:	2304      	movs	r3, #4
 8000d60:	2a01      	cmp	r2, #1
 8000d62:	d000      	beq.n	8000d66 <HAL_RCC_OscConfig+0x3e>
 8000d64:	e149      	b.n	8000ffa <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d66:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000d68:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000d6e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d70:	431a      	orrs	r2, r3
 8000d72:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000d74:	f7ff fab0 	bl	80002d8 <HAL_GetTick>
 8000d78:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000d7a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d7c:	4233      	tst	r3, r6
 8000d7e:	d100      	bne.n	8000d82 <HAL_RCC_OscConfig+0x5a>
 8000d80:	e134      	b.n	8000fec <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d82:	21f8      	movs	r1, #248	; 0xf8
 8000d84:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000d86:	69a3      	ldr	r3, [r4, #24]
 8000d88:	438a      	bics	r2, r1
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d90:	6a23      	ldr	r3, [r4, #32]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d000      	beq.n	8000d98 <HAL_RCC_OscConfig+0x70>
 8000d96:	e157      	b.n	8001048 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8000d98:	2000      	movs	r0, #0
 8000d9a:	e7cb      	b.n	8000d34 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d9c:	210c      	movs	r1, #12
 8000d9e:	4da4      	ldr	r5, [pc, #656]	; (8001030 <HAL_RCC_OscConfig+0x308>)
 8000da0:	686a      	ldr	r2, [r5, #4]
 8000da2:	400a      	ands	r2, r1
 8000da4:	2a04      	cmp	r2, #4
 8000da6:	d006      	beq.n	8000db6 <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da8:	686b      	ldr	r3, [r5, #4]
 8000daa:	400b      	ands	r3, r1
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d109      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x9c>
 8000db0:	686b      	ldr	r3, [r5, #4]
 8000db2:	03db      	lsls	r3, r3, #15
 8000db4:	d506      	bpl.n	8000dc4 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db6:	682b      	ldr	r3, [r5, #0]
 8000db8:	039b      	lsls	r3, r3, #14
 8000dba:	d5c0      	bpl.n	8000d3e <HAL_RCC_OscConfig+0x16>
 8000dbc:	6863      	ldr	r3, [r4, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1bd      	bne.n	8000d3e <HAL_RCC_OscConfig+0x16>
 8000dc2:	e7b6      	b.n	8000d32 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc4:	6863      	ldr	r3, [r4, #4]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d113      	bne.n	8000df2 <HAL_RCC_OscConfig+0xca>
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	682a      	ldr	r2, [r5, #0]
 8000dce:	025b      	lsls	r3, r3, #9
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fa80 	bl	80002d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000dda:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ddc:	02b6      	lsls	r6, r6, #10
 8000dde:	682b      	ldr	r3, [r5, #0]
 8000de0:	4233      	tst	r3, r6
 8000de2:	d1ac      	bne.n	8000d3e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fa78 	bl	80002d8 <HAL_GetTick>
 8000de8:	1bc0      	subs	r0, r0, r7
 8000dea:	2864      	cmp	r0, #100	; 0x64
 8000dec:	d9f7      	bls.n	8000dde <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8000dee:	2003      	movs	r0, #3
 8000df0:	e7a0      	b.n	8000d34 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d115      	bne.n	8000e22 <HAL_RCC_OscConfig+0xfa>
 8000df6:	682b      	ldr	r3, [r5, #0]
 8000df8:	4a8e      	ldr	r2, [pc, #568]	; (8001034 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfa:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	602b      	str	r3, [r5, #0]
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	4a8d      	ldr	r2, [pc, #564]	; (8001038 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e04:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e06:	4013      	ands	r3, r2
 8000e08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fa65 	bl	80002d8 <HAL_GetTick>
 8000e0e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e10:	682b      	ldr	r3, [r5, #0]
 8000e12:	4233      	tst	r3, r6
 8000e14:	d093      	beq.n	8000d3e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e16:	f7ff fa5f 	bl	80002d8 <HAL_GetTick>
 8000e1a:	1bc0      	subs	r0, r0, r7
 8000e1c:	2864      	cmp	r0, #100	; 0x64
 8000e1e:	d9f7      	bls.n	8000e10 <HAL_RCC_OscConfig+0xe8>
 8000e20:	e7e5      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e22:	2b05      	cmp	r3, #5
 8000e24:	d105      	bne.n	8000e32 <HAL_RCC_OscConfig+0x10a>
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	682a      	ldr	r2, [r5, #0]
 8000e2a:	02db      	lsls	r3, r3, #11
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	602b      	str	r3, [r5, #0]
 8000e30:	e7cb      	b.n	8000dca <HAL_RCC_OscConfig+0xa2>
 8000e32:	682b      	ldr	r3, [r5, #0]
 8000e34:	4a7f      	ldr	r2, [pc, #508]	; (8001034 <HAL_RCC_OscConfig+0x30c>)
 8000e36:	4013      	ands	r3, r2
 8000e38:	602b      	str	r3, [r5, #0]
 8000e3a:	682b      	ldr	r3, [r5, #0]
 8000e3c:	4a7e      	ldr	r2, [pc, #504]	; (8001038 <HAL_RCC_OscConfig+0x310>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	e7c7      	b.n	8000dd2 <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e42:	220c      	movs	r2, #12
 8000e44:	4d7a      	ldr	r5, [pc, #488]	; (8001030 <HAL_RCC_OscConfig+0x308>)
 8000e46:	686b      	ldr	r3, [r5, #4]
 8000e48:	4213      	tst	r3, r2
 8000e4a:	d006      	beq.n	8000e5a <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e4c:	686b      	ldr	r3, [r5, #4]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d111      	bne.n	8000e78 <HAL_RCC_OscConfig+0x150>
 8000e54:	686b      	ldr	r3, [r5, #4]
 8000e56:	03db      	lsls	r3, r3, #15
 8000e58:	d40e      	bmi.n	8000e78 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5a:	682b      	ldr	r3, [r5, #0]
 8000e5c:	079b      	lsls	r3, r3, #30
 8000e5e:	d503      	bpl.n	8000e68 <HAL_RCC_OscConfig+0x140>
 8000e60:	68e3      	ldr	r3, [r4, #12]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d000      	beq.n	8000e68 <HAL_RCC_OscConfig+0x140>
 8000e66:	e764      	b.n	8000d32 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e68:	21f8      	movs	r1, #248	; 0xf8
 8000e6a:	682a      	ldr	r2, [r5, #0]
 8000e6c:	6923      	ldr	r3, [r4, #16]
 8000e6e:	438a      	bics	r2, r1
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	602b      	str	r3, [r5, #0]
 8000e76:	e765      	b.n	8000d44 <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e78:	68e2      	ldr	r2, [r4, #12]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	2a00      	cmp	r2, #0
 8000e7e:	d00f      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8000e80:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e82:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000e84:	4313      	orrs	r3, r2
 8000e86:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e88:	f7ff fa26 	bl	80002d8 <HAL_GetTick>
 8000e8c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8e:	682b      	ldr	r3, [r5, #0]
 8000e90:	4233      	tst	r3, r6
 8000e92:	d1e9      	bne.n	8000e68 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e94:	f7ff fa20 	bl	80002d8 <HAL_GetTick>
 8000e98:	1bc0      	subs	r0, r0, r7
 8000e9a:	2802      	cmp	r0, #2
 8000e9c:	d9f7      	bls.n	8000e8e <HAL_RCC_OscConfig+0x166>
 8000e9e:	e7a6      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8000ea0:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000ea4:	439a      	bics	r2, r3
 8000ea6:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fa16 	bl	80002d8 <HAL_GetTick>
 8000eac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eae:	682b      	ldr	r3, [r5, #0]
 8000eb0:	4233      	tst	r3, r6
 8000eb2:	d100      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x18e>
 8000eb4:	e746      	b.n	8000d44 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fa0f 	bl	80002d8 <HAL_GetTick>
 8000eba:	1bc0      	subs	r0, r0, r7
 8000ebc:	2802      	cmp	r0, #2
 8000ebe:	d9f6      	bls.n	8000eae <HAL_RCC_OscConfig+0x186>
 8000ec0:	e795      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec2:	69e2      	ldr	r2, [r4, #28]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	4d5a      	ldr	r5, [pc, #360]	; (8001030 <HAL_RCC_OscConfig+0x308>)
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	d010      	beq.n	8000eee <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8000ecc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ece:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000ed4:	f7ff fa00 	bl	80002d8 <HAL_GetTick>
 8000ed8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000edc:	4233      	tst	r3, r6
 8000ede:	d000      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x1ba>
 8000ee0:	e734      	b.n	8000d4c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee2:	f7ff f9f9 	bl	80002d8 <HAL_GetTick>
 8000ee6:	1bc0      	subs	r0, r0, r7
 8000ee8:	2802      	cmp	r0, #2
 8000eea:	d9f6      	bls.n	8000eda <HAL_RCC_OscConfig+0x1b2>
 8000eec:	e77f      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8000eee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000ef2:	439a      	bics	r2, r3
 8000ef4:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000ef6:	f7ff f9ef 	bl	80002d8 <HAL_GetTick>
 8000efa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000efc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000efe:	4233      	tst	r3, r6
 8000f00:	d100      	bne.n	8000f04 <HAL_RCC_OscConfig+0x1dc>
 8000f02:	e723      	b.n	8000d4c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f04:	f7ff f9e8 	bl	80002d8 <HAL_GetTick>
 8000f08:	1bc0      	subs	r0, r0, r7
 8000f0a:	2802      	cmp	r0, #2
 8000f0c:	d9f6      	bls.n	8000efc <HAL_RCC_OscConfig+0x1d4>
 8000f0e:	e76e      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f10:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000f12:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f14:	4d46      	ldr	r5, [pc, #280]	; (8001030 <HAL_RCC_OscConfig+0x308>)
 8000f16:	0552      	lsls	r2, r2, #21
 8000f18:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000f1a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f1c:	4213      	tst	r3, r2
 8000f1e:	d108      	bne.n	8000f32 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	69eb      	ldr	r3, [r5, #28]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61eb      	str	r3, [r5, #28]
 8000f26:	69eb      	ldr	r3, [r5, #28]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	9303      	str	r3, [sp, #12]
 8000f2c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f32:	2780      	movs	r7, #128	; 0x80
 8000f34:	4e41      	ldr	r6, [pc, #260]	; (800103c <HAL_RCC_OscConfig+0x314>)
 8000f36:	007f      	lsls	r7, r7, #1
 8000f38:	6833      	ldr	r3, [r6, #0]
 8000f3a:	423b      	tst	r3, r7
 8000f3c:	d006      	beq.n	8000f4c <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3e:	68a3      	ldr	r3, [r4, #8]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d113      	bne.n	8000f6c <HAL_RCC_OscConfig+0x244>
 8000f44:	6a2a      	ldr	r2, [r5, #32]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	622b      	str	r3, [r5, #32]
 8000f4a:	e030      	b.n	8000fae <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f4c:	6833      	ldr	r3, [r6, #0]
 8000f4e:	433b      	orrs	r3, r7
 8000f50:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f52:	f7ff f9c1 	bl	80002d8 <HAL_GetTick>
 8000f56:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	6833      	ldr	r3, [r6, #0]
 8000f5a:	423b      	tst	r3, r7
 8000f5c:	d1ef      	bne.n	8000f3e <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f5e:	f7ff f9bb 	bl	80002d8 <HAL_GetTick>
 8000f62:	9b01      	ldr	r3, [sp, #4]
 8000f64:	1ac0      	subs	r0, r0, r3
 8000f66:	2864      	cmp	r0, #100	; 0x64
 8000f68:	d9f6      	bls.n	8000f58 <HAL_RCC_OscConfig+0x230>
 8000f6a:	e740      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
 8000f6c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d114      	bne.n	8000f9c <HAL_RCC_OscConfig+0x274>
 8000f72:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f74:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f76:	4393      	bics	r3, r2
 8000f78:	622b      	str	r3, [r5, #32]
 8000f7a:	6a2b      	ldr	r3, [r5, #32]
 8000f7c:	3203      	adds	r2, #3
 8000f7e:	4393      	bics	r3, r2
 8000f80:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000f82:	f7ff f9a9 	bl	80002d8 <HAL_GetTick>
 8000f86:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f88:	6a2b      	ldr	r3, [r5, #32]
 8000f8a:	423b      	tst	r3, r7
 8000f8c:	d025      	beq.n	8000fda <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f8e:	f7ff f9a3 	bl	80002d8 <HAL_GetTick>
 8000f92:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <HAL_RCC_OscConfig+0x318>)
 8000f94:	1b80      	subs	r0, r0, r6
 8000f96:	4298      	cmp	r0, r3
 8000f98:	d9f6      	bls.n	8000f88 <HAL_RCC_OscConfig+0x260>
 8000f9a:	e728      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d10b      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x290>
 8000fa0:	6a29      	ldr	r1, [r5, #32]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	622b      	str	r3, [r5, #32]
 8000fa8:	6a2b      	ldr	r3, [r5, #32]
 8000faa:	431a      	orrs	r2, r3
 8000fac:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000fae:	f7ff f993 	bl	80002d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000fb4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb6:	e00d      	b.n	8000fd4 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb8:	6a2b      	ldr	r3, [r5, #32]
 8000fba:	4393      	bics	r3, r2
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	622b      	str	r3, [r5, #32]
 8000fc0:	6a2b      	ldr	r3, [r5, #32]
 8000fc2:	4393      	bics	r3, r2
 8000fc4:	e7c0      	b.n	8000f48 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc6:	f7ff f987 	bl	80002d8 <HAL_GetTick>
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_RCC_OscConfig+0x318>)
 8000fcc:	1b80      	subs	r0, r0, r6
 8000fce:	4298      	cmp	r0, r3
 8000fd0:	d900      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x2ac>
 8000fd2:	e70c      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd4:	6a2b      	ldr	r3, [r5, #32]
 8000fd6:	423b      	tst	r3, r7
 8000fd8:	d0f5      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 8000fda:	9b00      	ldr	r3, [sp, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d000      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x2ba>
 8000fe0:	e6b8      	b.n	8000d54 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fe2:	69eb      	ldr	r3, [r5, #28]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_RCC_OscConfig+0x31c>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61eb      	str	r3, [r5, #28]
 8000fea:	e6b3      	b.n	8000d54 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fec:	f7ff f974 	bl	80002d8 <HAL_GetTick>
 8000ff0:	1bc0      	subs	r0, r0, r7
 8000ff2:	2802      	cmp	r0, #2
 8000ff4:	d800      	bhi.n	8000ff8 <HAL_RCC_OscConfig+0x2d0>
 8000ff6:	e6c0      	b.n	8000d7a <HAL_RCC_OscConfig+0x52>
 8000ff8:	e6f9      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ffa:	3205      	adds	r2, #5
 8000ffc:	d103      	bne.n	8001006 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ffe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001000:	439a      	bics	r2, r3
 8001002:	636a      	str	r2, [r5, #52]	; 0x34
 8001004:	e6bd      	b.n	8000d82 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001006:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001008:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800100a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800100c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800100e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001010:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001012:	4393      	bics	r3, r2
 8001014:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001016:	f7ff f95f 	bl	80002d8 <HAL_GetTick>
 800101a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800101c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800101e:	4233      	tst	r3, r6
 8001020:	d100      	bne.n	8001024 <HAL_RCC_OscConfig+0x2fc>
 8001022:	e6b5      	b.n	8000d90 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001024:	f7ff f958 	bl	80002d8 <HAL_GetTick>
 8001028:	1bc0      	subs	r0, r0, r7
 800102a:	2802      	cmp	r0, #2
 800102c:	d9f6      	bls.n	800101c <HAL_RCC_OscConfig+0x2f4>
 800102e:	e6de      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
 8001030:	40021000 	.word	0x40021000
 8001034:	fffeffff 	.word	0xfffeffff
 8001038:	fffbffff 	.word	0xfffbffff
 800103c:	40007000 	.word	0x40007000
 8001040:	00001388 	.word	0x00001388
 8001044:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001048:	200c      	movs	r0, #12
 800104a:	4a35      	ldr	r2, [pc, #212]	; (8001120 <HAL_RCC_OscConfig+0x3f8>)
 800104c:	6851      	ldr	r1, [r2, #4]
 800104e:	0015      	movs	r5, r2
 8001050:	4001      	ands	r1, r0
 8001052:	2908      	cmp	r1, #8
 8001054:	d047      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3be>
 8001056:	4a33      	ldr	r2, [pc, #204]	; (8001124 <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001058:	2b02      	cmp	r3, #2
 800105a:	d132      	bne.n	80010c2 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 800105c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001060:	4013      	ands	r3, r2
 8001062:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001064:	f7ff f938 	bl	80002d8 <HAL_GetTick>
 8001068:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106a:	04b6      	lsls	r6, r6, #18
 800106c:	682b      	ldr	r3, [r5, #0]
 800106e:	4233      	tst	r3, r6
 8001070:	d121      	bne.n	80010b6 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001072:	220f      	movs	r2, #15
 8001074:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001076:	4393      	bics	r3, r2
 8001078:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800107a:	4313      	orrs	r3, r2
 800107c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800107e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001082:	686a      	ldr	r2, [r5, #4]
 8001084:	430b      	orrs	r3, r1
 8001086:	4928      	ldr	r1, [pc, #160]	; (8001128 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001088:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800108a:	400a      	ands	r2, r1
 800108c:	4313      	orrs	r3, r2
 800108e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	682a      	ldr	r2, [r5, #0]
 8001094:	045b      	lsls	r3, r3, #17
 8001096:	4313      	orrs	r3, r2
 8001098:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800109a:	f7ff f91d 	bl	80002d8 <HAL_GetTick>
 800109e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a0:	04a4      	lsls	r4, r4, #18
 80010a2:	682b      	ldr	r3, [r5, #0]
 80010a4:	4223      	tst	r3, r4
 80010a6:	d000      	beq.n	80010aa <HAL_RCC_OscConfig+0x382>
 80010a8:	e676      	b.n	8000d98 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff f915 	bl	80002d8 <HAL_GetTick>
 80010ae:	1b80      	subs	r0, r0, r6
 80010b0:	2802      	cmp	r0, #2
 80010b2:	d9f6      	bls.n	80010a2 <HAL_RCC_OscConfig+0x37a>
 80010b4:	e69b      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b6:	f7ff f90f 	bl	80002d8 <HAL_GetTick>
 80010ba:	1bc0      	subs	r0, r0, r7
 80010bc:	2802      	cmp	r0, #2
 80010be:	d9d5      	bls.n	800106c <HAL_RCC_OscConfig+0x344>
 80010c0:	e695      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 80010c2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c4:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80010c6:	4013      	ands	r3, r2
 80010c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010ca:	f7ff f905 	bl	80002d8 <HAL_GetTick>
 80010ce:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d0:	04a4      	lsls	r4, r4, #18
 80010d2:	682b      	ldr	r3, [r5, #0]
 80010d4:	4223      	tst	r3, r4
 80010d6:	d100      	bne.n	80010da <HAL_RCC_OscConfig+0x3b2>
 80010d8:	e65e      	b.n	8000d98 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010da:	f7ff f8fd 	bl	80002d8 <HAL_GetTick>
 80010de:	1b80      	subs	r0, r0, r6
 80010e0:	2802      	cmp	r0, #2
 80010e2:	d9f6      	bls.n	80010d2 <HAL_RCC_OscConfig+0x3aa>
 80010e4:	e683      	b.n	8000dee <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 80010e6:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d100      	bne.n	80010ee <HAL_RCC_OscConfig+0x3c6>
 80010ec:	e622      	b.n	8000d34 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ee:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 80010f0:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80010f4:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 80010f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f8:	4019      	ands	r1, r3
        return HAL_ERROR;
 80010fa:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010fc:	42a9      	cmp	r1, r5
 80010fe:	d000      	beq.n	8001102 <HAL_RCC_OscConfig+0x3da>
 8001100:	e618      	b.n	8000d34 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001102:	210f      	movs	r1, #15
 8001104:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001106:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001108:	428a      	cmp	r2, r1
 800110a:	d000      	beq.n	800110e <HAL_RCC_OscConfig+0x3e6>
 800110c:	e612      	b.n	8000d34 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800110e:	20f0      	movs	r0, #240	; 0xf0
 8001110:	0380      	lsls	r0, r0, #14
 8001112:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001114:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001116:	1a1b      	subs	r3, r3, r0
 8001118:	1e58      	subs	r0, r3, #1
 800111a:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 800111c:	b2d8      	uxtb	r0, r3
 800111e:	e609      	b.n	8000d34 <HAL_RCC_OscConfig+0xc>
 8001120:	40021000 	.word	0x40021000
 8001124:	feffffff 	.word	0xfeffffff
 8001128:	ffc2ffff 	.word	0xffc2ffff

0800112c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800112c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800112e:	4c14      	ldr	r4, [pc, #80]	; (8001180 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8001130:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001132:	2210      	movs	r2, #16
 8001134:	0021      	movs	r1, r4
 8001136:	4668      	mov	r0, sp
 8001138:	f004 faa2 	bl	8005680 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800113c:	0021      	movs	r1, r4
 800113e:	ad04      	add	r5, sp, #16
 8001140:	2210      	movs	r2, #16
 8001142:	3110      	adds	r1, #16
 8001144:	0028      	movs	r0, r5
 8001146:	f004 fa9b 	bl	8005680 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800114a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800114c:	4e0d      	ldr	r6, [pc, #52]	; (8001184 <HAL_RCC_GetSysClockFreq+0x58>)
 800114e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001150:	401a      	ands	r2, r3
 8001152:	2a08      	cmp	r2, #8
 8001154:	d111      	bne.n	800117a <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001156:	200f      	movs	r0, #15
 8001158:	466a      	mov	r2, sp
 800115a:	0c99      	lsrs	r1, r3, #18
 800115c:	4001      	ands	r1, r0
 800115e:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001160:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001162:	4002      	ands	r2, r0
 8001164:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001166:	03db      	lsls	r3, r3, #15
 8001168:	d505      	bpl.n	8001176 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <HAL_RCC_GetSysClockFreq+0x5c>)
 800116c:	f7fe ffe8 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001170:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001172:	b008      	add	sp, #32
 8001174:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <HAL_RCC_GetSysClockFreq+0x60>)
 8001178:	e7fa      	b.n	8001170 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 800117c:	e7f9      	b.n	8001172 <HAL_RCC_GetSysClockFreq+0x46>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	08005eec 	.word	0x08005eec
 8001184:	40021000 	.word	0x40021000
 8001188:	007a1200 	.word	0x007a1200
 800118c:	003d0900 	.word	0x003d0900

08001190 <HAL_RCC_ClockConfig>:
{
 8001190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001192:	0005      	movs	r5, r0
 8001194:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001196:	2800      	cmp	r0, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800119a:	2001      	movs	r0, #1
}
 800119c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800119e:	2201      	movs	r2, #1
 80011a0:	4c37      	ldr	r4, [pc, #220]	; (8001280 <HAL_RCC_ClockConfig+0xf0>)
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	4013      	ands	r3, r2
 80011a6:	428b      	cmp	r3, r1
 80011a8:	d31c      	bcc.n	80011e4 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011aa:	6829      	ldr	r1, [r5, #0]
 80011ac:	078b      	lsls	r3, r1, #30
 80011ae:	d422      	bmi.n	80011f6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011b0:	07cb      	lsls	r3, r1, #31
 80011b2:	d42f      	bmi.n	8001214 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011b4:	2301      	movs	r3, #1
 80011b6:	6822      	ldr	r2, [r4, #0]
 80011b8:	401a      	ands	r2, r3
 80011ba:	4297      	cmp	r7, r2
 80011bc:	d351      	bcc.n	8001262 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	4c30      	ldr	r4, [pc, #192]	; (8001284 <HAL_RCC_ClockConfig+0xf4>)
 80011c2:	075b      	lsls	r3, r3, #29
 80011c4:	d454      	bmi.n	8001270 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80011c6:	f7ff ffb1 	bl	800112c <HAL_RCC_GetSysClockFreq>
 80011ca:	6863      	ldr	r3, [r4, #4]
 80011cc:	4a2e      	ldr	r2, [pc, #184]	; (8001288 <HAL_RCC_ClockConfig+0xf8>)
 80011ce:	061b      	lsls	r3, r3, #24
 80011d0:	0f1b      	lsrs	r3, r3, #28
 80011d2:	5cd3      	ldrb	r3, [r2, r3]
 80011d4:	40d8      	lsrs	r0, r3
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_RCC_ClockConfig+0xfc>)
 80011d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff f83c 	bl	8000258 <HAL_InitTick>
  return HAL_OK;
 80011e0:	2000      	movs	r0, #0
 80011e2:	e7db      	b.n	800119c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	4393      	bics	r3, r2
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	4013      	ands	r3, r2
 80011f0:	4299      	cmp	r1, r3
 80011f2:	d1d2      	bne.n	800119a <HAL_RCC_ClockConfig+0xa>
 80011f4:	e7d9      	b.n	80011aa <HAL_RCC_ClockConfig+0x1a>
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f8:	074b      	lsls	r3, r1, #29
 80011fa:	d504      	bpl.n	8001206 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011fc:	23e0      	movs	r3, #224	; 0xe0
 80011fe:	6850      	ldr	r0, [r2, #4]
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4303      	orrs	r3, r0
 8001204:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001206:	20f0      	movs	r0, #240	; 0xf0
 8001208:	6853      	ldr	r3, [r2, #4]
 800120a:	4383      	bics	r3, r0
 800120c:	68a8      	ldr	r0, [r5, #8]
 800120e:	4303      	orrs	r3, r0
 8001210:	6053      	str	r3, [r2, #4]
 8001212:	e7cd      	b.n	80011b0 <HAL_RCC_ClockConfig+0x20>
 8001214:	4e1b      	ldr	r6, [pc, #108]	; (8001284 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001216:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001218:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	2a01      	cmp	r2, #1
 800121c:	d119      	bne.n	8001252 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	039b      	lsls	r3, r3, #14
 8001220:	d5bb      	bpl.n	800119a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001222:	2103      	movs	r1, #3
 8001224:	6873      	ldr	r3, [r6, #4]
 8001226:	438b      	bics	r3, r1
 8001228:	4313      	orrs	r3, r2
 800122a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800122c:	f7ff f854 	bl	80002d8 <HAL_GetTick>
 8001230:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001232:	230c      	movs	r3, #12
 8001234:	6872      	ldr	r2, [r6, #4]
 8001236:	401a      	ands	r2, r3
 8001238:	686b      	ldr	r3, [r5, #4]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	429a      	cmp	r2, r3
 800123e:	d0b9      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001240:	f7ff f84a 	bl	80002d8 <HAL_GetTick>
 8001244:	9b01      	ldr	r3, [sp, #4]
 8001246:	1ac0      	subs	r0, r0, r3
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_RCC_ClockConfig+0x100>)
 800124a:	4298      	cmp	r0, r3
 800124c:	d9f1      	bls.n	8001232 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800124e:	2003      	movs	r0, #3
 8001250:	e7a4      	b.n	800119c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001252:	2a02      	cmp	r2, #2
 8001254:	d102      	bne.n	800125c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001256:	019b      	lsls	r3, r3, #6
 8001258:	d4e3      	bmi.n	8001222 <HAL_RCC_ClockConfig+0x92>
 800125a:	e79e      	b.n	800119a <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	079b      	lsls	r3, r3, #30
 800125e:	d4e0      	bmi.n	8001222 <HAL_RCC_ClockConfig+0x92>
 8001260:	e79b      	b.n	800119a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001262:	6822      	ldr	r2, [r4, #0]
 8001264:	439a      	bics	r2, r3
 8001266:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001268:	6822      	ldr	r2, [r4, #0]
 800126a:	421a      	tst	r2, r3
 800126c:	d195      	bne.n	800119a <HAL_RCC_ClockConfig+0xa>
 800126e:	e7a6      	b.n	80011be <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001270:	6863      	ldr	r3, [r4, #4]
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_RCC_ClockConfig+0x104>)
 8001274:	4013      	ands	r3, r2
 8001276:	68ea      	ldr	r2, [r5, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	6063      	str	r3, [r4, #4]
 800127c:	e7a3      	b.n	80011c6 <HAL_RCC_ClockConfig+0x36>
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	40022000 	.word	0x40022000
 8001284:	40021000 	.word	0x40021000
 8001288:	080065df 	.word	0x080065df
 800128c:	2000000c 	.word	0x2000000c
 8001290:	00001388 	.word	0x00001388
 8001294:	fffff8ff 	.word	0xfffff8ff

08001298 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	055b      	lsls	r3, r3, #21
 80012a0:	0f5b      	lsrs	r3, r3, #29
 80012a2:	5cd3      	ldrb	r3, [r2, r3]
 80012a4:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012a6:	6810      	ldr	r0, [r2, #0]
 80012a8:	40d8      	lsrs	r0, r3
}    
 80012aa:	4770      	bx	lr
 80012ac:	40021000 	.word	0x40021000
 80012b0:	080065ef 	.word	0x080065ef
 80012b4:	2000000c 	.word	0x2000000c

080012b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012ba:	6803      	ldr	r3, [r0, #0]
{
 80012bc:	b085      	sub	sp, #20
 80012be:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012c0:	03db      	lsls	r3, r3, #15
 80012c2:	d528      	bpl.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80012c6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c8:	4c3b      	ldr	r4, [pc, #236]	; (80013b8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80012ca:	0552      	lsls	r2, r2, #21
 80012cc:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d0:	4213      	tst	r3, r2
 80012d2:	d108      	bne.n	80012e6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	69e3      	ldr	r3, [r4, #28]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61e3      	str	r3, [r4, #28]
 80012da:	69e3      	ldr	r3, [r4, #28]
 80012dc:	4013      	ands	r3, r2
 80012de:	9303      	str	r3, [sp, #12]
 80012e0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	2780      	movs	r7, #128	; 0x80
 80012e8:	4e34      	ldr	r6, [pc, #208]	; (80013bc <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80012ea:	007f      	lsls	r7, r7, #1
 80012ec:	6833      	ldr	r3, [r6, #0]
 80012ee:	423b      	tst	r3, r7
 80012f0:	d02f      	beq.n	8001352 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012f2:	22c0      	movs	r2, #192	; 0xc0
 80012f4:	6a23      	ldr	r3, [r4, #32]
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	4e31      	ldr	r6, [pc, #196]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012fc:	d13b      	bne.n	8001376 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012fe:	6a23      	ldr	r3, [r4, #32]
 8001300:	401e      	ands	r6, r3
 8001302:	686b      	ldr	r3, [r5, #4]
 8001304:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001306:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001308:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800130a:	2b01      	cmp	r3, #1
 800130c:	d103      	bne.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130e:	69e3      	ldr	r3, [r4, #28]
 8001310:	4a2c      	ldr	r2, [pc, #176]	; (80013c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001312:	4013      	ands	r3, r2
 8001314:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001316:	682a      	ldr	r2, [r5, #0]
 8001318:	07d3      	lsls	r3, r2, #31
 800131a:	d506      	bpl.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800131c:	2003      	movs	r0, #3
 800131e:	4926      	ldr	r1, [pc, #152]	; (80013b8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001320:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001322:	4383      	bics	r3, r0
 8001324:	68a8      	ldr	r0, [r5, #8]
 8001326:	4303      	orrs	r3, r0
 8001328:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800132a:	0693      	lsls	r3, r2, #26
 800132c:	d506      	bpl.n	800133c <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800132e:	2010      	movs	r0, #16
 8001330:	4921      	ldr	r1, [pc, #132]	; (80013b8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001332:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001334:	4383      	bics	r3, r0
 8001336:	68e8      	ldr	r0, [r5, #12]
 8001338:	4303      	orrs	r3, r0
 800133a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800133c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800133e:	0553      	lsls	r3, r2, #21
 8001340:	d517      	bpl.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001342:	2140      	movs	r1, #64	; 0x40
 8001344:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001346:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001348:	438b      	bics	r3, r1
 800134a:	6929      	ldr	r1, [r5, #16]
 800134c:	430b      	orrs	r3, r1
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	e00f      	b.n	8001372 <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001352:	6833      	ldr	r3, [r6, #0]
 8001354:	433b      	orrs	r3, r7
 8001356:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001358:	f7fe ffbe 	bl	80002d8 <HAL_GetTick>
 800135c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	6833      	ldr	r3, [r6, #0]
 8001360:	423b      	tst	r3, r7
 8001362:	d1c6      	bne.n	80012f2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001364:	f7fe ffb8 	bl	80002d8 <HAL_GetTick>
 8001368:	9b01      	ldr	r3, [sp, #4]
 800136a:	1ac0      	subs	r0, r0, r3
 800136c:	2864      	cmp	r0, #100	; 0x64
 800136e:	d9f6      	bls.n	800135e <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 8001370:	2003      	movs	r0, #3
}
 8001372:	b005      	add	sp, #20
 8001374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001376:	6869      	ldr	r1, [r5, #4]
 8001378:	400a      	ands	r2, r1
 800137a:	4293      	cmp	r3, r2
 800137c:	d0bf      	beq.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 800137e:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001380:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001382:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001384:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001386:	025b      	lsls	r3, r3, #9
 8001388:	4303      	orrs	r3, r0
 800138a:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800138c:	6a23      	ldr	r3, [r4, #32]
 800138e:	480e      	ldr	r0, [pc, #56]	; (80013c8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001390:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001392:	4003      	ands	r3, r0
 8001394:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001396:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001398:	07d3      	lsls	r3, r2, #31
 800139a:	d5b0      	bpl.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800139c:	f7fe ff9c 	bl	80002d8 <HAL_GetTick>
 80013a0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a2:	2202      	movs	r2, #2
 80013a4:	6a23      	ldr	r3, [r4, #32]
 80013a6:	4213      	tst	r3, r2
 80013a8:	d1a9      	bne.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f7fe ff95 	bl	80002d8 <HAL_GetTick>
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80013b0:	1bc0      	subs	r0, r0, r7
 80013b2:	4298      	cmp	r0, r3
 80013b4:	d9f5      	bls.n	80013a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80013b6:	e7db      	b.n	8001370 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40007000 	.word	0x40007000
 80013c0:	fffffcff 	.word	0xfffffcff
 80013c4:	efffffff 	.word	0xefffffff
 80013c8:	fffeffff 	.word	0xfffeffff
 80013cc:	00001388 	.word	0x00001388

080013d0 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80013d0:	21e0      	movs	r1, #224	; 0xe0
 80013d2:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80013d4:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	438a      	bics	r2, r1
 80013da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013dc:	2282      	movs	r2, #130	; 0x82
 80013de:	6841      	ldr	r1, [r0, #4]
 80013e0:	0052      	lsls	r2, r2, #1
 80013e2:	4291      	cmp	r1, r2
 80013e4:	d10c      	bne.n	8001400 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	6882      	ldr	r2, [r0, #8]
 80013ea:	0209      	lsls	r1, r1, #8
 80013ec:	428a      	cmp	r2, r1
 80013ee:	d003      	beq.n	80013f8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	00c9      	lsls	r1, r1, #3
 80013f4:	428a      	cmp	r2, r1
 80013f6:	d103      	bne.n	8001400 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	438a      	bics	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001404:	0189      	lsls	r1, r1, #6
 8001406:	428a      	cmp	r2, r1
 8001408:	d106      	bne.n	8001418 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 800140a:	6819      	ldr	r1, [r3, #0]
 800140c:	4c07      	ldr	r4, [pc, #28]	; (800142c <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 800140e:	4021      	ands	r1, r4
 8001410:	6019      	str	r1, [r3, #0]
 8001412:	6819      	ldr	r1, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001418:	0003      	movs	r3, r0
 800141a:	2201      	movs	r2, #1
 800141c:	335d      	adds	r3, #93	; 0x5d
 800141e:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001420:	2300      	movs	r3, #0
 8001422:	305c      	adds	r0, #92	; 0x5c
 8001424:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8001426:	2003      	movs	r0, #3
 8001428:	bd10      	pop	{r4, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	ffffdfff 	.word	0xffffdfff

08001430 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001432:	0004      	movs	r4, r0
 8001434:	000d      	movs	r5, r1
 8001436:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001438:	2680      	movs	r6, #128	; 0x80
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	6898      	ldr	r0, [r3, #8]
 800143e:	4030      	ands	r0, r6
 8001440:	d009      	beq.n	8001456 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8001442:	1c6a      	adds	r2, r5, #1
 8001444:	d0fa      	beq.n	800143c <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001446:	f7fe ff47 	bl	80002d8 <HAL_GetTick>
 800144a:	1bc0      	subs	r0, r0, r7
 800144c:	4285      	cmp	r5, r0
 800144e:	d8f4      	bhi.n	800143a <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 8001450:	0020      	movs	r0, r4
 8001452:	f7ff ffbd 	bl	80013d0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001458 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800145a:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800145c:	0005      	movs	r5, r0
 800145e:	000c      	movs	r4, r1
 8001460:	0016      	movs	r6, r2
 8001462:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001464:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8001466:	682b      	ldr	r3, [r5, #0]
 8001468:	6898      	ldr	r0, [r3, #8]
 800146a:	4020      	ands	r0, r4
 800146c:	d00d      	beq.n	800148a <SPI_WaitFifoStateUntilTimeout.constprop.10+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800146e:	42bc      	cmp	r4, r7
 8001470:	d100      	bne.n	8001474 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001472:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001474:	1c72      	adds	r2, r6, #1
 8001476:	d0f7      	beq.n	8001468 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001478:	f7fe ff2e 	bl	80002d8 <HAL_GetTick>
 800147c:	9b01      	ldr	r3, [sp, #4]
 800147e:	1ac0      	subs	r0, r0, r3
 8001480:	4286      	cmp	r6, r0
 8001482:	d8f0      	bhi.n	8001466 <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
 8001484:	0028      	movs	r0, r5
 8001486:	f7ff ffa3 	bl	80013d0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 800148a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800148c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800148c:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800148e:	0013      	movs	r3, r2
{
 8001490:	000d      	movs	r5, r1
 8001492:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001494:	000a      	movs	r2, r1
 8001496:	21c0      	movs	r1, #192	; 0xc0
 8001498:	0149      	lsls	r1, r1, #5
{
 800149a:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800149c:	f7ff ffdc 	bl	8001458 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d005      	beq.n	80014b0 <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80014a4:	2320      	movs	r3, #32
 80014a6:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80014a8:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80014aa:	4313      	orrs	r3, r2
 80014ac:	6623      	str	r3, [r4, #96]	; 0x60
 80014ae:	e00f      	b.n	80014d0 <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80014b0:	0032      	movs	r2, r6
 80014b2:	0029      	movs	r1, r5
 80014b4:	0020      	movs	r0, r4
 80014b6:	f7ff ffbb 	bl	8001430 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d1f2      	bne.n	80014a4 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80014be:	21c0      	movs	r1, #192	; 0xc0
 80014c0:	0033      	movs	r3, r6
 80014c2:	002a      	movs	r2, r5
 80014c4:	00c9      	lsls	r1, r1, #3
 80014c6:	0020      	movs	r0, r4
 80014c8:	f7ff ffc6 	bl	8001458 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d1e9      	bne.n	80014a4 <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80014d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080014d4 <HAL_SPI_Init>:
{
 80014d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80014d8:	2001      	movs	r0, #1
  if (hspi == NULL)
 80014da:	2c00      	cmp	r4, #0
 80014dc:	d04b      	beq.n	8001576 <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014de:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80014e0:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80014e4:	355d      	adds	r5, #93	; 0x5d
 80014e6:	782b      	ldrb	r3, [r5, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d105      	bne.n	80014fa <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 80014ee:	0022      	movs	r2, r4
 80014f0:	325c      	adds	r2, #92	; 0x5c
 80014f2:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 80014f4:	0020      	movs	r0, r4
 80014f6:	f003 ff75 	bl	80053e4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80014fa:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80014fc:	2240      	movs	r2, #64	; 0x40
 80014fe:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001500:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001502:	680b      	ldr	r3, [r1, #0]
 8001504:	2000      	movs	r0, #0
 8001506:	4393      	bics	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
 800150a:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800150c:	68e2      	ldr	r2, [r4, #12]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	429a      	cmp	r2, r3
 8001512:	d931      	bls.n	8001578 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001514:	26f0      	movs	r6, #240	; 0xf0
 8001516:	0136      	lsls	r6, r6, #4
 8001518:	42b2      	cmp	r2, r6
 800151a:	d133      	bne.n	8001584 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800151c:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800151e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001520:	2800      	cmp	r0, #0
 8001522:	d103      	bne.n	800152c <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001524:	429a      	cmp	r2, r3
 8001526:	d92f      	bls.n	8001588 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001528:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800152a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800152c:	68a7      	ldr	r7, [r4, #8]
 800152e:	6863      	ldr	r3, [r4, #4]
 8001530:	69a0      	ldr	r0, [r4, #24]
 8001532:	433b      	orrs	r3, r7
 8001534:	6927      	ldr	r7, [r4, #16]
 8001536:	433b      	orrs	r3, r7
 8001538:	6967      	ldr	r7, [r4, #20]
 800153a:	433b      	orrs	r3, r7
 800153c:	69e7      	ldr	r7, [r4, #28]
 800153e:	433b      	orrs	r3, r7
 8001540:	6a27      	ldr	r7, [r4, #32]
 8001542:	433b      	orrs	r3, r7
 8001544:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001546:	433b      	orrs	r3, r7
 8001548:	2780      	movs	r7, #128	; 0x80
 800154a:	00bf      	lsls	r7, r7, #2
 800154c:	4007      	ands	r7, r0
 800154e:	433b      	orrs	r3, r7
 8001550:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001554:	0c00      	lsrs	r0, r0, #16
 8001556:	431a      	orrs	r2, r3
 8001558:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800155a:	431a      	orrs	r2, r3
 800155c:	2304      	movs	r3, #4
 800155e:	4018      	ands	r0, r3
 8001560:	4310      	orrs	r0, r2
 8001562:	4306      	orrs	r6, r0
 8001564:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001566:	69cb      	ldr	r3, [r1, #28]
 8001568:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800156a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800156c:	4013      	ands	r3, r2
 800156e:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001570:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001572:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001574:	702b      	strb	r3, [r5, #0]
}
 8001576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001578:	2680      	movs	r6, #128	; 0x80
 800157a:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800157c:	429a      	cmp	r2, r3
 800157e:	d0ce      	beq.n	800151e <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001580:	62a0      	str	r0, [r4, #40]	; 0x28
 8001582:	e7cc      	b.n	800151e <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001584:	0006      	movs	r6, r0
 8001586:	e7fb      	b.n	8001580 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001588:	2301      	movs	r3, #1
 800158a:	e7ce      	b.n	800152a <HAL_SPI_Init+0x56>
 800158c:	fffff7ff 	.word	0xfffff7ff

08001590 <HAL_SPI_Transmit>:
{
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	b087      	sub	sp, #28
 8001594:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 8001596:	0003      	movs	r3, r0
 8001598:	335c      	adds	r3, #92	; 0x5c
 800159a:	9303      	str	r3, [sp, #12]
 800159c:	781b      	ldrb	r3, [r3, #0]
{
 800159e:	0004      	movs	r4, r0
 80015a0:	000d      	movs	r5, r1
 80015a2:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80015a4:	2602      	movs	r6, #2
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d100      	bne.n	80015ac <HAL_SPI_Transmit+0x1c>
 80015aa:	e07c      	b.n	80016a6 <HAL_SPI_Transmit+0x116>
 80015ac:	2301      	movs	r3, #1
 80015ae:	9a03      	ldr	r2, [sp, #12]
 80015b0:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80015b2:	f7fe fe91 	bl	80002d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80015b6:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 80015b8:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 80015ba:	325d      	adds	r2, #93	; 0x5d
 80015bc:	7813      	ldrb	r3, [r2, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d16a      	bne.n	800169a <HAL_SPI_Transmit+0x10a>
    errorcode = HAL_ERROR;
 80015c4:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 80015c6:	2d00      	cmp	r5, #0
 80015c8:	d067      	beq.n	800169a <HAL_SPI_Transmit+0x10a>
 80015ca:	2f00      	cmp	r7, #0
 80015cc:	d065      	beq.n	800169a <HAL_SPI_Transmit+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80015ce:	3302      	adds	r3, #2
 80015d0:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015d2:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 80015d4:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015d6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80015d8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80015da:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80015dc:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80015de:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 80015e0:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 80015e2:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80015e4:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80015e6:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80015e8:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	68a2      	ldr	r2, [r4, #8]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d105      	bne.n	8001600 <HAL_SPI_Transmit+0x70>
    SPI_1LINE_TX(hspi);
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	01db      	lsls	r3, r3, #7
 80015fa:	6811      	ldr	r1, [r2, #0]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	4211      	tst	r1, r2
 8001608:	d102      	bne.n	8001610 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001610:	21e0      	movs	r1, #224	; 0xe0
 8001612:	68e0      	ldr	r0, [r4, #12]
 8001614:	00c9      	lsls	r1, r1, #3
 8001616:	6862      	ldr	r2, [r4, #4]
 8001618:	4288      	cmp	r0, r1
 800161a:	d947      	bls.n	80016ac <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800161c:	2a00      	cmp	r2, #0
 800161e:	d001      	beq.n	8001624 <HAL_SPI_Transmit+0x94>
 8001620:	2f01      	cmp	r7, #1
 8001622:	d107      	bne.n	8001634 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001624:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001626:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001628:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800162a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800162c:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800162e:	3b01      	subs	r3, #1
 8001630:	b29b      	uxth	r3, r3
 8001632:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001634:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8001636:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001638:	2b00      	cmp	r3, #0
 800163a:	d116      	bne.n	800166a <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800163c:	9a02      	ldr	r2, [sp, #8]
 800163e:	9901      	ldr	r1, [sp, #4]
 8001640:	0020      	movs	r0, r4
 8001642:	f7ff ff23 	bl	800148c <SPI_EndRxTxTransaction>
 8001646:	2800      	cmp	r0, #0
 8001648:	d000      	beq.n	800164c <HAL_SPI_Transmit+0xbc>
 800164a:	e06d      	b.n	8001728 <HAL_SPI_Transmit+0x198>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800164c:	68a3      	ldr	r3, [r4, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001652:	9305      	str	r3, [sp, #20]
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	9205      	str	r2, [sp, #20]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	9305      	str	r3, [sp, #20]
 800165e:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001660:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8001662:	1e73      	subs	r3, r6, #1
 8001664:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 8001666:	b2f6      	uxtb	r6, r6
 8001668:	e017      	b.n	800169a <HAL_SPI_Transmit+0x10a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	6893      	ldr	r3, [r2, #8]
 800166e:	422b      	tst	r3, r5
 8001670:	d009      	beq.n	8001686 <HAL_SPI_Transmit+0xf6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001672:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001674:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001676:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001678:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800167a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800167c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800167e:	3b01      	subs	r3, #1
 8001680:	b29b      	uxth	r3, r3
 8001682:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001684:	e7d7      	b.n	8001636 <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001686:	f7fe fe27 	bl	80002d8 <HAL_GetTick>
 800168a:	9b02      	ldr	r3, [sp, #8]
 800168c:	1ac0      	subs	r0, r0, r3
 800168e:	9b01      	ldr	r3, [sp, #4]
 8001690:	4298      	cmp	r0, r3
 8001692:	d3d0      	bcc.n	8001636 <HAL_SPI_Transmit+0xa6>
 8001694:	3301      	adds	r3, #1
 8001696:	d0ce      	beq.n	8001636 <HAL_SPI_Transmit+0xa6>
          errorcode = HAL_TIMEOUT;
 8001698:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 800169a:	2301      	movs	r3, #1
 800169c:	345d      	adds	r4, #93	; 0x5d
 800169e:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 80016a0:	2300      	movs	r3, #0
 80016a2:	9a03      	ldr	r2, [sp, #12]
 80016a4:	7013      	strb	r3, [r2, #0]
}
 80016a6:	0030      	movs	r0, r6
 80016a8:	b007      	add	sp, #28
 80016aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016ac:	2a00      	cmp	r2, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_SPI_Transmit+0x124>
 80016b0:	2f01      	cmp	r7, #1
 80016b2:	d10a      	bne.n	80016ca <HAL_SPI_Transmit+0x13a>
      if (hspi->TxXferCount > 1U)
 80016b4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80016b6:	2a01      	cmp	r2, #1
 80016b8:	d91c      	bls.n	80016f4 <HAL_SPI_Transmit+0x164>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016ba:	882a      	ldrh	r2, [r5, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80016bc:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016be:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80016c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80016c2:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80016c4:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80016ca:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80016cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0b4      	beq.n	800163c <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80016d2:	6822      	ldr	r2, [r4, #0]
 80016d4:	6893      	ldr	r3, [r2, #8]
 80016d6:	422b      	tst	r3, r5
 80016d8:	d01c      	beq.n	8001714 <HAL_SPI_Transmit+0x184>
        if (hspi->TxXferCount > 1U)
 80016da:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80016dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016de:	2901      	cmp	r1, #1
 80016e0:	d910      	bls.n	8001704 <HAL_SPI_Transmit+0x174>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016e2:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80016e4:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016e6:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80016e8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80016ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80016ec:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80016f2:	e7eb      	b.n	80016cc <HAL_SPI_Transmit+0x13c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80016f4:	782a      	ldrb	r2, [r5, #0]
 80016f6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80016f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016fa:	3301      	adds	r3, #1
 80016fc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80016fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001700:	3b01      	subs	r3, #1
 8001702:	e7e0      	b.n	80016c6 <HAL_SPI_Transmit+0x136>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8001708:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800170a:	3301      	adds	r3, #1
 800170c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800170e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001710:	3b01      	subs	r3, #1
 8001712:	e7ec      	b.n	80016ee <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001714:	f7fe fde0 	bl	80002d8 <HAL_GetTick>
 8001718:	9b02      	ldr	r3, [sp, #8]
 800171a:	1ac0      	subs	r0, r0, r3
 800171c:	9b01      	ldr	r3, [sp, #4]
 800171e:	4283      	cmp	r3, r0
 8001720:	d8d4      	bhi.n	80016cc <HAL_SPI_Transmit+0x13c>
 8001722:	3301      	adds	r3, #1
 8001724:	d0d2      	beq.n	80016cc <HAL_SPI_Transmit+0x13c>
 8001726:	e7b7      	b.n	8001698 <HAL_SPI_Transmit+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001728:	2320      	movs	r3, #32
 800172a:	6623      	str	r3, [r4, #96]	; 0x60
 800172c:	e78e      	b.n	800164c <HAL_SPI_Transmit+0xbc>
	...

08001730 <HAL_SPI_TransmitReceive>:
{
 8001730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001732:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8001734:	0003      	movs	r3, r0
{
 8001736:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8001738:	335c      	adds	r3, #92	; 0x5c
 800173a:	781a      	ldrb	r2, [r3, #0]
{
 800173c:	0004      	movs	r4, r0
 800173e:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 8001740:	2502      	movs	r5, #2
 8001742:	2a01      	cmp	r2, #1
 8001744:	d100      	bne.n	8001748 <HAL_SPI_TransmitReceive+0x18>
 8001746:	e0ac      	b.n	80018a2 <HAL_SPI_TransmitReceive+0x172>
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800174c:	f7fe fdc4 	bl	80002d8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001750:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001752:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 8001754:	335d      	adds	r3, #93	; 0x5d
 8001756:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001758:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800175a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800175c:	2b01      	cmp	r3, #1
 800175e:	d00b      	beq.n	8001778 <HAL_SPI_TransmitReceive+0x48>
 8001760:	2282      	movs	r2, #130	; 0x82
 8001762:	0052      	lsls	r2, r2, #1
 8001764:	4291      	cmp	r1, r2
 8001766:	d000      	beq.n	800176a <HAL_SPI_TransmitReceive+0x3a>
 8001768:	e094      	b.n	8001894 <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800176a:	68a2      	ldr	r2, [r4, #8]
 800176c:	2a00      	cmp	r2, #0
 800176e:	d000      	beq.n	8001772 <HAL_SPI_TransmitReceive+0x42>
 8001770:	e090      	b.n	8001894 <HAL_SPI_TransmitReceive+0x164>
 8001772:	2b04      	cmp	r3, #4
 8001774:	d000      	beq.n	8001778 <HAL_SPI_TransmitReceive+0x48>
 8001776:	e08d      	b.n	8001894 <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 8001778:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800177a:	2f00      	cmp	r7, #0
 800177c:	d100      	bne.n	8001780 <HAL_SPI_TransmitReceive+0x50>
 800177e:	e089      	b.n	8001894 <HAL_SPI_TransmitReceive+0x164>
 8001780:	9b01      	ldr	r3, [sp, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d100      	bne.n	8001788 <HAL_SPI_TransmitReceive+0x58>
 8001786:	e085      	b.n	8001894 <HAL_SPI_TransmitReceive+0x164>
 8001788:	2e00      	cmp	r6, #0
 800178a:	d100      	bne.n	800178e <HAL_SPI_TransmitReceive+0x5e>
 800178c:	e082      	b.n	8001894 <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800178e:	0023      	movs	r3, r4
 8001790:	335d      	adds	r3, #93	; 0x5d
 8001792:	781a      	ldrb	r2, [r3, #0]
 8001794:	2a04      	cmp	r2, #4
 8001796:	d001      	beq.n	800179c <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001798:	2205      	movs	r2, #5
 800179a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800179c:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800179e:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80017a0:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80017a2:	0022      	movs	r2, r4
 80017a4:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017a6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80017a8:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80017aa:	1da2      	adds	r2, r4, #6
 80017ac:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80017ae:	22e0      	movs	r2, #224	; 0xe0
 80017b0:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 80017b2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80017b4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80017b6:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80017b8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80017ba:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80017bc:	00d2      	lsls	r2, r2, #3
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	4290      	cmp	r0, r2
 80017c2:	d801      	bhi.n	80017c8 <HAL_SPI_TransmitReceive+0x98>
 80017c4:	2e01      	cmp	r6, #1
 80017c6:	d931      	bls.n	800182c <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4d71      	ldr	r5, [pc, #452]	; (8001990 <HAL_SPI_TransmitReceive+0x260>)
 80017cc:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80017ce:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	681d      	ldr	r5, [r3, #0]
 80017d6:	4215      	tst	r5, r2
 80017d8:	d102      	bne.n	80017e0 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80017da:	681d      	ldr	r5, [r3, #0]
 80017dc:	432a      	orrs	r2, r5
 80017de:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017e0:	22e0      	movs	r2, #224	; 0xe0
 80017e2:	00d2      	lsls	r2, r2, #3
 80017e4:	4290      	cmp	r0, r2
 80017e6:	d95e      	bls.n	80018a6 <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017e8:	2900      	cmp	r1, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_SPI_TransmitReceive+0xc0>
 80017ec:	2e01      	cmp	r6, #1
 80017ee:	d107      	bne.n	8001800 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017f0:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017f2:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017f4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80017f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017f8:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001800:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001802:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001804:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001806:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001808:	2b00      	cmp	r3, #0
 800180a:	d114      	bne.n	8001836 <HAL_SPI_TransmitReceive+0x106>
 800180c:	0023      	movs	r3, r4
 800180e:	3308      	adds	r3, #8
 8001810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001816:	9a00      	ldr	r2, [sp, #0]
 8001818:	9908      	ldr	r1, [sp, #32]
 800181a:	0020      	movs	r0, r4
 800181c:	f7ff fe36 	bl	800148c <SPI_EndRxTxTransaction>
 8001820:	1e05      	subs	r5, r0, #0
 8001822:	d037      	beq.n	8001894 <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001824:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001826:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001828:	6623      	str	r3, [r4, #96]	; 0x60
 800182a:	e033      	b.n	8001894 <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	685d      	ldr	r5, [r3, #4]
 8001830:	0152      	lsls	r2, r2, #5
 8001832:	432a      	orrs	r2, r5
 8001834:	e7cb      	b.n	80017ce <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	6893      	ldr	r3, [r2, #8]
 800183a:	423b      	tst	r3, r7
 800183c:	d00e      	beq.n	800185c <HAL_SPI_TransmitReceive+0x12c>
 800183e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00b      	beq.n	800185c <HAL_SPI_TransmitReceive+0x12c>
 8001844:	2d01      	cmp	r5, #1
 8001846:	d109      	bne.n	800185c <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 8001848:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800184a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800184c:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800184e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001850:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001852:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001854:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001856:	3b01      	subs	r3, #1
 8001858:	b29b      	uxth	r3, r3
 800185a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800185c:	6893      	ldr	r3, [r2, #8]
 800185e:	4233      	tst	r3, r6
 8001860:	d00e      	beq.n	8001880 <HAL_SPI_TransmitReceive+0x150>
 8001862:	0021      	movs	r1, r4
 8001864:	3108      	adds	r1, #8
 8001866:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8001868:	2b00      	cmp	r3, #0
 800186a:	d009      	beq.n	8001880 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 800186c:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800186e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001870:	68d2      	ldr	r2, [r2, #12]
 8001872:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001874:	3302      	adds	r3, #2
 8001876:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001878:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 800187a:	3b01      	subs	r3, #1
 800187c:	b29b      	uxth	r3, r3
 800187e:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001880:	f7fe fd2a 	bl	80002d8 <HAL_GetTick>
 8001884:	9b00      	ldr	r3, [sp, #0]
 8001886:	1ac0      	subs	r0, r0, r3
 8001888:	9b08      	ldr	r3, [sp, #32]
 800188a:	4283      	cmp	r3, r0
 800188c:	d8bb      	bhi.n	8001806 <HAL_SPI_TransmitReceive+0xd6>
 800188e:	3301      	adds	r3, #1
 8001890:	d0b9      	beq.n	8001806 <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 8001892:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001894:	0023      	movs	r3, r4
 8001896:	2201      	movs	r2, #1
 8001898:	335d      	adds	r3, #93	; 0x5d
 800189a:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800189c:	2300      	movs	r3, #0
 800189e:	345c      	adds	r4, #92	; 0x5c
 80018a0:	7023      	strb	r3, [r4, #0]
}
 80018a2:	0028      	movs	r0, r5
 80018a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018a6:	2900      	cmp	r1, #0
 80018a8:	d001      	beq.n	80018ae <HAL_SPI_TransmitReceive+0x17e>
 80018aa:	2e01      	cmp	r6, #1
 80018ac:	d10a      	bne.n	80018c4 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 80018ae:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80018b0:	2a01      	cmp	r2, #1
 80018b2:	d951      	bls.n	8001958 <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018b4:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80018b6:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018b8:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80018ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80018bc:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80018be:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80018c4:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80018c6:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80018c8:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <HAL_SPI_TransmitReceive+0x1ac>
 80018d0:	0023      	movs	r3, r4
 80018d2:	3308      	adds	r3, #8
 80018d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d100      	bne.n	80018dc <HAL_SPI_TransmitReceive+0x1ac>
 80018da:	e79c      	b.n	8001816 <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80018dc:	6822      	ldr	r2, [r4, #0]
 80018de:	6893      	ldr	r3, [r2, #8]
 80018e0:	423b      	tst	r3, r7
 80018e2:	d011      	beq.n	8001908 <HAL_SPI_TransmitReceive+0x1d8>
 80018e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00e      	beq.n	8001908 <HAL_SPI_TransmitReceive+0x1d8>
 80018ea:	2d01      	cmp	r5, #1
 80018ec:	d10c      	bne.n	8001908 <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 80018ee:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80018f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018f2:	2901      	cmp	r1, #1
 80018f4:	d938      	bls.n	8001968 <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018f6:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80018f8:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018fa:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80018fc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80018fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001900:	3b02      	subs	r3, #2
        txallowed = 0U;
 8001902:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8001904:	b29b      	uxth	r3, r3
 8001906:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001908:	6821      	ldr	r1, [r4, #0]
 800190a:	688b      	ldr	r3, [r1, #8]
 800190c:	4233      	tst	r3, r6
 800190e:	d019      	beq.n	8001944 <HAL_SPI_TransmitReceive+0x214>
 8001910:	0023      	movs	r3, r4
 8001912:	3308      	adds	r3, #8
 8001914:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001916:	2a00      	cmp	r2, #0
 8001918:	d014      	beq.n	8001944 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 800191a:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 800191c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800191e:	2801      	cmp	r0, #1
 8001920:	d92a      	bls.n	8001978 <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001922:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 8001924:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001926:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001928:	3202      	adds	r2, #2
 800192a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800192c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800192e:	3a02      	subs	r2, #2
 8001930:	b292      	uxth	r2, r2
 8001932:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8001934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001936:	2b01      	cmp	r3, #1
 8001938:	d804      	bhi.n	8001944 <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	684a      	ldr	r2, [r1, #4]
 800193e:	015b      	lsls	r3, r3, #5
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001944:	f7fe fcc8 	bl	80002d8 <HAL_GetTick>
 8001948:	9b00      	ldr	r3, [sp, #0]
 800194a:	1ac0      	subs	r0, r0, r3
 800194c:	9b08      	ldr	r3, [sp, #32]
 800194e:	4283      	cmp	r3, r0
 8001950:	d8bb      	bhi.n	80018ca <HAL_SPI_TransmitReceive+0x19a>
 8001952:	3301      	adds	r3, #1
 8001954:	d0b9      	beq.n	80018ca <HAL_SPI_TransmitReceive+0x19a>
 8001956:	e79c      	b.n	8001892 <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001958:	783a      	ldrb	r2, [r7, #0]
 800195a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800195c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800195e:	3301      	adds	r3, #1
 8001960:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001962:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001964:	3b01      	subs	r3, #1
 8001966:	e7ab      	b.n	80018c0 <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800196c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800196e:	3301      	adds	r3, #1
 8001970:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8001972:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001974:	3b01      	subs	r3, #1
 8001976:	e7c4      	b.n	8001902 <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001978:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 800197a:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800197c:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 800197e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001980:	3201      	adds	r2, #1
 8001982:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8001984:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001986:	3a01      	subs	r2, #1
 8001988:	b292      	uxth	r2, r2
 800198a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800198c:	e7da      	b.n	8001944 <HAL_SPI_TransmitReceive+0x214>
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	ffffefff 	.word	0xffffefff

08001994 <HAL_SPI_GetState>:
  return hspi->State;
 8001994:	305d      	adds	r0, #93	; 0x5d
 8001996:	7800      	ldrb	r0, [r0, #0]
 8001998:	b2c0      	uxtb	r0, r0
}
 800199a:	4770      	bx	lr

0800199c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800199c:	2201      	movs	r2, #1
 800199e:	6a03      	ldr	r3, [r0, #32]
{
 80019a0:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019a2:	4393      	bics	r3, r2
 80019a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019aa:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80019ac:	3272      	adds	r2, #114	; 0x72
 80019ae:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019b0:	680a      	ldr	r2, [r1, #0]
 80019b2:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80019b4:	2202      	movs	r2, #2
 80019b6:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80019b8:	688a      	ldr	r2, [r1, #8]
 80019ba:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <TIM_OC1_SetConfig+0x74>)
 80019be:	4290      	cmp	r0, r2
 80019c0:	d008      	beq.n	80019d4 <TIM_OC1_SetConfig+0x38>
 80019c2:	4e14      	ldr	r6, [pc, #80]	; (8001a14 <TIM_OC1_SetConfig+0x78>)
 80019c4:	42b0      	cmp	r0, r6
 80019c6:	d005      	beq.n	80019d4 <TIM_OC1_SetConfig+0x38>
 80019c8:	4e13      	ldr	r6, [pc, #76]	; (8001a18 <TIM_OC1_SetConfig+0x7c>)
 80019ca:	42b0      	cmp	r0, r6
 80019cc:	d002      	beq.n	80019d4 <TIM_OC1_SetConfig+0x38>
 80019ce:	4e13      	ldr	r6, [pc, #76]	; (8001a1c <TIM_OC1_SetConfig+0x80>)
 80019d0:	42b0      	cmp	r0, r6
 80019d2:	d116      	bne.n	8001a02 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80019d4:	2608      	movs	r6, #8
 80019d6:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80019d8:	68ce      	ldr	r6, [r1, #12]
 80019da:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80019dc:	2604      	movs	r6, #4
 80019de:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019e0:	4290      	cmp	r0, r2
 80019e2:	d008      	beq.n	80019f6 <TIM_OC1_SetConfig+0x5a>
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <TIM_OC1_SetConfig+0x78>)
 80019e6:	4290      	cmp	r0, r2
 80019e8:	d005      	beq.n	80019f6 <TIM_OC1_SetConfig+0x5a>
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <TIM_OC1_SetConfig+0x7c>)
 80019ec:	4290      	cmp	r0, r2
 80019ee:	d002      	beq.n	80019f6 <TIM_OC1_SetConfig+0x5a>
 80019f0:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <TIM_OC1_SetConfig+0x80>)
 80019f2:	4290      	cmp	r0, r2
 80019f4:	d105      	bne.n	8001a02 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80019f8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80019fa:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80019fc:	694c      	ldr	r4, [r1, #20]
 80019fe:	4334      	orrs	r4, r6
 8001a00:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a02:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001a04:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a06:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001a08:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a0a:	6203      	str	r3, [r0, #32]
}
 8001a0c:	bd70      	pop	{r4, r5, r6, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	40012c00 	.word	0x40012c00
 8001a14:	40014000 	.word	0x40014000
 8001a18:	40014400 	.word	0x40014400
 8001a1c:	40014800 	.word	0x40014800
 8001a20:	fffffcff 	.word	0xfffffcff

08001a24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a26:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a28:	6a03      	ldr	r3, [r0, #32]
 8001a2a:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <TIM_OC3_SetConfig+0x64>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001a30:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001a32:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001a34:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a36:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a38:	680d      	ldr	r5, [r1, #0]
 8001a3a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a3c:	4d13      	ldr	r5, [pc, #76]	; (8001a8c <TIM_OC3_SetConfig+0x68>)
 8001a3e:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a40:	688d      	ldr	r5, [r1, #8]
 8001a42:	022d      	lsls	r5, r5, #8
 8001a44:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a46:	4d12      	ldr	r5, [pc, #72]	; (8001a90 <TIM_OC3_SetConfig+0x6c>)
 8001a48:	42a8      	cmp	r0, r5
 8001a4a:	d10e      	bne.n	8001a6a <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a4c:	4d11      	ldr	r5, [pc, #68]	; (8001a94 <TIM_OC3_SetConfig+0x70>)
 8001a4e:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a50:	68cb      	ldr	r3, [r1, #12]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a56:	4d10      	ldr	r5, [pc, #64]	; (8001a98 <TIM_OC3_SetConfig+0x74>)
 8001a58:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a5a:	4d10      	ldr	r5, [pc, #64]	; (8001a9c <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a5c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a5e:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a60:	698a      	ldr	r2, [r1, #24]
 8001a62:	4332      	orrs	r2, r6
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	432a      	orrs	r2, r5
 8001a68:	e008      	b.n	8001a7c <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a6a:	4d0d      	ldr	r5, [pc, #52]	; (8001aa0 <TIM_OC3_SetConfig+0x7c>)
 8001a6c:	42a8      	cmp	r0, r5
 8001a6e:	d0f4      	beq.n	8001a5a <TIM_OC3_SetConfig+0x36>
 8001a70:	4d0c      	ldr	r5, [pc, #48]	; (8001aa4 <TIM_OC3_SetConfig+0x80>)
 8001a72:	42a8      	cmp	r0, r5
 8001a74:	d0f1      	beq.n	8001a5a <TIM_OC3_SetConfig+0x36>
 8001a76:	4d0c      	ldr	r5, [pc, #48]	; (8001aa8 <TIM_OC3_SetConfig+0x84>)
 8001a78:	42a8      	cmp	r0, r5
 8001a7a:	d0ee      	beq.n	8001a5a <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a7c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001a7e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001a80:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001a82:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a84:	6203      	str	r3, [r0, #32]
}
 8001a86:	bd70      	pop	{r4, r5, r6, pc}
 8001a88:	fffffeff 	.word	0xfffffeff
 8001a8c:	fffffdff 	.word	0xfffffdff
 8001a90:	40012c00 	.word	0x40012c00
 8001a94:	fffff7ff 	.word	0xfffff7ff
 8001a98:	fffffbff 	.word	0xfffffbff
 8001a9c:	ffffcfff 	.word	0xffffcfff
 8001aa0:	40014000 	.word	0x40014000
 8001aa4:	40014400 	.word	0x40014400
 8001aa8:	40014800 	.word	0x40014800

08001aac <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001aac:	6a03      	ldr	r3, [r0, #32]
 8001aae:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <TIM_OC4_SetConfig+0x54>)
{
 8001ab0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ab6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ab8:	4c12      	ldr	r4, [pc, #72]	; (8001b04 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8001aba:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001abc:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001abe:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ac0:	680c      	ldr	r4, [r1, #0]
 8001ac2:	0224      	lsls	r4, r4, #8
 8001ac4:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ac6:	4c10      	ldr	r4, [pc, #64]	; (8001b08 <TIM_OC4_SetConfig+0x5c>)
 8001ac8:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001aca:	688c      	ldr	r4, [r1, #8]
 8001acc:	0324      	lsls	r4, r4, #12
 8001ace:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ad0:	4c0e      	ldr	r4, [pc, #56]	; (8001b0c <TIM_OC4_SetConfig+0x60>)
 8001ad2:	42a0      	cmp	r0, r4
 8001ad4:	d008      	beq.n	8001ae8 <TIM_OC4_SetConfig+0x3c>
 8001ad6:	4c0e      	ldr	r4, [pc, #56]	; (8001b10 <TIM_OC4_SetConfig+0x64>)
 8001ad8:	42a0      	cmp	r0, r4
 8001ada:	d005      	beq.n	8001ae8 <TIM_OC4_SetConfig+0x3c>
 8001adc:	4c0d      	ldr	r4, [pc, #52]	; (8001b14 <TIM_OC4_SetConfig+0x68>)
 8001ade:	42a0      	cmp	r0, r4
 8001ae0:	d002      	beq.n	8001ae8 <TIM_OC4_SetConfig+0x3c>
 8001ae2:	4c0d      	ldr	r4, [pc, #52]	; (8001b18 <TIM_OC4_SetConfig+0x6c>)
 8001ae4:	42a0      	cmp	r0, r4
 8001ae6:	d104      	bne.n	8001af2 <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ae8:	4c0c      	ldr	r4, [pc, #48]	; (8001b1c <TIM_OC4_SetConfig+0x70>)
 8001aea:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001aec:	694c      	ldr	r4, [r1, #20]
 8001aee:	01a4      	lsls	r4, r4, #6
 8001af0:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001af2:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001af4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001af6:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001af8:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001afa:	6202      	str	r2, [r0, #32]
}
 8001afc:	bd30      	pop	{r4, r5, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	ffffefff 	.word	0xffffefff
 8001b04:	ffff8cff 	.word	0xffff8cff
 8001b08:	ffffdfff 	.word	0xffffdfff
 8001b0c:	40012c00 	.word	0x40012c00
 8001b10:	40014000 	.word	0x40014000
 8001b14:	40014400 	.word	0x40014400
 8001b18:	40014800 	.word	0x40014800
 8001b1c:	ffffbfff 	.word	0xffffbfff

08001b20 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b20:	2201      	movs	r2, #1
 8001b22:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b24:	2007      	movs	r0, #7
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b26:	68d9      	ldr	r1, [r3, #12]
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b2c:	6899      	ldr	r1, [r3, #8]
 8001b2e:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b30:	2906      	cmp	r1, #6
 8001b32:	d002      	beq.n	8001b3a <HAL_TIM_Base_Start_IT+0x1a>
    __HAL_TIM_ENABLE(htim);
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001b40:	2101      	movs	r1, #1
 8001b42:	6803      	ldr	r3, [r0, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	438a      	bics	r2, r1
 8001b48:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8001b4a:	6a18      	ldr	r0, [r3, #32]
 8001b4c:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <HAL_TIM_Base_Stop_IT+0x24>)
 8001b4e:	4210      	tst	r0, r2
 8001b50:	d106      	bne.n	8001b60 <HAL_TIM_Base_Stop_IT+0x20>
 8001b52:	6a18      	ldr	r0, [r3, #32]
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_TIM_Base_Stop_IT+0x28>)
 8001b56:	4210      	tst	r0, r2
 8001b58:	d102      	bne.n	8001b60 <HAL_TIM_Base_Stop_IT+0x20>
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	2000      	movs	r0, #0
 8001b62:	4770      	bx	lr
 8001b64:	00001111 	.word	0x00001111
 8001b68:	00000444 	.word	0x00000444

08001b6c <HAL_TIM_OC_MspInit>:
 8001b6c:	4770      	bx	lr
	...

08001b70 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b70:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <TIM_Base_SetConfig+0x84>)
{
 8001b72:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001b74:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b76:	4290      	cmp	r0, r2
 8001b78:	d006      	beq.n	8001b88 <TIM_Base_SetConfig+0x18>
 8001b7a:	2480      	movs	r4, #128	; 0x80
 8001b7c:	05e4      	lsls	r4, r4, #23
 8001b7e:	42a0      	cmp	r0, r4
 8001b80:	d002      	beq.n	8001b88 <TIM_Base_SetConfig+0x18>
 8001b82:	4c1d      	ldr	r4, [pc, #116]	; (8001bf8 <TIM_Base_SetConfig+0x88>)
 8001b84:	42a0      	cmp	r0, r4
 8001b86:	d10c      	bne.n	8001ba2 <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b88:	2470      	movs	r4, #112	; 0x70
 8001b8a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001b8c:	684c      	ldr	r4, [r1, #4]
 8001b8e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b90:	4290      	cmp	r0, r2
 8001b92:	d012      	beq.n	8001bba <TIM_Base_SetConfig+0x4a>
 8001b94:	2480      	movs	r4, #128	; 0x80
 8001b96:	05e4      	lsls	r4, r4, #23
 8001b98:	42a0      	cmp	r0, r4
 8001b9a:	d00e      	beq.n	8001bba <TIM_Base_SetConfig+0x4a>
 8001b9c:	4c16      	ldr	r4, [pc, #88]	; (8001bf8 <TIM_Base_SetConfig+0x88>)
 8001b9e:	42a0      	cmp	r0, r4
 8001ba0:	d00b      	beq.n	8001bba <TIM_Base_SetConfig+0x4a>
 8001ba2:	4c16      	ldr	r4, [pc, #88]	; (8001bfc <TIM_Base_SetConfig+0x8c>)
 8001ba4:	42a0      	cmp	r0, r4
 8001ba6:	d008      	beq.n	8001bba <TIM_Base_SetConfig+0x4a>
 8001ba8:	4c15      	ldr	r4, [pc, #84]	; (8001c00 <TIM_Base_SetConfig+0x90>)
 8001baa:	42a0      	cmp	r0, r4
 8001bac:	d005      	beq.n	8001bba <TIM_Base_SetConfig+0x4a>
 8001bae:	4c15      	ldr	r4, [pc, #84]	; (8001c04 <TIM_Base_SetConfig+0x94>)
 8001bb0:	42a0      	cmp	r0, r4
 8001bb2:	d002      	beq.n	8001bba <TIM_Base_SetConfig+0x4a>
 8001bb4:	4c14      	ldr	r4, [pc, #80]	; (8001c08 <TIM_Base_SetConfig+0x98>)
 8001bb6:	42a0      	cmp	r0, r4
 8001bb8:	d103      	bne.n	8001bc2 <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bba:	4c14      	ldr	r4, [pc, #80]	; (8001c0c <TIM_Base_SetConfig+0x9c>)
 8001bbc:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bbe:	68cc      	ldr	r4, [r1, #12]
 8001bc0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc2:	2480      	movs	r4, #128	; 0x80
 8001bc4:	43a3      	bics	r3, r4
 8001bc6:	694c      	ldr	r4, [r1, #20]
 8001bc8:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8001bca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bcc:	688b      	ldr	r3, [r1, #8]
 8001bce:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001bd0:	680b      	ldr	r3, [r1, #0]
 8001bd2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bd4:	4290      	cmp	r0, r2
 8001bd6:	d008      	beq.n	8001bea <TIM_Base_SetConfig+0x7a>
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <TIM_Base_SetConfig+0x90>)
 8001bda:	4298      	cmp	r0, r3
 8001bdc:	d005      	beq.n	8001bea <TIM_Base_SetConfig+0x7a>
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <TIM_Base_SetConfig+0x94>)
 8001be0:	4298      	cmp	r0, r3
 8001be2:	d002      	beq.n	8001bea <TIM_Base_SetConfig+0x7a>
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <TIM_Base_SetConfig+0x98>)
 8001be6:	4298      	cmp	r0, r3
 8001be8:	d101      	bne.n	8001bee <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 8001bea:	690b      	ldr	r3, [r1, #16]
 8001bec:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	6143      	str	r3, [r0, #20]
}
 8001bf2:	bd10      	pop	{r4, pc}
 8001bf4:	40012c00 	.word	0x40012c00
 8001bf8:	40000400 	.word	0x40000400
 8001bfc:	40002000 	.word	0x40002000
 8001c00:	40014000 	.word	0x40014000
 8001c04:	40014400 	.word	0x40014400
 8001c08:	40014800 	.word	0x40014800
 8001c0c:	fffffcff 	.word	0xfffffcff

08001c10 <HAL_TIM_Base_Init>:
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001c14:	2001      	movs	r0, #1
  if (htim == NULL)
 8001c16:	2c00      	cmp	r4, #0
 8001c18:	d014      	beq.n	8001c44 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001c1a:	0025      	movs	r5, r4
 8001c1c:	353d      	adds	r5, #61	; 0x3d
 8001c1e:	782b      	ldrb	r3, [r5, #0]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d105      	bne.n	8001c32 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001c26:	0022      	movs	r2, r4
 8001c28:	323c      	adds	r2, #60	; 0x3c
 8001c2a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8001c2c:	0020      	movs	r0, r4
 8001c2e:	f003 fc0b 	bl	8005448 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c32:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c34:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001c36:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c38:	1d21      	adds	r1, r4, #4
 8001c3a:	f7ff ff99 	bl	8001b70 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001c3e:	2301      	movs	r3, #1
  return HAL_OK;
 8001c40:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c42:	702b      	strb	r3, [r5, #0]
}
 8001c44:	bd70      	pop	{r4, r5, r6, pc}

08001c46 <HAL_TIM_OC_Init>:
{
 8001c46:	b570      	push	{r4, r5, r6, lr}
 8001c48:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001c4a:	2001      	movs	r0, #1
  if (htim == NULL)
 8001c4c:	2c00      	cmp	r4, #0
 8001c4e:	d014      	beq.n	8001c7a <HAL_TIM_OC_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001c50:	0025      	movs	r5, r4
 8001c52:	353d      	adds	r5, #61	; 0x3d
 8001c54:	782b      	ldrb	r3, [r5, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_TIM_OC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001c5c:	0022      	movs	r2, r4
 8001c5e:	323c      	adds	r2, #60	; 0x3c
 8001c60:	7013      	strb	r3, [r2, #0]
    HAL_TIM_OC_MspInit(htim);
 8001c62:	0020      	movs	r0, r4
 8001c64:	f7ff ff82 	bl	8001b6c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001c6a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001c6e:	1d21      	adds	r1, r4, #4
 8001c70:	f7ff ff7e 	bl	8001b70 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	2301      	movs	r3, #1
  return HAL_OK;
 8001c76:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c78:	702b      	strb	r3, [r5, #0]
}
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}

08001c7c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c7c:	2210      	movs	r2, #16
 8001c7e:	6a03      	ldr	r3, [r0, #32]
{
 8001c80:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c82:	4393      	bics	r3, r2
 8001c84:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001c86:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c88:	4d16      	ldr	r5, [pc, #88]	; (8001ce4 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8001c8a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001c8c:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c8e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c90:	680d      	ldr	r5, [r1, #0]
 8001c92:	022d      	lsls	r5, r5, #8
 8001c94:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8001c96:	2520      	movs	r5, #32
 8001c98:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c9a:	688d      	ldr	r5, [r1, #8]
 8001c9c:	012d      	lsls	r5, r5, #4
 8001c9e:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ca0:	4d11      	ldr	r5, [pc, #68]	; (8001ce8 <TIM_OC2_SetConfig+0x6c>)
 8001ca2:	42a8      	cmp	r0, r5
 8001ca4:	d10f      	bne.n	8001cc6 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ca6:	2580      	movs	r5, #128	; 0x80
 8001ca8:	43aa      	bics	r2, r5
 8001caa:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001cac:	68ca      	ldr	r2, [r1, #12]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001cb2:	2540      	movs	r5, #64	; 0x40
 8001cb4:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cb6:	4d0d      	ldr	r5, [pc, #52]	; (8001cec <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cb8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cba:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cbc:	698b      	ldr	r3, [r1, #24]
 8001cbe:	4333      	orrs	r3, r6
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	432b      	orrs	r3, r5
 8001cc4:	e008      	b.n	8001cd8 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cc6:	4d0a      	ldr	r5, [pc, #40]	; (8001cf0 <TIM_OC2_SetConfig+0x74>)
 8001cc8:	42a8      	cmp	r0, r5
 8001cca:	d0f4      	beq.n	8001cb6 <TIM_OC2_SetConfig+0x3a>
 8001ccc:	4d09      	ldr	r5, [pc, #36]	; (8001cf4 <TIM_OC2_SetConfig+0x78>)
 8001cce:	42a8      	cmp	r0, r5
 8001cd0:	d0f1      	beq.n	8001cb6 <TIM_OC2_SetConfig+0x3a>
 8001cd2:	4d09      	ldr	r5, [pc, #36]	; (8001cf8 <TIM_OC2_SetConfig+0x7c>)
 8001cd4:	42a8      	cmp	r0, r5
 8001cd6:	d0ee      	beq.n	8001cb6 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8001cd8:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001cda:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001cdc:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001cde:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001ce0:	6202      	str	r2, [r0, #32]
}
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	ffff8cff 	.word	0xffff8cff
 8001ce8:	40012c00 	.word	0x40012c00
 8001cec:	fffff3ff 	.word	0xfffff3ff
 8001cf0:	40014000 	.word	0x40014000
 8001cf4:	40014400 	.word	0x40014400
 8001cf8:	40014800 	.word	0x40014800

08001cfc <HAL_TIM_OC_ConfigChannel>:
{
 8001cfc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001cfe:	0004      	movs	r4, r0
 8001d00:	2602      	movs	r6, #2
 8001d02:	343c      	adds	r4, #60	; 0x3c
 8001d04:	7825      	ldrb	r5, [r4, #0]
{
 8001d06:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001d08:	0030      	movs	r0, r6
 8001d0a:	2d01      	cmp	r5, #1
 8001d0c:	d017      	beq.n	8001d3e <HAL_TIM_OC_ConfigChannel+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0e:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8001d10:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d12:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8001d14:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d16:	702e      	strb	r6, [r5, #0]
  switch (Channel)
 8001d18:	2a0c      	cmp	r2, #12
 8001d1a:	d80c      	bhi.n	8001d36 <HAL_TIM_OC_ConfigChannel+0x3a>
 8001d1c:	0010      	movs	r0, r2
 8001d1e:	f7fe fa05 	bl	800012c <__gnu_thumb1_case_uqi>
 8001d22:	0a07      	.short	0x0a07
 8001d24:	0a0f0a0a 	.word	0x0a0f0a0a
 8001d28:	0a130a0a 	.word	0x0a130a0a
 8001d2c:	0a0a      	.short	0x0a0a
 8001d2e:	17          	.byte	0x17
 8001d2f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	f7ff fe33 	bl	800199c <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001d36:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d38:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d3a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001d3c:	7020      	strb	r0, [r4, #0]
}
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	f7ff ff9b 	bl	8001c7c <TIM_OC2_SetConfig>
      break;
 8001d46:	e7f6      	b.n	8001d36 <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	f7ff fe6b 	bl	8001a24 <TIM_OC3_SetConfig>
      break;
 8001d4e:	e7f2      	b.n	8001d36 <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	f7ff feab 	bl	8001aac <TIM_OC4_SetConfig>
      break;
 8001d56:	e7ee      	b.n	8001d36 <HAL_TIM_OC_ConfigChannel+0x3a>

08001d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d58:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d5a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d5c:	4d03      	ldr	r5, [pc, #12]	; (8001d6c <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d62:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d64:	4313      	orrs	r3, r2
 8001d66:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d68:	6083      	str	r3, [r0, #8]
}
 8001d6a:	bd30      	pop	{r4, r5, pc}
 8001d6c:	ffff00ff 	.word	0xffff00ff

08001d70 <HAL_TIM_ConfigClockSource>:
{
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001d72:	0005      	movs	r5, r0
 8001d74:	2302      	movs	r3, #2
 8001d76:	353c      	adds	r5, #60	; 0x3c
 8001d78:	782a      	ldrb	r2, [r5, #0]
{
 8001d7a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	2a01      	cmp	r2, #1
 8001d80:	d016      	beq.n	8001db0 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d82:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8001d84:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8001d86:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d88:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 8001d8a:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001d8e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d90:	4a40      	ldr	r2, [pc, #256]	; (8001e94 <HAL_TIM_ConfigClockSource+0x124>)
 8001d92:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001d94:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d96:	680b      	ldr	r3, [r1, #0]
 8001d98:	2b40      	cmp	r3, #64	; 0x40
 8001d9a:	d065      	beq.n	8001e68 <HAL_TIM_ConfigClockSource+0xf8>
 8001d9c:	d814      	bhi.n	8001dc8 <HAL_TIM_ConfigClockSource+0x58>
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d00b      	beq.n	8001dba <HAL_TIM_ConfigClockSource+0x4a>
 8001da2:	d806      	bhi.n	8001db2 <HAL_TIM_ConfigClockSource+0x42>
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001daa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001dac:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8001dae:	7028      	strb	r0, [r5, #0]
}
 8001db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d001      	beq.n	8001dba <HAL_TIM_ConfigClockSource+0x4a>
 8001db6:	2b30      	cmp	r3, #48	; 0x30
 8001db8:	d1f6      	bne.n	8001da8 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dba:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001dbc:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dbe:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dc0:	3a69      	subs	r2, #105	; 0x69
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	e01a      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8001dc8:	2b60      	cmp	r3, #96	; 0x60
 8001dca:	d035      	beq.n	8001e38 <HAL_TIM_ConfigClockSource+0xc8>
 8001dcc:	d819      	bhi.n	8001e02 <HAL_TIM_ConfigClockSource+0x92>
 8001dce:	2b50      	cmp	r3, #80	; 0x50
 8001dd0:	d1ea      	bne.n	8001da8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dd2:	684a      	ldr	r2, [r1, #4]
 8001dd4:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001dd6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dd8:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dda:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ddc:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dde:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001de0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001de2:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001de4:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001de6:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001de8:	240a      	movs	r4, #10
 8001dea:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001dec:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001dee:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001df0:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001df2:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001df4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001df6:	4393      	bics	r3, r2
 8001df8:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001dfa:	2357      	movs	r3, #87	; 0x57
 8001dfc:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8001dfe:	6083      	str	r3, [r0, #8]
 8001e00:	e7d2      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001e02:	2b70      	cmp	r3, #112	; 0x70
 8001e04:	d00d      	beq.n	8001e22 <HAL_TIM_ConfigClockSource+0xb2>
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	0192      	lsls	r2, r2, #6
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d1cc      	bne.n	8001da8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001e0e:	68cb      	ldr	r3, [r1, #12]
 8001e10:	684a      	ldr	r2, [r1, #4]
 8001e12:	6889      	ldr	r1, [r1, #8]
 8001e14:	f7ff ffa0 	bl	8001d58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	6822      	ldr	r2, [r4, #0]
 8001e1c:	01db      	lsls	r3, r3, #7
 8001e1e:	6891      	ldr	r1, [r2, #8]
 8001e20:	e007      	b.n	8001e32 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8001e22:	68cb      	ldr	r3, [r1, #12]
 8001e24:	684a      	ldr	r2, [r1, #4]
 8001e26:	6889      	ldr	r1, [r1, #8]
 8001e28:	f7ff ff96 	bl	8001d58 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e2c:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8001e2e:	6822      	ldr	r2, [r4, #0]
 8001e30:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e32:	430b      	orrs	r3, r1
 8001e34:	6093      	str	r3, [r2, #8]
      break;
 8001e36:	e7b7      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e38:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e3a:	684b      	ldr	r3, [r1, #4]
 8001e3c:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e3e:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e40:	4f15      	ldr	r7, [pc, #84]	; (8001e98 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e42:	43a1      	bics	r1, r4
 8001e44:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e46:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e48:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e4a:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e4c:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e4e:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001e50:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001e52:	6182      	str	r2, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e54:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e56:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8001e5c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001e5e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e60:	4393      	bics	r3, r2
 8001e62:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e64:	2367      	movs	r3, #103	; 0x67
 8001e66:	e7c9      	b.n	8001dfc <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e68:	684a      	ldr	r2, [r1, #4]
 8001e6a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e6c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e6e:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e70:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e72:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e74:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e76:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e78:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e7a:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e7c:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e7e:	240a      	movs	r4, #10
 8001e80:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001e82:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001e84:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e86:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e88:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001e8a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e90:	2347      	movs	r3, #71	; 0x47
 8001e92:	e7b3      	b.n	8001dfc <HAL_TIM_ConfigClockSource+0x8c>
 8001e94:	ffff0088 	.word	0xffff0088
 8001e98:	ffff0fff 	.word	0xffff0fff

08001e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e9c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e9e:	0004      	movs	r4, r0
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	343c      	adds	r4, #60	; 0x3c
 8001ea4:	7825      	ldrb	r5, [r4, #0]
{
 8001ea6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001ea8:	0010      	movs	r0, r2
 8001eaa:	2d01      	cmp	r5, #1
 8001eac:	d022      	beq.n	8001ef4 <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eae:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001eb0:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 8001eb2:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(htim);
 8001eb4:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb6:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8001eb8:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001eba:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8001ebc:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001ebe:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ec0:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ec2:	680e      	ldr	r6, [r1, #0]
 8001ec4:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ec6:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8001eca:	4283      	cmp	r3, r0
 8001ecc:	d009      	beq.n	8001ee2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8001ece:	2080      	movs	r0, #128	; 0x80
 8001ed0:	05c0      	lsls	r0, r0, #23
 8001ed2:	4283      	cmp	r3, r0
 8001ed4:	d005      	beq.n	8001ee2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8001ed6:	4809      	ldr	r0, [pc, #36]	; (8001efc <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001ed8:	4283      	cmp	r3, r0
 8001eda:	d002      	beq.n	8001ee2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8001edc:	4808      	ldr	r0, [pc, #32]	; (8001f00 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001ede:	4283      	cmp	r3, r0
 8001ee0:	d104      	bne.n	8001eec <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ee2:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ee4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ee6:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ee8:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001eec:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001eee:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ef0:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001ef2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001ef4:	bd70      	pop	{r4, r5, r6, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40014000 	.word	0x40014000

08001f04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001f04:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f06:	0004      	movs	r4, r0
 8001f08:	343c      	adds	r4, #60	; 0x3c
 8001f0a:	7823      	ldrb	r3, [r4, #0]
{
 8001f0c:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8001f0e:	2002      	movs	r0, #2
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d01c      	beq.n	8001f4e <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001f14:	68c8      	ldr	r0, [r1, #12]
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001f18:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001f1a:	4003      	ands	r3, r0
 8001f1c:	6888      	ldr	r0, [r1, #8]
 8001f1e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001f20:	480c      	ldr	r0, [pc, #48]	; (8001f54 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8001f22:	4003      	ands	r3, r0
 8001f24:	6848      	ldr	r0, [r1, #4]
 8001f26:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8001f2a:	4003      	ands	r3, r0
 8001f2c:	6808      	ldr	r0, [r1, #0]
 8001f2e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001f30:	480a      	ldr	r0, [pc, #40]	; (8001f5c <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8001f32:	4003      	ands	r3, r0
 8001f34:	6908      	ldr	r0, [r1, #16]
 8001f36:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001f38:	4809      	ldr	r0, [pc, #36]	; (8001f60 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8001f3a:	4003      	ands	r3, r0
 8001f3c:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001f3e:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001f40:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001f42:	4808      	ldr	r0, [pc, #32]	; (8001f64 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8001f44:	4003      	ands	r3, r0

  __HAL_UNLOCK(htim);
 8001f46:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001f48:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8001f4a:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8001f4c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001f4e:	bd10      	pop	{r4, pc}
 8001f50:	fffffcff 	.word	0xfffffcff
 8001f54:	fffffbff 	.word	0xfffffbff
 8001f58:	fffff7ff 	.word	0xfffff7ff
 8001f5c:	ffffefff 	.word	0xffffefff
 8001f60:	ffffdfff 	.word	0xffffdfff
 8001f64:	ffffbfff 	.word	0xffffbfff

08001f68 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f68:	6803      	ldr	r3, [r0, #0]
 8001f6a:	4907      	ldr	r1, [pc, #28]	; (8001f88 <UART_EndRxTransfer+0x20>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	400a      	ands	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	3123      	adds	r1, #35	; 0x23
 8001f76:	31ff      	adds	r1, #255	; 0xff
 8001f78:	438a      	bics	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001f84:	4770      	bx	lr
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	fffffedf 	.word	0xfffffedf

08001f8c <HAL_UART_Receive_IT>:
{
 8001f8c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f8e:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8001f90:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001f92:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f94:	2c20      	cmp	r4, #32
 8001f96:	d141      	bne.n	800201c <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8001f98:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001f9a:	2900      	cmp	r1, #0
 8001f9c:	d03e      	beq.n	800201c <HAL_UART_Receive_IT+0x90>
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d03c      	beq.n	800201c <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa2:	2580      	movs	r5, #128	; 0x80
 8001fa4:	689c      	ldr	r4, [r3, #8]
 8001fa6:	016d      	lsls	r5, r5, #5
 8001fa8:	42ac      	cmp	r4, r5
 8001faa:	d104      	bne.n	8001fb6 <HAL_UART_Receive_IT+0x2a>
 8001fac:	691d      	ldr	r5, [r3, #16]
 8001fae:	2d00      	cmp	r5, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fb2:	4201      	tst	r1, r0
 8001fb4:	d132      	bne.n	800201c <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8001fb6:	001d      	movs	r5, r3
 8001fb8:	3570      	adds	r5, #112	; 0x70
 8001fba:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 8001fbc:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001fbe:	2e01      	cmp	r6, #1
 8001fc0:	d02c      	beq.n	800201c <HAL_UART_Receive_IT+0x90>
 8001fc2:	3801      	subs	r0, #1
 8001fc4:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8001fc6:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001fc8:	0019      	movs	r1, r3
 8001fca:	3158      	adds	r1, #88	; 0x58
 8001fcc:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8001fce:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8001fd0:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001fd8:	0140      	lsls	r0, r0, #5
 8001fda:	325c      	adds	r2, #92	; 0x5c
 8001fdc:	4284      	cmp	r4, r0
 8001fde:	d120      	bne.n	8002022 <HAL_UART_Receive_IT+0x96>
 8001fe0:	6919      	ldr	r1, [r3, #16]
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d11b      	bne.n	800201e <HAL_UART_Receive_IT+0x92>
 8001fe6:	4913      	ldr	r1, [pc, #76]	; (8002034 <HAL_UART_Receive_IT+0xa8>)
 8001fe8:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fea:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fec:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ff0:	3222      	adds	r2, #34	; 0x22
 8001ff2:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	6890      	ldr	r0, [r2, #8]
 8001ff8:	4301      	orrs	r1, r0
 8001ffa:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0149      	lsls	r1, r1, #5
 8002000:	428c      	cmp	r4, r1
 8002002:	d115      	bne.n	8002030 <HAL_UART_Receive_IT+0xa4>
 8002004:	6919      	ldr	r1, [r3, #16]
 8002006:	2900      	cmp	r1, #0
 8002008:	d112      	bne.n	8002030 <HAL_UART_Receive_IT+0xa4>
      huart->RxISR = UART_RxISR_16BIT;
 800200a:	490b      	ldr	r1, [pc, #44]	; (8002038 <HAL_UART_Receive_IT+0xac>)
      huart->RxISR = UART_RxISR_8BIT;
 800200c:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800200e:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 8002010:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002012:	6811      	ldr	r1, [r2, #0]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 8002018:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 800201e:	21ff      	movs	r1, #255	; 0xff
 8002020:	e7e2      	b.n	8001fe8 <HAL_UART_Receive_IT+0x5c>
 8002022:	2c00      	cmp	r4, #0
 8002024:	d1e0      	bne.n	8001fe8 <HAL_UART_Receive_IT+0x5c>
 8002026:	6919      	ldr	r1, [r3, #16]
 8002028:	2900      	cmp	r1, #0
 800202a:	d0f8      	beq.n	800201e <HAL_UART_Receive_IT+0x92>
 800202c:	217f      	movs	r1, #127	; 0x7f
 800202e:	e7db      	b.n	8001fe8 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 8002030:	4902      	ldr	r1, [pc, #8]	; (800203c <HAL_UART_Receive_IT+0xb0>)
 8002032:	e7eb      	b.n	800200c <HAL_UART_Receive_IT+0x80>
 8002034:	000001ff 	.word	0x000001ff
 8002038:	080020a5 	.word	0x080020a5
 800203c:	08002045 	.word	0x08002045

08002040 <HAL_UART_TxCpltCallback>:
 8002040:	4770      	bx	lr
	...

08002044 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002044:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8002046:	b510      	push	{r4, lr}
 8002048:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800204a:	2a22      	cmp	r2, #34	; 0x22
 800204c:	d123      	bne.n	8002096 <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 800204e:	0002      	movs	r2, r0
 8002050:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002052:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002054:	8812      	ldrh	r2, [r2, #0]
 8002056:	4013      	ands	r3, r2
 8002058:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800205a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800205c:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800205e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002060:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8002062:	3301      	adds	r3, #1
 8002064:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002066:	8813      	ldrh	r3, [r2, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	b29b      	uxth	r3, r3
 800206c:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800206e:	8813      	ldrh	r3, [r2, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10e      	bne.n	8002094 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002076:	6802      	ldr	r2, [r0, #0]
 8002078:	4c09      	ldr	r4, [pc, #36]	; (80020a0 <UART_RxISR_8BIT+0x5c>)
 800207a:	6811      	ldr	r1, [r2, #0]
 800207c:	4021      	ands	r1, r4
 800207e:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002080:	6891      	ldr	r1, [r2, #8]
 8002082:	3423      	adds	r4, #35	; 0x23
 8002084:	34ff      	adds	r4, #255	; 0xff
 8002086:	43a1      	bics	r1, r4
 8002088:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800208a:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800208c:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 800208e:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002090:	f003 f8ea 	bl	8005268 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002094:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002096:	2208      	movs	r2, #8
 8002098:	6999      	ldr	r1, [r3, #24]
 800209a:	430a      	orrs	r2, r1
 800209c:	619a      	str	r2, [r3, #24]
}
 800209e:	e7f9      	b.n	8002094 <UART_RxISR_8BIT+0x50>
 80020a0:	fffffedf 	.word	0xfffffedf

080020a4 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020a4:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 80020a6:	b510      	push	{r4, lr}
 80020a8:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020aa:	2a22      	cmp	r2, #34	; 0x22
 80020ac:	d121      	bne.n	80020f2 <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 80020ae:	0001      	movs	r1, r0
 80020b0:	315c      	adds	r1, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80020b2:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80020b4:	8809      	ldrh	r1, [r1, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80020b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 80020b8:	4021      	ands	r1, r4
 80020ba:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80020bc:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 80020be:	3202      	adds	r2, #2
 80020c0:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80020c2:	315a      	adds	r1, #90	; 0x5a
 80020c4:	880a      	ldrh	r2, [r1, #0]
 80020c6:	3a01      	subs	r2, #1
 80020c8:	b292      	uxth	r2, r2
 80020ca:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 80020cc:	880a      	ldrh	r2, [r1, #0]
 80020ce:	b292      	uxth	r2, r2
 80020d0:	2a00      	cmp	r2, #0
 80020d2:	d10d      	bne.n	80020f0 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020d4:	6819      	ldr	r1, [r3, #0]
 80020d6:	4c09      	ldr	r4, [pc, #36]	; (80020fc <UART_RxISR_16BIT+0x58>)
 80020d8:	4021      	ands	r1, r4
 80020da:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020dc:	6899      	ldr	r1, [r3, #8]
 80020de:	3423      	adds	r4, #35	; 0x23
 80020e0:	34ff      	adds	r4, #255	; 0xff
 80020e2:	43a1      	bics	r1, r4
 80020e4:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80020e6:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80020e8:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 80020ea:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80020ec:	f003 f8bc 	bl	8005268 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80020f0:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80020f2:	2208      	movs	r2, #8
 80020f4:	6999      	ldr	r1, [r3, #24]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	e7f9      	b.n	80020f0 <UART_RxISR_16BIT+0x4c>
 80020fc:	fffffedf 	.word	0xfffffedf

08002100 <HAL_UART_ErrorCallback>:
 8002100:	4770      	bx	lr
	...

08002104 <HAL_UART_IRQHandler>:
{
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002106:	6803      	ldr	r3, [r0, #0]
{
 8002108:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800210a:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800210c:	4850      	ldr	r0, [pc, #320]	; (8002250 <HAL_UART_IRQHandler+0x14c>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800210e:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002110:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8002112:	4202      	tst	r2, r0
 8002114:	d10b      	bne.n	800212e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002116:	2020      	movs	r0, #32
 8002118:	4202      	tst	r2, r0
 800211a:	d100      	bne.n	800211e <HAL_UART_IRQHandler+0x1a>
 800211c:	e076      	b.n	800220c <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800211e:	4201      	tst	r1, r0
 8002120:	d100      	bne.n	8002124 <HAL_UART_IRQHandler+0x20>
 8002122:	e073      	b.n	800220c <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8002124:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8002126:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8002128:	2b00      	cmp	r3, #0
 800212a:	d165      	bne.n	80021f8 <HAL_UART_IRQHandler+0xf4>
 800212c:	e065      	b.n	80021fa <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800212e:	2001      	movs	r0, #1
 8002130:	0035      	movs	r5, r6
 8002132:	4005      	ands	r5, r0
 8002134:	d103      	bne.n	800213e <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002136:	2790      	movs	r7, #144	; 0x90
 8002138:	007f      	lsls	r7, r7, #1
 800213a:	4239      	tst	r1, r7
 800213c:	d066      	beq.n	800220c <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800213e:	4202      	tst	r2, r0
 8002140:	d005      	beq.n	800214e <HAL_UART_IRQHandler+0x4a>
 8002142:	05ce      	lsls	r6, r1, #23
 8002144:	d503      	bpl.n	800214e <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002146:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002148:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800214a:	4330      	orrs	r0, r6
 800214c:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800214e:	2002      	movs	r0, #2
 8002150:	4202      	tst	r2, r0
 8002152:	d006      	beq.n	8002162 <HAL_UART_IRQHandler+0x5e>
 8002154:	2d00      	cmp	r5, #0
 8002156:	d004      	beq.n	8002162 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002158:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800215a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800215c:	1800      	adds	r0, r0, r0
 800215e:	4330      	orrs	r0, r6
 8002160:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002162:	2004      	movs	r0, #4
 8002164:	4202      	tst	r2, r0
 8002166:	d006      	beq.n	8002176 <HAL_UART_IRQHandler+0x72>
 8002168:	2d00      	cmp	r5, #0
 800216a:	d004      	beq.n	8002176 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800216c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800216e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8002170:	3802      	subs	r0, #2
 8002172:	4330      	orrs	r0, r6
 8002174:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002176:	0710      	lsls	r0, r2, #28
 8002178:	d508      	bpl.n	800218c <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800217a:	0688      	lsls	r0, r1, #26
 800217c:	d401      	bmi.n	8002182 <HAL_UART_IRQHandler+0x7e>
 800217e:	2d00      	cmp	r5, #0
 8002180:	d004      	beq.n	800218c <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002182:	2008      	movs	r0, #8
 8002184:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002186:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8002188:	4328      	orrs	r0, r5
 800218a:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800218c:	2080      	movs	r0, #128	; 0x80
 800218e:	0100      	lsls	r0, r0, #4
 8002190:	4202      	tst	r2, r0
 8002192:	d006      	beq.n	80021a2 <HAL_UART_IRQHandler+0x9e>
 8002194:	014d      	lsls	r5, r1, #5
 8002196:	d504      	bpl.n	80021a2 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002198:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800219a:	2320      	movs	r3, #32
 800219c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800219e:	4303      	orrs	r3, r0
 80021a0:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021a2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d028      	beq.n	80021fa <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80021a8:	2320      	movs	r3, #32
 80021aa:	421a      	tst	r2, r3
 80021ac:	d006      	beq.n	80021bc <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021ae:	4219      	tst	r1, r3
 80021b0:	d004      	beq.n	80021bc <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 80021b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 80021b8:	0020      	movs	r0, r4
 80021ba:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021bc:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80021be:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021c0:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 80021c2:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021c4:	065b      	lsls	r3, r3, #25
 80021c6:	d402      	bmi.n	80021ce <HAL_UART_IRQHandler+0xca>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80021c8:	2328      	movs	r3, #40	; 0x28
 80021ca:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021cc:	d01a      	beq.n	8002204 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 80021ce:	f7ff fecb 	bl	8001f68 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d2:	2140      	movs	r1, #64	; 0x40
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	420a      	tst	r2, r1
 80021da:	d00f      	beq.n	80021fc <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021dc:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80021de:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021e0:	438a      	bics	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80021e4:	2800      	cmp	r0, #0
 80021e6:	d009      	beq.n	80021fc <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_UART_IRQHandler+0x150>)
 80021ea:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021ec:	f7fe fc67 	bl	8000abe <HAL_DMA_Abort_IT>
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d002      	beq.n	80021fa <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021f4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80021f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021f8:	4798      	blx	r3
}
 80021fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80021fc:	0020      	movs	r0, r4
 80021fe:	f7ff ff7f 	bl	8002100 <HAL_UART_ErrorCallback>
 8002202:	e7fa      	b.n	80021fa <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8002204:	f7ff ff7c 	bl	8002100 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002208:	67e5      	str	r5, [r4, #124]	; 0x7c
 800220a:	e7f6      	b.n	80021fa <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800220c:	2080      	movs	r0, #128	; 0x80
 800220e:	0340      	lsls	r0, r0, #13
 8002210:	4202      	tst	r2, r0
 8002212:	d006      	beq.n	8002222 <HAL_UART_IRQHandler+0x11e>
 8002214:	0275      	lsls	r5, r6, #9
 8002216:	d504      	bpl.n	8002222 <HAL_UART_IRQHandler+0x11e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002218:	6218      	str	r0, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800221a:	0020      	movs	r0, r4
 800221c:	f000 fa4a 	bl	80026b4 <HAL_UARTEx_WakeupCallback>
    return;
 8002220:	e7eb      	b.n	80021fa <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002222:	2080      	movs	r0, #128	; 0x80
 8002224:	4202      	tst	r2, r0
 8002226:	d003      	beq.n	8002230 <HAL_UART_IRQHandler+0x12c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002228:	4201      	tst	r1, r0
 800222a:	d001      	beq.n	8002230 <HAL_UART_IRQHandler+0x12c>
    if (huart->TxISR != NULL)
 800222c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800222e:	e77a      	b.n	8002126 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002230:	2040      	movs	r0, #64	; 0x40
 8002232:	4202      	tst	r2, r0
 8002234:	d0e1      	beq.n	80021fa <HAL_UART_IRQHandler+0xf6>
 8002236:	4201      	tst	r1, r0
 8002238:	d0df      	beq.n	80021fa <HAL_UART_IRQHandler+0xf6>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4382      	bics	r2, r0
 800223e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002240:	2320      	movs	r3, #32
 8002242:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8002244:	2300      	movs	r3, #0
  HAL_UART_TxCpltCallback(huart);
 8002246:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8002248:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800224a:	f7ff fef9 	bl	8002040 <HAL_UART_TxCpltCallback>
 800224e:	e7d4      	b.n	80021fa <HAL_UART_IRQHandler+0xf6>
 8002250:	0000080f 	.word	0x0000080f
 8002254:	08002259 	.word	0x08002259

08002258 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002258:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	0002      	movs	r2, r0
{
 800225e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002260:	325a      	adds	r2, #90	; 0x5a
 8002262:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002264:	3a08      	subs	r2, #8
 8002266:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8002268:	f7ff ff4a 	bl	8002100 <HAL_UART_ErrorCallback>
}
 800226c:	bd10      	pop	{r4, pc}
	...

08002270 <UART_SetConfig>:
{
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002274:	6925      	ldr	r5, [r4, #16]
 8002276:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002278:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800227a:	432b      	orrs	r3, r5
 800227c:	6965      	ldr	r5, [r4, #20]
 800227e:	69c1      	ldr	r1, [r0, #28]
 8002280:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002282:	6810      	ldr	r0, [r2, #0]
 8002284:	4d43      	ldr	r5, [pc, #268]	; (8002394 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002286:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002288:	4028      	ands	r0, r5
 800228a:	4303      	orrs	r3, r0
 800228c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800228e:	6853      	ldr	r3, [r2, #4]
 8002290:	4841      	ldr	r0, [pc, #260]	; (8002398 <UART_SetConfig+0x128>)
  tmpreg |= huart->Init.OneBitSampling;
 8002292:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002294:	4003      	ands	r3, r0
 8002296:	68e0      	ldr	r0, [r4, #12]
 8002298:	4303      	orrs	r3, r0
 800229a:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800229c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800229e:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80022a0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022a2:	4d3e      	ldr	r5, [pc, #248]	; (800239c <UART_SetConfig+0x12c>)
 80022a4:	4028      	ands	r0, r5
 80022a6:	4303      	orrs	r3, r0
 80022a8:	6093      	str	r3, [r2, #8]
 80022aa:	2380      	movs	r3, #128	; 0x80
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022ac:	483c      	ldr	r0, [pc, #240]	; (80023a0 <UART_SetConfig+0x130>)
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	4282      	cmp	r2, r0
 80022b2:	d110      	bne.n	80022d6 <UART_SetConfig+0x66>
 80022b4:	2003      	movs	r0, #3
 80022b6:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <UART_SetConfig+0x134>)
 80022b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022ba:	4002      	ands	r2, r0
 80022bc:	483a      	ldr	r0, [pc, #232]	; (80023a8 <UART_SetConfig+0x138>)
 80022be:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c0:	4299      	cmp	r1, r3
 80022c2:	d013      	beq.n	80022ec <UART_SetConfig+0x7c>
    switch (clocksource)
 80022c4:	2808      	cmp	r0, #8
 80022c6:	d828      	bhi.n	800231a <UART_SetConfig+0xaa>
 80022c8:	f7fd ff30 	bl	800012c <__gnu_thumb1_case_uqi>
 80022cc:	27462741 	.word	0x27462741
 80022d0:	27272757 	.word	0x27272757
 80022d4:	5a          	.byte	0x5a
 80022d5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022d6:	4835      	ldr	r0, [pc, #212]	; (80023ac <UART_SetConfig+0x13c>)
 80022d8:	4282      	cmp	r2, r0
 80022da:	d156      	bne.n	800238a <UART_SetConfig+0x11a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022dc:	4299      	cmp	r1, r3
 80022de:	d136      	bne.n	800234e <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK1Freq();
 80022e0:	f7fe ffda 	bl	8001298 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022e4:	6863      	ldr	r3, [r4, #4]
 80022e6:	0040      	lsls	r0, r0, #1
 80022e8:	085b      	lsrs	r3, r3, #1
 80022ea:	e00b      	b.n	8002304 <UART_SetConfig+0x94>
    switch (clocksource)
 80022ec:	2808      	cmp	r0, #8
 80022ee:	d81e      	bhi.n	800232e <UART_SetConfig+0xbe>
 80022f0:	f7fd ff12 	bl	8000118 <__gnu_thumb1_case_sqi>
 80022f4:	1d051df6 	.word	0x1d051df6
 80022f8:	1d1d1d15 	.word	0x1d1d1d15
 80022fc:	18          	.byte	0x18
 80022fd:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80022fe:	6863      	ldr	r3, [r4, #4]
 8002300:	0858      	lsrs	r0, r3, #1
 8002302:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <UART_SetConfig+0x140>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002304:	18c0      	adds	r0, r0, r3
 8002306:	6861      	ldr	r1, [r4, #4]
 8002308:	f7fd ff1a 	bl	8000140 <__udivsi3>
 800230c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800230e:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002310:	001a      	movs	r2, r3
 8002312:	4928      	ldr	r1, [pc, #160]	; (80023b4 <UART_SetConfig+0x144>)
 8002314:	3a10      	subs	r2, #16
 8002316:	428a      	cmp	r2, r1
 8002318:	d90c      	bls.n	8002334 <UART_SetConfig+0xc4>
      ret = HAL_ERROR;
 800231a:	2001      	movs	r0, #1
 800231c:	e013      	b.n	8002346 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 800231e:	f7fe ff05 	bl	800112c <HAL_RCC_GetSysClockFreq>
 8002322:	e7df      	b.n	80022e4 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002324:	6863      	ldr	r3, [r4, #4]
 8002326:	0858      	lsrs	r0, r3, #1
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	025b      	lsls	r3, r3, #9
 800232c:	e7ea      	b.n	8002304 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 800232e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002330:	2300      	movs	r3, #0
 8002332:	e7ed      	b.n	8002310 <UART_SetConfig+0xa0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002334:	220f      	movs	r2, #15
 8002336:	0019      	movs	r1, r3
 8002338:	4391      	bics	r1, r2
 800233a:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800233c:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 800233e:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002340:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8002342:	4313      	orrs	r3, r2
 8002344:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 8002346:	2300      	movs	r3, #0
 8002348:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800234a:	6663      	str	r3, [r4, #100]	; 0x64
}
 800234c:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800234e:	f7fe ffa3 	bl	8001298 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002352:	6863      	ldr	r3, [r4, #4]
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	e002      	b.n	800235e <UART_SetConfig+0xee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002358:	6863      	ldr	r3, [r4, #4]
 800235a:	0858      	lsrs	r0, r3, #1
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <UART_SetConfig+0x148>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800235e:	18c0      	adds	r0, r0, r3
 8002360:	6861      	ldr	r1, [r4, #4]
 8002362:	f7fd feed 	bl	8000140 <__udivsi3>
 8002366:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002368:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800236a:	001a      	movs	r2, r3
 800236c:	4911      	ldr	r1, [pc, #68]	; (80023b4 <UART_SetConfig+0x144>)
 800236e:	3a10      	subs	r2, #16
 8002370:	428a      	cmp	r2, r1
 8002372:	d8d2      	bhi.n	800231a <UART_SetConfig+0xaa>
      huart->Instance->BRR = usartdiv;
 8002374:	6822      	ldr	r2, [r4, #0]
 8002376:	60d3      	str	r3, [r2, #12]
 8002378:	e7e5      	b.n	8002346 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 800237a:	f7fe fed7 	bl	800112c <HAL_RCC_GetSysClockFreq>
 800237e:	e7e8      	b.n	8002352 <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002380:	6863      	ldr	r3, [r4, #4]
 8002382:	0858      	lsrs	r0, r3, #1
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	e7e9      	b.n	800235e <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800238a:	4299      	cmp	r1, r3
 800238c:	d0cf      	beq.n	800232e <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 800238e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002390:	2300      	movs	r3, #0
 8002392:	e7ea      	b.n	800236a <UART_SetConfig+0xfa>
 8002394:	ffff69f3 	.word	0xffff69f3
 8002398:	ffffcfff 	.word	0xffffcfff
 800239c:	fffff4ff 	.word	0xfffff4ff
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08005f0c 	.word	0x08005f0c
 80023ac:	40004400 	.word	0x40004400
 80023b0:	00f42400 	.word	0x00f42400
 80023b4:	0000ffef 	.word	0x0000ffef
 80023b8:	007a1200 	.word	0x007a1200

080023bc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80023be:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023c0:	07da      	lsls	r2, r3, #31
 80023c2:	d506      	bpl.n	80023d2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023c4:	6801      	ldr	r1, [r0, #0]
 80023c6:	4c28      	ldr	r4, [pc, #160]	; (8002468 <UART_AdvFeatureConfig+0xac>)
 80023c8:	684a      	ldr	r2, [r1, #4]
 80023ca:	4022      	ands	r2, r4
 80023cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80023ce:	4322      	orrs	r2, r4
 80023d0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023d2:	079a      	lsls	r2, r3, #30
 80023d4:	d506      	bpl.n	80023e4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023d6:	6801      	ldr	r1, [r0, #0]
 80023d8:	4c24      	ldr	r4, [pc, #144]	; (800246c <UART_AdvFeatureConfig+0xb0>)
 80023da:	684a      	ldr	r2, [r1, #4]
 80023dc:	4022      	ands	r2, r4
 80023de:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80023e0:	4322      	orrs	r2, r4
 80023e2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023e4:	075a      	lsls	r2, r3, #29
 80023e6:	d506      	bpl.n	80023f6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023e8:	6801      	ldr	r1, [r0, #0]
 80023ea:	4c21      	ldr	r4, [pc, #132]	; (8002470 <UART_AdvFeatureConfig+0xb4>)
 80023ec:	684a      	ldr	r2, [r1, #4]
 80023ee:	4022      	ands	r2, r4
 80023f0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80023f2:	4322      	orrs	r2, r4
 80023f4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023f6:	071a      	lsls	r2, r3, #28
 80023f8:	d506      	bpl.n	8002408 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023fa:	6801      	ldr	r1, [r0, #0]
 80023fc:	4c1d      	ldr	r4, [pc, #116]	; (8002474 <UART_AdvFeatureConfig+0xb8>)
 80023fe:	684a      	ldr	r2, [r1, #4]
 8002400:	4022      	ands	r2, r4
 8002402:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002404:	4322      	orrs	r2, r4
 8002406:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002408:	06da      	lsls	r2, r3, #27
 800240a:	d506      	bpl.n	800241a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800240c:	6801      	ldr	r1, [r0, #0]
 800240e:	4c1a      	ldr	r4, [pc, #104]	; (8002478 <UART_AdvFeatureConfig+0xbc>)
 8002410:	688a      	ldr	r2, [r1, #8]
 8002412:	4022      	ands	r2, r4
 8002414:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002416:	4322      	orrs	r2, r4
 8002418:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800241a:	069a      	lsls	r2, r3, #26
 800241c:	d506      	bpl.n	800242c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800241e:	6801      	ldr	r1, [r0, #0]
 8002420:	4c16      	ldr	r4, [pc, #88]	; (800247c <UART_AdvFeatureConfig+0xc0>)
 8002422:	688a      	ldr	r2, [r1, #8]
 8002424:	4022      	ands	r2, r4
 8002426:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002428:	4322      	orrs	r2, r4
 800242a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800242c:	065a      	lsls	r2, r3, #25
 800242e:	d510      	bpl.n	8002452 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002430:	6801      	ldr	r1, [r0, #0]
 8002432:	4d13      	ldr	r5, [pc, #76]	; (8002480 <UART_AdvFeatureConfig+0xc4>)
 8002434:	684a      	ldr	r2, [r1, #4]
 8002436:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002438:	402a      	ands	r2, r5
 800243a:	4322      	orrs	r2, r4
 800243c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	0352      	lsls	r2, r2, #13
 8002442:	4294      	cmp	r4, r2
 8002444:	d105      	bne.n	8002452 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002446:	684a      	ldr	r2, [r1, #4]
 8002448:	4c0e      	ldr	r4, [pc, #56]	; (8002484 <UART_AdvFeatureConfig+0xc8>)
 800244a:	4022      	ands	r2, r4
 800244c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800244e:	4322      	orrs	r2, r4
 8002450:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002452:	061b      	lsls	r3, r3, #24
 8002454:	d506      	bpl.n	8002464 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002456:	6802      	ldr	r2, [r0, #0]
 8002458:	490b      	ldr	r1, [pc, #44]	; (8002488 <UART_AdvFeatureConfig+0xcc>)
 800245a:	6853      	ldr	r3, [r2, #4]
 800245c:	400b      	ands	r3, r1
 800245e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002460:	430b      	orrs	r3, r1
 8002462:	6053      	str	r3, [r2, #4]
}
 8002464:	bd30      	pop	{r4, r5, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	fffdffff 	.word	0xfffdffff
 800246c:	fffeffff 	.word	0xfffeffff
 8002470:	fffbffff 	.word	0xfffbffff
 8002474:	ffff7fff 	.word	0xffff7fff
 8002478:	ffffefff 	.word	0xffffefff
 800247c:	ffffdfff 	.word	0xffffdfff
 8002480:	ffefffff 	.word	0xffefffff
 8002484:	ff9fffff 	.word	0xff9fffff
 8002488:	fff7ffff 	.word	0xfff7ffff

0800248c <UART_WaitOnFlagUntilTimeout>:
{
 800248c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800248e:	2780      	movs	r7, #128	; 0x80
{
 8002490:	0004      	movs	r4, r0
 8002492:	000e      	movs	r6, r1
 8002494:	0015      	movs	r5, r2
 8002496:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002498:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800249a:	6822      	ldr	r2, [r4, #0]
 800249c:	69d3      	ldr	r3, [r2, #28]
 800249e:	4033      	ands	r3, r6
 80024a0:	1b9b      	subs	r3, r3, r6
 80024a2:	4259      	negs	r1, r3
 80024a4:	414b      	adcs	r3, r1
 80024a6:	42ab      	cmp	r3, r5
 80024a8:	d001      	beq.n	80024ae <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 80024aa:	2000      	movs	r0, #0
 80024ac:	e01c      	b.n	80024e8 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	9b08      	ldr	r3, [sp, #32]
 80024b0:	3301      	adds	r3, #1
 80024b2:	d0f3      	beq.n	800249c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b4:	f7fd ff10 	bl	80002d8 <HAL_GetTick>
 80024b8:	9b01      	ldr	r3, [sp, #4]
 80024ba:	9a08      	ldr	r2, [sp, #32]
 80024bc:	1ac0      	subs	r0, r0, r3
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	4282      	cmp	r2, r0
 80024c2:	d301      	bcc.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x3c>
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d110      	bne.n	80024ea <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4913      	ldr	r1, [pc, #76]	; (8002518 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	31a3      	adds	r1, #163	; 0xa3
 80024d4:	31ff      	adds	r1, #255	; 0xff
 80024d6:	438a      	bics	r2, r1
 80024d8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80024da:	2320      	movs	r3, #32
 80024dc:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80024de:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80024e0:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80024e2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80024e4:	3470      	adds	r4, #112	; 0x70
 80024e6:	7023      	strb	r3, [r4, #0]
}
 80024e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80024ea:	2104      	movs	r1, #4
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	420a      	tst	r2, r1
 80024f0:	d0d3      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	423a      	tst	r2, r7
 80024f6:	d0d0      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024f8:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4906      	ldr	r1, [pc, #24]	; (8002518 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80024fe:	400a      	ands	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	31a3      	adds	r1, #163	; 0xa3
 8002506:	31ff      	adds	r1, #255	; 0xff
 8002508:	438a      	bics	r2, r1
 800250a:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800250c:	2320      	movs	r3, #32
 800250e:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002510:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002512:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002514:	e7e4      	b.n	80024e0 <UART_WaitOnFlagUntilTimeout+0x54>
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	fffffe5f 	.word	0xfffffe5f

0800251c <HAL_UART_Transmit>:
{
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	b087      	sub	sp, #28
 8002520:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002522:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002524:	0004      	movs	r4, r0
 8002526:	000d      	movs	r5, r1
 8002528:	0017      	movs	r7, r2
    return HAL_BUSY;
 800252a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800252c:	2b20      	cmp	r3, #32
 800252e:	d149      	bne.n	80025c4 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8002530:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002532:	2900      	cmp	r1, #0
 8002534:	d046      	beq.n	80025c4 <HAL_UART_Transmit+0xa8>
 8002536:	2a00      	cmp	r2, #0
 8002538:	d044      	beq.n	80025c4 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	68a2      	ldr	r2, [r4, #8]
 800253e:	015b      	lsls	r3, r3, #5
 8002540:	429a      	cmp	r2, r3
 8002542:	d104      	bne.n	800254e <HAL_UART_Transmit+0x32>
 8002544:	6923      	ldr	r3, [r4, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800254a:	4201      	tst	r1, r0
 800254c:	d13a      	bne.n	80025c4 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 800254e:	0023      	movs	r3, r4
 8002550:	3370      	adds	r3, #112	; 0x70
 8002552:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002554:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002556:	2a01      	cmp	r2, #1
 8002558:	d034      	beq.n	80025c4 <HAL_UART_Transmit+0xa8>
 800255a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255c:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 800255e:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002560:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002562:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002564:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002566:	f7fd feb7 	bl	80002d8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800256a:	0023      	movs	r3, r4
 800256c:	3350      	adds	r3, #80	; 0x50
 800256e:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8002570:	3302      	adds	r3, #2
 8002572:	9303      	str	r3, [sp, #12]
 8002574:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800257a:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800257c:	015b      	lsls	r3, r3, #5
 800257e:	429a      	cmp	r2, r3
 8002580:	d104      	bne.n	800258c <HAL_UART_Transmit+0x70>
 8002582:	6923      	ldr	r3, [r4, #16]
 8002584:	42b3      	cmp	r3, r6
 8002586:	d101      	bne.n	800258c <HAL_UART_Transmit+0x70>
 8002588:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800258a:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800258c:	0023      	movs	r3, r4
 800258e:	3352      	adds	r3, #82	; 0x52
 8002590:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002592:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8002594:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 800259a:	2a00      	cmp	r2, #0
 800259c:	d10a      	bne.n	80025b4 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800259e:	2140      	movs	r1, #64	; 0x40
 80025a0:	0020      	movs	r0, r4
 80025a2:	f7ff ff73 	bl	800248c <UART_WaitOnFlagUntilTimeout>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d10b      	bne.n	80025c2 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 80025aa:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80025ac:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80025ae:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80025b0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80025b2:	e007      	b.n	80025c4 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025b4:	2200      	movs	r2, #0
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	0020      	movs	r0, r4
 80025ba:	f7ff ff67 	bl	800248c <UART_WaitOnFlagUntilTimeout>
 80025be:	2800      	cmp	r0, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80025c2:	2003      	movs	r0, #3
}
 80025c4:	b007      	add	sp, #28
 80025c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025c8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80025ca:	2d00      	cmp	r5, #0
 80025cc:	d10b      	bne.n	80025e6 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ce:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80025d0:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025d2:	05db      	lsls	r3, r3, #23
 80025d4:	0ddb      	lsrs	r3, r3, #23
 80025d6:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80025d8:	9b03      	ldr	r3, [sp, #12]
 80025da:	9a03      	ldr	r2, [sp, #12]
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	8013      	strh	r3, [r2, #0]
 80025e4:	e7d2      	b.n	800258c <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025e6:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80025e8:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ea:	8513      	strh	r3, [r2, #40]	; 0x28
 80025ec:	e7f4      	b.n	80025d8 <HAL_UART_Transmit+0xbc>
	...

080025f0 <UART_CheckIdleState>:
{
 80025f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f2:	2600      	movs	r6, #0
{
 80025f4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f6:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80025f8:	f7fd fe6e 	bl	80002d8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025fc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80025fe:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	071b      	lsls	r3, r3, #28
 8002604:	d415      	bmi.n	8002632 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	075b      	lsls	r3, r3, #29
 800260c:	d50a      	bpl.n	8002624 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <UART_CheckIdleState+0x5c>)
 8002612:	2200      	movs	r2, #0
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	03c9      	lsls	r1, r1, #15
 8002618:	002b      	movs	r3, r5
 800261a:	0020      	movs	r0, r4
 800261c:	f7ff ff36 	bl	800248c <UART_WaitOnFlagUntilTimeout>
 8002620:	2800      	cmp	r0, #0
 8002622:	d111      	bne.n	8002648 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002624:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002626:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002628:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800262a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800262c:	3470      	adds	r4, #112	; 0x70
 800262e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002630:	e00b      	b.n	800264a <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <UART_CheckIdleState+0x5c>)
 8002636:	0032      	movs	r2, r6
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	0389      	lsls	r1, r1, #14
 800263c:	0003      	movs	r3, r0
 800263e:	0020      	movs	r0, r4
 8002640:	f7ff ff24 	bl	800248c <UART_WaitOnFlagUntilTimeout>
 8002644:	2800      	cmp	r0, #0
 8002646:	d0de      	beq.n	8002606 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002648:	2003      	movs	r0, #3
}
 800264a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800264c:	01ffffff 	.word	0x01ffffff

08002650 <HAL_UART_Init>:
{
 8002650:	b510      	push	{r4, lr}
 8002652:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002654:	d101      	bne.n	800265a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
}
 8002658:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800265a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002660:	0002      	movs	r2, r0
 8002662:	3270      	adds	r2, #112	; 0x70
 8002664:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002666:	f002 ff05 	bl	8005474 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800266a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800266c:	2101      	movs	r1, #1
 800266e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002670:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002672:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002674:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002676:	438b      	bics	r3, r1
 8002678:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800267a:	f7ff fdf9 	bl	8002270 <UART_SetConfig>
 800267e:	2801      	cmp	r0, #1
 8002680:	d0e9      	beq.n	8002656 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002688:	0020      	movs	r0, r4
 800268a:	f7ff fe97 	bl	80023bc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	4907      	ldr	r1, [pc, #28]	; (80026b0 <HAL_UART_Init+0x60>)
 8002692:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002694:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002696:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002698:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	438a      	bics	r2, r1
 80026a0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80026a2:	2201      	movs	r2, #1
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80026aa:	f7ff ffa1 	bl	80025f0 <UART_CheckIdleState>
 80026ae:	e7d3      	b.n	8002658 <HAL_UART_Init+0x8>
 80026b0:	ffffb7ff 	.word	0xffffb7ff

080026b4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80026b4:	4770      	bx	lr
	...

080026b8 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <disk_status+0x18>)
{
 80026ba:	b510      	push	{r4, lr}
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80026bc:	181a      	adds	r2, r3, r0
 80026be:	0080      	lsls	r0, r0, #2
 80026c0:	181b      	adds	r3, r3, r0
 80026c2:	7a11      	ldrb	r1, [r2, #8]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	0008      	movs	r0, r1
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4798      	blx	r3
  return stat;
}
 80026cc:	bd10      	pop	{r4, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	200002c4 	.word	0x200002c4

080026d4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <disk_initialize+0x24>)
{
 80026d6:	0002      	movs	r2, r0
  if(disk.is_initialized[pdrv] == 0)
 80026d8:	5c19      	ldrb	r1, [r3, r0]
  DSTATUS stat = RES_OK;
 80026da:	2000      	movs	r0, #0
{
 80026dc:	b510      	push	{r4, lr}
  if(disk.is_initialized[pdrv] == 0)
 80026de:	4281      	cmp	r1, r0
 80026e0:	d108      	bne.n	80026f4 <disk_initialize+0x20>
  { 
    disk.is_initialized[pdrv] = 1;
 80026e2:	2101      	movs	r1, #1
 80026e4:	5499      	strb	r1, [r3, r2]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80026e6:	1899      	adds	r1, r3, r2
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	7a08      	ldrb	r0, [r1, #8]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4798      	blx	r3
  }
  return stat;
}
 80026f4:	bd10      	pop	{r4, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	200002c4 	.word	0x200002c4

080026fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80026fc:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80026fe:	4c05      	ldr	r4, [pc, #20]	; (8002714 <disk_read+0x18>)
 8002700:	1825      	adds	r5, r4, r0
 8002702:	0080      	lsls	r0, r0, #2
 8002704:	1824      	adds	r4, r4, r0
 8002706:	7a2e      	ldrb	r6, [r5, #8]
 8002708:	6860      	ldr	r0, [r4, #4]
 800270a:	6884      	ldr	r4, [r0, #8]
 800270c:	0030      	movs	r0, r6
 800270e:	47a0      	blx	r4
  return res;
}
 8002710:	bd70      	pop	{r4, r5, r6, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	200002c4 	.word	0x200002c4

08002718 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002718:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800271a:	4c05      	ldr	r4, [pc, #20]	; (8002730 <disk_write+0x18>)
 800271c:	1825      	adds	r5, r4, r0
 800271e:	0080      	lsls	r0, r0, #2
 8002720:	1824      	adds	r4, r4, r0
 8002722:	7a2e      	ldrb	r6, [r5, #8]
 8002724:	6860      	ldr	r0, [r4, #4]
 8002726:	68c4      	ldr	r4, [r0, #12]
 8002728:	0030      	movs	r0, r6
 800272a:	47a0      	blx	r4
  return res;
}
 800272c:	bd70      	pop	{r4, r5, r6, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	200002c4 	.word	0x200002c4

08002734 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <disk_ioctl+0x18>)
{
 8002736:	b570      	push	{r4, r5, r6, lr}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002738:	181c      	adds	r4, r3, r0
 800273a:	0080      	lsls	r0, r0, #2
 800273c:	181b      	adds	r3, r3, r0
 800273e:	7a25      	ldrb	r5, [r4, #8]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	0028      	movs	r0, r5
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	4798      	blx	r3
  return res;
}
 8002748:	bd70      	pop	{r4, r5, r6, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	200002c4 	.word	0x200002c4

08002750 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002750:	2300      	movs	r3, #0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002752:	b510      	push	{r4, lr}
	while (cnt--)
 8002754:	429a      	cmp	r2, r3
 8002756:	d100      	bne.n	800275a <mem_cpy+0xa>
		*d++ = *s++;
}
 8002758:	bd10      	pop	{r4, pc}
		*d++ = *s++;
 800275a:	5ccc      	ldrb	r4, [r1, r3]
 800275c:	54c4      	strb	r4, [r0, r3]
 800275e:	3301      	adds	r3, #1
 8002760:	e7f8      	b.n	8002754 <mem_cpy+0x4>

08002762 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002762:	1882      	adds	r2, r0, r2
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8002764:	4290      	cmp	r0, r2
 8002766:	d100      	bne.n	800276a <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8002768:	4770      	bx	lr
		*d++ = (BYTE)val;
 800276a:	7001      	strb	r1, [r0, #0]
 800276c:	3001      	adds	r0, #1
 800276e:	e7f9      	b.n	8002764 <mem_set+0x2>

08002770 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002770:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002772:	2400      	movs	r4, #0
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002774:	2580      	movs	r5, #128	; 0x80
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002776:	0022      	movs	r2, r4
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <chk_lock+0x64>)
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800277a:	00ed      	lsls	r5, r5, #3
		if (Files[i].fs) {	/* Existing entry */
 800277c:	681f      	ldr	r7, [r3, #0]
 800277e:	2f00      	cmp	r7, #0
 8002780:	d01c      	beq.n	80027bc <chk_lock+0x4c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002782:	5946      	ldr	r6, [r0, r5]
 8002784:	42b7      	cmp	r7, r6
 8002786:	d11a      	bne.n	80027be <chk_lock+0x4e>
 8002788:	2781      	movs	r7, #129	; 0x81
 800278a:	00ff      	lsls	r7, r7, #3
 800278c:	685e      	ldr	r6, [r3, #4]
 800278e:	59c7      	ldr	r7, [r0, r7]
 8002790:	42be      	cmp	r6, r7
 8002792:	d114      	bne.n	80027be <chk_lock+0x4e>
				Files[i].clu == dp->sclust &&
 8002794:	891e      	ldrh	r6, [r3, #8]
 8002796:	46b4      	mov	ip, r6
 8002798:	4e0f      	ldr	r6, [pc, #60]	; (80027d8 <chk_lock+0x68>)
 800279a:	5b87      	ldrh	r7, [r0, r6]
 800279c:	45bc      	cmp	ip, r7
 800279e:	d10e      	bne.n	80027be <chk_lock+0x4e>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80027a0:	2010      	movs	r0, #16
 80027a2:	2900      	cmp	r1, #0
 80027a4:	d115      	bne.n	80027d2 <chk_lock+0x62>
 80027a6:	230c      	movs	r3, #12
 80027a8:	435a      	muls	r2, r3
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <chk_lock+0x64>)
 80027ac:	189a      	adds	r2, r3, r2
 80027ae:	8950      	ldrh	r0, [r2, #10]
 80027b0:	3801      	subs	r0, #1
 80027b2:	38ff      	subs	r0, #255	; 0xff
 80027b4:	4242      	negs	r2, r0
 80027b6:	4142      	adcs	r2, r0
 80027b8:	0110      	lsls	r0, r2, #4
 80027ba:	e00a      	b.n	80027d2 <chk_lock+0x62>
			be = 1;
 80027bc:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80027be:	3201      	adds	r2, #1
 80027c0:	330c      	adds	r3, #12
 80027c2:	2a02      	cmp	r2, #2
 80027c4:	d1da      	bne.n	800277c <chk_lock+0xc>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80027c6:	2000      	movs	r0, #0
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80027c8:	4284      	cmp	r4, r0
 80027ca:	d102      	bne.n	80027d2 <chk_lock+0x62>
 80027cc:	2902      	cmp	r1, #2
 80027ce:	d000      	beq.n	80027d2 <chk_lock+0x62>
 80027d0:	2012      	movs	r0, #18
}
 80027d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d4:	200000a8 	.word	0x200000a8
 80027d8:	00000406 	.word	0x00000406

080027dc <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80027dc:	2380      	movs	r3, #128	; 0x80
{
 80027de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e0:	4c24      	ldr	r4, [pc, #144]	; (8002874 <inc_lock+0x98>)
		if (Files[i].fs == dp->fs &&
 80027e2:	00db      	lsls	r3, r3, #3
			Files[i].clu == dp->sclust &&
 80027e4:	2581      	movs	r5, #129	; 0x81
		if (Files[i].fs == dp->fs &&
 80027e6:	58c6      	ldr	r6, [r0, r3]
 80027e8:	0022      	movs	r2, r4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80027ea:	2300      	movs	r3, #0
			Files[i].clu == dp->sclust &&
 80027ec:	00ed      	lsls	r5, r5, #3
		if (Files[i].fs == dp->fs &&
 80027ee:	6827      	ldr	r7, [r4, #0]
 80027f0:	42b7      	cmp	r7, r6
 80027f2:	d10a      	bne.n	800280a <inc_lock+0x2e>
 80027f4:	6867      	ldr	r7, [r4, #4]
 80027f6:	46bc      	mov	ip, r7
 80027f8:	5947      	ldr	r7, [r0, r5]
 80027fa:	45bc      	cmp	ip, r7
 80027fc:	d105      	bne.n	800280a <inc_lock+0x2e>
			Files[i].clu == dp->sclust &&
 80027fe:	8927      	ldrh	r7, [r4, #8]
 8002800:	46bc      	mov	ip, r7
 8002802:	4f1d      	ldr	r7, [pc, #116]	; (8002878 <inc_lock+0x9c>)
 8002804:	5bc7      	ldrh	r7, [r0, r7]
 8002806:	45bc      	cmp	ip, r7
 8002808:	d027      	beq.n	800285a <inc_lock+0x7e>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800280a:	3301      	adds	r3, #1
 800280c:	340c      	adds	r4, #12
 800280e:	2b02      	cmp	r3, #2
 8002810:	d1ed      	bne.n	80027ee <inc_lock+0x12>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002812:	6813      	ldr	r3, [r2, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d004      	beq.n	8002822 <inc_lock+0x46>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002818:	2400      	movs	r4, #0
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800281a:	68d3      	ldr	r3, [r2, #12]
 800281c:	42a3      	cmp	r3, r4
 800281e:	d11a      	bne.n	8002856 <inc_lock+0x7a>
 8002820:	2301      	movs	r3, #1
		Files[i].fs = dp->fs;
 8002822:	240c      	movs	r4, #12
		Files[i].clu = dp->sclust;
 8002824:	2581      	movs	r5, #129	; 0x81
		Files[i].fs = dp->fs;
 8002826:	435c      	muls	r4, r3
		Files[i].clu = dp->sclust;
 8002828:	00ed      	lsls	r5, r5, #3
 800282a:	5945      	ldr	r5, [r0, r5]
		Files[i].fs = dp->fs;
 800282c:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 800282e:	1914      	adds	r4, r2, r4
 8002830:	6065      	str	r5, [r4, #4]
		Files[i].idx = dp->index;
 8002832:	4d11      	ldr	r5, [pc, #68]	; (8002878 <inc_lock+0x9c>)
 8002834:	5b40      	ldrh	r0, [r0, r5]
 8002836:	8120      	strh	r0, [r4, #8]
		Files[i].ctr = 0;
 8002838:	2000      	movs	r0, #0
 800283a:	8160      	strh	r0, [r4, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800283c:	4281      	cmp	r1, r0
 800283e:	d115      	bne.n	800286c <inc_lock+0x90>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002840:	210c      	movs	r1, #12
 8002842:	4359      	muls	r1, r3
 8002844:	1851      	adds	r1, r2, r1
 8002846:	8949      	ldrh	r1, [r1, #10]
 8002848:	3101      	adds	r1, #1
 800284a:	b289      	uxth	r1, r1
 800284c:	200c      	movs	r0, #12
 800284e:	4358      	muls	r0, r3
 8002850:	1812      	adds	r2, r2, r0
 8002852:	8151      	strh	r1, [r2, #10]

	return i + 1;
 8002854:	1c5c      	adds	r4, r3, #1
}
 8002856:	0020      	movs	r0, r4
 8002858:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800285a:	2900      	cmp	r1, #0
 800285c:	d0f0      	beq.n	8002840 <inc_lock+0x64>
 800285e:	210c      	movs	r1, #12
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002860:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002862:	4359      	muls	r1, r3
 8002864:	1851      	adds	r1, r2, r1
 8002866:	8949      	ldrh	r1, [r1, #10]
 8002868:	42a1      	cmp	r1, r4
 800286a:	d1f4      	bne.n	8002856 <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	0049      	lsls	r1, r1, #1
 8002870:	e7ec      	b.n	800284c <inc_lock+0x70>
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	200000a8 	.word	0x200000a8
 8002878:	00000406 	.word	0x00000406

0800287c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800287c:	1e41      	subs	r1, r0, #1
{
 800287e:	b510      	push	{r4, lr}
		if (n) n--;					/* Decrement read mode open count */
		Files[i].ctr = n;
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002880:	2002      	movs	r0, #2
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002882:	2901      	cmp	r1, #1
 8002884:	d811      	bhi.n	80028aa <dec_lock+0x2e>
		n = Files[i].ctr;
 8002886:	230c      	movs	r3, #12
 8002888:	001a      	movs	r2, r3
 800288a:	434a      	muls	r2, r1
 800288c:	4c07      	ldr	r4, [pc, #28]	; (80028ac <dec_lock+0x30>)
 800288e:	18a2      	adds	r2, r4, r2
 8002890:	8950      	ldrh	r0, [r2, #10]
		if (n) n--;					/* Decrement read mode open count */
 8002892:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <dec_lock+0x34>)
 8002894:	4002      	ands	r2, r0
 8002896:	d001      	beq.n	800289c <dec_lock+0x20>
 8002898:	3801      	subs	r0, #1
 800289a:	b282      	uxth	r2, r0
		res = FR_OK;
 800289c:	2000      	movs	r0, #0
		Files[i].ctr = n;
 800289e:	434b      	muls	r3, r1
 80028a0:	18e1      	adds	r1, r4, r3
 80028a2:	814a      	strh	r2, [r1, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80028a4:	4282      	cmp	r2, r0
 80028a6:	d100      	bne.n	80028aa <dec_lock+0x2e>
 80028a8:	50e0      	str	r0, [r4, r3]
	}
	return res;
}
 80028aa:	bd10      	pop	{r4, pc}
 80028ac:	200000a8 	.word	0x200000a8
 80028b0:	fffffeff 	.word	0xfffffeff

080028b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80028b4:	0003      	movs	r3, r0
 80028b6:	b570      	push	{r4, r5, r6, lr}
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80028b8:	4a0c      	ldr	r2, [pc, #48]	; (80028ec <clmt_clust+0x38>)
{
 80028ba:	0008      	movs	r0, r1
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80028bc:	589c      	ldr	r4, [r3, r2]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80028be:	3a24      	subs	r2, #36	; 0x24
 80028c0:	589d      	ldr	r5, [r3, r2]
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <clmt_clust+0x3c>)
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80028c4:	3404      	adds	r4, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80028c6:	5ae9      	ldrh	r1, [r5, r3]
 80028c8:	f7fd fc3a 	bl	8000140 <__udivsi3>
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <clmt_clust+0x40>)
 80028ce:	5ce9      	ldrb	r1, [r5, r3]
 80028d0:	f7fd fc36 	bl	8000140 <__udivsi3>
 80028d4:	0002      	movs	r2, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80028d6:	6820      	ldr	r0, [r4, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 80028d8:	2800      	cmp	r0, #0
 80028da:	d006      	beq.n	80028ea <clmt_clust+0x36>
		if (cl < ncl) break;	/* In this fragment? */
 80028dc:	4282      	cmp	r2, r0
 80028de:	d302      	bcc.n	80028e6 <clmt_clust+0x32>
		cl -= ncl; tbl++;		/* Next fragment */
 80028e0:	1a12      	subs	r2, r2, r0
 80028e2:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80028e4:	e7f7      	b.n	80028d6 <clmt_clust+0x22>
	}
	return cl + *tbl;	/* Return the cluster number */
 80028e6:	6860      	ldr	r0, [r4, #4]
 80028e8:	1810      	adds	r0, r2, r0
}
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
 80028ec:	00000424 	.word	0x00000424
 80028f0:	0000040a 	.word	0x0000040a
 80028f4:	00000402 	.word	0x00000402

080028f8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80028f8:	0001      	movs	r1, r0
	BYTE sum = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	310b      	adds	r1, #11
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80028fe:	085a      	lsrs	r2, r3, #1
 8002900:	01db      	lsls	r3, r3, #7
 8002902:	4313      	orrs	r3, r2
 8002904:	7802      	ldrb	r2, [r0, #0]
 8002906:	3001      	adds	r0, #1
 8002908:	189b      	adds	r3, r3, r2
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4288      	cmp	r0, r1
 800290e:	d1f6      	bne.n	80028fe <sum_sfn+0x6>
	return sum;
}
 8002910:	0018      	movs	r0, r3
 8002912:	4770      	bx	lr

08002914 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002914:	6802      	ldr	r2, [r0, #0]
 8002916:	1e13      	subs	r3, r2, #0
 8002918:	d103      	bne.n	8002922 <get_ldnumber+0xe>
	int vol = -1;
 800291a:	2001      	movs	r0, #1
 800291c:	4240      	negs	r0, r0
 800291e:	e00e      	b.n	800293e <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002920:	3301      	adds	r3, #1
 8002922:	7819      	ldrb	r1, [r3, #0]
 8002924:	291f      	cmp	r1, #31
 8002926:	d909      	bls.n	800293c <get_ldnumber+0x28>
 8002928:	293a      	cmp	r1, #58	; 0x3a
 800292a:	d1f9      	bne.n	8002920 <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 800292c:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800292e:	428b      	cmp	r3, r1
 8002930:	d1f3      	bne.n	800291a <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	2a30      	cmp	r2, #48	; 0x30
 8002936:	d1f0      	bne.n	800291a <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 8002938:	3301      	adds	r3, #1
 800293a:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800293c:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800293e:	4770      	bx	lr

08002940 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8002940:	b510      	push	{r4, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002942:	2800      	cmp	r0, #0
 8002944:	d015      	beq.n	8002972 <validate+0x32>
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	00d2      	lsls	r2, r2, #3
 800294a:	5883      	ldr	r3, [r0, r2]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d010      	beq.n	8002972 <validate+0x32>
 8002950:	5c9a      	ldrb	r2, [r3, r2]
 8002952:	2a00      	cmp	r2, #0
 8002954:	d00d      	beq.n	8002972 <validate+0x32>
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <validate+0x38>)
 8002958:	5a99      	ldrh	r1, [r3, r2]
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <validate+0x3c>)
 800295c:	5a82      	ldrh	r2, [r0, r2]
 800295e:	4291      	cmp	r1, r2
 8002960:	d107      	bne.n	8002972 <validate+0x32>
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <validate+0x40>)
 8002964:	5c98      	ldrb	r0, [r3, r2]
 8002966:	f7ff fea7 	bl	80026b8 <disk_status>
 800296a:	2301      	movs	r3, #1
 800296c:	4003      	ands	r3, r0
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800296e:	1e18      	subs	r0, r3, #0
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002970:	d000      	beq.n	8002974 <validate+0x34>
		return FR_INVALID_OBJECT;
 8002972:	2009      	movs	r0, #9
}
 8002974:	bd10      	pop	{r4, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	00000406 	.word	0x00000406
 800297c:	00000404 	.word	0x00000404
 8002980:	00000401 	.word	0x00000401

08002984 <get_fileinfo>:
{
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (dp->sect) {		/* Get SFN */
 8002986:	2382      	movs	r3, #130	; 0x82
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	58c3      	ldr	r3, [r0, r3]
{
 800298c:	000c      	movs	r4, r1
	p = fno->fname;
 800298e:	3109      	adds	r1, #9
	if (dp->sect) {		/* Get SFN */
 8002990:	2b00      	cmp	r3, #0
 8002992:	d038      	beq.n	8002a06 <get_fileinfo+0x82>
		i = 0;
 8002994:	2200      	movs	r2, #0
		dir = dp->dir;
 8002996:	4b33      	ldr	r3, [pc, #204]	; (8002a64 <get_fileinfo+0xe0>)
 8002998:	58c3      	ldr	r3, [r0, r3]
			c = (TCHAR)dir[i++];
 800299a:	1c55      	adds	r5, r2, #1
 800299c:	5c9a      	ldrb	r2, [r3, r2]
			if (c == ' ') continue;				/* Skip padding spaces */
 800299e:	2a20      	cmp	r2, #32
 80029a0:	d017      	beq.n	80029d2 <get_fileinfo+0x4e>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80029a2:	2a05      	cmp	r2, #5
 80029a4:	d059      	beq.n	8002a5a <get_fileinfo+0xd6>
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 80029a6:	2d09      	cmp	r5, #9
 80029a8:	d102      	bne.n	80029b0 <get_fileinfo+0x2c>
 80029aa:	272e      	movs	r7, #46	; 0x2e
 80029ac:	700f      	strb	r7, [r1, #0]
 80029ae:	3101      	adds	r1, #1
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 80029b0:	0017      	movs	r7, r2
 80029b2:	3f41      	subs	r7, #65	; 0x41
 80029b4:	2f19      	cmp	r7, #25
 80029b6:	d80a      	bhi.n	80029ce <get_fileinfo+0x4a>
 80029b8:	7b1f      	ldrb	r7, [r3, #12]
 80029ba:	46bc      	mov	ip, r7
 80029bc:	2710      	movs	r7, #16
 80029be:	2d08      	cmp	r5, #8
 80029c0:	d800      	bhi.n	80029c4 <get_fileinfo+0x40>
 80029c2:	3f08      	subs	r7, #8
 80029c4:	4666      	mov	r6, ip
 80029c6:	423e      	tst	r6, r7
 80029c8:	d001      	beq.n	80029ce <get_fileinfo+0x4a>
				c += 0x20;			/* To lower */
 80029ca:	3220      	adds	r2, #32
 80029cc:	b2d2      	uxtb	r2, r2
			*p++ = c;
 80029ce:	700a      	strb	r2, [r1, #0]
 80029d0:	3101      	adds	r1, #1
 80029d2:	002a      	movs	r2, r5
		while (i < 11) {		/* Copy name body and extension */
 80029d4:	2d0b      	cmp	r5, #11
 80029d6:	d1e0      	bne.n	800299a <get_fileinfo+0x16>
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80029d8:	7ada      	ldrb	r2, [r3, #11]
 80029da:	7222      	strb	r2, [r4, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 80029dc:	7f5d      	ldrb	r5, [r3, #29]
 80029de:	7f1a      	ldrb	r2, [r3, #28]
 80029e0:	022d      	lsls	r5, r5, #8
 80029e2:	4315      	orrs	r5, r2
 80029e4:	7f9a      	ldrb	r2, [r3, #30]
 80029e6:	0412      	lsls	r2, r2, #16
 80029e8:	4315      	orrs	r5, r2
 80029ea:	7fda      	ldrb	r2, [r3, #31]
 80029ec:	0612      	lsls	r2, r2, #24
 80029ee:	432a      	orrs	r2, r5
 80029f0:	6022      	str	r2, [r4, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 80029f2:	7e5d      	ldrb	r5, [r3, #25]
 80029f4:	7e1a      	ldrb	r2, [r3, #24]
 80029f6:	022d      	lsls	r5, r5, #8
 80029f8:	432a      	orrs	r2, r5
 80029fa:	80a2      	strh	r2, [r4, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80029fc:	7dda      	ldrb	r2, [r3, #23]
 80029fe:	7d9b      	ldrb	r3, [r3, #22]
 8002a00:	0212      	lsls	r2, r2, #8
 8002a02:	4313      	orrs	r3, r2
 8002a04:	80e3      	strh	r3, [r4, #6]
	*p = 0;		/* Terminate SFN string by a \0 */
 8002a06:	2500      	movs	r5, #0
 8002a08:	700d      	strb	r5, [r1, #0]
	if (fno->lfname) {
 8002a0a:	69a6      	ldr	r6, [r4, #24]
 8002a0c:	42ae      	cmp	r6, r5
 8002a0e:	d007      	beq.n	8002a20 <get_fileinfo+0x9c>
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8002a10:	2382      	movs	r3, #130	; 0x82
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	58c3      	ldr	r3, [r0, r3]
 8002a16:	42ab      	cmp	r3, r5
 8002a18:	d103      	bne.n	8002a22 <get_fileinfo+0x9e>
		i = 0; p = fno->lfname;
 8002a1a:	2300      	movs	r3, #0
		p[i] = 0;	/* Terminate LFN string by a \0 */
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	54f2      	strb	r2, [r6, r3]
}
 8002a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8002a22:	69e3      	ldr	r3, [r4, #28]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f8      	beq.n	8002a1a <get_fileinfo+0x96>
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <get_fileinfo+0xe4>)
 8002a2a:	5ac2      	ldrh	r2, [r0, r3]
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <get_fileinfo+0xe8>)
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d0f3      	beq.n	8002a1a <get_fileinfo+0x96>
			lfn = dp->lfn;
 8002a32:	2384      	movs	r3, #132	; 0x84
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	58c7      	ldr	r7, [r0, r3]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8002a38:	006a      	lsls	r2, r5, #1
 8002a3a:	5ab8      	ldrh	r0, [r7, r2]
 8002a3c:	002b      	movs	r3, r5
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d0ec      	beq.n	8002a1c <get_fileinfo+0x98>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8002a42:	2100      	movs	r1, #0
 8002a44:	f001 fdac 	bl	80045a0 <ff_convert>
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d0e6      	beq.n	8002a1a <get_fileinfo+0x96>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 8002a4c:	69e3      	ldr	r3, [r4, #28]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	429d      	cmp	r5, r3
 8002a52:	d2e2      	bcs.n	8002a1a <get_fileinfo+0x96>
				p[i++] = (TCHAR)w;
 8002a54:	5570      	strb	r0, [r6, r5]
 8002a56:	3501      	adds	r5, #1
 8002a58:	e7ee      	b.n	8002a38 <get_fileinfo+0xb4>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8002a5a:	22e5      	movs	r2, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8002a5c:	2d09      	cmp	r5, #9
 8002a5e:	d1b6      	bne.n	80029ce <get_fileinfo+0x4a>
 8002a60:	e7a3      	b.n	80029aa <get_fileinfo+0x26>
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	00000414 	.word	0x00000414
 8002a68:	00000424 	.word	0x00000424
 8002a6c:	0000ffff 	.word	0x0000ffff

08002a70 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8002a70:	7eca      	ldrb	r2, [r1, #27]
DWORD ld_clust (
 8002a72:	b510      	push	{r4, lr}
 8002a74:	0004      	movs	r4, r0
	cl = LD_WORD(dir + DIR_FstClusLO);
 8002a76:	7e88      	ldrb	r0, [r1, #26]
 8002a78:	0212      	lsls	r2, r2, #8
 8002a7a:	4310      	orrs	r0, r2
	if (fs->fs_type == FS_FAT32)
 8002a7c:	2c03      	cmp	r4, #3
 8002a7e:	d105      	bne.n	8002a8c <ld_clust.isra.0+0x1c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8002a80:	7d4a      	ldrb	r2, [r1, #21]
 8002a82:	7d0b      	ldrb	r3, [r1, #20]
 8002a84:	0212      	lsls	r2, r2, #8
 8002a86:	4313      	orrs	r3, r2
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	4318      	orrs	r0, r3
}
 8002a8c:	bd10      	pop	{r4, pc}
	...

08002a90 <sync_window.part.1>:
FRESULT sync_window (
 8002a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a92:	0004      	movs	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <sync_window.part.1+0x54>)
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002a96:	4e14      	ldr	r6, [pc, #80]	; (8002ae8 <sync_window.part.1+0x58>)
		wsect = fs->winsect;	/* Current sector number */
 8002a98:	58c5      	ldr	r5, [r0, r3]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002a9a:	0021      	movs	r1, r4
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	5d80      	ldrb	r0, [r0, r6]
 8002aa0:	002a      	movs	r2, r5
 8002aa2:	f7ff fe39 	bl	8002718 <disk_write>
 8002aa6:	9601      	str	r6, [sp, #4]
			res = FR_DISK_ERR;
 8002aa8:	2301      	movs	r3, #1
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	d109      	bne.n	8002ac2 <sync_window.part.1+0x32>
			fs->wflag = 0;
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <sync_window.part.1+0x5c>)
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002ab0:	3617      	adds	r6, #23
			fs->wflag = 0;
 8002ab2:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002ab4:	331c      	adds	r3, #28
 8002ab6:	58e3      	ldr	r3, [r4, r3]
 8002ab8:	59a2      	ldr	r2, [r4, r6]
 8002aba:	1aeb      	subs	r3, r5, r3
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d302      	bcc.n	8002ac6 <sync_window.part.1+0x36>
	FRESULT res = FR_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <sync_window.part.1+0x60>)
 8002ac8:	5ce7      	ldrb	r7, [r4, r3]
 8002aca:	2f01      	cmp	r7, #1
 8002acc:	d9f8      	bls.n	8002ac0 <sync_window.part.1+0x30>
					wsect += fs->fsize;
 8002ace:	59a3      	ldr	r3, [r4, r6]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002ad0:	0021      	movs	r1, r4
					wsect += fs->fsize;
 8002ad2:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002ad4:	9b01      	ldr	r3, [sp, #4]
 8002ad6:	002a      	movs	r2, r5
 8002ad8:	5ce0      	ldrb	r0, [r4, r3]
 8002ada:	2301      	movs	r3, #1
 8002adc:	f7ff fe1c 	bl	8002718 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002ae0:	3f01      	subs	r7, #1
 8002ae2:	e7f2      	b.n	8002aca <sync_window.part.1+0x3a>
 8002ae4:	0000042c 	.word	0x0000042c
 8002ae8:	00000401 	.word	0x00000401
 8002aec:	00000404 	.word	0x00000404
 8002af0:	00000403 	.word	0x00000403

08002af4 <sync_window>:
{
 8002af4:	b510      	push	{r4, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <sync_window+0x18>)
 8002af8:	5cc2      	ldrb	r2, [r0, r3]
	FRESULT res = FR_OK;
 8002afa:	2300      	movs	r3, #0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d002      	beq.n	8002b06 <sync_window+0x12>
 8002b00:	f7ff ffc6 	bl	8002a90 <sync_window.part.1>
 8002b04:	0003      	movs	r3, r0
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	bd10      	pop	{r4, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	00000404 	.word	0x00000404

08002b10 <sync_fs>:
{
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	0004      	movs	r4, r0
	res = sync_window(fs);
 8002b14:	f7ff ffee 	bl	8002af4 <sync_window>
 8002b18:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 8002b1a:	d15e      	bne.n	8002bda <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	5ce3      	ldrb	r3, [r4, r3]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d150      	bne.n	8002bc8 <sync_fs+0xb8>
 8002b26:	4e2d      	ldr	r6, [pc, #180]	; (8002bdc <sync_fs+0xcc>)
 8002b28:	5da7      	ldrb	r7, [r4, r6]
 8002b2a:	2f01      	cmp	r7, #1
 8002b2c:	d14c      	bne.n	8002bc8 <sync_fs+0xb8>
			mem_set(fs->win.d8, 0, SS(fs));
 8002b2e:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <sync_fs+0xd0>)
 8002b30:	0001      	movs	r1, r0
 8002b32:	5ae2      	ldrh	r2, [r4, r3]
 8002b34:	0020      	movs	r0, r4
 8002b36:	f7ff fe14 	bl	8002762 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8002b3a:	23ff      	movs	r3, #255	; 0xff
 8002b3c:	2255      	movs	r2, #85	; 0x55
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8002b3e:	20f2      	movs	r0, #242	; 0xf2
 8002b40:	2172      	movs	r1, #114	; 0x72
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	54e2      	strb	r2, [r4, r3]
 8002b46:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <sync_fs+0xd4>)
 8002b48:	1892      	adds	r2, r2, r2
 8002b4a:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8002b4c:	3bae      	subs	r3, #174	; 0xae
 8002b4e:	3bff      	subs	r3, #255	; 0xff
 8002b50:	7023      	strb	r3, [r4, #0]
 8002b52:	7063      	strb	r3, [r4, #1]
 8002b54:	3a69      	subs	r2, #105	; 0x69
 8002b56:	330f      	adds	r3, #15
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8002b58:	0040      	lsls	r0, r0, #1
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8002b5a:	70a3      	strb	r3, [r4, #2]
 8002b5c:	70e2      	strb	r2, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8002b5e:	5421      	strb	r1, [r4, r0]
 8002b60:	20e6      	movs	r0, #230	; 0xe6
 8002b62:	30ff      	adds	r0, #255	; 0xff
 8002b64:	5421      	strb	r1, [r4, r0]
 8002b66:	3175      	adds	r1, #117	; 0x75
 8002b68:	31ff      	adds	r1, #255	; 0xff
 8002b6a:	5462      	strb	r2, [r4, r1]
 8002b6c:	22e8      	movs	r2, #232	; 0xe8
 8002b6e:	32ff      	adds	r2, #255	; 0xff
 8002b70:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8002b72:	2382      	movs	r3, #130	; 0x82
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	58e3      	ldr	r3, [r4, r3]
 8002b78:	3201      	adds	r2, #1
 8002b7a:	54a3      	strb	r3, [r4, r2]
 8002b7c:	22ea      	movs	r2, #234	; 0xea
 8002b7e:	0a19      	lsrs	r1, r3, #8
 8002b80:	32ff      	adds	r2, #255	; 0xff
 8002b82:	54a1      	strb	r1, [r4, r2]
 8002b84:	0c19      	lsrs	r1, r3, #16
 8002b86:	3201      	adds	r2, #1
 8002b88:	54a1      	strb	r1, [r4, r2]
 8002b8a:	22ec      	movs	r2, #236	; 0xec
 8002b8c:	0e1b      	lsrs	r3, r3, #24
 8002b8e:	32ff      	adds	r2, #255	; 0xff
 8002b90:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <sync_fs+0xd8>)
 8002b94:	3201      	adds	r2, #1
 8002b96:	58e3      	ldr	r3, [r4, r3]
 8002b98:	54a3      	strb	r3, [r4, r2]
 8002b9a:	22ee      	movs	r2, #238	; 0xee
 8002b9c:	0a19      	lsrs	r1, r3, #8
 8002b9e:	32ff      	adds	r2, #255	; 0xff
 8002ba0:	54a1      	strb	r1, [r4, r2]
 8002ba2:	0c19      	lsrs	r1, r3, #16
 8002ba4:	3201      	adds	r2, #1
 8002ba6:	54a1      	strb	r1, [r4, r2]
 8002ba8:	22f0      	movs	r2, #240	; 0xf0
 8002baa:	0e1b      	lsrs	r3, r3, #24
 8002bac:	32ff      	adds	r2, #255	; 0xff
 8002bae:	54a3      	strb	r3, [r4, r2]
			fs->winsect = fs->volbase + 1;
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <sync_fs+0xdc>)
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8002bb2:	0021      	movs	r1, r4
			fs->winsect = fs->volbase + 1;
 8002bb4:	58e2      	ldr	r2, [r4, r3]
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <sync_fs+0xe0>)
 8002bb8:	3201      	adds	r2, #1
 8002bba:	50e2      	str	r2, [r4, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <sync_fs+0xe4>)
 8002bbe:	5ce0      	ldrb	r0, [r4, r3]
 8002bc0:	003b      	movs	r3, r7
 8002bc2:	f7ff fda9 	bl	8002718 <disk_write>
			fs->fsi_flag = 0;
 8002bc6:	55a5      	strb	r5, [r4, r6]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <sync_fs+0xe4>)
 8002bcc:	0011      	movs	r1, r2
 8002bce:	5ce0      	ldrb	r0, [r4, r3]
 8002bd0:	f7ff fdb0 	bl	8002734 <disk_ioctl>
 8002bd4:	1e43      	subs	r3, r0, #1
 8002bd6:	4198      	sbcs	r0, r3
 8002bd8:	b2c0      	uxtb	r0, r0
}
 8002bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bdc:	00000405 	.word	0x00000405
 8002be0:	0000040a 	.word	0x0000040a
 8002be4:	000001ff 	.word	0x000001ff
 8002be8:	0000040c 	.word	0x0000040c
 8002bec:	0000041c 	.word	0x0000041c
 8002bf0:	0000042c 	.word	0x0000042c
 8002bf4:	00000401 	.word	0x00000401

08002bf8 <move_window>:
{
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002bfa:	4f0d      	ldr	r7, [pc, #52]	; (8002c30 <move_window+0x38>)
{
 8002bfc:	0004      	movs	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002bfe:	59c2      	ldr	r2, [r0, r7]
{
 8002c00:	000e      	movs	r6, r1
	FRESULT res = FR_OK;
 8002c02:	2500      	movs	r5, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002c04:	428a      	cmp	r2, r1
 8002c06:	d010      	beq.n	8002c2a <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8002c08:	f7ff ff74 	bl	8002af4 <sync_window>
 8002c0c:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002c0e:	d10c      	bne.n	8002c2a <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <move_window+0x3c>)
 8002c12:	0032      	movs	r2, r6
 8002c14:	5ce0      	ldrb	r0, [r4, r3]
 8002c16:	0021      	movs	r1, r4
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f7ff fd6f 	bl	80026fc <disk_read>
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d002      	beq.n	8002c28 <move_window+0x30>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002c22:	2601      	movs	r6, #1
				res = FR_DISK_ERR;
 8002c24:	3501      	adds	r5, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002c26:	4276      	negs	r6, r6
			fs->winsect = sector;
 8002c28:	51e6      	str	r6, [r4, r7]
}
 8002c2a:	0028      	movs	r0, r5
 8002c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	0000042c 	.word	0x0000042c
 8002c34:	00000401 	.word	0x00000401

08002c38 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <check_fs+0x64>)
{
 8002c3c:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002c3e:	54c2      	strb	r2, [r0, r3]
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <check_fs+0x68>)
 8002c42:	3a01      	subs	r2, #1
 8002c44:	50c2      	str	r2, [r0, r3]
{
 8002c46:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8002c48:	f7ff ffd6 	bl	8002bf8 <move_window>
		return 3;
 8002c4c:	2303      	movs	r3, #3
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	d121      	bne.n	8002c96 <check_fs+0x5e>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <check_fs+0x6c>)
 8002c56:	0052      	lsls	r2, r2, #1
 8002c58:	5ce3      	ldrb	r3, [r4, r3]
 8002c5a:	5ca2      	ldrb	r2, [r4, r2]
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	4911      	ldr	r1, [pc, #68]	; (8002ca8 <check_fs+0x70>)
 8002c62:	b212      	sxth	r2, r2
		return 2;
 8002c64:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002c66:	428a      	cmp	r2, r1
 8002c68:	d115      	bne.n	8002c96 <check_fs+0x5e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002c6a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8002c6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c6e:	0412      	lsls	r2, r2, #16
 8002c70:	431a      	orrs	r2, r3
 8002c72:	490e      	ldr	r1, [pc, #56]	; (8002cac <check_fs+0x74>)
 8002c74:	0212      	lsls	r2, r2, #8
 8002c76:	0a12      	lsrs	r2, r2, #8
		return 0;
 8002c78:	0003      	movs	r3, r0
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002c7a:	428a      	cmp	r2, r1
 8002c7c:	d00b      	beq.n	8002c96 <check_fs+0x5e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8002c7e:	3452      	adds	r4, #82	; 0x52
 8002c80:	8863      	ldrh	r3, [r4, #2]
 8002c82:	8820      	ldrh	r0, [r4, #0]
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	4303      	orrs	r3, r0
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <check_fs+0x78>)
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	189b      	adds	r3, r3, r2
 8002c90:	1e58      	subs	r0, r3, #1
 8002c92:	4183      	sbcs	r3, r0
		return 3;
 8002c94:	b2db      	uxtb	r3, r3
}
 8002c96:	0018      	movs	r0, r3
 8002c98:	bd10      	pop	{r4, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	00000404 	.word	0x00000404
 8002ca0:	0000042c 	.word	0x0000042c
 8002ca4:	000001ff 	.word	0x000001ff
 8002ca8:	ffffaa55 	.word	0xffffaa55
 8002cac:	00544146 	.word	0x00544146
 8002cb0:	ffabbeba 	.word	0xffabbeba

08002cb4 <find_volume>:
	*rfs = 0;
 8002cb4:	2300      	movs	r3, #0
{
 8002cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8002cb8:	6003      	str	r3, [r0, #0]
{
 8002cba:	b08b      	sub	sp, #44	; 0x2c
 8002cbc:	0006      	movs	r6, r0
	vol = get_ldnumber(path);
 8002cbe:	0008      	movs	r0, r1
{
 8002cc0:	0017      	movs	r7, r2
	vol = get_ldnumber(path);
 8002cc2:	f7ff fe27 	bl	8002914 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002cc6:	230b      	movs	r3, #11
	vol = get_ldnumber(path);
 8002cc8:	1e05      	subs	r5, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 8002cca:	db17      	blt.n	8002cfc <find_volume+0x48>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002ccc:	4baf      	ldr	r3, [pc, #700]	; (8002f8c <find_volume+0x2d8>)
 8002cce:	0082      	lsls	r2, r0, #2
 8002cd0:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002cd2:	230c      	movs	r3, #12
 8002cd4:	2c00      	cmp	r4, #0
 8002cd6:	d011      	beq.n	8002cfc <find_volume+0x48>
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002cd8:	2380      	movs	r3, #128	; 0x80
	*rfs = fs;							/* Return pointer to the file system object */
 8002cda:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	5ce3      	ldrb	r3, [r4, r3]
 8002ce0:	4eab      	ldr	r6, [pc, #684]	; (8002f90 <find_volume+0x2dc>)
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00d      	beq.n	8002d02 <find_volume+0x4e>
		stat = disk_status(fs->drv);
 8002ce6:	5da0      	ldrb	r0, [r4, r6]
 8002ce8:	f7ff fce6 	bl	80026b8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002cec:	2301      	movs	r3, #1
 8002cee:	4003      	ands	r3, r0
 8002cf0:	d107      	bne.n	8002d02 <find_volume+0x4e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8002cf2:	2f00      	cmp	r7, #0
 8002cf4:	d002      	beq.n	8002cfc <find_volume+0x48>
 8002cf6:	0742      	lsls	r2, r0, #29
 8002cf8:	d500      	bpl.n	8002cfc <find_volume+0x48>
				return FR_WRITE_PROTECTED;
 8002cfa:	230a      	movs	r3, #10
}
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	b00b      	add	sp, #44	; 0x2c
 8002d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	2200      	movs	r2, #0
 8002d06:	00db      	lsls	r3, r3, #3
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002d08:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8002d0a:	54e2      	strb	r2, [r4, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002d0c:	55a0      	strb	r0, [r4, r6]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002d0e:	f7ff fce1 	bl	80026d4 <disk_initialize>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002d12:	2303      	movs	r3, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8002d14:	07c2      	lsls	r2, r0, #31
 8002d16:	d4f1      	bmi.n	8002cfc <find_volume+0x48>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8002d18:	2f00      	cmp	r7, #0
 8002d1a:	d001      	beq.n	8002d20 <find_volume+0x6c>
 8002d1c:	0743      	lsls	r3, r0, #29
 8002d1e:	d4ec      	bmi.n	8002cfa <find_volume+0x46>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8002d20:	4b9c      	ldr	r3, [pc, #624]	; (8002f94 <find_volume+0x2e0>)
 8002d22:	5da0      	ldrb	r0, [r4, r6]
 8002d24:	18e2      	adds	r2, r4, r3
 8002d26:	2102      	movs	r1, #2
 8002d28:	f7ff fd04 	bl	8002734 <disk_ioctl>
 8002d2c:	1e06      	subs	r6, r0, #0
 8002d2e:	d001      	beq.n	8002d34 <find_volume+0x80>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e7e3      	b.n	8002cfc <find_volume+0x48>
 8002d34:	4d97      	ldr	r5, [pc, #604]	; (8002f94 <find_volume+0x2e0>)
 8002d36:	4a98      	ldr	r2, [pc, #608]	; (8002f98 <find_volume+0x2e4>)
 8002d38:	5b63      	ldrh	r3, [r4, r5]
 8002d3a:	189b      	adds	r3, r3, r2
 8002d3c:	2280      	movs	r2, #128	; 0x80
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	0092      	lsls	r2, r2, #2
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d8f4      	bhi.n	8002d30 <find_volume+0x7c>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8002d46:	0001      	movs	r1, r0
 8002d48:	0020      	movs	r0, r4
 8002d4a:	f7ff ff75 	bl	8002c38 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8002d4e:	2801      	cmp	r0, #1
 8002d50:	d12b      	bne.n	8002daa <find_volume+0xf6>
 8002d52:	0023      	movs	r3, r4
 8002d54:	33c7      	adds	r3, #199	; 0xc7
 8002d56:	33ff      	adds	r3, #255	; 0xff
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8002d58:	1f1a      	subs	r2, r3, #4
 8002d5a:	7811      	ldrb	r1, [r2, #0]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4291      	cmp	r1, r2
 8002d60:	d009      	beq.n	8002d76 <find_volume+0xc2>
 8002d62:	7859      	ldrb	r1, [r3, #1]
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	0209      	lsls	r1, r1, #8
 8002d68:	4311      	orrs	r1, r2
 8002d6a:	789a      	ldrb	r2, [r3, #2]
 8002d6c:	0412      	lsls	r2, r2, #16
 8002d6e:	4311      	orrs	r1, r2
 8002d70:	78da      	ldrb	r2, [r3, #3]
 8002d72:	0612      	lsls	r2, r2, #24
 8002d74:	430a      	orrs	r2, r1
 8002d76:	a906      	add	r1, sp, #24
 8002d78:	5072      	str	r2, [r6, r1]
 8002d7a:	3604      	adds	r6, #4
 8002d7c:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002d7e:	2e10      	cmp	r6, #16
 8002d80:	d1ea      	bne.n	8002d58 <find_volume+0xa4>
 8002d82:	2600      	movs	r6, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002d84:	2702      	movs	r7, #2
			bsect = br[i];
 8002d86:	ab06      	add	r3, sp, #24
 8002d88:	599b      	ldr	r3, [r3, r6]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002d8a:	0038      	movs	r0, r7
			bsect = br[i];
 8002d8c:	9300      	str	r3, [sp, #0]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <find_volume+0xea>
 8002d92:	0019      	movs	r1, r3
 8002d94:	0020      	movs	r0, r4
 8002d96:	f7ff ff4f 	bl	8002c38 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d00c      	beq.n	8002db8 <find_volume+0x104>
 8002d9e:	3604      	adds	r6, #4
 8002da0:	2e10      	cmp	r6, #16
 8002da2:	d1f0      	bne.n	8002d86 <find_volume+0xd2>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002da4:	2803      	cmp	r0, #3
 8002da6:	d104      	bne.n	8002db2 <find_volume+0xfe>
 8002da8:	e7c2      	b.n	8002d30 <find_volume+0x7c>
 8002daa:	2803      	cmp	r0, #3
 8002dac:	d0c0      	beq.n	8002d30 <find_volume+0x7c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8002dae:	2800      	cmp	r0, #0
 8002db0:	d001      	beq.n	8002db6 <find_volume+0x102>
 8002db2:	230d      	movs	r3, #13
 8002db4:	e7a2      	b.n	8002cfc <find_volume+0x48>
	bsect = 0;
 8002db6:	9000      	str	r0, [sp, #0]
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002db8:	7b23      	ldrb	r3, [r4, #12]
 8002dba:	7ae2      	ldrb	r2, [r4, #11]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	9204      	str	r2, [sp, #16]
 8002dc2:	5b63      	ldrh	r3, [r4, r5]
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d1f4      	bne.n	8002db2 <find_volume+0xfe>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8002dc8:	7de2      	ldrb	r2, [r4, #23]
 8002dca:	7da3      	ldrb	r3, [r4, #22]
 8002dcc:	0212      	lsls	r2, r2, #8
 8002dce:	4313      	orrs	r3, r2
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8002dd0:	d100      	bne.n	8002dd4 <find_volume+0x120>
 8002dd2:	e0c6      	b.n	8002f62 <find_volume+0x2ae>
 8002dd4:	9302      	str	r3, [sp, #8]
	fs->fsize = fasize;
 8002dd6:	2383      	movs	r3, #131	; 0x83
 8002dd8:	9a02      	ldr	r2, [sp, #8]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	50e2      	str	r2, [r4, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8002dde:	7c26      	ldrb	r6, [r4, #16]
 8002de0:	4b6e      	ldr	r3, [pc, #440]	; (8002f9c <find_volume+0x2e8>)
 8002de2:	54e6      	strb	r6, [r4, r3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8002de4:	1e73      	subs	r3, r6, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d8e3      	bhi.n	8002db2 <find_volume+0xfe>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8002dea:	7b65      	ldrb	r5, [r4, #13]
 8002dec:	4b6c      	ldr	r3, [pc, #432]	; (8002fa0 <find_volume+0x2ec>)
 8002dee:	54e5      	strb	r5, [r4, r3]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8002df0:	2d00      	cmp	r5, #0
 8002df2:	d0de      	beq.n	8002db2 <find_volume+0xfe>
 8002df4:	1e6b      	subs	r3, r5, #1
 8002df6:	421d      	tst	r5, r3
 8002df8:	d1db      	bne.n	8002db2 <find_volume+0xfe>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8002dfa:	7ca3      	ldrb	r3, [r4, #18]
 8002dfc:	7c62      	ldrb	r2, [r4, #17]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	431a      	orrs	r2, r3
 8002e02:	9201      	str	r2, [sp, #4]
 8002e04:	466a      	mov	r2, sp
 8002e06:	2381      	movs	r3, #129	; 0x81
 8002e08:	8892      	ldrh	r2, [r2, #4]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	52e2      	strh	r2, [r4, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8002e0e:	9b04      	ldr	r3, [sp, #16]
 8002e10:	9801      	ldr	r0, [sp, #4]
 8002e12:	095f      	lsrs	r7, r3, #5
 8002e14:	0039      	movs	r1, r7
 8002e16:	f7fd fa19 	bl	800024c <__aeabi_uidivmod>
 8002e1a:	b289      	uxth	r1, r1
 8002e1c:	2900      	cmp	r1, #0
 8002e1e:	d1c8      	bne.n	8002db2 <find_volume+0xfe>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8002e20:	7d20      	ldrb	r0, [r4, #20]
 8002e22:	7ce3      	ldrb	r3, [r4, #19]
 8002e24:	0200      	lsls	r0, r0, #8
 8002e26:	4303      	orrs	r3, r0
 8002e28:	9303      	str	r3, [sp, #12]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8002e2a:	d101      	bne.n	8002e30 <find_volume+0x17c>
 8002e2c:	6a23      	ldr	r3, [r4, #32]
 8002e2e:	9303      	str	r3, [sp, #12]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002e30:	7be3      	ldrb	r3, [r4, #15]
 8002e32:	7ba2      	ldrb	r2, [r4, #14]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	431a      	orrs	r2, r3
 8002e38:	9205      	str	r2, [sp, #20]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8002e3a:	d0ba      	beq.n	8002db2 <find_volume+0xfe>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002e3c:	9b02      	ldr	r3, [sp, #8]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002e3e:	0039      	movs	r1, r7
 8002e40:	9801      	ldr	r0, [sp, #4]
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002e42:	435e      	muls	r6, r3
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002e44:	f7fd f97c 	bl	8000140 <__udivsi3>
 8002e48:	9b05      	ldr	r3, [sp, #20]
 8002e4a:	b287      	uxth	r7, r0
 8002e4c:	18ff      	adds	r7, r7, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002e4e:	9b03      	ldr	r3, [sp, #12]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002e50:	19bf      	adds	r7, r7, r6
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002e52:	42bb      	cmp	r3, r7
 8002e54:	d3ad      	bcc.n	8002db2 <find_volume+0xfe>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002e56:	1bd8      	subs	r0, r3, r7
 8002e58:	0029      	movs	r1, r5
 8002e5a:	f7fd f971 	bl	8000140 <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d0a7      	beq.n	8002db2 <find_volume+0xfe>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002e62:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <find_volume+0x2f0>)
	fmt = FS_FAT12;
 8002e64:	2501      	movs	r5, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002e66:	4298      	cmp	r0, r3
 8002e68:	d904      	bls.n	8002e74 <find_volume+0x1c0>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002e6a:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <find_volume+0x2f4>)
 8002e6c:	4283      	cmp	r3, r0
 8002e6e:	419b      	sbcs	r3, r3
 8002e70:	425d      	negs	r5, r3
 8002e72:	3502      	adds	r5, #2
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <find_volume+0x2f8>)
 8002e76:	3002      	adds	r0, #2
 8002e78:	50e0      	str	r0, [r4, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8002e7a:	9a00      	ldr	r2, [sp, #0]
 8002e7c:	4b4c      	ldr	r3, [pc, #304]	; (8002fb0 <find_volume+0x2fc>)
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002e7e:	4694      	mov	ip, r2
	fs->volbase = bsect;								/* Volume start sector */
 8002e80:	50e2      	str	r2, [r4, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002e82:	2284      	movs	r2, #132	; 0x84
 8002e84:	9b05      	ldr	r3, [sp, #20]
 8002e86:	00d2      	lsls	r2, r2, #3
 8002e88:	4463      	add	r3, ip
 8002e8a:	50a3      	str	r3, [r4, r2]
	fs->database = bsect + sysect;						/* Data start sector */
 8002e8c:	4662      	mov	r2, ip
 8002e8e:	19d7      	adds	r7, r2, r7
 8002e90:	2285      	movs	r2, #133	; 0x85
 8002e92:	00d2      	lsls	r2, r2, #3
 8002e94:	50a7      	str	r7, [r4, r2]
	if (fmt == FS_FAT32) {
 8002e96:	2d03      	cmp	r5, #3
 8002e98:	d165      	bne.n	8002f66 <find_volume+0x2b2>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8002e9a:	9b01      	ldr	r3, [sp, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d188      	bne.n	8002db2 <find_volume+0xfe>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8002ea0:	4b44      	ldr	r3, [pc, #272]	; (8002fb4 <find_volume+0x300>)
 8002ea2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8002ea4:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8002ea6:	50e2      	str	r2, [r4, r3]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002ea8:	9b04      	ldr	r3, [sp, #16]
 8002eaa:	9904      	ldr	r1, [sp, #16]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	1818      	adds	r0, r3, r0
 8002eb0:	f7fd f946 	bl	8000140 <__udivsi3>
 8002eb4:	9b02      	ldr	r3, [sp, #8]
 8002eb6:	4283      	cmp	r3, r0
 8002eb8:	d200      	bcs.n	8002ebc <find_volume+0x208>
 8002eba:	e77a      	b.n	8002db2 <find_volume+0xfe>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002ebc:	2682      	movs	r6, #130	; 0x82
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4a3d      	ldr	r2, [pc, #244]	; (8002fb8 <find_volume+0x304>)
 8002ec2:	425b      	negs	r3, r3
 8002ec4:	00f6      	lsls	r6, r6, #3
	fs->fsi_flag = 0x80;
 8002ec6:	4f3d      	ldr	r7, [pc, #244]	; (8002fbc <find_volume+0x308>)
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002ec8:	51a3      	str	r3, [r4, r6]
 8002eca:	50a3      	str	r3, [r4, r2]
	fs->fsi_flag = 0x80;
 8002ecc:	3381      	adds	r3, #129	; 0x81
 8002ece:	55e3      	strb	r3, [r4, r7]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8002ed0:	2d03      	cmp	r5, #3
 8002ed2:	d12f      	bne.n	8002f34 <find_volume+0x280>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8002ed4:	0023      	movs	r3, r4
 8002ed6:	3331      	adds	r3, #49	; 0x31
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	0212      	lsls	r2, r2, #8
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d126      	bne.n	8002f34 <find_volume+0x280>
		&& move_window(fs, bsect + 1) == FR_OK)
 8002ee6:	9900      	ldr	r1, [sp, #0]
 8002ee8:	0020      	movs	r0, r4
 8002eea:	3101      	adds	r1, #1
 8002eec:	f7ff fe84 	bl	8002bf8 <move_window>
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	d11f      	bne.n	8002f34 <find_volume+0x280>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002ef4:	4b32      	ldr	r3, [pc, #200]	; (8002fc0 <find_volume+0x30c>)
		fs->fsi_flag = 0;
 8002ef6:	55e0      	strb	r0, [r4, r7]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002ef8:	5ce2      	ldrb	r2, [r4, r3]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	5ce3      	ldrb	r3, [r4, r3]
 8002efe:	0212      	lsls	r2, r2, #8
 8002f00:	4313      	orrs	r3, r2
 8002f02:	4a30      	ldr	r2, [pc, #192]	; (8002fc4 <find_volume+0x310>)
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d114      	bne.n	8002f34 <find_volume+0x280>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <find_volume+0x314>)
 8002f0c:	6822      	ldr	r2, [r4, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d110      	bne.n	8002f34 <find_volume+0x280>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8002f12:	22f2      	movs	r2, #242	; 0xf2
 8002f14:	0052      	lsls	r2, r2, #1
 8002f16:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <find_volume+0x318>)
 8002f18:	58a2      	ldr	r2, [r4, r2]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d10a      	bne.n	8002f34 <find_volume+0x280>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8002f1e:	23f4      	movs	r3, #244	; 0xf4
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	58e3      	ldr	r3, [r4, r3]
 8002f24:	51a3      	str	r3, [r4, r6]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8002f26:	23f6      	movs	r3, #246	; 0xf6
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	58e3      	ldr	r3, [r4, r3]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	9a00      	ldr	r2, [sp, #0]
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <find_volume+0x304>)
 8002f32:	50e2      	str	r2, [r4, r3]
	fs->fs_type = fmt;	/* FAT sub-type */
 8002f34:	2380      	movs	r3, #128	; 0x80
	fs->id = ++Fsid;	/* File system mount ID */
 8002f36:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <find_volume+0x31c>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	54e5      	strb	r5, [r4, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 8002f3c:	8813      	ldrh	r3, [r2, #0]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	8013      	strh	r3, [r2, #0]
 8002f44:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <find_volume+0x320>)
 8002f46:	52a3      	strh	r3, [r4, r2]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002f48:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <find_volume+0x324>)
 8002f4a:	6813      	ldr	r3, [r2, #0]
 8002f4c:	429c      	cmp	r4, r3
 8002f4e:	d101      	bne.n	8002f54 <find_volume+0x2a0>
 8002f50:	2300      	movs	r3, #0
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	68d1      	ldr	r1, [r2, #12]
 8002f56:	2300      	movs	r3, #0
 8002f58:	428c      	cmp	r4, r1
 8002f5a:	d000      	beq.n	8002f5e <find_volume+0x2aa>
 8002f5c:	e6ce      	b.n	8002cfc <find_volume+0x48>
 8002f5e:	60d3      	str	r3, [r2, #12]
 8002f60:	e6cc      	b.n	8002cfc <find_volume+0x48>
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8002f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f64:	e736      	b.n	8002dd4 <find_volume+0x120>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002f66:	9a01      	ldr	r2, [sp, #4]
 8002f68:	2a00      	cmp	r2, #0
 8002f6a:	d100      	bne.n	8002f6e <find_volume+0x2ba>
 8002f6c:	e721      	b.n	8002db2 <find_volume+0xfe>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002f6e:	18f6      	adds	r6, r6, r3
 8002f70:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <find_volume+0x300>)
 8002f72:	50e6      	str	r6, [r4, r3]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002f74:	2d02      	cmp	r5, #2
 8002f76:	d101      	bne.n	8002f7c <find_volume+0x2c8>
 8002f78:	0040      	lsls	r0, r0, #1
 8002f7a:	e795      	b.n	8002ea8 <find_volume+0x1f4>
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4343      	muls	r3, r0
 8002f82:	4010      	ands	r0, r2
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	1818      	adds	r0, r3, r0
 8002f88:	e78e      	b.n	8002ea8 <find_volume+0x1f4>
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	200000a4 	.word	0x200000a4
 8002f90:	00000401 	.word	0x00000401
 8002f94:	0000040a 	.word	0x0000040a
 8002f98:	fffffe00 	.word	0xfffffe00
 8002f9c:	00000403 	.word	0x00000403
 8002fa0:	00000402 	.word	0x00000402
 8002fa4:	00000ff5 	.word	0x00000ff5
 8002fa8:	0000fff5 	.word	0x0000fff5
 8002fac:	00000414 	.word	0x00000414
 8002fb0:	0000041c 	.word	0x0000041c
 8002fb4:	00000424 	.word	0x00000424
 8002fb8:	0000040c 	.word	0x0000040c
 8002fbc:	00000405 	.word	0x00000405
 8002fc0:	000001ff 	.word	0x000001ff
 8002fc4:	ffffaa55 	.word	0xffffaa55
 8002fc8:	41615252 	.word	0x41615252
 8002fcc:	61417272 	.word	0x61417272
 8002fd0:	200000c0 	.word	0x200000c0
 8002fd4:	00000406 	.word	0x00000406
 8002fd8:	200000a8 	.word	0x200000a8

08002fdc <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002fdc:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <clust2sect+0x20>)
	clst -= 2;
 8002fde:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002fe0:	5882      	ldr	r2, [r0, r2]
{
 8002fe2:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002fe4:	3a02      	subs	r2, #2
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	4291      	cmp	r1, r2
 8002fea:	d205      	bcs.n	8002ff8 <clust2sect+0x1c>
	return clst * fs->csize + fs->database;
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <clust2sect+0x24>)
 8002fee:	5c98      	ldrb	r0, [r3, r2]
 8002ff0:	3226      	adds	r2, #38	; 0x26
 8002ff2:	4341      	muls	r1, r0
 8002ff4:	5898      	ldr	r0, [r3, r2]
 8002ff6:	1808      	adds	r0, r1, r0
}
 8002ff8:	4770      	bx	lr
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	00000414 	.word	0x00000414
 8003000:	00000402 	.word	0x00000402

08003004 <get_fat>:
{
 8003004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 8003006:	2501      	movs	r5, #1
{
 8003008:	0004      	movs	r4, r0
 800300a:	000e      	movs	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800300c:	42a9      	cmp	r1, r5
 800300e:	d91f      	bls.n	8003050 <get_fat+0x4c>
 8003010:	4b40      	ldr	r3, [pc, #256]	; (8003114 <get_fat+0x110>)
 8003012:	58c3      	ldr	r3, [r0, r3]
 8003014:	4299      	cmp	r1, r3
 8003016:	d21b      	bcs.n	8003050 <get_fat+0x4c>
		switch (fs->fs_type) {
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	5cc3      	ldrb	r3, [r0, r3]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d03e      	beq.n	80030a0 <get_fat+0x9c>
 8003022:	2b03      	cmp	r3, #3
 8003024:	d055      	beq.n	80030d2 <get_fat+0xce>
 8003026:	42ab      	cmp	r3, r5
 8003028:	d112      	bne.n	8003050 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800302a:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <get_fat+0x114>)
			bc = (UINT)clst; bc += bc / 2;
 800302c:	084f      	lsrs	r7, r1, #1
 800302e:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003030:	5ac1      	ldrh	r1, [r0, r3]
 8003032:	0038      	movs	r0, r7
 8003034:	f7fd f884 	bl	8000140 <__udivsi3>
 8003038:	2384      	movs	r3, #132	; 0x84
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	58e3      	ldr	r3, [r4, r3]
 800303e:	18c1      	adds	r1, r0, r3
 8003040:	0020      	movs	r0, r4
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	f7ff fdd8 	bl	8002bf8 <move_window>
 8003048:	2800      	cmp	r0, #0
 800304a:	d003      	beq.n	8003054 <get_fat+0x50>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800304c:	2501      	movs	r5, #1
 800304e:	426d      	negs	r5, r5
}
 8003050:	0028      	movs	r0, r5
 8003052:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win.d8[bc++ % SS(fs)];
 8003054:	1c7b      	adds	r3, r7, #1
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <get_fat+0x114>)
 800305a:	0038      	movs	r0, r7
 800305c:	5ae3      	ldrh	r3, [r4, r3]
 800305e:	0019      	movs	r1, r3
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	f7fd f8f3 	bl	800024c <__aeabi_uidivmod>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003066:	9800      	ldr	r0, [sp, #0]
			wc = fs->win.d8[bc++ % SS(fs)];
 8003068:	5c67      	ldrb	r7, [r4, r1]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800306a:	9901      	ldr	r1, [sp, #4]
 800306c:	f7fd f868 	bl	8000140 <__udivsi3>
 8003070:	2384      	movs	r3, #132	; 0x84
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	58e1      	ldr	r1, [r4, r3]
 8003076:	1841      	adds	r1, r0, r1
 8003078:	0020      	movs	r0, r4
 800307a:	f7ff fdbd 	bl	8002bf8 <move_window>
 800307e:	2800      	cmp	r0, #0
 8003080:	d1e4      	bne.n	800304c <get_fat+0x48>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003082:	4b25      	ldr	r3, [pc, #148]	; (8003118 <get_fat+0x114>)
 8003084:	9800      	ldr	r0, [sp, #0]
 8003086:	5ae1      	ldrh	r1, [r4, r3]
 8003088:	f7fd f8e0 	bl	800024c <__aeabi_uidivmod>
 800308c:	5c63      	ldrb	r3, [r4, r1]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	431f      	orrs	r7, r3
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003092:	422e      	tst	r6, r5
 8003094:	d001      	beq.n	800309a <get_fat+0x96>
 8003096:	093d      	lsrs	r5, r7, #4
 8003098:	e7da      	b.n	8003050 <get_fat+0x4c>
 800309a:	053f      	lsls	r7, r7, #20
 800309c:	0d3d      	lsrs	r5, r7, #20
 800309e:	e7d7      	b.n	8003050 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80030a0:	4d1d      	ldr	r5, [pc, #116]	; (8003118 <get_fat+0x114>)
 80030a2:	5b41      	ldrh	r1, [r0, r5]
 80030a4:	0030      	movs	r0, r6
 80030a6:	0849      	lsrs	r1, r1, #1
 80030a8:	f7fd f84a 	bl	8000140 <__udivsi3>
 80030ac:	2384      	movs	r3, #132	; 0x84
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	58e1      	ldr	r1, [r4, r3]
 80030b2:	1841      	adds	r1, r0, r1
 80030b4:	0020      	movs	r0, r4
 80030b6:	f7ff fd9f 	bl	8002bf8 <move_window>
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d1c6      	bne.n	800304c <get_fat+0x48>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80030be:	5b61      	ldrh	r1, [r4, r5]
 80030c0:	0070      	lsls	r0, r6, #1
 80030c2:	f7fd f8c3 	bl	800024c <__aeabi_uidivmod>
			val = LD_WORD(p);
 80030c6:	1863      	adds	r3, r4, r1
 80030c8:	785d      	ldrb	r5, [r3, #1]
 80030ca:	5c63      	ldrb	r3, [r4, r1]
 80030cc:	022d      	lsls	r5, r5, #8
 80030ce:	431d      	orrs	r5, r3
 80030d0:	e7be      	b.n	8003050 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80030d2:	4d11      	ldr	r5, [pc, #68]	; (8003118 <get_fat+0x114>)
 80030d4:	5b41      	ldrh	r1, [r0, r5]
 80030d6:	0030      	movs	r0, r6
 80030d8:	0889      	lsrs	r1, r1, #2
 80030da:	f7fd f831 	bl	8000140 <__udivsi3>
 80030de:	2384      	movs	r3, #132	; 0x84
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	58e1      	ldr	r1, [r4, r3]
 80030e4:	1841      	adds	r1, r0, r1
 80030e6:	0020      	movs	r0, r4
 80030e8:	f7ff fd86 	bl	8002bf8 <move_window>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d1ad      	bne.n	800304c <get_fat+0x48>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80030f0:	5b61      	ldrh	r1, [r4, r5]
 80030f2:	00b0      	lsls	r0, r6, #2
 80030f4:	f7fd f8aa 	bl	800024c <__aeabi_uidivmod>
 80030f8:	1863      	adds	r3, r4, r1
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80030fa:	78dd      	ldrb	r5, [r3, #3]
 80030fc:	789a      	ldrb	r2, [r3, #2]
 80030fe:	062d      	lsls	r5, r5, #24
 8003100:	0412      	lsls	r2, r2, #16
 8003102:	4315      	orrs	r5, r2
 8003104:	785b      	ldrb	r3, [r3, #1]
 8003106:	5c62      	ldrb	r2, [r4, r1]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	4315      	orrs	r5, r2
 800310c:	431d      	orrs	r5, r3
 800310e:	012d      	lsls	r5, r5, #4
 8003110:	092d      	lsrs	r5, r5, #4
 8003112:	e79d      	b.n	8003050 <get_fat+0x4c>
 8003114:	00000414 	.word	0x00000414
 8003118:	0000040a 	.word	0x0000040a

0800311c <dir_sdi>:
{
 800311c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800311e:	0005      	movs	r5, r0
	dp->index = (WORD)idx;	/* Current index */
 8003120:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <dir_sdi+0xcc>)
{
 8003122:	000e      	movs	r6, r1
	dp->index = (WORD)idx;	/* Current index */
 8003124:	52e9      	strh	r1, [r5, r3]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003126:	3302      	adds	r3, #2
 8003128:	58c4      	ldr	r4, [r0, r3]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800312a:	2c01      	cmp	r4, #1
 800312c:	d101      	bne.n	8003132 <dir_sdi+0x16>
		return FR_INT_ERR;
 800312e:	2002      	movs	r0, #2
}
 8003130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003132:	2280      	movs	r2, #128	; 0x80
 8003134:	00d2      	lsls	r2, r2, #3
 8003136:	492d      	ldr	r1, [pc, #180]	; (80031ec <dir_sdi+0xd0>)
 8003138:	5883      	ldr	r3, [r0, r2]
 800313a:	9101      	str	r1, [sp, #4]
 800313c:	5858      	ldr	r0, [r3, r1]
 800313e:	4284      	cmp	r4, r0
 8003140:	d2f5      	bcs.n	800312e <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003142:	2c00      	cmp	r4, #0
 8003144:	d12b      	bne.n	800319e <dir_sdi+0x82>
 8003146:	5c9a      	ldrb	r2, [r3, r2]
 8003148:	2a03      	cmp	r2, #3
 800314a:	d103      	bne.n	8003154 <dir_sdi+0x38>
		clst = dp->fs->dirbase;
 800314c:	4a28      	ldr	r2, [pc, #160]	; (80031f0 <dir_sdi+0xd4>)
 800314e:	589a      	ldr	r2, [r3, r2]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003150:	2a00      	cmp	r2, #0
 8003152:	d125      	bne.n	80031a0 <dir_sdi+0x84>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003154:	2281      	movs	r2, #129	; 0x81
 8003156:	00d2      	lsls	r2, r2, #3
 8003158:	5a9a      	ldrh	r2, [r3, r2]
 800315a:	4296      	cmp	r6, r2
 800315c:	d2e7      	bcs.n	800312e <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 800315e:	4a24      	ldr	r2, [pc, #144]	; (80031f0 <dir_sdi+0xd4>)
 8003160:	589f      	ldr	r7, [r3, r2]
	dp->clust = clst;	/* Current cluster# */
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <dir_sdi+0xd8>)
 8003164:	50ec      	str	r4, [r5, r3]
	if (!sect) return FR_INT_ERR;
 8003166:	2f00      	cmp	r7, #0
 8003168:	d0e1      	beq.n	800312e <dir_sdi+0x12>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800316a:	3b0c      	subs	r3, #12
 800316c:	58eb      	ldr	r3, [r5, r3]
 800316e:	0030      	movs	r0, r6
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	9a00      	ldr	r2, [sp, #0]
 8003174:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <dir_sdi+0xdc>)
 8003176:	5ad4      	ldrh	r4, [r2, r3]
 8003178:	0964      	lsrs	r4, r4, #5
 800317a:	0021      	movs	r1, r4
 800317c:	f7fc ffe0 	bl	8000140 <__udivsi3>
 8003180:	2382      	movs	r3, #130	; 0x82
 8003182:	19c7      	adds	r7, r0, r7
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	50ef      	str	r7, [r5, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003188:	0021      	movs	r1, r4
 800318a:	0030      	movs	r0, r6
 800318c:	f7fd f85e 	bl	800024c <__aeabi_uidivmod>
 8003190:	9b00      	ldr	r3, [sp, #0]
 8003192:	0149      	lsls	r1, r1, #5
 8003194:	1859      	adds	r1, r3, r1
 8003196:	9b01      	ldr	r3, [sp, #4]
	return FR_OK;
 8003198:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800319a:	50e9      	str	r1, [r5, r3]
	return FR_OK;
 800319c:	e7c8      	b.n	8003130 <dir_sdi+0x14>
 800319e:	0022      	movs	r2, r4
 80031a0:	2780      	movs	r7, #128	; 0x80
		while (idx >= ic) {	/* Follow cluster chain */
 80031a2:	0014      	movs	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80031a4:	4914      	ldr	r1, [pc, #80]	; (80031f8 <dir_sdi+0xdc>)
 80031a6:	4815      	ldr	r0, [pc, #84]	; (80031fc <dir_sdi+0xe0>)
 80031a8:	5a59      	ldrh	r1, [r3, r1]
 80031aa:	5c1b      	ldrb	r3, [r3, r0]
 80031ac:	0949      	lsrs	r1, r1, #5
 80031ae:	434b      	muls	r3, r1
 80031b0:	00ff      	lsls	r7, r7, #3
 80031b2:	9300      	str	r3, [sp, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80031b4:	9b00      	ldr	r3, [sp, #0]
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80031b6:	0021      	movs	r1, r4
 80031b8:	59e8      	ldr	r0, [r5, r7]
		while (idx >= ic) {	/* Follow cluster chain */
 80031ba:	429e      	cmp	r6, r3
 80031bc:	d203      	bcs.n	80031c6 <dir_sdi+0xaa>
		sect = clust2sect(dp->fs, clst);
 80031be:	f7ff ff0d 	bl	8002fdc <clust2sect>
 80031c2:	0007      	movs	r7, r0
 80031c4:	e7cd      	b.n	8003162 <dir_sdi+0x46>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80031c6:	f7ff ff1d 	bl	8003004 <get_fat>
 80031ca:	0004      	movs	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80031cc:	1c43      	adds	r3, r0, #1
 80031ce:	d009      	beq.n	80031e4 <dir_sdi+0xc8>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80031d0:	2801      	cmp	r0, #1
 80031d2:	d9ac      	bls.n	800312e <dir_sdi+0x12>
 80031d4:	59eb      	ldr	r3, [r5, r7]
 80031d6:	9a01      	ldr	r2, [sp, #4]
 80031d8:	589b      	ldr	r3, [r3, r2]
 80031da:	4298      	cmp	r0, r3
 80031dc:	d2a7      	bcs.n	800312e <dir_sdi+0x12>
			idx -= ic;
 80031de:	9b00      	ldr	r3, [sp, #0]
 80031e0:	1af6      	subs	r6, r6, r3
 80031e2:	e7e7      	b.n	80031b4 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80031e4:	2001      	movs	r0, #1
 80031e6:	e7a3      	b.n	8003130 <dir_sdi+0x14>
 80031e8:	00000406 	.word	0x00000406
 80031ec:	00000414 	.word	0x00000414
 80031f0:	00000424 	.word	0x00000424
 80031f4:	0000040c 	.word	0x0000040c
 80031f8:	0000040a 	.word	0x0000040a
 80031fc:	00000402 	.word	0x00000402

08003200 <put_fat>:
{
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	b085      	sub	sp, #20
 8003204:	0004      	movs	r4, r0
 8003206:	000d      	movs	r5, r1
 8003208:	9201      	str	r2, [sp, #4]
		res = FR_INT_ERR;
 800320a:	2602      	movs	r6, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800320c:	2901      	cmp	r1, #1
 800320e:	d955      	bls.n	80032bc <put_fat+0xbc>
 8003210:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <put_fat+0x150>)
 8003212:	58c3      	ldr	r3, [r0, r3]
 8003214:	4299      	cmp	r1, r3
 8003216:	d251      	bcs.n	80032bc <put_fat+0xbc>
		switch (fs->fs_type) {
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	5cc3      	ldrb	r3, [r0, r3]
 800321e:	9302      	str	r3, [sp, #8]
 8003220:	42b3      	cmp	r3, r6
 8003222:	d056      	beq.n	80032d2 <put_fat+0xd2>
 8003224:	2b03      	cmp	r3, #3
 8003226:	d100      	bne.n	800322a <put_fat+0x2a>
 8003228:	e071      	b.n	800330e <put_fat+0x10e>
 800322a:	2b01      	cmp	r3, #1
 800322c:	d146      	bne.n	80032bc <put_fat+0xbc>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800322e:	4b49      	ldr	r3, [pc, #292]	; (8003354 <put_fat+0x154>)
			bc = (UINT)clst; bc += bc / 2;
 8003230:	084f      	lsrs	r7, r1, #1
 8003232:	187f      	adds	r7, r7, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003234:	5ac1      	ldrh	r1, [r0, r3]
 8003236:	0038      	movs	r0, r7
 8003238:	f7fc ff82 	bl	8000140 <__udivsi3>
 800323c:	2384      	movs	r3, #132	; 0x84
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	58e1      	ldr	r1, [r4, r3]
 8003242:	1841      	adds	r1, r0, r1
 8003244:	0020      	movs	r0, r4
 8003246:	f7ff fcd7 	bl	8002bf8 <move_window>
 800324a:	4b42      	ldr	r3, [pc, #264]	; (8003354 <put_fat+0x154>)
 800324c:	1e06      	subs	r6, r0, #0
 800324e:	9303      	str	r3, [sp, #12]
			if (res != FR_OK) break;
 8003250:	d134      	bne.n	80032bc <put_fat+0xbc>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003252:	1c7b      	adds	r3, r7, #1
 8003254:	9303      	str	r3, [sp, #12]
 8003256:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <put_fat+0x154>)
 8003258:	0038      	movs	r0, r7
 800325a:	5ae6      	ldrh	r6, [r4, r3]
 800325c:	0031      	movs	r1, r6
 800325e:	f7fc fff5 	bl	800024c <__aeabi_uidivmod>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003262:	466b      	mov	r3, sp
 8003264:	9f02      	ldr	r7, [sp, #8]
 8003266:	791b      	ldrb	r3, [r3, #4]
 8003268:	402f      	ands	r7, r5
 800326a:	d009      	beq.n	8003280 <put_fat+0x80>
 800326c:	220f      	movs	r2, #15
 800326e:	20ff      	movs	r0, #255	; 0xff
 8003270:	5c63      	ldrb	r3, [r4, r1]
 8003272:	0100      	lsls	r0, r0, #4
 8003274:	4013      	ands	r3, r2
 8003276:	9a01      	ldr	r2, [sp, #4]
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	4002      	ands	r2, r0
 800327c:	4313      	orrs	r3, r2
 800327e:	b2db      	uxtb	r3, r3
 8003280:	5463      	strb	r3, [r4, r1]
			fs->wflag = 1;
 8003282:	2301      	movs	r3, #1
 8003284:	4d34      	ldr	r5, [pc, #208]	; (8003358 <put_fat+0x158>)
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003286:	0031      	movs	r1, r6
			fs->wflag = 1;
 8003288:	5563      	strb	r3, [r4, r5]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800328a:	9803      	ldr	r0, [sp, #12]
 800328c:	f7fc ff58 	bl	8000140 <__udivsi3>
 8003290:	2384      	movs	r3, #132	; 0x84
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	58e1      	ldr	r1, [r4, r3]
 8003296:	1841      	adds	r1, r0, r1
 8003298:	0020      	movs	r0, r4
 800329a:	f7ff fcad 	bl	8002bf8 <move_window>
 800329e:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 80032a0:	d10c      	bne.n	80032bc <put_fat+0xbc>
			p = &fs->win.d8[bc % SS(fs)];
 80032a2:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <put_fat+0x154>)
 80032a4:	9803      	ldr	r0, [sp, #12]
 80032a6:	5ae1      	ldrh	r1, [r4, r3]
 80032a8:	f7fc ffd0 	bl	800024c <__aeabi_uidivmod>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80032ac:	2f00      	cmp	r7, #0
 80032ae:	d008      	beq.n	80032c2 <put_fat+0xc2>
 80032b0:	9b01      	ldr	r3, [sp, #4]
 80032b2:	091b      	lsrs	r3, r3, #4
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	5463      	strb	r3, [r4, r1]
			fs->wflag = 1;
 80032b8:	2301      	movs	r3, #1
 80032ba:	5563      	strb	r3, [r4, r5]
}
 80032bc:	0030      	movs	r0, r6
 80032be:	b005      	add	sp, #20
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80032c2:	200f      	movs	r0, #15
 80032c4:	9a01      	ldr	r2, [sp, #4]
 80032c6:	5c63      	ldrb	r3, [r4, r1]
 80032c8:	0a12      	lsrs	r2, r2, #8
 80032ca:	4383      	bics	r3, r0
 80032cc:	4002      	ands	r2, r0
 80032ce:	4313      	orrs	r3, r2
 80032d0:	e7f1      	b.n	80032b6 <put_fat+0xb6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80032d2:	4f20      	ldr	r7, [pc, #128]	; (8003354 <put_fat+0x154>)
 80032d4:	5bc1      	ldrh	r1, [r0, r7]
 80032d6:	0028      	movs	r0, r5
 80032d8:	0849      	lsrs	r1, r1, #1
 80032da:	f7fc ff31 	bl	8000140 <__udivsi3>
 80032de:	2384      	movs	r3, #132	; 0x84
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	58e1      	ldr	r1, [r4, r3]
 80032e4:	1841      	adds	r1, r0, r1
 80032e6:	0020      	movs	r0, r4
 80032e8:	f7ff fc86 	bl	8002bf8 <move_window>
 80032ec:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 80032ee:	d1e5      	bne.n	80032bc <put_fat+0xbc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80032f0:	5be1      	ldrh	r1, [r4, r7]
 80032f2:	0068      	lsls	r0, r5, #1
 80032f4:	f7fc ffaa 	bl	800024c <__aeabi_uidivmod>
			ST_WORD(p, (WORD)val);
 80032f8:	466b      	mov	r3, sp
 80032fa:	791b      	ldrb	r3, [r3, #4]
 80032fc:	5463      	strb	r3, [r4, r1]
 80032fe:	9b01      	ldr	r3, [sp, #4]
 8003300:	1861      	adds	r1, r4, r1
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	704b      	strb	r3, [r1, #1]
			fs->wflag = 1;
 8003306:	2201      	movs	r2, #1
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <put_fat+0x158>)
 800330a:	54e2      	strb	r2, [r4, r3]
 800330c:	e7d6      	b.n	80032bc <put_fat+0xbc>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800330e:	4f11      	ldr	r7, [pc, #68]	; (8003354 <put_fat+0x154>)
 8003310:	5bc1      	ldrh	r1, [r0, r7]
 8003312:	0028      	movs	r0, r5
 8003314:	0889      	lsrs	r1, r1, #2
 8003316:	f7fc ff13 	bl	8000140 <__udivsi3>
 800331a:	2384      	movs	r3, #132	; 0x84
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	58e1      	ldr	r1, [r4, r3]
 8003320:	1841      	adds	r1, r0, r1
 8003322:	0020      	movs	r0, r4
 8003324:	f7ff fc68 	bl	8002bf8 <move_window>
 8003328:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 800332a:	d1c7      	bne.n	80032bc <put_fat+0xbc>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800332c:	5be1      	ldrh	r1, [r4, r7]
 800332e:	00a8      	lsls	r0, r5, #2
 8003330:	f7fc ff8c 	bl	800024c <__aeabi_uidivmod>
 8003334:	1862      	adds	r2, r4, r1
			val |= LD_DWORD(p) & 0xF0000000;
 8003336:	78d3      	ldrb	r3, [r2, #3]
 8003338:	9801      	ldr	r0, [sp, #4]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	071b      	lsls	r3, r3, #28
 800333e:	4303      	orrs	r3, r0
			ST_DWORD(p, val);
 8003340:	5463      	strb	r3, [r4, r1]
 8003342:	0a19      	lsrs	r1, r3, #8
 8003344:	7051      	strb	r1, [r2, #1]
 8003346:	0c19      	lsrs	r1, r3, #16
 8003348:	0e1b      	lsrs	r3, r3, #24
 800334a:	7091      	strb	r1, [r2, #2]
 800334c:	70d3      	strb	r3, [r2, #3]
 800334e:	e7da      	b.n	8003306 <put_fat+0x106>
 8003350:	00000414 	.word	0x00000414
 8003354:	0000040a 	.word	0x0000040a
 8003358:	00000404 	.word	0x00000404

0800335c <create_chain>:
{
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	0005      	movs	r5, r0
 8003360:	1e0f      	subs	r7, r1, #0
	if (clst == 0) {		/* Create a new chain */
 8003362:	d109      	bne.n	8003378 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
 8003364:	4b2a      	ldr	r3, [pc, #168]	; (8003410 <create_chain+0xb4>)
 8003366:	58c6      	ldr	r6, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003368:	2e00      	cmp	r6, #0
 800336a:	d003      	beq.n	8003374 <create_chain+0x18>
 800336c:	4b29      	ldr	r3, [pc, #164]	; (8003414 <create_chain+0xb8>)
 800336e:	58c3      	ldr	r3, [r0, r3]
 8003370:	429e      	cmp	r6, r3
 8003372:	d311      	bcc.n	8003398 <create_chain+0x3c>
 8003374:	2601      	movs	r6, #1
 8003376:	e00f      	b.n	8003398 <create_chain+0x3c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003378:	f7ff fe44 	bl	8003004 <get_fat>
 800337c:	0004      	movs	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 800337e:	2801      	cmp	r0, #1
 8003380:	d943      	bls.n	800340a <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003382:	1c43      	adds	r3, r0, #1
 8003384:	d103      	bne.n	800338e <create_chain+0x32>
			ncl = 2;
 8003386:	2401      	movs	r4, #1
 8003388:	4264      	negs	r4, r4
}
 800338a:	0020      	movs	r0, r4
 800338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800338e:	4b21      	ldr	r3, [pc, #132]	; (8003414 <create_chain+0xb8>)
 8003390:	003e      	movs	r6, r7
 8003392:	58eb      	ldr	r3, [r5, r3]
 8003394:	4298      	cmp	r0, r3
 8003396:	d3f8      	bcc.n	800338a <create_chain+0x2e>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003398:	0034      	movs	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800339a:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <create_chain+0xb8>)
		ncl++;							/* Next cluster */
 800339c:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800339e:	58eb      	ldr	r3, [r5, r3]
 80033a0:	429c      	cmp	r4, r3
 80033a2:	d304      	bcc.n	80033ae <create_chain+0x52>
			if (ncl > scl) return 0;	/* No free cluster */
 80033a4:	2e01      	cmp	r6, #1
 80033a6:	d801      	bhi.n	80033ac <create_chain+0x50>
 80033a8:	2400      	movs	r4, #0
 80033aa:	e7ee      	b.n	800338a <create_chain+0x2e>
			ncl = 2;
 80033ac:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80033ae:	0021      	movs	r1, r4
 80033b0:	0028      	movs	r0, r5
 80033b2:	f7ff fe27 	bl	8003004 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d006      	beq.n	80033c8 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80033ba:	1c43      	adds	r3, r0, #1
 80033bc:	d0e3      	beq.n	8003386 <create_chain+0x2a>
 80033be:	2801      	cmp	r0, #1
 80033c0:	d023      	beq.n	800340a <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 80033c2:	42b4      	cmp	r4, r6
 80033c4:	d1e9      	bne.n	800339a <create_chain+0x3e>
 80033c6:	e7ef      	b.n	80033a8 <create_chain+0x4c>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80033c8:	4a13      	ldr	r2, [pc, #76]	; (8003418 <create_chain+0xbc>)
 80033ca:	0021      	movs	r1, r4
 80033cc:	0028      	movs	r0, r5
 80033ce:	f7ff ff17 	bl	8003200 <put_fat>
	if (res == FR_OK && clst != 0) {
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d117      	bne.n	8003406 <create_chain+0xaa>
 80033d6:	2f00      	cmp	r7, #0
 80033d8:	d10e      	bne.n	80033f8 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 80033da:	2282      	movs	r2, #130	; 0x82
		fs->last_clust = ncl;			/* Update FSINFO */
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <create_chain+0xb4>)
		if (fs->free_clust != 0xFFFFFFFF) {
 80033de:	00d2      	lsls	r2, r2, #3
		fs->last_clust = ncl;			/* Update FSINFO */
 80033e0:	50ec      	str	r4, [r5, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 80033e2:	58ab      	ldr	r3, [r5, r2]
 80033e4:	1c59      	adds	r1, r3, #1
 80033e6:	d0d0      	beq.n	800338a <create_chain+0x2e>
			fs->free_clust--;
 80033e8:	3b01      	subs	r3, #1
 80033ea:	50ab      	str	r3, [r5, r2]
			fs->fsi_flag |= 1;
 80033ec:	2301      	movs	r3, #1
 80033ee:	4a0b      	ldr	r2, [pc, #44]	; (800341c <create_chain+0xc0>)
 80033f0:	5ca9      	ldrb	r1, [r5, r2]
 80033f2:	430b      	orrs	r3, r1
 80033f4:	54ab      	strb	r3, [r5, r2]
 80033f6:	e7c8      	b.n	800338a <create_chain+0x2e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80033f8:	0022      	movs	r2, r4
 80033fa:	0039      	movs	r1, r7
 80033fc:	0028      	movs	r0, r5
 80033fe:	f7ff feff 	bl	8003200 <put_fat>
	if (res == FR_OK) {
 8003402:	2800      	cmp	r0, #0
 8003404:	d0e9      	beq.n	80033da <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003406:	2801      	cmp	r0, #1
 8003408:	d0bd      	beq.n	8003386 <create_chain+0x2a>
 800340a:	2401      	movs	r4, #1
 800340c:	e7bd      	b.n	800338a <create_chain+0x2e>
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	0000040c 	.word	0x0000040c
 8003414:	00000414 	.word	0x00000414
 8003418:	0fffffff 	.word	0x0fffffff
 800341c:	00000405 	.word	0x00000405

08003420 <dir_next>:
{
 8003420:	b5f0      	push	{r4, r5, r6, r7, lr}
	i = dp->index + 1;
 8003422:	4b55      	ldr	r3, [pc, #340]	; (8003578 <dir_next+0x158>)
{
 8003424:	b089      	sub	sp, #36	; 0x24
 8003426:	9105      	str	r1, [sp, #20]
	i = dp->index + 1;
 8003428:	5ac2      	ldrh	r2, [r0, r3]
{
 800342a:	0004      	movs	r4, r0
	i = dp->index + 1;
 800342c:	3201      	adds	r2, #1
 800342e:	9200      	str	r2, [sp, #0]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003430:	466a      	mov	r2, sp
 8003432:	8812      	ldrh	r2, [r2, #0]
 8003434:	9306      	str	r3, [sp, #24]
 8003436:	2a00      	cmp	r2, #0
 8003438:	d102      	bne.n	8003440 <dir_next+0x20>
		return FR_NO_FILE;
 800343a:	2004      	movs	r0, #4
}
 800343c:	b009      	add	sp, #36	; 0x24
 800343e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003440:	2682      	movs	r6, #130	; 0x82
 8003442:	00f6      	lsls	r6, r6, #3
 8003444:	5985      	ldr	r5, [r0, r6]
 8003446:	2d00      	cmp	r5, #0
 8003448:	d0f7      	beq.n	800343a <dir_next+0x1a>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	58c3      	ldr	r3, [r0, r3]
 8003450:	4f4a      	ldr	r7, [pc, #296]	; (800357c <dir_next+0x15c>)
 8003452:	9302      	str	r3, [sp, #8]
 8003454:	5bdb      	ldrh	r3, [r3, r7]
 8003456:	9800      	ldr	r0, [sp, #0]
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	0019      	movs	r1, r3
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	f7fc fef5 	bl	800024c <__aeabi_uidivmod>
 8003462:	9703      	str	r7, [sp, #12]
 8003464:	2900      	cmp	r1, #0
 8003466:	d10c      	bne.n	8003482 <dir_next+0x62>
		if (!dp->clust) {		/* Static table */
 8003468:	4b45      	ldr	r3, [pc, #276]	; (8003580 <dir_next+0x160>)
		dp->sect++;					/* Next sector */
 800346a:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 800346c:	58e7      	ldr	r7, [r4, r3]
		dp->sect++;					/* Next sector */
 800346e:	51a5      	str	r5, [r4, r6]
 8003470:	9304      	str	r3, [sp, #16]
		if (!dp->clust) {		/* Static table */
 8003472:	2f00      	cmp	r7, #0
 8003474:	d118      	bne.n	80034a8 <dir_next+0x88>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003476:	9a02      	ldr	r2, [sp, #8]
 8003478:	3b04      	subs	r3, #4
 800347a:	5ad3      	ldrh	r3, [r2, r3]
 800347c:	9a00      	ldr	r2, [sp, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d2db      	bcs.n	800343a <dir_next+0x1a>
	dp->index = (WORD)i;	/* Current index */
 8003482:	466a      	mov	r2, sp
 8003484:	9b06      	ldr	r3, [sp, #24]
 8003486:	8812      	ldrh	r2, [r2, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003488:	9800      	ldr	r0, [sp, #0]
	dp->index = (WORD)i;	/* Current index */
 800348a:	52e2      	strh	r2, [r4, r3]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	58e5      	ldr	r5, [r4, r3]
 8003492:	9b03      	ldr	r3, [sp, #12]
 8003494:	5ae9      	ldrh	r1, [r5, r3]
 8003496:	0949      	lsrs	r1, r1, #5
 8003498:	f7fc fed8 	bl	800024c <__aeabi_uidivmod>
 800349c:	4b39      	ldr	r3, [pc, #228]	; (8003584 <dir_next+0x164>)
 800349e:	0149      	lsls	r1, r1, #5
 80034a0:	186d      	adds	r5, r5, r1
 80034a2:	50e5      	str	r5, [r4, r3]
	return FR_OK;
 80034a4:	2000      	movs	r0, #0
 80034a6:	e7c9      	b.n	800343c <dir_next+0x1c>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80034a8:	4e37      	ldr	r6, [pc, #220]	; (8003588 <dir_next+0x168>)
 80034aa:	9b02      	ldr	r3, [sp, #8]
 80034ac:	9901      	ldr	r1, [sp, #4]
 80034ae:	9800      	ldr	r0, [sp, #0]
 80034b0:	5d9d      	ldrb	r5, [r3, r6]
 80034b2:	f7fc fe45 	bl	8000140 <__udivsi3>
 80034b6:	3d01      	subs	r5, #1
 80034b8:	4028      	ands	r0, r5
 80034ba:	9001      	str	r0, [sp, #4]
 80034bc:	9607      	str	r6, [sp, #28]
 80034be:	d1e0      	bne.n	8003482 <dir_next+0x62>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80034c0:	0039      	movs	r1, r7
 80034c2:	9802      	ldr	r0, [sp, #8]
 80034c4:	f7ff fd9e 	bl	8003004 <get_fat>
 80034c8:	0006      	movs	r6, r0
				if (clst <= 1) return FR_INT_ERR;
 80034ca:	2801      	cmp	r0, #1
 80034cc:	d801      	bhi.n	80034d2 <dir_next+0xb2>
 80034ce:	2002      	movs	r0, #2
 80034d0:	e7b4      	b.n	800343c <dir_next+0x1c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80034d2:	1c43      	adds	r3, r0, #1
 80034d4:	d101      	bne.n	80034da <dir_next+0xba>
 80034d6:	2001      	movs	r0, #1
 80034d8:	e7b0      	b.n	800343c <dir_next+0x1c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	58e0      	ldr	r0, [r4, r3]
 80034e0:	4b28      	ldr	r3, [pc, #160]	; (8003584 <dir_next+0x164>)
 80034e2:	58c3      	ldr	r3, [r0, r3]
 80034e4:	429e      	cmp	r6, r3
 80034e6:	d32c      	bcc.n	8003542 <dir_next+0x122>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80034e8:	9b05      	ldr	r3, [sp, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0a5      	beq.n	800343a <dir_next+0x1a>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80034ee:	9b04      	ldr	r3, [sp, #16]
 80034f0:	58e1      	ldr	r1, [r4, r3]
 80034f2:	f7ff ff33 	bl	800335c <create_chain>
 80034f6:	0006      	movs	r6, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80034f8:	2007      	movs	r0, #7
 80034fa:	2e00      	cmp	r6, #0
 80034fc:	d09e      	beq.n	800343c <dir_next+0x1c>
					if (clst == 1) return FR_INT_ERR;
 80034fe:	2e01      	cmp	r6, #1
 8003500:	d0e5      	beq.n	80034ce <dir_next+0xae>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003502:	1c73      	adds	r3, r6, #1
 8003504:	d0e7      	beq.n	80034d6 <dir_next+0xb6>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003506:	2580      	movs	r5, #128	; 0x80
 8003508:	00ed      	lsls	r5, r5, #3
 800350a:	5960      	ldr	r0, [r4, r5]
 800350c:	f7ff faf2 	bl	8002af4 <sync_window>
 8003510:	1e01      	subs	r1, r0, #0
 8003512:	d1e0      	bne.n	80034d6 <dir_next+0xb6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003514:	5963      	ldr	r3, [r4, r5]
 8003516:	9a03      	ldr	r2, [sp, #12]
 8003518:	0018      	movs	r0, r3
 800351a:	5a9a      	ldrh	r2, [r3, r2]
 800351c:	f7ff f921 	bl	8002762 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003520:	5967      	ldr	r7, [r4, r5]
 8003522:	0031      	movs	r1, r6
 8003524:	0038      	movs	r0, r7
 8003526:	f7ff fd59 	bl	8002fdc <clust2sect>
 800352a:	4b18      	ldr	r3, [pc, #96]	; (800358c <dir_next+0x16c>)
 800352c:	50f8      	str	r0, [r7, r3]
 800352e:	001f      	movs	r7, r3
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003530:	5960      	ldr	r0, [r4, r5]
 8003532:	9b07      	ldr	r3, [sp, #28]
 8003534:	9a01      	ldr	r2, [sp, #4]
 8003536:	5cc3      	ldrb	r3, [r0, r3]
 8003538:	429a      	cmp	r2, r3
 800353a:	d30e      	bcc.n	800355a <dir_next+0x13a>
					dp->fs->winsect -= c;						/* Rewind window offset */
 800353c:	59c3      	ldr	r3, [r0, r7]
 800353e:	1a9d      	subs	r5, r3, r2
 8003540:	51c5      	str	r5, [r0, r7]
				dp->clust = clst;				/* Initialize data for new cluster */
 8003542:	9b04      	ldr	r3, [sp, #16]
				dp->sect = clust2sect(dp->fs, clst);
 8003544:	0031      	movs	r1, r6
				dp->clust = clst;				/* Initialize data for new cluster */
 8003546:	50e6      	str	r6, [r4, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	58e0      	ldr	r0, [r4, r3]
 800354e:	f7ff fd45 	bl	8002fdc <clust2sect>
 8003552:	2382      	movs	r3, #130	; 0x82
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	50e0      	str	r0, [r4, r3]
 8003558:	e793      	b.n	8003482 <dir_next+0x62>
						dp->fs->wflag = 1;
 800355a:	2201      	movs	r2, #1
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <dir_next+0x170>)
 800355e:	54c2      	strb	r2, [r0, r3]
 8003560:	f7ff fa96 	bl	8002a90 <sync_window.part.1>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003564:	2800      	cmp	r0, #0
 8003566:	d1b6      	bne.n	80034d6 <dir_next+0xb6>
						dp->fs->winsect++;
 8003568:	5962      	ldr	r2, [r4, r5]
 800356a:	59d3      	ldr	r3, [r2, r7]
 800356c:	3301      	adds	r3, #1
 800356e:	51d3      	str	r3, [r2, r7]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003570:	9b01      	ldr	r3, [sp, #4]
 8003572:	3301      	adds	r3, #1
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	e7db      	b.n	8003530 <dir_next+0x110>
 8003578:	00000406 	.word	0x00000406
 800357c:	0000040a 	.word	0x0000040a
 8003580:	0000040c 	.word	0x0000040c
 8003584:	00000414 	.word	0x00000414
 8003588:	00000402 	.word	0x00000402
 800358c:	0000042c 	.word	0x0000042c
 8003590:	00000404 	.word	0x00000404

08003594 <dir_find.part.6>:
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003594:	2201      	movs	r2, #1
 8003596:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <dir_find.part.6+0x144>)
 8003598:	4252      	negs	r2, r2
FRESULT dir_find (
 800359a:	b5f0      	push	{r4, r5, r6, r7, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800359c:	52c2      	strh	r2, [r0, r3]
 800359e:	3201      	adds	r2, #1
 80035a0:	32ff      	adds	r2, #255	; 0xff
FRESULT dir_find (
 80035a2:	0005      	movs	r5, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80035a4:	0014      	movs	r4, r2
FRESULT dir_find (
 80035a6:	b087      	sub	sp, #28
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80035a8:	9202      	str	r2, [sp, #8]
 80035aa:	9303      	str	r3, [sp, #12]
		res = move_window(dp->fs, dp->sect);
 80035ac:	2382      	movs	r3, #130	; 0x82
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	58e9      	ldr	r1, [r5, r3]
 80035b2:	3b10      	subs	r3, #16
 80035b4:	58e8      	ldr	r0, [r5, r3]
 80035b6:	f7ff fb1f 	bl	8002bf8 <move_window>
 80035ba:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
 80035bc:	d000      	beq.n	80035c0 <dir_find.part.6+0x2c>
 80035be:	e085      	b.n	80036cc <dir_find.part.6+0x138>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80035c0:	4b46      	ldr	r3, [pc, #280]	; (80036dc <dir_find.part.6+0x148>)
 80035c2:	58ee      	ldr	r6, [r5, r3]
		c = dir[DIR_Name];
 80035c4:	7833      	ldrb	r3, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d100      	bne.n	80035cc <dir_find.part.6+0x38>
 80035ca:	e082      	b.n	80036d2 <dir_find.part.6+0x13e>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80035cc:	2be5      	cmp	r3, #229	; 0xe5
 80035ce:	d006      	beq.n	80035de <dir_find.part.6+0x4a>
		a = dir[DIR_Attr] & AM_MASK;
 80035d0:	223f      	movs	r2, #63	; 0x3f
 80035d2:	7af1      	ldrb	r1, [r6, #11]
 80035d4:	400a      	ands	r2, r1
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80035d6:	0709      	lsls	r1, r1, #28
 80035d8:	d506      	bpl.n	80035e8 <dir_find.part.6+0x54>
 80035da:	2a0f      	cmp	r2, #15
 80035dc:	d006      	beq.n	80035ec <dir_find.part.6+0x58>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80035de:	2301      	movs	r3, #1
 80035e0:	9a03      	ldr	r2, [sp, #12]
 80035e2:	425b      	negs	r3, r3
 80035e4:	52ab      	strh	r3, [r5, r2]
 80035e6:	e04e      	b.n	8003686 <dir_find.part.6+0xf2>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80035e8:	2a0f      	cmp	r2, #15
 80035ea:	d158      	bne.n	800369e <dir_find.part.6+0x10a>
				if (dp->lfn) {
 80035ec:	2284      	movs	r2, #132	; 0x84
 80035ee:	00d2      	lsls	r2, r2, #3
 80035f0:	58aa      	ldr	r2, [r5, r2]
 80035f2:	9201      	str	r2, [sp, #4]
 80035f4:	2a00      	cmp	r2, #0
 80035f6:	d047      	beq.n	8003688 <dir_find.part.6+0xf4>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80035f8:	2240      	movs	r2, #64	; 0x40
 80035fa:	4213      	tst	r3, r2
 80035fc:	d041      	beq.n	8003682 <dir_find.part.6+0xee>
						c &= ~LLEF; ord = c;	/* LFN start order */
 80035fe:	4393      	bics	r3, r2
 8003600:	001c      	movs	r4, r3
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003602:	4b37      	ldr	r3, [pc, #220]	; (80036e0 <dir_find.part.6+0x14c>)
						sum = dir[LDIR_Chksum];
 8003604:	7b71      	ldrb	r1, [r6, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003606:	5aeb      	ldrh	r3, [r5, r3]
 8003608:	9a03      	ldr	r2, [sp, #12]
						sum = dir[LDIR_Chksum];
 800360a:	9102      	str	r1, [sp, #8]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800360c:	52ab      	strh	r3, [r5, r2]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800360e:	7b73      	ldrb	r3, [r6, #13]
 8003610:	9a02      	ldr	r2, [sp, #8]
 8003612:	4293      	cmp	r3, r2
 8003614:	d137      	bne.n	8003686 <dir_find.part.6+0xf2>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003616:	2240      	movs	r2, #64	; 0x40
 8003618:	270d      	movs	r7, #13
 800361a:	7833      	ldrb	r3, [r6, #0]
 800361c:	4393      	bics	r3, r2
 800361e:	3b01      	subs	r3, #1
	s = 0; wc = 1;
 8003620:	2200      	movs	r2, #0
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003622:	435f      	muls	r7, r3
	s = 0; wc = 1;
 8003624:	2301      	movs	r3, #1
 8003626:	9200      	str	r2, [sp, #0]
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003628:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <dir_find.part.6+0x150>)
 800362a:	9900      	ldr	r1, [sp, #0]
 800362c:	5c89      	ldrb	r1, [r1, r2]
 800362e:	1872      	adds	r2, r6, r1
 8003630:	7852      	ldrb	r2, [r2, #1]
 8003632:	5c70      	ldrb	r0, [r6, r1]
 8003634:	0212      	lsls	r2, r2, #8
 8003636:	4310      	orrs	r0, r2
		if (wc) {	/* Last character has not been processed */
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02c      	beq.n	8003696 <dir_find.part.6+0x102>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800363c:	f000 ffce 	bl	80045dc <ff_wtoupper>
 8003640:	9005      	str	r0, [sp, #20]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003642:	2ffe      	cmp	r7, #254	; 0xfe
 8003644:	d81f      	bhi.n	8003686 <dir_find.part.6+0xf2>
 8003646:	1c7b      	adds	r3, r7, #1
 8003648:	9304      	str	r3, [sp, #16]
 800364a:	9b01      	ldr	r3, [sp, #4]
 800364c:	007f      	lsls	r7, r7, #1
 800364e:	5af8      	ldrh	r0, [r7, r3]
 8003650:	f000 ffc4 	bl	80045dc <ff_wtoupper>
 8003654:	9a05      	ldr	r2, [sp, #20]
 8003656:	0003      	movs	r3, r0
 8003658:	4282      	cmp	r2, r0
 800365a:	d114      	bne.n	8003686 <dir_find.part.6+0xf2>
 800365c:	9f04      	ldr	r7, [sp, #16]
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800365e:	9a00      	ldr	r2, [sp, #0]
 8003660:	3201      	adds	r2, #1
 8003662:	9200      	str	r2, [sp, #0]
 8003664:	2a0d      	cmp	r2, #13
 8003666:	d1df      	bne.n	8003628 <dir_find.part.6+0x94>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8003668:	7832      	ldrb	r2, [r6, #0]
 800366a:	0652      	lsls	r2, r2, #25
 800366c:	d506      	bpl.n	800367c <dir_find.part.6+0xe8>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <dir_find.part.6+0xe8>
 8003672:	9a01      	ldr	r2, [sp, #4]
 8003674:	007b      	lsls	r3, r7, #1
 8003676:	5a9b      	ldrh	r3, [r3, r2]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <dir_find.part.6+0xf2>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800367c:	3c01      	subs	r4, #1
 800367e:	b2e4      	uxtb	r4, r4
 8003680:	e002      	b.n	8003688 <dir_find.part.6+0xf4>
 8003682:	42a3      	cmp	r3, r4
 8003684:	d0c3      	beq.n	800360e <dir_find.part.6+0x7a>
 8003686:	24ff      	movs	r4, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8003688:	2100      	movs	r1, #0
 800368a:	0028      	movs	r0, r5
 800368c:	f7ff fec8 	bl	8003420 <dir_next>
 8003690:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
 8003692:	d08b      	beq.n	80035ac <dir_find.part.6+0x18>
 8003694:	e01a      	b.n	80036cc <dir_find.part.6+0x138>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003696:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <dir_find.part.6+0x154>)
 8003698:	4290      	cmp	r0, r2
 800369a:	d0e0      	beq.n	800365e <dir_find.part.6+0xca>
 800369c:	e7f3      	b.n	8003686 <dir_find.part.6+0xf2>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800369e:	2c00      	cmp	r4, #0
 80036a0:	d105      	bne.n	80036ae <dir_find.part.6+0x11a>
 80036a2:	0030      	movs	r0, r6
 80036a4:	f7ff f928 	bl	80028f8 <sum_sfn>
 80036a8:	9b02      	ldr	r3, [sp, #8]
 80036aa:	4298      	cmp	r0, r3
 80036ac:	d00e      	beq.n	80036cc <dir_find.part.6+0x138>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80036ae:	2383      	movs	r3, #131	; 0x83
 80036b0:	2101      	movs	r1, #1
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	58ea      	ldr	r2, [r5, r3]
 80036b6:	7ad3      	ldrb	r3, [r2, #11]
 80036b8:	400b      	ands	r3, r1
 80036ba:	d190      	bne.n	80035de <dir_find.part.6+0x4a>
 80036bc:	1c58      	adds	r0, r3, #1
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80036be:	5cf1      	ldrb	r1, [r6, r3]
 80036c0:	5cd3      	ldrb	r3, [r2, r3]
 80036c2:	4299      	cmp	r1, r3
 80036c4:	d18b      	bne.n	80035de <dir_find.part.6+0x4a>
 80036c6:	0003      	movs	r3, r0
 80036c8:	280b      	cmp	r0, #11
 80036ca:	d1f7      	bne.n	80036bc <dir_find.part.6+0x128>
}
 80036cc:	0038      	movs	r0, r7
 80036ce:	b007      	add	sp, #28
 80036d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80036d2:	2704      	movs	r7, #4
 80036d4:	e7fa      	b.n	80036cc <dir_find.part.6+0x138>
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	00000424 	.word	0x00000424
 80036dc:	00000414 	.word	0x00000414
 80036e0:	00000406 	.word	0x00000406
 80036e4:	08005f90 	.word	0x08005f90
 80036e8:	0000ffff 	.word	0x0000ffff

080036ec <follow_path>:
{
 80036ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80036ee:	780b      	ldrb	r3, [r1, #0]
{
 80036f0:	b087      	sub	sp, #28
 80036f2:	0006      	movs	r6, r0
 80036f4:	9101      	str	r1, [sp, #4]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80036f6:	2b2f      	cmp	r3, #47	; 0x2f
 80036f8:	d001      	beq.n	80036fe <follow_path+0x12>
 80036fa:	2b5c      	cmp	r3, #92	; 0x5c
 80036fc:	d102      	bne.n	8003704 <follow_path+0x18>
		path++;
 80036fe:	9b01      	ldr	r3, [sp, #4]
 8003700:	3301      	adds	r3, #1
 8003702:	9301      	str	r3, [sp, #4]
	dp->sclust = 0;							/* Always start from the root directory */
 8003704:	2381      	movs	r3, #129	; 0x81
 8003706:	2400      	movs	r4, #0
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	50f4      	str	r4, [r6, r3]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800370c:	9b01      	ldr	r3, [sp, #4]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b1f      	cmp	r3, #31
 8003712:	d80a      	bhi.n	800372a <follow_path+0x3e>
		res = dir_sdi(dp, 0);
 8003714:	0021      	movs	r1, r4
 8003716:	0030      	movs	r0, r6
 8003718:	f7ff fd00 	bl	800311c <dir_sdi>
		dp->dir = 0;
 800371c:	4b98      	ldr	r3, [pc, #608]	; (8003980 <follow_path+0x294>)
 800371e:	50f4      	str	r4, [r6, r3]
}
 8003720:	b007      	add	sp, #28
 8003722:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8003724:	9b01      	ldr	r3, [sp, #4]
 8003726:	3301      	adds	r3, #1
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	9b01      	ldr	r3, [sp, #4]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b2f      	cmp	r3, #47	; 0x2f
 8003730:	d0f8      	beq.n	8003724 <follow_path+0x38>
 8003732:	2b5c      	cmp	r3, #92	; 0x5c
 8003734:	d0f6      	beq.n	8003724 <follow_path+0x38>
	lfn = dp->lfn;
 8003736:	2384      	movs	r3, #132	; 0x84
 8003738:	2400      	movs	r4, #0
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	58f3      	ldr	r3, [r6, r3]
 800373e:	9305      	str	r3, [sp, #20]
		w = p[si++];					/* Get a character */
 8003740:	9b01      	ldr	r3, [sp, #4]
 8003742:	0027      	movs	r7, r4
 8003744:	5d18      	ldrb	r0, [r3, r4]
 8003746:	1c65      	adds	r5, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8003748:	281f      	cmp	r0, #31
 800374a:	d91b      	bls.n	8003784 <follow_path+0x98>
 800374c:	282f      	cmp	r0, #47	; 0x2f
 800374e:	d019      	beq.n	8003784 <follow_path+0x98>
 8003750:	285c      	cmp	r0, #92	; 0x5c
 8003752:	d017      	beq.n	8003784 <follow_path+0x98>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8003754:	2cff      	cmp	r4, #255	; 0xff
 8003756:	d00e      	beq.n	8003776 <follow_path+0x8a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003758:	2101      	movs	r1, #1
 800375a:	f000 ff21 	bl	80045a0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800375e:	2800      	cmp	r0, #0
 8003760:	d009      	beq.n	8003776 <follow_path+0x8a>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8003762:	287f      	cmp	r0, #127	; 0x7f
 8003764:	d809      	bhi.n	800377a <follow_path+0x8e>
 8003766:	2300      	movs	r3, #0
	while (*str && *str != chr) str++;
 8003768:	4986      	ldr	r1, [pc, #536]	; (8003984 <follow_path+0x298>)
 800376a:	5cca      	ldrb	r2, [r1, r3]
 800376c:	2a00      	cmp	r2, #0
 800376e:	d004      	beq.n	800377a <follow_path+0x8e>
 8003770:	3301      	adds	r3, #1
 8003772:	4282      	cmp	r2, r0
 8003774:	d1f9      	bne.n	800376a <follow_path+0x7e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003776:	2006      	movs	r0, #6
 8003778:	e7d2      	b.n	8003720 <follow_path+0x34>
		lfn[di++] = w;					/* Store the Unicode character */
 800377a:	9b05      	ldr	r3, [sp, #20]
 800377c:	0064      	lsls	r4, r4, #1
 800377e:	5318      	strh	r0, [r3, r4]
 8003780:	002c      	movs	r4, r5
 8003782:	e7dd      	b.n	8003740 <follow_path+0x54>
	*path = &p[si];						/* Return pointer to the next segment */
 8003784:	9b01      	ldr	r3, [sp, #4]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003786:	2400      	movs	r4, #0
	*path = &p[si];						/* Return pointer to the next segment */
 8003788:	195b      	adds	r3, r3, r5
 800378a:	9301      	str	r3, [sp, #4]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800378c:	231f      	movs	r3, #31
 800378e:	4283      	cmp	r3, r0
 8003790:	4164      	adcs	r4, r4
 8003792:	00a4      	lsls	r4, r4, #2
	while (di) {						/* Strip trailing spaces and dots */
 8003794:	2f00      	cmp	r7, #0
 8003796:	d0ee      	beq.n	8003776 <follow_path+0x8a>
 8003798:	9a05      	ldr	r2, [sp, #20]
 800379a:	007b      	lsls	r3, r7, #1
 800379c:	18d3      	adds	r3, r2, r3
		w = lfn[di - 1];
 800379e:	1e9a      	subs	r2, r3, #2
 80037a0:	8812      	ldrh	r2, [r2, #0]
		if (w != ' ' && w != '.') break;
 80037a2:	2a20      	cmp	r2, #32
 80037a4:	d002      	beq.n	80037ac <follow_path+0xc0>
 80037a6:	2a2e      	cmp	r2, #46	; 0x2e
 80037a8:	d000      	beq.n	80037ac <follow_path+0xc0>
 80037aa:	e086      	b.n	80038ba <follow_path+0x1ce>
		di--;
 80037ac:	3f01      	subs	r7, #1
 80037ae:	e7f1      	b.n	8003794 <follow_path+0xa8>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80037b0:	3301      	adds	r3, #1
 80037b2:	9905      	ldr	r1, [sp, #20]
 80037b4:	005a      	lsls	r2, r3, #1
 80037b6:	5a8a      	ldrh	r2, [r1, r2]
 80037b8:	2a20      	cmp	r2, #32
 80037ba:	d0f9      	beq.n	80037b0 <follow_path+0xc4>
 80037bc:	2a2e      	cmp	r2, #46	; 0x2e
 80037be:	d0f7      	beq.n	80037b0 <follow_path+0xc4>
	if (si) cf |= NS_LOSS | NS_LFN;
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <follow_path+0xde>
 80037c4:	2203      	movs	r2, #3
 80037c6:	4314      	orrs	r4, r2
 80037c8:	b2e4      	uxtb	r4, r4
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80037ca:	007a      	lsls	r2, r7, #1
 80037cc:	9905      	ldr	r1, [sp, #20]
 80037ce:	3a02      	subs	r2, #2
 80037d0:	5a8a      	ldrh	r2, [r1, r2]
 80037d2:	2a2e      	cmp	r2, #46	; 0x2e
 80037d4:	d002      	beq.n	80037dc <follow_path+0xf0>
 80037d6:	3f01      	subs	r7, #1
 80037d8:	2f00      	cmp	r7, #0
 80037da:	d1f6      	bne.n	80037ca <follow_path+0xde>
		dp->fn[i++] = (BYTE)w;
 80037dc:	2208      	movs	r2, #8
 80037de:	9202      	str	r2, [sp, #8]
 80037e0:	2200      	movs	r2, #0
 80037e2:	0015      	movs	r5, r2
 80037e4:	9204      	str	r2, [sp, #16]
		w = lfn[si++];					/* Get an LFN character */
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	9203      	str	r2, [sp, #12]
 80037ea:	9a05      	ldr	r2, [sp, #20]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d079      	beq.n	80038e8 <follow_path+0x1fc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80037f4:	2820      	cmp	r0, #32
 80037f6:	d004      	beq.n	8003802 <follow_path+0x116>
 80037f8:	282e      	cmp	r0, #46	; 0x2e
 80037fa:	d107      	bne.n	800380c <follow_path+0x120>
 80037fc:	9b03      	ldr	r3, [sp, #12]
 80037fe:	42bb      	cmp	r3, r7
 8003800:	d066      	beq.n	80038d0 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
 8003802:	2303      	movs	r3, #3
 8003804:	431c      	orrs	r4, r3
 8003806:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)w;
 8003808:	9b03      	ldr	r3, [sp, #12]
 800380a:	e7ec      	b.n	80037e6 <follow_path+0xfa>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800380c:	9b04      	ldr	r3, [sp, #16]
 800380e:	9a02      	ldr	r2, [sp, #8]
 8003810:	4293      	cmp	r3, r2
 8003812:	d261      	bcs.n	80038d8 <follow_path+0x1ec>
 8003814:	9b03      	ldr	r3, [sp, #12]
 8003816:	42bb      	cmp	r3, r7
 8003818:	d114      	bne.n	8003844 <follow_path+0x158>
			if (ni == 11) {				/* Long extension */
 800381a:	9b02      	ldr	r3, [sp, #8]
 800381c:	2b0b      	cmp	r3, #11
 800381e:	d109      	bne.n	8003834 <follow_path+0x148>
 8003820:	e05d      	b.n	80038de <follow_path+0x1f2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003822:	9b03      	ldr	r3, [sp, #12]
 8003824:	42bb      	cmp	r3, r7
 8003826:	d005      	beq.n	8003834 <follow_path+0x148>
 8003828:	2303      	movs	r3, #3
 800382a:	431c      	orrs	r4, r3
			if (si > di) break;			/* No extension */
 800382c:	9b03      	ldr	r3, [sp, #12]
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800382e:	b2e4      	uxtb	r4, r4
			if (si > di) break;			/* No extension */
 8003830:	42bb      	cmp	r3, r7
 8003832:	d859      	bhi.n	80038e8 <follow_path+0x1fc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003834:	230b      	movs	r3, #11
			b <<= 2; continue;
 8003836:	00ad      	lsls	r5, r5, #2
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003838:	9302      	str	r3, [sp, #8]
			b <<= 2; continue;
 800383a:	b2ed      	uxtb	r5, r5
 800383c:	9703      	str	r7, [sp, #12]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800383e:	3b03      	subs	r3, #3
		dp->fn[i++] = (BYTE)w;
 8003840:	9304      	str	r3, [sp, #16]
 8003842:	e7e1      	b.n	8003808 <follow_path+0x11c>
		if (w >= 0x80) {				/* Non ASCII character */
 8003844:	287f      	cmp	r0, #127	; 0x7f
 8003846:	d90f      	bls.n	8003868 <follow_path+0x17c>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003848:	2100      	movs	r1, #0
 800384a:	f000 fea9 	bl	80045a0 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800384e:	2300      	movs	r3, #0
 8003850:	4298      	cmp	r0, r3
 8003852:	d003      	beq.n	800385c <follow_path+0x170>
 8003854:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <follow_path+0x29c>)
 8003856:	1818      	adds	r0, r3, r0
 8003858:	3880      	subs	r0, #128	; 0x80
 800385a:	7803      	ldrb	r3, [r0, #0]
 800385c:	b298      	uxth	r0, r3
			cf |= NS_LFN;				/* Force create LFN entry */
 800385e:	2302      	movs	r3, #2
 8003860:	431c      	orrs	r4, r3
 8003862:	b2e4      	uxtb	r4, r4
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003864:	2800      	cmp	r0, #0
 8003866:	d007      	beq.n	8003878 <follow_path+0x18c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003868:	2300      	movs	r3, #0
	while (*str && *str != chr) str++;
 800386a:	4948      	ldr	r1, [pc, #288]	; (800398c <follow_path+0x2a0>)
 800386c:	5cca      	ldrb	r2, [r1, r3]
 800386e:	2a00      	cmp	r2, #0
 8003870:	d078      	beq.n	8003964 <follow_path+0x278>
 8003872:	3301      	adds	r3, #1
 8003874:	4282      	cmp	r2, r0
 8003876:	d1f9      	bne.n	800386c <follow_path+0x180>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003878:	2303      	movs	r3, #3
 800387a:	205f      	movs	r0, #95	; 0x5f
 800387c:	431c      	orrs	r4, r3
 800387e:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)w;
 8003880:	2383      	movs	r3, #131	; 0x83
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	58f3      	ldr	r3, [r6, r3]
 8003886:	9a04      	ldr	r2, [sp, #16]
 8003888:	5498      	strb	r0, [r3, r2]
 800388a:	0013      	movs	r3, r2
 800388c:	3301      	adds	r3, #1
 800388e:	e7d7      	b.n	8003840 <follow_path+0x154>
					b |= 2;
 8003890:	2302      	movs	r3, #2
 8003892:	431d      	orrs	r5, r3
 8003894:	e7f4      	b.n	8003880 <follow_path+0x194>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003896:	075b      	lsls	r3, r3, #29
 8003898:	d500      	bpl.n	800389c <follow_path+0x1b0>
 800389a:	e741      	b.n	8003720 <follow_path+0x34>
			dir = dp->dir;						/* Follow the sub-directory */
 800389c:	4b38      	ldr	r3, [pc, #224]	; (8003980 <follow_path+0x294>)
 800389e:	58f1      	ldr	r1, [r6, r3]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80038a0:	7acb      	ldrb	r3, [r1, #11]
 80038a2:	06db      	lsls	r3, r3, #27
 80038a4:	d55c      	bpl.n	8003960 <follow_path+0x274>
			dp->sclust = ld_clust(dp->fs, dir);
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	58f2      	ldr	r2, [r6, r3]
 80038ac:	5cd0      	ldrb	r0, [r2, r3]
 80038ae:	f7ff f8df 	bl	8002a70 <ld_clust.isra.0>
 80038b2:	2381      	movs	r3, #129	; 0x81
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	50f0      	str	r0, [r6, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80038b8:	e737      	b.n	800372a <follow_path+0x3e>
	lfn[di] = 0;						/* LFN is created */
 80038ba:	2500      	movs	r5, #0
 80038bc:	801d      	strh	r5, [r3, #0]
	mem_set(dp->fn, ' ', 11);
 80038be:	2383      	movs	r3, #131	; 0x83
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	58f0      	ldr	r0, [r6, r3]
 80038c4:	220b      	movs	r2, #11
 80038c6:	2120      	movs	r1, #32
 80038c8:	f7fe ff4b 	bl	8002762 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80038cc:	002b      	movs	r3, r5
 80038ce:	e770      	b.n	80037b2 <follow_path+0xc6>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80038d0:	9b04      	ldr	r3, [sp, #16]
 80038d2:	9a02      	ldr	r2, [sp, #8]
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d3a0      	bcc.n	800381a <follow_path+0x12e>
			if (ni == 11) {				/* Long extension */
 80038d8:	9b02      	ldr	r3, [sp, #8]
 80038da:	2b0b      	cmp	r3, #11
 80038dc:	d1a1      	bne.n	8003822 <follow_path+0x136>
				cf |= NS_LOSS | NS_LFN; break;
 80038de:	2303      	movs	r3, #3
 80038e0:	431c      	orrs	r4, r3
 80038e2:	3308      	adds	r3, #8
 80038e4:	b2e4      	uxtb	r4, r4
 80038e6:	9302      	str	r3, [sp, #8]
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80038e8:	2383      	movs	r3, #131	; 0x83
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	58f3      	ldr	r3, [r6, r3]
 80038ee:	781a      	ldrb	r2, [r3, #0]
 80038f0:	2ae5      	cmp	r2, #229	; 0xe5
 80038f2:	d101      	bne.n	80038f8 <follow_path+0x20c>
 80038f4:	3ae0      	subs	r2, #224	; 0xe0
 80038f6:	701a      	strb	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 80038f8:	9b02      	ldr	r3, [sp, #8]
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d101      	bne.n	8003902 <follow_path+0x216>
 80038fe:	00ad      	lsls	r5, r5, #2
 8003900:	b2ed      	uxtb	r5, r5
 8003902:	230c      	movs	r3, #12
 8003904:	402b      	ands	r3, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d002      	beq.n	8003910 <follow_path+0x224>
 800390a:	43ea      	mvns	r2, r5
 800390c:	0792      	lsls	r2, r2, #30
 800390e:	d102      	bne.n	8003916 <follow_path+0x22a>
		cf |= NS_LFN;
 8003910:	2202      	movs	r2, #2
 8003912:	4314      	orrs	r4, r2
 8003914:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003916:	07a2      	lsls	r2, r4, #30
 8003918:	d40b      	bmi.n	8003932 <follow_path+0x246>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800391a:	2203      	movs	r2, #3
 800391c:	4015      	ands	r5, r2
 800391e:	2d01      	cmp	r5, #1
 8003920:	d102      	bne.n	8003928 <follow_path+0x23c>
 8003922:	320d      	adds	r2, #13
 8003924:	4314      	orrs	r4, r2
 8003926:	b2e4      	uxtb	r4, r4
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003928:	2b04      	cmp	r3, #4
 800392a:	d102      	bne.n	8003932 <follow_path+0x246>
 800392c:	3304      	adds	r3, #4
 800392e:	431c      	orrs	r4, r3
 8003930:	b2e4      	uxtb	r4, r4
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003932:	2583      	movs	r5, #131	; 0x83
 8003934:	00ed      	lsls	r5, r5, #3
 8003936:	5973      	ldr	r3, [r6, r5]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003938:	2100      	movs	r1, #0
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800393a:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800393c:	0030      	movs	r0, r6
 800393e:	f7ff fbed 	bl	800311c <dir_sdi>
	if (res != FR_OK) return res;
 8003942:	2800      	cmp	r0, #0
 8003944:	d102      	bne.n	800394c <follow_path+0x260>
 8003946:	0030      	movs	r0, r6
 8003948:	f7ff fe24 	bl	8003594 <dir_find.part.6>
			ns = dp->fn[NSFLAG];
 800394c:	5973      	ldr	r3, [r6, r5]
 800394e:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003950:	2800      	cmp	r0, #0
 8003952:	d0a0      	beq.n	8003896 <follow_path+0x1aa>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003954:	2804      	cmp	r0, #4
 8003956:	d000      	beq.n	800395a <follow_path+0x26e>
 8003958:	e6e2      	b.n	8003720 <follow_path+0x34>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800395a:	4203      	tst	r3, r0
 800395c:	d000      	beq.n	8003960 <follow_path+0x274>
 800395e:	e6df      	b.n	8003720 <follow_path+0x34>
 8003960:	2005      	movs	r0, #5
	return res;
 8003962:	e6dd      	b.n	8003720 <follow_path+0x34>
				if (IsUpper(w)) {		/* ASCII large capital */
 8003964:	0003      	movs	r3, r0
 8003966:	3b41      	subs	r3, #65	; 0x41
 8003968:	2b19      	cmp	r3, #25
 800396a:	d991      	bls.n	8003890 <follow_path+0x1a4>
					if (IsLower(w)) {	/* ASCII small capital */
 800396c:	0003      	movs	r3, r0
 800396e:	3b61      	subs	r3, #97	; 0x61
 8003970:	2b19      	cmp	r3, #25
 8003972:	d885      	bhi.n	8003880 <follow_path+0x194>
						b |= 1; w -= 0x20;
 8003974:	2301      	movs	r3, #1
 8003976:	3820      	subs	r0, #32
 8003978:	431d      	orrs	r5, r3
 800397a:	b280      	uxth	r0, r0
 800397c:	e780      	b.n	8003880 <follow_path+0x194>
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	00000414 	.word	0x00000414
 8003984:	08005f9d 	.word	0x08005f9d
 8003988:	08005f10 	.word	0x08005f10
 800398c:	08005fa6 	.word	0x08005fa6

08003990 <dir_register>:
	fn = dp->fn; lfn = dp->lfn;
 8003990:	2383      	movs	r3, #131	; 0x83
{
 8003992:	b5f0      	push	{r4, r5, r6, r7, lr}
	fn = dp->fn; lfn = dp->lfn;
 8003994:	2484      	movs	r4, #132	; 0x84
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	58c6      	ldr	r6, [r0, r3]
{
 800399a:	b08b      	sub	sp, #44	; 0x2c
	fn = dp->fn; lfn = dp->lfn;
 800399c:	00e4      	lsls	r4, r4, #3
 800399e:	5903      	ldr	r3, [r0, r4]
	mem_cpy(sn, fn, 12);
 80039a0:	ad07      	add	r5, sp, #28
{
 80039a2:	0007      	movs	r7, r0
	mem_cpy(sn, fn, 12);
 80039a4:	220c      	movs	r2, #12
 80039a6:	0028      	movs	r0, r5
 80039a8:	0031      	movs	r1, r6
	fn = dp->fn; lfn = dp->lfn;
 80039aa:	9301      	str	r3, [sp, #4]
	mem_cpy(sn, fn, 12);
 80039ac:	f7fe fed0 	bl	8002750 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80039b0:	7aeb      	ldrb	r3, [r5, #11]
 80039b2:	2501      	movs	r5, #1
 80039b4:	422b      	tst	r3, r5
 80039b6:	d100      	bne.n	80039ba <dir_register+0x2a>
 80039b8:	e077      	b.n	8003aaa <dir_register+0x11a>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80039ba:	2300      	movs	r3, #0
 80039bc:	72f3      	strb	r3, [r6, #11]
 80039be:	513b      	str	r3, [r7, r4]
	mem_cpy(dst, src, 11);
 80039c0:	220b      	movs	r2, #11
 80039c2:	a907      	add	r1, sp, #28
 80039c4:	0030      	movs	r0, r6
 80039c6:	f7fe fec3 	bl	8002750 <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80039ca:	002b      	movs	r3, r5
 80039cc:	2d05      	cmp	r5, #5
 80039ce:	d847      	bhi.n	8003a60 <dir_register+0xd0>
		c = (seq % 16) + '0';
 80039d0:	210f      	movs	r1, #15
		while (*lfn) {	/* Create a CRC */
 80039d2:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
 80039d4:	468c      	mov	ip, r1
		ns[i--] = c;
 80039d6:	a905      	add	r1, sp, #20
		c = (seq % 16) + '0';
 80039d8:	4664      	mov	r4, ip
 80039da:	401c      	ands	r4, r3
 80039dc:	0020      	movs	r0, r4
 80039de:	3030      	adds	r0, #48	; 0x30
		if (c > '9') c += 7;
 80039e0:	2839      	cmp	r0, #57	; 0x39
 80039e2:	d900      	bls.n	80039e6 <dir_register+0x56>
 80039e4:	3007      	adds	r0, #7
		ns[i--] = c;
 80039e6:	3a01      	subs	r2, #1
 80039e8:	188c      	adds	r4, r1, r2
 80039ea:	7060      	strb	r0, [r4, #1]
		seq /= 16;
 80039ec:	091b      	lsrs	r3, r3, #4
	} while (seq);
 80039ee:	d1f3      	bne.n	80039d8 <dir_register+0x48>
	ns[i] = '~';
 80039f0:	207e      	movs	r0, #126	; 0x7e
 80039f2:	5488      	strb	r0, [r1, r2]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d037      	beq.n	8003a68 <dir_register+0xd8>
 80039f8:	5cf0      	ldrb	r0, [r6, r3]
 80039fa:	2820      	cmp	r0, #32
 80039fc:	d132      	bne.n	8003a64 <dir_register+0xd4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80039fe:	2420      	movs	r4, #32
 8003a00:	0020      	movs	r0, r4
 8003a02:	2a07      	cmp	r2, #7
 8003a04:	d801      	bhi.n	8003a0a <dir_register+0x7a>
 8003a06:	5c88      	ldrb	r0, [r1, r2]
 8003a08:	3201      	adds	r2, #1
 8003a0a:	54f0      	strb	r0, [r6, r3]
 8003a0c:	3301      	adds	r3, #1
	} while (j < 8);
 8003a0e:	2b07      	cmp	r3, #7
 8003a10:	d9f6      	bls.n	8003a00 <dir_register+0x70>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003a12:	2100      	movs	r1, #0
 8003a14:	0038      	movs	r0, r7
 8003a16:	f7ff fb81 	bl	800311c <dir_sdi>
 8003a1a:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) return res;
 8003a1c:	d13c      	bne.n	8003a98 <dir_register+0x108>
 8003a1e:	0038      	movs	r0, r7
 8003a20:	f7ff fdb8 	bl	8003594 <dir_find.part.6>
 8003a24:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
 8003a26:	d137      	bne.n	8003a98 <dir_register+0x108>
		for (n = 1; n < 100; n++) {
 8003a28:	3501      	adds	r5, #1
 8003a2a:	2d64      	cmp	r5, #100	; 0x64
 8003a2c:	d1c8      	bne.n	80039c0 <dir_register+0x30>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003a2e:	2407      	movs	r4, #7
}
 8003a30:	0020      	movs	r0, r4
 8003a32:	b00b      	add	sp, #44	; 0x2c
 8003a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
			wc = *lfn++;
 8003a36:	2010      	movs	r0, #16
 8003a38:	3102      	adds	r1, #2
				sr = (sr << 1) + (wc & 1);
 8003a3a:	2401      	movs	r4, #1
 8003a3c:	4014      	ands	r4, r2
 8003a3e:	46a4      	mov	ip, r4
				if (sr & 0x10000) sr ^= 0x11021;
 8003a40:	2480      	movs	r4, #128	; 0x80
				sr = (sr << 1) + (wc & 1);
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	4463      	add	r3, ip
				if (sr & 0x10000) sr ^= 0x11021;
 8003a46:	0264      	lsls	r4, r4, #9
				wc >>= 1;
 8003a48:	0852      	lsrs	r2, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8003a4a:	4223      	tst	r3, r4
 8003a4c:	d001      	beq.n	8003a52 <dir_register+0xc2>
 8003a4e:	4c6b      	ldr	r4, [pc, #428]	; (8003bfc <dir_register+0x26c>)
 8003a50:	4063      	eors	r3, r4
 8003a52:	3801      	subs	r0, #1
			for (i = 0; i < 16; i++) {
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d1f0      	bne.n	8003a3a <dir_register+0xaa>
		while (*lfn) {	/* Create a CRC */
 8003a58:	880a      	ldrh	r2, [r1, #0]
 8003a5a:	2a00      	cmp	r2, #0
 8003a5c:	d1eb      	bne.n	8003a36 <dir_register+0xa6>
 8003a5e:	e7b7      	b.n	80039d0 <dir_register+0x40>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003a60:	9901      	ldr	r1, [sp, #4]
 8003a62:	e7f9      	b.n	8003a58 <dir_register+0xc8>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003a64:	3301      	adds	r3, #1
 8003a66:	e7c5      	b.n	80039f4 <dir_register+0x64>
 8003a68:	0013      	movs	r3, r2
 8003a6a:	e7c8      	b.n	80039fe <dir_register+0x6e>
		for (n = 0; lfn[n]; n++) ;
 8003a6c:	3001      	adds	r0, #1
 8003a6e:	9a01      	ldr	r2, [sp, #4]
 8003a70:	0043      	lsls	r3, r0, #1
 8003a72:	5ad3      	ldrh	r3, [r2, r3]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f9      	bne.n	8003a6c <dir_register+0xdc>
		nent = (n + 25) / 13;
 8003a78:	3019      	adds	r0, #25
 8003a7a:	210d      	movs	r1, #13
 8003a7c:	f7fc fb60 	bl	8000140 <__udivsi3>
 8003a80:	0005      	movs	r5, r0
 8003a82:	e018      	b.n	8003ab6 <dir_register+0x126>
				n = 0;					/* Not a blank entry. Restart to search */
 8003a84:	0006      	movs	r6, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003a86:	2101      	movs	r1, #1
 8003a88:	0038      	movs	r0, r7
 8003a8a:	f7ff fcc9 	bl	8003420 <dir_next>
 8003a8e:	1e04      	subs	r4, r0, #0
		} while (res == FR_OK);
 8003a90:	d018      	beq.n	8003ac4 <dir_register+0x134>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003a92:	2c04      	cmp	r4, #4
 8003a94:	d0cb      	beq.n	8003a2e <dir_register+0x9e>
 8003a96:	e7cb      	b.n	8003a30 <dir_register+0xa0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003a98:	2c04      	cmp	r4, #4
 8003a9a:	d1c9      	bne.n	8003a30 <dir_register+0xa0>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8003a9c:	ab07      	add	r3, sp, #28
 8003a9e:	7adb      	ldrb	r3, [r3, #11]
 8003aa0:	9a01      	ldr	r2, [sp, #4]
 8003aa2:	72f3      	strb	r3, [r6, #11]
 8003aa4:	2384      	movs	r3, #132	; 0x84
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	50fa      	str	r2, [r7, r3]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8003aaa:	ab07      	add	r3, sp, #28
 8003aac:	7adb      	ldrb	r3, [r3, #11]
		nent = 1;
 8003aae:	2501      	movs	r5, #1
 8003ab0:	2000      	movs	r0, #0
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8003ab2:	079b      	lsls	r3, r3, #30
 8003ab4:	d4db      	bmi.n	8003a6e <dir_register+0xde>
	res = dir_sdi(dp, 0);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	0038      	movs	r0, r7
 8003aba:	f7ff fb2f 	bl	800311c <dir_sdi>
 8003abe:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 8003ac0:	d1e7      	bne.n	8003a92 <dir_register+0x102>
 8003ac2:	0006      	movs	r6, r0
			res = move_window(dp->fs, dp->sect);
 8003ac4:	2382      	movs	r3, #130	; 0x82
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	58f9      	ldr	r1, [r7, r3]
 8003aca:	3b10      	subs	r3, #16
 8003acc:	58f8      	ldr	r0, [r7, r3]
 8003ace:	f7ff f893 	bl	8002bf8 <move_window>
 8003ad2:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
 8003ad4:	d1dd      	bne.n	8003a92 <dir_register+0x102>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003ad6:	4a4a      	ldr	r2, [pc, #296]	; (8003c00 <dir_register+0x270>)
 8003ad8:	58bb      	ldr	r3, [r7, r2]
 8003ada:	9201      	str	r2, [sp, #4]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2be5      	cmp	r3, #229	; 0xe5
 8003ae0:	d001      	beq.n	8003ae6 <dir_register+0x156>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1ce      	bne.n	8003a84 <dir_register+0xf4>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003ae6:	3601      	adds	r6, #1
 8003ae8:	42b5      	cmp	r5, r6
 8003aea:	d1cc      	bne.n	8003a86 <dir_register+0xf6>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003aec:	3d01      	subs	r5, #1
 8003aee:	2d00      	cmp	r5, #0
 8003af0:	d05f      	beq.n	8003bb2 <dir_register+0x222>
		res = dir_sdi(dp, dp->index - nent);
 8003af2:	4b44      	ldr	r3, [pc, #272]	; (8003c04 <dir_register+0x274>)
 8003af4:	0038      	movs	r0, r7
 8003af6:	5af9      	ldrh	r1, [r7, r3]
 8003af8:	1b49      	subs	r1, r1, r5
 8003afa:	f7ff fb0f 	bl	800311c <dir_sdi>
 8003afe:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 8003b00:	d000      	beq.n	8003b04 <dir_register+0x174>
 8003b02:	e795      	b.n	8003a30 <dir_register+0xa0>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8003b04:	2383      	movs	r3, #131	; 0x83
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	58f8      	ldr	r0, [r7, r3]
 8003b0a:	f7fe fef5 	bl	80028f8 <sum_sfn>
 8003b0e:	9003      	str	r0, [sp, #12]
				res = move_window(dp->fs, dp->sect);
 8003b10:	2382      	movs	r3, #130	; 0x82
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	58f9      	ldr	r1, [r7, r3]
 8003b16:	3b10      	subs	r3, #16
 8003b18:	58f8      	ldr	r0, [r7, r3]
 8003b1a:	f7ff f86d 	bl	8002bf8 <move_window>
 8003b1e:	1e04      	subs	r4, r0, #0
				if (res != FR_OK) break;
 8003b20:	d000      	beq.n	8003b24 <dir_register+0x194>
 8003b22:	e785      	b.n	8003a30 <dir_register+0xa0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8003b24:	2384      	movs	r3, #132	; 0x84
 8003b26:	b2ea      	uxtb	r2, r5
 8003b28:	4694      	mov	ip, r2
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8003b2a:	466a      	mov	r2, sp
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	58fb      	ldr	r3, [r7, r3]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8003b30:	7b12      	ldrb	r2, [r2, #12]
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8003b32:	9302      	str	r3, [sp, #8]
 8003b34:	9b01      	ldr	r3, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8003b36:	210d      	movs	r1, #13
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8003b38:	58fb      	ldr	r3, [r7, r3]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8003b3a:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8003b40:	b2ea      	uxtb	r2, r5
 8003b42:	3a01      	subs	r2, #1
 8003b44:	434a      	muls	r2, r1
	s = wc = 0;
 8003b46:	0001      	movs	r1, r0
	dir[LDIR_Type] = 0;
 8003b48:	7318      	strb	r0, [r3, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8003b4a:	7698      	strb	r0, [r3, #26]
 8003b4c:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8003b4e:	4c2e      	ldr	r4, [pc, #184]	; (8003c08 <dir_register+0x278>)
 8003b50:	42a0      	cmp	r0, r4
 8003b52:	d003      	beq.n	8003b5c <dir_register+0x1cc>
 8003b54:	9c02      	ldr	r4, [sp, #8]
 8003b56:	0050      	lsls	r0, r2, #1
 8003b58:	5b00      	ldrh	r0, [r0, r4]
 8003b5a:	3201      	adds	r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8003b5c:	4c2b      	ldr	r4, [pc, #172]	; (8003c0c <dir_register+0x27c>)
 8003b5e:	5d0c      	ldrb	r4, [r1, r4]
 8003b60:	5518      	strb	r0, [r3, r4]
 8003b62:	191c      	adds	r4, r3, r4
 8003b64:	0026      	movs	r6, r4
 8003b66:	0a04      	lsrs	r4, r0, #8
 8003b68:	7074      	strb	r4, [r6, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d100      	bne.n	8003b70 <dir_register+0x1e0>
 8003b6e:	4826      	ldr	r0, [pc, #152]	; (8003c08 <dir_register+0x278>)
	} while (++s < 13);
 8003b70:	3101      	adds	r1, #1
 8003b72:	290d      	cmp	r1, #13
 8003b74:	d1eb      	bne.n	8003b4e <dir_register+0x1be>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8003b76:	4924      	ldr	r1, [pc, #144]	; (8003c08 <dir_register+0x278>)
 8003b78:	4288      	cmp	r0, r1
 8003b7a:	d004      	beq.n	8003b86 <dir_register+0x1f6>
 8003b7c:	9902      	ldr	r1, [sp, #8]
 8003b7e:	0052      	lsls	r2, r2, #1
 8003b80:	5a52      	ldrh	r2, [r2, r1]
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	d103      	bne.n	8003b8e <dir_register+0x1fe>
 8003b86:	4661      	mov	r1, ip
 8003b88:	2240      	movs	r2, #64	; 0x40
 8003b8a:	4311      	orrs	r1, r2
 8003b8c:	468c      	mov	ip, r1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003b8e:	4662      	mov	r2, ip
				dp->fs->wflag = 1;
 8003b90:	2180      	movs	r1, #128	; 0x80
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003b92:	701a      	strb	r2, [r3, #0]
				dp->fs->wflag = 1;
 8003b94:	2201      	movs	r2, #1
 8003b96:	00c9      	lsls	r1, r1, #3
 8003b98:	5879      	ldr	r1, [r7, r1]
 8003b9a:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <dir_register+0x280>)
				res = dir_next(dp, 0);	/* Next entry */
 8003b9c:	0038      	movs	r0, r7
				dp->fs->wflag = 1;
 8003b9e:	54ca      	strb	r2, [r1, r3]
				res = dir_next(dp, 0);	/* Next entry */
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	f7ff fc3d 	bl	8003420 <dir_next>
 8003ba6:	1e04      	subs	r4, r0, #0
			} while (res == FR_OK && --nent);
 8003ba8:	d000      	beq.n	8003bac <dir_register+0x21c>
 8003baa:	e741      	b.n	8003a30 <dir_register+0xa0>
 8003bac:	3d01      	subs	r5, #1
 8003bae:	2d00      	cmp	r5, #0
 8003bb0:	d1ae      	bne.n	8003b10 <dir_register+0x180>
		res = move_window(dp->fs, dp->sect);
 8003bb2:	2580      	movs	r5, #128	; 0x80
 8003bb4:	2382      	movs	r3, #130	; 0x82
 8003bb6:	00ed      	lsls	r5, r5, #3
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	58f9      	ldr	r1, [r7, r3]
 8003bbc:	5978      	ldr	r0, [r7, r5]
 8003bbe:	f7ff f81b 	bl	8002bf8 <move_window>
 8003bc2:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 8003bc4:	d000      	beq.n	8003bc8 <dir_register+0x238>
 8003bc6:	e733      	b.n	8003a30 <dir_register+0xa0>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8003bc8:	2683      	movs	r6, #131	; 0x83
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8003bca:	9b01      	ldr	r3, [sp, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	58f8      	ldr	r0, [r7, r3]
 8003bd0:	0021      	movs	r1, r4
 8003bd2:	f7fe fdc6 	bl	8002762 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8003bd6:	9b01      	ldr	r3, [sp, #4]
 8003bd8:	00f6      	lsls	r6, r6, #3
 8003bda:	220b      	movs	r2, #11
 8003bdc:	59b9      	ldr	r1, [r7, r6]
 8003bde:	58f8      	ldr	r0, [r7, r3]
 8003be0:	f7fe fdb6 	bl	8002750 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003be4:	2118      	movs	r1, #24
 8003be6:	9b01      	ldr	r3, [sp, #4]
 8003be8:	58fa      	ldr	r2, [r7, r3]
 8003bea:	59bb      	ldr	r3, [r7, r6]
 8003bec:	7adb      	ldrb	r3, [r3, #11]
 8003bee:	400b      	ands	r3, r1
 8003bf0:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 8003bf2:	597a      	ldr	r2, [r7, r5]
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <dir_register+0x280>)
 8003bf6:	3917      	subs	r1, #23
 8003bf8:	54d1      	strb	r1, [r2, r3]
 8003bfa:	e719      	b.n	8003a30 <dir_register+0xa0>
 8003bfc:	00011021 	.word	0x00011021
 8003c00:	00000414 	.word	0x00000414
 8003c04:	00000406 	.word	0x00000406
 8003c08:	0000ffff 	.word	0x0000ffff
 8003c0c:	08005f90 	.word	0x08005f90
 8003c10:	00000404 	.word	0x00000404

08003c14 <remove_chain>:
{
 8003c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c16:	0004      	movs	r4, r0
 8003c18:	000d      	movs	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003c1a:	2901      	cmp	r1, #1
 8003c1c:	d801      	bhi.n	8003c22 <remove_chain+0xe>
		res = FR_INT_ERR;
 8003c1e:	2002      	movs	r0, #2
}
 8003c20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <remove_chain+0x68>)
 8003c24:	58c2      	ldr	r2, [r0, r3]
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	4291      	cmp	r1, r2
 8003c2a:	d2f8      	bcs.n	8003c1e <remove_chain+0xa>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003c2c:	2782      	movs	r7, #130	; 0x82
 8003c2e:	00ff      	lsls	r7, r7, #3
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003c30:	9b01      	ldr	r3, [sp, #4]
 8003c32:	58e3      	ldr	r3, [r4, r3]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	429d      	cmp	r5, r3
 8003c38:	d205      	bcs.n	8003c46 <remove_chain+0x32>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003c3a:	0029      	movs	r1, r5
 8003c3c:	0020      	movs	r0, r4
 8003c3e:	f7ff f9e1 	bl	8003004 <get_fat>
 8003c42:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
 8003c44:	d101      	bne.n	8003c4a <remove_chain+0x36>
		res = FR_INT_ERR;
 8003c46:	2000      	movs	r0, #0
 8003c48:	e7ea      	b.n	8003c20 <remove_chain+0xc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003c4a:	2801      	cmp	r0, #1
 8003c4c:	d0e7      	beq.n	8003c1e <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	d012      	beq.n	8003c78 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003c52:	2200      	movs	r2, #0
 8003c54:	0029      	movs	r1, r5
 8003c56:	0020      	movs	r0, r4
 8003c58:	f7ff fad2 	bl	8003200 <put_fat>
			if (res != FR_OK) break;
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d1df      	bne.n	8003c20 <remove_chain+0xc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003c60:	59e3      	ldr	r3, [r4, r7]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	d006      	beq.n	8003c74 <remove_chain+0x60>
				fs->fsi_flag |= 1;
 8003c66:	2101      	movs	r1, #1
				fs->free_clust++;
 8003c68:	3301      	adds	r3, #1
				fs->fsi_flag |= 1;
 8003c6a:	4a05      	ldr	r2, [pc, #20]	; (8003c80 <remove_chain+0x6c>)
				fs->free_clust++;
 8003c6c:	51e3      	str	r3, [r4, r7]
				fs->fsi_flag |= 1;
 8003c6e:	5ca3      	ldrb	r3, [r4, r2]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	54a3      	strb	r3, [r4, r2]
{
 8003c74:	0035      	movs	r5, r6
 8003c76:	e7db      	b.n	8003c30 <remove_chain+0x1c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003c78:	2001      	movs	r0, #1
 8003c7a:	e7d1      	b.n	8003c20 <remove_chain+0xc>
 8003c7c:	00000414 	.word	0x00000414
 8003c80:	00000405 	.word	0x00000405

08003c84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003c84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003c86:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8003c88:	a803      	add	r0, sp, #12
{
 8003c8a:	0014      	movs	r4, r2
 8003c8c:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8003c8e:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8003c90:	f7fe fe40 	bl	8002914 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003c94:	220b      	movs	r2, #11
 8003c96:	2800      	cmp	r0, #0
 8003c98:	db24      	blt.n	8003ce4 <f_mount+0x60>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003c9a:	4d14      	ldr	r5, [pc, #80]	; (8003cec <f_mount+0x68>)
 8003c9c:	0080      	lsls	r0, r0, #2
 8003c9e:	5943      	ldr	r3, [r0, r5]

	if (cfs) {
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00d      	beq.n	8003cc0 <f_mount+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003ca4:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <f_mount+0x6c>)
 8003ca6:	6811      	ldr	r1, [r2, #0]
 8003ca8:	428b      	cmp	r3, r1
 8003caa:	d101      	bne.n	8003cb0 <f_mount+0x2c>
 8003cac:	2100      	movs	r1, #0
 8003cae:	6011      	str	r1, [r2, #0]
 8003cb0:	68d6      	ldr	r6, [r2, #12]
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	42b3      	cmp	r3, r6
 8003cb6:	d100      	bne.n	8003cba <f_mount+0x36>
 8003cb8:	60d1      	str	r1, [r2, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003cba:	2280      	movs	r2, #128	; 0x80
 8003cbc:	00d2      	lsls	r2, r2, #3
 8003cbe:	5499      	strb	r1, [r3, r2]
	}

	if (fs) {
 8003cc0:	9b01      	ldr	r3, [sp, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8003cc6:	2280      	movs	r2, #128	; 0x80
 8003cc8:	2100      	movs	r1, #0
 8003cca:	00d2      	lsls	r2, r2, #3
 8003ccc:	5499      	strb	r1, [r3, r2]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003cce:	502b      	str	r3, [r5, r0]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003cd0:	1e1a      	subs	r2, r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <f_mount+0x60>
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2c01      	cmp	r4, #1
 8003cd8:	d104      	bne.n	8003ce4 <f_mount+0x60>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8003cda:	4669      	mov	r1, sp
 8003cdc:	a801      	add	r0, sp, #4
 8003cde:	f7fe ffe9 	bl	8002cb4 <find_volume>
 8003ce2:	0002      	movs	r2, r0
	LEAVE_FF(fs, res);
}
 8003ce4:	0010      	movs	r0, r2
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	200000a4 	.word	0x200000a4
 8003cf0:	200000a8 	.word	0x200000a8

08003cf4 <f_open>:
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8003cf4:	2309      	movs	r3, #9
{
 8003cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf8:	4c7a      	ldr	r4, [pc, #488]	; (8003ee4 <f_open+0x1f0>)
 8003cfa:	0015      	movs	r5, r2
 8003cfc:	44a5      	add	sp, r4
 8003cfe:	9001      	str	r0, [sp, #4]
 8003d00:	9105      	str	r1, [sp, #20]
	if (!fp) return FR_INVALID_OBJECT;
 8003d02:	9302      	str	r3, [sp, #8]
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d100      	bne.n	8003d0a <f_open+0x16>
 8003d08:	e086      	b.n	8003e18 <f_open+0x124>
	fp->fs = 0;			/* Clear file object */
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	50c2      	str	r2, [r0, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8003d12:	321e      	adds	r2, #30
 8003d14:	a8ff      	add	r0, sp, #1020	; 0x3fc
 8003d16:	402a      	ands	r2, r5
 8003d18:	a905      	add	r1, sp, #20
 8003d1a:	302c      	adds	r0, #44	; 0x2c
 8003d1c:	f7fe ffca 	bl	8002cb4 <find_volume>
 8003d20:	ae0a      	add	r6, sp, #40	; 0x28
 8003d22:	9002      	str	r0, [sp, #8]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8003d24:	1e03      	subs	r3, r0, #0
 8003d26:	d177      	bne.n	8003e18 <f_open+0x124>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8003d28:	331f      	adds	r3, #31
 8003d2a:	402b      	ands	r3, r5
 8003d2c:	9303      	str	r3, [sp, #12]
		INIT_BUF(dj);
 8003d2e:	2383      	movs	r3, #131	; 0x83
 8003d30:	aa07      	add	r2, sp, #28
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	50f2      	str	r2, [r6, r3]
 8003d36:	4a6c      	ldr	r2, [pc, #432]	; (8003ee8 <f_open+0x1f4>)
 8003d38:	3308      	adds	r3, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 8003d3a:	9905      	ldr	r1, [sp, #20]
 8003d3c:	0030      	movs	r0, r6
		INIT_BUF(dj);
 8003d3e:	50f2      	str	r2, [r6, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8003d40:	f7ff fcd4 	bl	80036ec <follow_path>
		dir = dj.dir;
 8003d44:	4f69      	ldr	r7, [pc, #420]	; (8003eec <f_open+0x1f8>)
 8003d46:	59f4      	ldr	r4, [r6, r7]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	d10a      	bne.n	8003d62 <f_open+0x6e>
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
 8003d4c:	3006      	adds	r0, #6
			if (!dir)	/* Default directory itself */
 8003d4e:	2c00      	cmp	r4, #0
 8003d50:	d007      	beq.n	8003d62 <f_open+0x6e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003d52:	2301      	movs	r3, #1
 8003d54:	9903      	ldr	r1, [sp, #12]
 8003d56:	0030      	movs	r0, r6
 8003d58:	4399      	bics	r1, r3
 8003d5a:	1e4b      	subs	r3, r1, #1
 8003d5c:	4199      	sbcs	r1, r3
 8003d5e:	f7fe fd07 	bl	8002770 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003d62:	231c      	movs	r3, #28
 8003d64:	421d      	tst	r5, r3
 8003d66:	d05b      	beq.n	8003e20 <f_open+0x12c>
			if (res != FR_OK) {					/* No file, create new */
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d04d      	beq.n	8003e08 <f_open+0x114>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8003d6c:	2804      	cmp	r0, #4
 8003d6e:	d149      	bne.n	8003e04 <f_open+0x110>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003d70:	4b5f      	ldr	r3, [pc, #380]	; (8003ef0 <f_open+0x1fc>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2a00      	cmp	r2, #0
 8003d76:	d003      	beq.n	8003d80 <f_open+0x8c>
 8003d78:	68db      	ldr	r3, [r3, #12]
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003d7a:	300e      	adds	r0, #14
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d141      	bne.n	8003e04 <f_open+0x110>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003d80:	ac0a      	add	r4, sp, #40	; 0x28
 8003d82:	0020      	movs	r0, r4
 8003d84:	f7ff fe04 	bl	8003990 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d13b      	bne.n	8003e04 <f_open+0x110>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	9a03      	ldr	r2, [sp, #12]
				dir = dj.dir;					/* New entry */
 8003d90:	59e4      	ldr	r4, [r4, r7]
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003d92:	431a      	orrs	r2, r3
 8003d94:	9203      	str	r2, [sp, #12]
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003d96:	9b03      	ldr	r3, [sp, #12]
 8003d98:	071b      	lsls	r3, r3, #28
 8003d9a:	d54a      	bpl.n	8003e32 <f_open+0x13e>
				dw = GET_FATTIME();				/* Created time */
 8003d9c:	f000 fc3e 	bl	800461c <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8003da0:	2500      	movs	r5, #0
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8003da2:	2780      	movs	r7, #128	; 0x80
				ST_DWORD(dir + DIR_CrtTime, dw);
 8003da4:	0a03      	lsrs	r3, r0, #8
 8003da6:	73a0      	strb	r0, [r4, #14]
 8003da8:	73e3      	strb	r3, [r4, #15]
 8003daa:	0c03      	lsrs	r3, r0, #16
 8003dac:	0e00      	lsrs	r0, r0, #24
 8003dae:	7423      	strb	r3, [r4, #16]
 8003db0:	7460      	strb	r0, [r4, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8003db2:	72e5      	strb	r5, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8003db4:	7725      	strb	r5, [r4, #28]
 8003db6:	7765      	strb	r5, [r4, #29]
 8003db8:	77a5      	strb	r5, [r4, #30]
 8003dba:	77e5      	strb	r5, [r4, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8003dbc:	00ff      	lsls	r7, r7, #3
 8003dbe:	ae0a      	add	r6, sp, #40	; 0x28
 8003dc0:	59f3      	ldr	r3, [r6, r7]
 8003dc2:	0021      	movs	r1, r4
 8003dc4:	5dd8      	ldrb	r0, [r3, r7]
 8003dc6:	f7fe fe53 	bl	8002a70 <ld_clust.isra.0>
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 8003dca:	2201      	movs	r2, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003dcc:	76a5      	strb	r5, [r4, #26]
 8003dce:	76e5      	strb	r5, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003dd0:	7525      	strb	r5, [r4, #20]
 8003dd2:	7565      	strb	r5, [r4, #21]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8003dd4:	9004      	str	r0, [sp, #16]
				dj.fs->wflag = 1;
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <f_open+0x200>)
 8003dd8:	59f0      	ldr	r0, [r6, r7]
 8003dda:	54c2      	strb	r2, [r0, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 8003ddc:	9b04      	ldr	r3, [sp, #16]
 8003dde:	42ab      	cmp	r3, r5
 8003de0:	d027      	beq.n	8003e32 <f_open+0x13e>
					dw = dj.fs->winsect;
 8003de2:	4b45      	ldr	r3, [pc, #276]	; (8003ef8 <f_open+0x204>)
					res = remove_chain(dj.fs, cl);
 8003de4:	9904      	ldr	r1, [sp, #16]
					dw = dj.fs->winsect;
 8003de6:	58c5      	ldr	r5, [r0, r3]
					res = remove_chain(dj.fs, cl);
 8003de8:	f7ff ff14 	bl	8003c14 <remove_chain>
					if (res == FR_OK) {
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d109      	bne.n	8003e04 <f_open+0x110>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8003df0:	9b04      	ldr	r3, [sp, #16]
 8003df2:	59f0      	ldr	r0, [r6, r7]
 8003df4:	4a41      	ldr	r2, [pc, #260]	; (8003efc <f_open+0x208>)
 8003df6:	3b01      	subs	r3, #1
 8003df8:	5083      	str	r3, [r0, r2]
						res = move_window(dj.fs, dw);
 8003dfa:	0029      	movs	r1, r5
 8003dfc:	f7fe fefc 	bl	8002bf8 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d016      	beq.n	8003e32 <f_open+0x13e>
					res = FR_DENIED;
 8003e04:	9002      	str	r0, [sp, #8]
 8003e06:	e007      	b.n	8003e18 <f_open+0x124>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003e08:	2311      	movs	r3, #17
 8003e0a:	7ae2      	ldrb	r2, [r4, #11]
 8003e0c:	421a      	tst	r2, r3
 8003e0e:	d166      	bne.n	8003ede <f_open+0x1ea>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8003e10:	076b      	lsls	r3, r5, #29
 8003e12:	d5c0      	bpl.n	8003d96 <f_open+0xa2>
						res = FR_EXIST;
 8003e14:	2308      	movs	r3, #8
					res = FR_DENIED;
 8003e16:	9302      	str	r3, [sp, #8]
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8003e18:	9802      	ldr	r0, [sp, #8]
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <f_open+0x20c>)
 8003e1c:	449d      	add	sp, r3
 8003e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_OK) {					/* Follow succeeded */
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d1ef      	bne.n	8003e04 <f_open+0x110>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8003e24:	7ae3      	ldrb	r3, [r4, #11]
 8003e26:	06da      	lsls	r2, r3, #27
 8003e28:	d457      	bmi.n	8003eda <f_open+0x1e6>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8003e2a:	07aa      	lsls	r2, r5, #30
 8003e2c:	d501      	bpl.n	8003e32 <f_open+0x13e>
 8003e2e:	07db      	lsls	r3, r3, #31
 8003e30:	d455      	bmi.n	8003ede <f_open+0x1ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	d503      	bpl.n	8003e40 <f_open+0x14c>
				mode |= FA__WRITTEN;
 8003e38:	2320      	movs	r3, #32
 8003e3a:	9a03      	ldr	r2, [sp, #12]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	9203      	str	r2, [sp, #12]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8003e40:	2218      	movs	r2, #24
 8003e42:	2580      	movs	r5, #128	; 0x80
 8003e44:	ab04      	add	r3, sp, #16
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	00ed      	lsls	r5, r5, #3
 8003e4a:	595b      	ldr	r3, [r3, r5]
 8003e4c:	9901      	ldr	r1, [sp, #4]
 8003e4e:	9304      	str	r3, [sp, #16]
 8003e50:	9a04      	ldr	r2, [sp, #16]
 8003e52:	4b29      	ldr	r3, [pc, #164]	; (8003ef8 <f_open+0x204>)
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003e54:	a80a      	add	r0, sp, #40	; 0x28
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8003e56:	58d2      	ldr	r2, [r2, r3]
 8003e58:	4b2a      	ldr	r3, [pc, #168]	; (8003f04 <f_open+0x210>)
 8003e5a:	50ca      	str	r2, [r1, r3]
			fp->dir_ptr = dir;
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	50cc      	str	r4, [r1, r3]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003e60:	2301      	movs	r3, #1
 8003e62:	9903      	ldr	r1, [sp, #12]
 8003e64:	4399      	bics	r1, r3
 8003e66:	1e4b      	subs	r3, r1, #1
 8003e68:	4199      	sbcs	r1, r3
 8003e6a:	f7fe fcb7 	bl	80027dc <inc_lock>
 8003e6e:	2385      	movs	r3, #133	; 0x85
 8003e70:	9a01      	ldr	r2, [sp, #4]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	50d0      	str	r0, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8003e76:	2302      	movs	r3, #2
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d0cc      	beq.n	8003e16 <f_open+0x122>
			fp->flag = mode;					/* File access mode */
 8003e7c:	4669      	mov	r1, sp
			fp->err = 0;						/* Clear error flag */
 8003e7e:	2600      	movs	r6, #0
			fp->flag = mode;					/* File access mode */
 8003e80:	9b01      	ldr	r3, [sp, #4]
 8003e82:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <f_open+0x214>)
 8003e84:	7b09      	ldrb	r1, [r1, #12]
 8003e86:	5499      	strb	r1, [r3, r2]
			fp->err = 0;						/* Clear error flag */
 8003e88:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <f_open+0x218>)
 8003e8a:	9a01      	ldr	r2, [sp, #4]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8003e8c:	0021      	movs	r1, r4
			fp->err = 0;						/* Clear error flag */
 8003e8e:	54d6      	strb	r6, [r2, r3]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8003e90:	2218      	movs	r2, #24
 8003e92:	ab04      	add	r3, sp, #16
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	595f      	ldr	r7, [r3, r5]
 8003e98:	5d78      	ldrb	r0, [r7, r5]
 8003e9a:	f7fe fde9 	bl	8002a70 <ld_clust.isra.0>
 8003e9e:	2382      	movs	r3, #130	; 0x82
 8003ea0:	9a01      	ldr	r2, [sp, #4]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	50d0      	str	r0, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8003ea6:	7f62      	ldrb	r2, [r4, #29]
 8003ea8:	7f23      	ldrb	r3, [r4, #28]
 8003eaa:	0212      	lsls	r2, r2, #8
 8003eac:	431a      	orrs	r2, r3
 8003eae:	7fa3      	ldrb	r3, [r4, #30]
 8003eb0:	9901      	ldr	r1, [sp, #4]
 8003eb2:	041b      	lsls	r3, r3, #16
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	7fe3      	ldrb	r3, [r4, #31]
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	4a0f      	ldr	r2, [pc, #60]	; (8003efc <f_open+0x208>)
 8003ebe:	508b      	str	r3, [r1, r2]
			fp->fptr = 0;						/* File pointer */
 8003ec0:	2381      	movs	r3, #129	; 0x81
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	50ce      	str	r6, [r1, r3]
			fp->dsect = 0;
 8003ec6:	3310      	adds	r3, #16
 8003ec8:	50ce      	str	r6, [r1, r3]
			fp->cltbl = 0;						/* Normal seek mode */
 8003eca:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <f_open+0x21c>)
 8003ecc:	50ce      	str	r6, [r1, r3]
			fp->id = fp->fs->id;
 8003ece:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <f_open+0x214>)
			fp->fs = dj.fs;	 					/* Validate file object */
 8003ed0:	514f      	str	r7, [r1, r5]
			fp->id = fp->fs->id;
 8003ed2:	5afa      	ldrh	r2, [r7, r3]
 8003ed4:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <f_open+0x200>)
 8003ed6:	52ca      	strh	r2, [r1, r3]
 8003ed8:	e79e      	b.n	8003e18 <f_open+0x124>
					res = FR_NO_FILE;
 8003eda:	2304      	movs	r3, #4
 8003edc:	e79b      	b.n	8003e16 <f_open+0x122>
					res = FR_DENIED;
 8003ede:	2307      	movs	r3, #7
 8003ee0:	e799      	b.n	8003e16 <f_open+0x122>
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	fffffbac 	.word	0xfffffbac
 8003ee8:	200000c2 	.word	0x200000c2
 8003eec:	00000414 	.word	0x00000414
 8003ef0:	200000a8 	.word	0x200000a8
 8003ef4:	00000404 	.word	0x00000404
 8003ef8:	0000042c 	.word	0x0000042c
 8003efc:	0000040c 	.word	0x0000040c
 8003f00:	00000454 	.word	0x00000454
 8003f04:	0000041c 	.word	0x0000041c
 8003f08:	00000406 	.word	0x00000406
 8003f0c:	00000407 	.word	0x00000407
 8003f10:	00000424 	.word	0x00000424

08003f14 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8003f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f16:	b08b      	sub	sp, #44	; 0x2c
 8003f18:	9308      	str	r3, [sp, #32]
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8003f1a:	2300      	movs	r3, #0
{
 8003f1c:	9202      	str	r2, [sp, #8]
	*bw = 0;	/* Clear write byte counter */
 8003f1e:	9a08      	ldr	r2, [sp, #32]
{
 8003f20:	0004      	movs	r4, r0
	*bw = 0;	/* Clear write byte counter */
 8003f22:	6013      	str	r3, [r2, #0]
{
 8003f24:	000d      	movs	r5, r1

	res = validate(fp);						/* Check validity */
 8003f26:	f7fe fd0b 	bl	8002940 <validate>
 8003f2a:	9003      	str	r0, [sp, #12]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d159      	bne.n	8003fe4 <f_write+0xd0>
	if (fp->err)							/* Check error */
 8003f30:	4a87      	ldr	r2, [pc, #540]	; (8004150 <f_write+0x23c>)
 8003f32:	5ca3      	ldrb	r3, [r4, r2]
 8003f34:	9209      	str	r2, [sp, #36]	; 0x24
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d13a      	bne.n	8003fb0 <f_write+0x9c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8003f3a:	4b86      	ldr	r3, [pc, #536]	; (8004154 <f_write+0x240>)
 8003f3c:	5ce2      	ldrb	r2, [r4, r3]
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	0793      	lsls	r3, r2, #30
 8003f42:	d400      	bmi.n	8003f46 <f_write+0x32>
 8003f44:	e101      	b.n	800414a <f_write+0x236>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8003f46:	2381      	movs	r3, #129	; 0x81
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	58e2      	ldr	r2, [r4, r3]
 8003f4c:	9902      	ldr	r1, [sp, #8]
 8003f4e:	1889      	adds	r1, r1, r2
 8003f50:	428a      	cmp	r2, r1
 8003f52:	d839      	bhi.n	8003fc8 <f_write+0xb4>

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8003f54:	2780      	movs	r7, #128	; 0x80
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8003f56:	9505      	str	r5, [sp, #20]
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8003f58:	9306      	str	r3, [sp, #24]
 8003f5a:	00ff      	lsls	r7, r7, #3
	for ( ;  btw;							/* Repeat until all data written */
 8003f5c:	9b02      	ldr	r3, [sp, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d032      	beq.n	8003fc8 <f_write+0xb4>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8003f62:	9b06      	ldr	r3, [sp, #24]
 8003f64:	4a7c      	ldr	r2, [pc, #496]	; (8004158 <f_write+0x244>)
 8003f66:	58e5      	ldr	r5, [r4, r3]
 8003f68:	59e3      	ldr	r3, [r4, r7]
 8003f6a:	0028      	movs	r0, r5
 8003f6c:	9304      	str	r3, [sp, #16]
 8003f6e:	5a9b      	ldrh	r3, [r3, r2]
 8003f70:	0019      	movs	r1, r3
 8003f72:	9307      	str	r3, [sp, #28]
 8003f74:	f7fc f96a 	bl	800024c <__aeabi_uidivmod>
 8003f78:	2900      	cmp	r1, #0
 8003f7a:	d000      	beq.n	8003f7e <f_write+0x6a>
 8003f7c:	e0c8      	b.n	8004110 <f_write+0x1fc>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8003f7e:	9b04      	ldr	r3, [sp, #16]
 8003f80:	4a76      	ldr	r2, [pc, #472]	; (800415c <f_write+0x248>)
 8003f82:	9907      	ldr	r1, [sp, #28]
 8003f84:	0028      	movs	r0, r5
 8003f86:	5c9e      	ldrb	r6, [r3, r2]
 8003f88:	f7fc f8da 	bl	8000140 <__udivsi3>
 8003f8c:	3e01      	subs	r6, #1
 8003f8e:	4006      	ands	r6, r0
 8003f90:	b2f3      	uxtb	r3, r6
 8003f92:	9307      	str	r3, [sp, #28]
			if (!csect) {					/* On the cluster boundary? */
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d139      	bne.n	800400c <f_write+0xf8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8003f98:	2d00      	cmp	r5, #0
 8003f9a:	d10b      	bne.n	8003fb4 <f_write+0xa0>
					clst = fp->sclust;		/* Follow from the origin */
 8003f9c:	2382      	movs	r3, #130	; 0x82
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	58e0      	ldr	r0, [r4, r3]
					if (clst == 0)			/* When no cluster is allocated, */
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8003fa2:	1e01      	subs	r1, r0, #0
					if (clst == 0)			/* When no cluster is allocated, */
 8003fa4:	d023      	beq.n	8003fee <f_write+0xda>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003fa6:	2801      	cmp	r0, #1
 8003fa8:	d125      	bne.n	8003ff6 <f_write+0xe2>
 8003faa:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fae:	54a3      	strb	r3, [r4, r2]
		LEAVE_FF(fp->fs, FR_DENIED);
 8003fb0:	9303      	str	r3, [sp, #12]
 8003fb2:	e017      	b.n	8003fe4 <f_write+0xd0>
					if (fp->cltbl)
 8003fb4:	4b6a      	ldr	r3, [pc, #424]	; (8004160 <f_write+0x24c>)
 8003fb6:	58e3      	ldr	r3, [r4, r3]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d016      	beq.n	8003fea <f_write+0xd6>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003fbc:	0029      	movs	r1, r5
 8003fbe:	0020      	movs	r0, r4
 8003fc0:	f7fe fc78 	bl	80028b4 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d1ee      	bne.n	8003fa6 <f_write+0x92>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8003fc8:	2381      	movs	r3, #129	; 0x81
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	58e2      	ldr	r2, [r4, r3]
 8003fce:	4b65      	ldr	r3, [pc, #404]	; (8004164 <f_write+0x250>)
 8003fd0:	58e1      	ldr	r1, [r4, r3]
 8003fd2:	428a      	cmp	r2, r1
 8003fd4:	d900      	bls.n	8003fd8 <f_write+0xc4>
 8003fd6:	e0b6      	b.n	8004146 <f_write+0x232>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8003fd8:	9b01      	ldr	r3, [sp, #4]
 8003fda:	5ce2      	ldrb	r2, [r4, r3]
 8003fdc:	2320      	movs	r3, #32
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	9a01      	ldr	r2, [sp, #4]
 8003fe2:	54a3      	strb	r3, [r4, r2]

	LEAVE_FF(fp->fs, FR_OK);
}
 8003fe4:	9803      	ldr	r0, [sp, #12]
 8003fe6:	b00b      	add	sp, #44	; 0x2c
 8003fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8003fea:	4b5f      	ldr	r3, [pc, #380]	; (8004168 <f_write+0x254>)
 8003fec:	58e1      	ldr	r1, [r4, r3]
 8003fee:	9804      	ldr	r0, [sp, #16]
 8003ff0:	f7ff f9b4 	bl	800335c <create_chain>
 8003ff4:	e7e6      	b.n	8003fc4 <f_write+0xb0>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003ff6:	1c43      	adds	r3, r0, #1
 8003ff8:	d101      	bne.n	8003ffe <f_write+0xea>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e7d6      	b.n	8003fac <f_write+0x98>
				fp->clust = clst;			/* Update current cluster */
 8003ffe:	4b5a      	ldr	r3, [pc, #360]	; (8004168 <f_write+0x254>)
 8004000:	50e0      	str	r0, [r4, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8004002:	3b04      	subs	r3, #4
 8004004:	58e2      	ldr	r2, [r4, r3]
 8004006:	2a00      	cmp	r2, #0
 8004008:	d100      	bne.n	800400c <f_write+0xf8>
 800400a:	50e0      	str	r0, [r4, r3]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800400c:	2540      	movs	r5, #64	; 0x40
 800400e:	9b01      	ldr	r3, [sp, #4]
 8004010:	5ce3      	ldrb	r3, [r4, r3]
 8004012:	422b      	tst	r3, r5
 8004014:	d010      	beq.n	8004038 <f_write+0x124>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004016:	4b55      	ldr	r3, [pc, #340]	; (800416c <f_write+0x258>)
 8004018:	59e2      	ldr	r2, [r4, r7]
 800401a:	0021      	movs	r1, r4
 800401c:	5cd0      	ldrb	r0, [r2, r3]
 800401e:	2283      	movs	r2, #131	; 0x83
 8004020:	00d2      	lsls	r2, r2, #3
 8004022:	2301      	movs	r3, #1
 8004024:	58a2      	ldr	r2, [r4, r2]
 8004026:	f7fe fb77 	bl	8002718 <disk_write>
 800402a:	2800      	cmp	r0, #0
 800402c:	d1e5      	bne.n	8003ffa <f_write+0xe6>
				fp->flag &= ~FA__DIRTY;
 800402e:	9b01      	ldr	r3, [sp, #4]
 8004030:	9a01      	ldr	r2, [sp, #4]
 8004032:	5ce3      	ldrb	r3, [r4, r3]
 8004034:	43ab      	bics	r3, r5
 8004036:	54a3      	strb	r3, [r4, r2]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8004038:	59e3      	ldr	r3, [r4, r7]
 800403a:	9304      	str	r3, [sp, #16]
 800403c:	4b4a      	ldr	r3, [pc, #296]	; (8004168 <f_write+0x254>)
 800403e:	9804      	ldr	r0, [sp, #16]
 8004040:	58e1      	ldr	r1, [r4, r3]
 8004042:	f7fe ffcb 	bl	8002fdc <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004046:	2800      	cmp	r0, #0
 8004048:	d0af      	beq.n	8003faa <f_write+0x96>
			sect += csect;
 800404a:	9b07      	ldr	r3, [sp, #28]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800404c:	4a42      	ldr	r2, [pc, #264]	; (8004158 <f_write+0x244>)
			sect += csect;
 800404e:	18c5      	adds	r5, r0, r3
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8004050:	9b04      	ldr	r3, [sp, #16]
 8004052:	9802      	ldr	r0, [sp, #8]
 8004054:	5a99      	ldrh	r1, [r3, r2]
 8004056:	f7fc f873 	bl	8000140 <__udivsi3>
 800405a:	1e06      	subs	r6, r0, #0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800405c:	d03d      	beq.n	80040da <f_write+0x1c6>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800405e:	4a3f      	ldr	r2, [pc, #252]	; (800415c <f_write+0x248>)
 8004060:	9b04      	ldr	r3, [sp, #16]
 8004062:	5c9b      	ldrb	r3, [r3, r2]
 8004064:	9a07      	ldr	r2, [sp, #28]
 8004066:	1812      	adds	r2, r2, r0
 8004068:	429a      	cmp	r2, r3
 800406a:	d901      	bls.n	8004070 <f_write+0x15c>
					cc = fp->fs->csize - csect;
 800406c:	9a07      	ldr	r2, [sp, #28]
 800406e:	1a9e      	subs	r6, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8004070:	4b3e      	ldr	r3, [pc, #248]	; (800416c <f_write+0x258>)
 8004072:	9a04      	ldr	r2, [sp, #16]
 8004074:	9905      	ldr	r1, [sp, #20]
 8004076:	5cd0      	ldrb	r0, [r2, r3]
 8004078:	0033      	movs	r3, r6
 800407a:	002a      	movs	r2, r5
 800407c:	f7fe fb4c 	bl	8002718 <disk_write>
 8004080:	2800      	cmp	r0, #0
 8004082:	d1ba      	bne.n	8003ffa <f_write+0xe6>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004084:	2383      	movs	r3, #131	; 0x83
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	58e0      	ldr	r0, [r4, r3]
 800408a:	1b45      	subs	r5, r0, r5
 800408c:	42ae      	cmp	r6, r5
 800408e:	d90e      	bls.n	80040ae <f_write+0x19a>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8004090:	59e3      	ldr	r3, [r4, r7]
 8004092:	4a31      	ldr	r2, [pc, #196]	; (8004158 <f_write+0x244>)
 8004094:	0020      	movs	r0, r4
 8004096:	5a9a      	ldrh	r2, [r3, r2]
 8004098:	9b05      	ldr	r3, [sp, #20]
 800409a:	4355      	muls	r5, r2
 800409c:	1959      	adds	r1, r3, r5
 800409e:	f7fe fb57 	bl	8002750 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80040a2:	2240      	movs	r2, #64	; 0x40
 80040a4:	9b01      	ldr	r3, [sp, #4]
 80040a6:	5ce3      	ldrb	r3, [r4, r3]
 80040a8:	4393      	bics	r3, r2
 80040aa:	9a01      	ldr	r2, [sp, #4]
 80040ac:	54a3      	strb	r3, [r4, r2]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80040ae:	59e3      	ldr	r3, [r4, r7]
 80040b0:	4a29      	ldr	r2, [pc, #164]	; (8004158 <f_write+0x244>)
 80040b2:	5a9b      	ldrh	r3, [r3, r2]
 80040b4:	435e      	muls	r6, r3
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80040b6:	9b05      	ldr	r3, [sp, #20]
 80040b8:	9a06      	ldr	r2, [sp, #24]
 80040ba:	199b      	adds	r3, r3, r6
 80040bc:	9305      	str	r3, [sp, #20]
 80040be:	9b06      	ldr	r3, [sp, #24]
 80040c0:	58e3      	ldr	r3, [r4, r3]
 80040c2:	199b      	adds	r3, r3, r6
 80040c4:	50a3      	str	r3, [r4, r2]
 80040c6:	9b08      	ldr	r3, [sp, #32]
 80040c8:	9a08      	ldr	r2, [sp, #32]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	9304      	str	r3, [sp, #16]
 80040ce:	199b      	adds	r3, r3, r6
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	9b02      	ldr	r3, [sp, #8]
 80040d4:	1b9b      	subs	r3, r3, r6
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	e740      	b.n	8003f5c <f_write+0x48>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80040da:	2383      	movs	r3, #131	; 0x83
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	58e3      	ldr	r3, [r4, r3]
 80040e0:	429d      	cmp	r5, r3
 80040e2:	d012      	beq.n	800410a <f_write+0x1f6>
				if (fp->fptr < fp->fsize &&
 80040e4:	9b06      	ldr	r3, [sp, #24]
 80040e6:	58e3      	ldr	r3, [r4, r3]
 80040e8:	9307      	str	r3, [sp, #28]
 80040ea:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <f_write+0x250>)
 80040ec:	9a07      	ldr	r2, [sp, #28]
 80040ee:	58e3      	ldr	r3, [r4, r3]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d20a      	bcs.n	800410a <f_write+0x1f6>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <f_write+0x258>)
 80040f6:	9a04      	ldr	r2, [sp, #16]
 80040f8:	0021      	movs	r1, r4
 80040fa:	5cd0      	ldrb	r0, [r2, r3]
 80040fc:	2301      	movs	r3, #1
 80040fe:	002a      	movs	r2, r5
 8004100:	f7fe fafc 	bl	80026fc <disk_read>
				if (fp->fptr < fp->fsize &&
 8004104:	2800      	cmp	r0, #0
 8004106:	d000      	beq.n	800410a <f_write+0x1f6>
 8004108:	e777      	b.n	8003ffa <f_write+0xe6>
			fp->dsect = sect;
 800410a:	2383      	movs	r3, #131	; 0x83
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	50e5      	str	r5, [r4, r3]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8004110:	59e3      	ldr	r3, [r4, r7]
 8004112:	4a11      	ldr	r2, [pc, #68]	; (8004158 <f_write+0x244>)
 8004114:	5a9d      	ldrh	r5, [r3, r2]
 8004116:	9b06      	ldr	r3, [sp, #24]
 8004118:	0029      	movs	r1, r5
 800411a:	58e3      	ldr	r3, [r4, r3]
 800411c:	0018      	movs	r0, r3
 800411e:	9304      	str	r3, [sp, #16]
 8004120:	f7fc f894 	bl	800024c <__aeabi_uidivmod>
 8004124:	9e02      	ldr	r6, [sp, #8]
 8004126:	1a6d      	subs	r5, r5, r1
 8004128:	42ae      	cmp	r6, r5
 800412a:	d900      	bls.n	800412e <f_write+0x21a>
 800412c:	002e      	movs	r6, r5
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800412e:	1860      	adds	r0, r4, r1
 8004130:	0032      	movs	r2, r6
 8004132:	9905      	ldr	r1, [sp, #20]
 8004134:	f7fe fb0c 	bl	8002750 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8004138:	9b01      	ldr	r3, [sp, #4]
 800413a:	5ce2      	ldrb	r2, [r4, r3]
 800413c:	2340      	movs	r3, #64	; 0x40
 800413e:	4313      	orrs	r3, r2
 8004140:	9a01      	ldr	r2, [sp, #4]
 8004142:	54a3      	strb	r3, [r4, r2]
 8004144:	e7b7      	b.n	80040b6 <f_write+0x1a2>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8004146:	50e2      	str	r2, [r4, r3]
 8004148:	e746      	b.n	8003fd8 <f_write+0xc4>
		LEAVE_FF(fp->fs, FR_DENIED);
 800414a:	2307      	movs	r3, #7
 800414c:	e730      	b.n	8003fb0 <f_write+0x9c>
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	00000407 	.word	0x00000407
 8004154:	00000406 	.word	0x00000406
 8004158:	0000040a 	.word	0x0000040a
 800415c:	00000402 	.word	0x00000402
 8004160:	00000424 	.word	0x00000424
 8004164:	0000040c 	.word	0x0000040c
 8004168:	00000414 	.word	0x00000414
 800416c:	00000401 	.word	0x00000401

08004170 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8004170:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004172:	0004      	movs	r4, r0
 8004174:	000e      	movs	r6, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8004176:	290a      	cmp	r1, #10
 8004178:	d102      	bne.n	8004180 <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 800417a:	210d      	movs	r1, #13
 800417c:	f7ff fff8 	bl	8004170 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8004180:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8004182:	2b00      	cmp	r3, #0
 8004184:	db14      	blt.n	80041b0 <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8004186:	1c5d      	adds	r5, r3, #1
 8004188:	18e3      	adds	r3, r4, r3
 800418a:	731e      	strb	r6, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800418c:	2d3c      	cmp	r5, #60	; 0x3c
 800418e:	dd0b      	ble.n	80041a8 <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8004190:	0021      	movs	r1, r4
 8004192:	ab01      	add	r3, sp, #4
 8004194:	002a      	movs	r2, r5
 8004196:	310c      	adds	r1, #12
 8004198:	6820      	ldr	r0, [r4, #0]
 800419a:	f7ff febb 	bl	8003f14 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800419e:	9b01      	ldr	r3, [sp, #4]
 80041a0:	1b5d      	subs	r5, r3, r5
 80041a2:	1e6b      	subs	r3, r5, #1
 80041a4:	419d      	sbcs	r5, r3
 80041a6:	426d      	negs	r5, r5
	}
	pb->idx = i;
	pb->nchr++;
 80041a8:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 80041aa:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 80041ac:	3301      	adds	r3, #1
 80041ae:	60a3      	str	r3, [r4, #8]
}
 80041b0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	...

080041b4 <f_sync>:
{
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	0004      	movs	r4, r0
	res = validate(fp);					/* Check validity of the object */
 80041b8:	f7fe fbc2 	bl	8002940 <validate>
 80041bc:	1e06      	subs	r6, r0, #0
	if (res == FR_OK) {
 80041be:	d155      	bne.n	800426c <f_sync+0xb8>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80041c0:	4f2b      	ldr	r7, [pc, #172]	; (8004270 <f_sync+0xbc>)
 80041c2:	5de3      	ldrb	r3, [r4, r7]
 80041c4:	069a      	lsls	r2, r3, #26
 80041c6:	d551      	bpl.n	800426c <f_sync+0xb8>
			if (fp->flag & FA__DIRTY) {
 80041c8:	2540      	movs	r5, #64	; 0x40
 80041ca:	422b      	tst	r3, r5
 80041cc:	d011      	beq.n	80041f2 <f_sync+0x3e>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	58e2      	ldr	r2, [r4, r3]
 80041d4:	4b27      	ldr	r3, [pc, #156]	; (8004274 <f_sync+0xc0>)
 80041d6:	0021      	movs	r1, r4
 80041d8:	5cd0      	ldrb	r0, [r2, r3]
 80041da:	2283      	movs	r2, #131	; 0x83
 80041dc:	00d2      	lsls	r2, r2, #3
 80041de:	2301      	movs	r3, #1
 80041e0:	58a2      	ldr	r2, [r4, r2]
 80041e2:	f7fe fa99 	bl	8002718 <disk_write>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80041e6:	3601      	adds	r6, #1
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d13f      	bne.n	800426c <f_sync+0xb8>
				fp->flag &= ~FA__DIRTY;
 80041ec:	5de3      	ldrb	r3, [r4, r7]
 80041ee:	43ab      	bics	r3, r5
 80041f0:	55e3      	strb	r3, [r4, r7]
			res = move_window(fp->fs, fp->dir_sect);
 80041f2:	4b21      	ldr	r3, [pc, #132]	; (8004278 <f_sync+0xc4>)
 80041f4:	58e1      	ldr	r1, [r4, r3]
 80041f6:	3b1c      	subs	r3, #28
 80041f8:	58e0      	ldr	r0, [r4, r3]
 80041fa:	f7fe fcfd 	bl	8002bf8 <move_window>
 80041fe:	1e06      	subs	r6, r0, #0
			if (res == FR_OK) {
 8004200:	d134      	bne.n	800426c <f_sync+0xb8>
				dir = fp->dir_ptr;
 8004202:	2384      	movs	r3, #132	; 0x84
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8004204:	2220      	movs	r2, #32
				dir = fp->dir_ptr;
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	58e5      	ldr	r5, [r4, r3]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800420a:	7aeb      	ldrb	r3, [r5, #11]
 800420c:	4313      	orrs	r3, r2
 800420e:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8004210:	4b1a      	ldr	r3, [pc, #104]	; (800427c <f_sync+0xc8>)
 8004212:	5ce2      	ldrb	r2, [r4, r3]
 8004214:	772a      	strb	r2, [r5, #28]
 8004216:	58e2      	ldr	r2, [r4, r3]
 8004218:	0a12      	lsrs	r2, r2, #8
 800421a:	776a      	strb	r2, [r5, #29]
 800421c:	58e2      	ldr	r2, [r4, r3]
 800421e:	0c12      	lsrs	r2, r2, #16
 8004220:	77aa      	strb	r2, [r5, #30]
 8004222:	58e3      	ldr	r3, [r4, r3]
 8004224:	0e1b      	lsrs	r3, r3, #24
 8004226:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8004228:	2382      	movs	r3, #130	; 0x82
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	58e3      	ldr	r3, [r4, r3]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800422e:	0a1a      	lsrs	r2, r3, #8
 8004230:	76ab      	strb	r3, [r5, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	752b      	strb	r3, [r5, #20]
 8004236:	0a1b      	lsrs	r3, r3, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004238:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800423a:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 800423c:	f000 f9ee 	bl	800461c <get_fattime>
				fp->flag &= ~FA__WRITTEN;
 8004240:	2220      	movs	r2, #32
				ST_DWORD(dir + DIR_WrtTime, tm);
 8004242:	0a03      	lsrs	r3, r0, #8
 8004244:	75a8      	strb	r0, [r5, #22]
 8004246:	75eb      	strb	r3, [r5, #23]
 8004248:	0c03      	lsrs	r3, r0, #16
 800424a:	0e00      	lsrs	r0, r0, #24
				ST_WORD(dir + DIR_LstAccDate, 0);
 800424c:	74ae      	strb	r6, [r5, #18]
 800424e:	74ee      	strb	r6, [r5, #19]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8004250:	762b      	strb	r3, [r5, #24]
 8004252:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
 8004254:	5de3      	ldrb	r3, [r4, r7]
 8004256:	4393      	bics	r3, r2
 8004258:	55e3      	strb	r3, [r4, r7]
				fp->fs->wflag = 1;
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	58e0      	ldr	r0, [r4, r3]
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <f_sync+0xcc>)
 8004262:	3a1f      	subs	r2, #31
 8004264:	54c2      	strb	r2, [r0, r3]
				res = sync_fs(fp->fs);
 8004266:	f7fe fc53 	bl	8002b10 <sync_fs>
 800426a:	0006      	movs	r6, r0
}
 800426c:	0030      	movs	r0, r6
 800426e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004270:	00000406 	.word	0x00000406
 8004274:	00000401 	.word	0x00000401
 8004278:	0000041c 	.word	0x0000041c
 800427c:	0000040c 	.word	0x0000040c
 8004280:	00000404 	.word	0x00000404

08004284 <f_close>:
{
 8004284:	b510      	push	{r4, lr}
 8004286:	0004      	movs	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8004288:	f7ff ff94 	bl	80041b4 <f_sync>
	if (res == FR_OK)
 800428c:	2800      	cmp	r0, #0
 800428e:	d10e      	bne.n	80042ae <f_close+0x2a>
		res = validate(fp);				/* Lock volume */
 8004290:	0020      	movs	r0, r4
 8004292:	f7fe fb55 	bl	8002940 <validate>
		if (res == FR_OK) {
 8004296:	2800      	cmp	r0, #0
 8004298:	d109      	bne.n	80042ae <f_close+0x2a>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800429a:	2385      	movs	r3, #133	; 0x85
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	58e0      	ldr	r0, [r4, r3]
 80042a0:	f7fe faec 	bl	800287c <dec_lock>
			if (res == FR_OK)
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d102      	bne.n	80042ae <f_close+0x2a>
				fp->fs = 0;				/* Invalidate file object */
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	50e0      	str	r0, [r4, r3]
}
 80042ae:	bd10      	pop	{r4, pc}

080042b0 <f_stat>:
{
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	4c15      	ldr	r4, [pc, #84]	; (8004308 <f_stat+0x58>)
 80042b4:	000e      	movs	r6, r1
 80042b6:	44a5      	add	sp, r4
 80042b8:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 0);
 80042ba:	a8ff      	add	r0, sp, #1020	; 0x3fc
 80042bc:	2200      	movs	r2, #0
 80042be:	a901      	add	r1, sp, #4
 80042c0:	301c      	adds	r0, #28
 80042c2:	f7fe fcf7 	bl	8002cb4 <find_volume>
 80042c6:	ad06      	add	r5, sp, #24
 80042c8:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 80042ca:	d116      	bne.n	80042fa <f_stat+0x4a>
		INIT_BUF(dj);
 80042cc:	2383      	movs	r3, #131	; 0x83
 80042ce:	aa03      	add	r2, sp, #12
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	50ea      	str	r2, [r5, r3]
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <f_stat+0x5c>)
 80042d6:	3308      	adds	r3, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 80042d8:	9901      	ldr	r1, [sp, #4]
 80042da:	0028      	movs	r0, r5
		INIT_BUF(dj);
 80042dc:	50ea      	str	r2, [r5, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 80042de:	f7ff fa05 	bl	80036ec <follow_path>
 80042e2:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {				/* Follow completed */
 80042e4:	d109      	bne.n	80042fa <f_stat+0x4a>
			if (dj.dir) {		/* Found an object */
 80042e6:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <f_stat+0x60>)
 80042e8:	58eb      	ldr	r3, [r5, r3]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <f_stat+0x54>
				if (fno) get_fileinfo(&dj, fno);
 80042ee:	2e00      	cmp	r6, #0
 80042f0:	d003      	beq.n	80042fa <f_stat+0x4a>
 80042f2:	0031      	movs	r1, r6
 80042f4:	0028      	movs	r0, r5
 80042f6:	f7fe fb45 	bl	8002984 <get_fileinfo>
}
 80042fa:	0020      	movs	r0, r4
 80042fc:	2388      	movs	r3, #136	; 0x88
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	449d      	add	sp, r3
 8004302:	bd70      	pop	{r4, r5, r6, pc}
				res = FR_INVALID_NAME;
 8004304:	2406      	movs	r4, #6
 8004306:	e7f8      	b.n	80042fa <f_stat+0x4a>
 8004308:	fffffbc0 	.word	0xfffffbc0
 800430c:	200000c2 	.word	0x200000c2
 8004310:	00000414 	.word	0x00000414

08004314 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8004314:	b40e      	push	{r1, r2, r3}
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 8004316:	2200      	movs	r2, #0
{
 8004318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800431a:	b0a0      	sub	sp, #128	; 0x80
 800431c:	ab25      	add	r3, sp, #148	; 0x94
 800431e:	cb80      	ldmia	r3!, {r7}
	pb.fp = fp;				/* Initialize output buffer */
 8004320:	900d      	str	r0, [sp, #52]	; 0x34
	pb.nchr = pb.idx = 0;
 8004322:	920e      	str	r2, [sp, #56]	; 0x38
 8004324:	920f      	str	r2, [sp, #60]	; 0x3c

	va_start(arp, fmt);
 8004326:	9307      	str	r3, [sp, #28]

	for (;;) {
		c = *fmt++;
 8004328:	7839      	ldrb	r1, [r7, #0]
		if (c == 0) break;			/* End of string */
 800432a:	2900      	cmp	r1, #0
 800432c:	d100      	bne.n	8004330 <f_printf+0x1c>
 800432e:	e0f7      	b.n	8004520 <f_printf+0x20c>
		if (c != '%') {				/* Non escape character */
 8004330:	2925      	cmp	r1, #37	; 0x25
 8004332:	d004      	beq.n	800433e <f_printf+0x2a>
		c = *fmt++;
 8004334:	3701      	adds	r7, #1
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8004336:	a80d      	add	r0, sp, #52	; 0x34
 8004338:	f7ff ff1a 	bl	8004170 <putc_bfd>
 800433c:	e7f4      	b.n	8004328 <f_printf+0x14>
		c = *fmt++;
 800433e:	7879      	ldrb	r1, [r7, #1]
		if (c == '0') {				/* Flag: '0' padding */
 8004340:	2930      	cmp	r1, #48	; 0x30
 8004342:	d135      	bne.n	80043b0 <f_printf+0x9c>
			f = 1; c = *fmt++;
 8004344:	2601      	movs	r6, #1
 8004346:	78b9      	ldrb	r1, [r7, #2]
 8004348:	1cfb      	adds	r3, r7, #3
 800434a:	2200      	movs	r2, #0
 800434c:	9201      	str	r2, [sp, #4]
		while (IsDigit(c)) {		/* Precision */
 800434e:	000a      	movs	r2, r1
 8004350:	3a30      	subs	r2, #48	; 0x30
 8004352:	001f      	movs	r7, r3
 8004354:	2a09      	cmp	r2, #9
 8004356:	d934      	bls.n	80043c2 <f_printf+0xae>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8004358:	000b      	movs	r3, r1
 800435a:	2220      	movs	r2, #32
 800435c:	4393      	bics	r3, r2
 800435e:	2b4c      	cmp	r3, #76	; 0x4c
 8004360:	d103      	bne.n	800436a <f_printf+0x56>
			f |= 4; c = *fmt++;
 8004362:	3b48      	subs	r3, #72	; 0x48
 8004364:	7839      	ldrb	r1, [r7, #0]
 8004366:	431e      	orrs	r6, r3
 8004368:	3701      	adds	r7, #1
		if (!c) break;
 800436a:	2900      	cmp	r1, #0
 800436c:	d100      	bne.n	8004370 <f_printf+0x5c>
 800436e:	e0d7      	b.n	8004520 <f_printf+0x20c>
		if (IsLower(d)) d -= 0x20;
 8004370:	000a      	movs	r2, r1
 8004372:	3a61      	subs	r2, #97	; 0x61
 8004374:	000b      	movs	r3, r1
 8004376:	2a19      	cmp	r2, #25
 8004378:	d801      	bhi.n	800437e <f_printf+0x6a>
 800437a:	3b20      	subs	r3, #32
 800437c:	b2db      	uxtb	r3, r3
		switch (d) {				/* Type is... */
 800437e:	2b4f      	cmp	r3, #79	; 0x4f
 8004380:	d04c      	beq.n	800441c <f_printf+0x108>
 8004382:	d827      	bhi.n	80043d4 <f_printf+0xc0>
 8004384:	2b43      	cmp	r3, #67	; 0x43
 8004386:	d056      	beq.n	8004436 <f_printf+0x122>
 8004388:	2b44      	cmp	r3, #68	; 0x44
 800438a:	d05c      	beq.n	8004446 <f_printf+0x132>
			r = 2; break;
 800438c:	2202      	movs	r2, #2
 800438e:	9202      	str	r2, [sp, #8]
		switch (d) {				/* Type is... */
 8004390:	2b42      	cmp	r3, #66	; 0x42
 8004392:	d1d0      	bne.n	8004336 <f_printf+0x22>
 8004394:	9a07      	ldr	r2, [sp, #28]
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8004396:	0770      	lsls	r0, r6, #29
 8004398:	d557      	bpl.n	800444a <f_printf+0x136>
 800439a:	1d10      	adds	r0, r2, #4
 800439c:	9007      	str	r0, [sp, #28]
 800439e:	6814      	ldr	r4, [r2, #0]
		if (d == 'D' && (v & 0x80000000)) {
 80043a0:	2b44      	cmp	r3, #68	; 0x44
 80043a2:	d15b      	bne.n	800445c <f_printf+0x148>
 80043a4:	2c00      	cmp	r4, #0
 80043a6:	da59      	bge.n	800445c <f_printf+0x148>
			v = 0 - v;
			f |= 8;
 80043a8:	2308      	movs	r3, #8
			v = 0 - v;
 80043aa:	4264      	negs	r4, r4
			f |= 8;
 80043ac:	431e      	orrs	r6, r3
 80043ae:	e055      	b.n	800445c <f_printf+0x148>
			if (c == '-') {			/* Flag: left justified */
 80043b0:	292d      	cmp	r1, #45	; 0x2d
 80043b2:	d002      	beq.n	80043ba <f_printf+0xa6>
		c = *fmt++;
 80043b4:	1cbb      	adds	r3, r7, #2
		w = f = 0;
 80043b6:	2600      	movs	r6, #0
 80043b8:	e7c7      	b.n	800434a <f_printf+0x36>
				f = 2; c = *fmt++;
 80043ba:	1cfb      	adds	r3, r7, #3
 80043bc:	78b9      	ldrb	r1, [r7, #2]
 80043be:	2602      	movs	r6, #2
 80043c0:	e7c3      	b.n	800434a <f_printf+0x36>
			w = w * 10 + c - '0';
 80043c2:	200a      	movs	r0, #10
 80043c4:	9a01      	ldr	r2, [sp, #4]
 80043c6:	4342      	muls	r2, r0
 80043c8:	1851      	adds	r1, r2, r1
 80043ca:	3930      	subs	r1, #48	; 0x30
 80043cc:	9101      	str	r1, [sp, #4]
			c = *fmt++;
 80043ce:	7819      	ldrb	r1, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	e7bc      	b.n	800434e <f_printf+0x3a>
		switch (d) {				/* Type is... */
 80043d4:	2b55      	cmp	r3, #85	; 0x55
 80043d6:	d036      	beq.n	8004446 <f_printf+0x132>
 80043d8:	2b58      	cmp	r3, #88	; 0x58
 80043da:	d032      	beq.n	8004442 <f_printf+0x12e>
 80043dc:	2b53      	cmp	r3, #83	; 0x53
 80043de:	d1aa      	bne.n	8004336 <f_printf+0x22>
			p = va_arg(arp, TCHAR*);
 80043e0:	9b07      	ldr	r3, [sp, #28]
 80043e2:	681d      	ldr	r5, [r3, #0]
 80043e4:	1d1a      	adds	r2, r3, #4
			for (j = 0; p[j]; j++) ;
 80043e6:	002b      	movs	r3, r5
			p = va_arg(arp, TCHAR*);
 80043e8:	9207      	str	r2, [sp, #28]
 80043ea:	1b5c      	subs	r4, r3, r5
 80043ec:	3301      	adds	r3, #1
			for (j = 0; p[j]; j++) ;
 80043ee:	1e5a      	subs	r2, r3, #1
 80043f0:	7812      	ldrb	r2, [r2, #0]
 80043f2:	2a00      	cmp	r2, #0
 80043f4:	d1f9      	bne.n	80043ea <f_printf+0xd6>
			if (!(f & 2)) {
 80043f6:	07b3      	lsls	r3, r6, #30
 80043f8:	d404      	bmi.n	8004404 <f_printf+0xf0>
				while (j++ < w) putc_bfd(&pb, ' ');
 80043fa:	9a01      	ldr	r2, [sp, #4]
 80043fc:	0023      	movs	r3, r4
 80043fe:	3401      	adds	r4, #1
 8004400:	4293      	cmp	r3, r2
 8004402:	d30e      	bcc.n	8004422 <f_printf+0x10e>
			while (*p) putc_bfd(&pb, *p++);
 8004404:	7829      	ldrb	r1, [r5, #0]
 8004406:	2900      	cmp	r1, #0
 8004408:	d110      	bne.n	800442c <f_printf+0x118>
			while (j++ < w) putc_bfd(&pb, ' ');
 800440a:	9b01      	ldr	r3, [sp, #4]
 800440c:	42a3      	cmp	r3, r4
 800440e:	d98b      	bls.n	8004328 <f_printf+0x14>
 8004410:	2120      	movs	r1, #32
 8004412:	a80d      	add	r0, sp, #52	; 0x34
 8004414:	f7ff feac 	bl	8004170 <putc_bfd>
 8004418:	3401      	adds	r4, #1
 800441a:	e7f6      	b.n	800440a <f_printf+0xf6>
			r = 8; break;
 800441c:	2208      	movs	r2, #8
			r = 10; break;
 800441e:	9202      	str	r2, [sp, #8]
 8004420:	e7b8      	b.n	8004394 <f_printf+0x80>
				while (j++ < w) putc_bfd(&pb, ' ');
 8004422:	2120      	movs	r1, #32
 8004424:	a80d      	add	r0, sp, #52	; 0x34
 8004426:	f7ff fea3 	bl	8004170 <putc_bfd>
 800442a:	e7e6      	b.n	80043fa <f_printf+0xe6>
			while (*p) putc_bfd(&pb, *p++);
 800442c:	a80d      	add	r0, sp, #52	; 0x34
 800442e:	3501      	adds	r5, #1
 8004430:	f7ff fe9e 	bl	8004170 <putc_bfd>
 8004434:	e7e6      	b.n	8004404 <f_printf+0xf0>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8004436:	9b07      	ldr	r3, [sp, #28]
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	1d1a      	adds	r2, r3, #4
 800443c:	9207      	str	r2, [sp, #28]
 800443e:	b2c9      	uxtb	r1, r1
 8004440:	e779      	b.n	8004336 <f_printf+0x22>
			r = 16; break;
 8004442:	2210      	movs	r2, #16
 8004444:	e7eb      	b.n	800441e <f_printf+0x10a>
			r = 10; break;
 8004446:	220a      	movs	r2, #10
 8004448:	e7e9      	b.n	800441e <f_printf+0x10a>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800444a:	2b44      	cmp	r3, #68	; 0x44
 800444c:	d103      	bne.n	8004456 <f_printf+0x142>
 800444e:	1d13      	adds	r3, r2, #4
 8004450:	9307      	str	r3, [sp, #28]
 8004452:	6814      	ldr	r4, [r2, #0]
 8004454:	e7a6      	b.n	80043a4 <f_printf+0x90>
 8004456:	1d13      	adds	r3, r2, #4
 8004458:	6814      	ldr	r4, [r2, #0]
 800445a:	9307      	str	r3, [sp, #28]
 800445c:	2307      	movs	r3, #7
 800445e:	2978      	cmp	r1, #120	; 0x78
 8004460:	d100      	bne.n	8004464 <f_printf+0x150>
 8004462:	2327      	movs	r3, #39	; 0x27
 8004464:	b2db      	uxtb	r3, r3
 8004466:	9305      	str	r3, [sp, #20]
		}
		i = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	9303      	str	r3, [sp, #12]
		do {
			d = (TCHAR)(v % r); v /= r;
 800446c:	0020      	movs	r0, r4
 800446e:	9902      	ldr	r1, [sp, #8]
 8004470:	f7fb feec 	bl	800024c <__aeabi_uidivmod>
 8004474:	0020      	movs	r0, r4
 8004476:	b2cb      	uxtb	r3, r1
 8004478:	000d      	movs	r5, r1
 800447a:	9902      	ldr	r1, [sp, #8]
 800447c:	9304      	str	r3, [sp, #16]
 800447e:	f7fb fe5f 	bl	8000140 <__udivsi3>
 8004482:	0004      	movs	r4, r0
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8004484:	2d09      	cmp	r5, #9
 8004486:	d905      	bls.n	8004494 <f_printf+0x180>
 8004488:	9a05      	ldr	r2, [sp, #20]
 800448a:	9b04      	ldr	r3, [sp, #16]
 800448c:	4694      	mov	ip, r2
 800448e:	4463      	add	r3, ip
 8004490:	b2db      	uxtb	r3, r3
 8004492:	9304      	str	r3, [sp, #16]
			s[i++] = d + '0';
 8004494:	200c      	movs	r0, #12
 8004496:	9b03      	ldr	r3, [sp, #12]
 8004498:	aa06      	add	r2, sp, #24
 800449a:	1c5d      	adds	r5, r3, #1
 800449c:	9b04      	ldr	r3, [sp, #16]
 800449e:	9903      	ldr	r1, [sp, #12]
 80044a0:	3330      	adds	r3, #48	; 0x30
 80044a2:	1812      	adds	r2, r2, r0
 80044a4:	5453      	strb	r3, [r2, r1]
		} while (v && i < sizeof s / sizeof s[0]);
 80044a6:	2c00      	cmp	r4, #0
 80044a8:	d003      	beq.n	80044b2 <f_printf+0x19e>
 80044aa:	2d10      	cmp	r5, #16
 80044ac:	d130      	bne.n	8004510 <f_printf+0x1fc>
 80044ae:	230f      	movs	r3, #15
 80044b0:	9303      	str	r3, [sp, #12]
		if (f & 8) s[i++] = '-';
 80044b2:	0733      	lsls	r3, r6, #28
 80044b4:	d506      	bpl.n	80044c4 <f_printf+0x1b0>
 80044b6:	210c      	movs	r1, #12
 80044b8:	232d      	movs	r3, #45	; 0x2d
 80044ba:	aa06      	add	r2, sp, #24
 80044bc:	1852      	adds	r2, r2, r1
 80044be:	5553      	strb	r3, [r2, r5]
 80044c0:	9d03      	ldr	r5, [sp, #12]
 80044c2:	3502      	adds	r5, #2
		j = i; d = (f & 1) ? '0' : ' ';
 80044c4:	2330      	movs	r3, #48	; 0x30
 80044c6:	9302      	str	r3, [sp, #8]
 80044c8:	07f3      	lsls	r3, r6, #31
 80044ca:	d401      	bmi.n	80044d0 <f_printf+0x1bc>
 80044cc:	2320      	movs	r3, #32
 80044ce:	9302      	str	r3, [sp, #8]
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80044d0:	2302      	movs	r3, #2
		j = i; d = (f & 1) ? '0' : ' ';
 80044d2:	002c      	movs	r4, r5
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80044d4:	401e      	ands	r6, r3
 80044d6:	9603      	str	r6, [sp, #12]
 80044d8:	9b03      	ldr	r3, [sp, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <f_printf+0x1d4>
 80044de:	9b01      	ldr	r3, [sp, #4]
 80044e0:	1c66      	adds	r6, r4, #1
 80044e2:	429c      	cmp	r4, r3
 80044e4:	d316      	bcc.n	8004514 <f_printf+0x200>
 80044e6:	0034      	movs	r4, r6
		do putc_bfd(&pb, s[--i]); while (i);
 80044e8:	220c      	movs	r2, #12
 80044ea:	ab06      	add	r3, sp, #24
 80044ec:	3d01      	subs	r5, #1
 80044ee:	189b      	adds	r3, r3, r2
 80044f0:	5d59      	ldrb	r1, [r3, r5]
 80044f2:	a80d      	add	r0, sp, #52	; 0x34
 80044f4:	f7ff fe3c 	bl	8004170 <putc_bfd>
 80044f8:	2d00      	cmp	r5, #0
 80044fa:	d1f5      	bne.n	80044e8 <f_printf+0x1d4>
		while (j++ < w) putc_bfd(&pb, d);
 80044fc:	9b01      	ldr	r3, [sp, #4]
 80044fe:	42a3      	cmp	r3, r4
 8004500:	d800      	bhi.n	8004504 <f_printf+0x1f0>
 8004502:	e711      	b.n	8004328 <f_printf+0x14>
 8004504:	9902      	ldr	r1, [sp, #8]
 8004506:	a80d      	add	r0, sp, #52	; 0x34
 8004508:	f7ff fe32 	bl	8004170 <putc_bfd>
 800450c:	3401      	adds	r4, #1
 800450e:	e7f5      	b.n	80044fc <f_printf+0x1e8>
 8004510:	9503      	str	r5, [sp, #12]
 8004512:	e7ab      	b.n	800446c <f_printf+0x158>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8004514:	9902      	ldr	r1, [sp, #8]
 8004516:	a80d      	add	r0, sp, #52	; 0x34
 8004518:	f7ff fe2a 	bl	8004170 <putc_bfd>
 800451c:	0034      	movs	r4, r6
 800451e:	e7db      	b.n	80044d8 <f_printf+0x1c4>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8004520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004522:	2a00      	cmp	r2, #0
 8004524:	da06      	bge.n	8004534 <f_printf+0x220>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 8004526:	2001      	movs	r0, #1
 8004528:	4240      	negs	r0, r0
}
 800452a:	b020      	add	sp, #128	; 0x80
 800452c:	bcf0      	pop	{r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	b003      	add	sp, #12
 8004532:	4718      	bx	r3
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8004534:	ab08      	add	r3, sp, #32
 8004536:	a910      	add	r1, sp, #64	; 0x40
 8004538:	980d      	ldr	r0, [sp, #52]	; 0x34
 800453a:	f7ff fceb 	bl	8003f14 <f_write>
 800453e:	2800      	cmp	r0, #0
 8004540:	d1f1      	bne.n	8004526 <f_printf+0x212>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8004542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004544:	9a08      	ldr	r2, [sp, #32]
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	4293      	cmp	r3, r2
 800454a:	d1ec      	bne.n	8004526 <f_printf+0x212>
 800454c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800454e:	e7ec      	b.n	800452a <f_printf+0x216>

08004550 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004550:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
 8004552:	2401      	movs	r4, #1
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <FATFS_LinkDriverEx+0x40>)
 8004556:	7a5d      	ldrb	r5, [r3, #9]
 8004558:	42a5      	cmp	r5, r4
 800455a:	d816      	bhi.n	800458a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800455c:	2400      	movs	r4, #0
 800455e:	7a5d      	ldrb	r5, [r3, #9]
 8004560:	b2ed      	uxtb	r5, r5
 8004562:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8004564:	7a5d      	ldrb	r5, [r3, #9]
 8004566:	00ad      	lsls	r5, r5, #2
 8004568:	195d      	adds	r5, r3, r5
 800456a:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800456c:	7a58      	ldrb	r0, [r3, #9]
 800456e:	1818      	adds	r0, r3, r0
 8004570:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004572:	7a5a      	ldrb	r2, [r3, #9]
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	1c50      	adds	r0, r2, #1
 8004578:	b2c0      	uxtb	r0, r0
 800457a:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800457c:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800457e:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8004580:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004582:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 8004584:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8004586:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004588:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 800458a:	0020      	movs	r0, r4
 800458c:	bd30      	pop	{r4, r5, pc}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	200002c4 	.word	0x200002c4

08004594 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004594:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8004596:	2200      	movs	r2, #0
 8004598:	f7ff ffda 	bl	8004550 <FATFS_LinkDriverEx>
}
 800459c:	bd10      	pop	{r4, pc}
	...

080045a0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80045a0:	b510      	push	{r4, lr}
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80045a2:	287f      	cmp	r0, #127	; 0x7f
 80045a4:	d907      	bls.n	80045b6 <ff_convert+0x16>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80045a6:	2900      	cmp	r1, #0
 80045a8:	d006      	beq.n	80045b8 <ff_convert+0x18>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80045aa:	28ff      	cmp	r0, #255	; 0xff
 80045ac:	d811      	bhi.n	80045d2 <ff_convert+0x32>
 80045ae:	3880      	subs	r0, #128	; 0x80
 80045b0:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <ff_convert+0x38>)
 80045b2:	0040      	lsls	r0, r0, #1
 80045b4:	5ac0      	ldrh	r0, [r0, r3]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 80045b6:	bd10      	pop	{r4, pc}
				if (chr == Tbl[c]) break;
 80045b8:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <ff_convert+0x38>)
 80045ba:	004c      	lsls	r4, r1, #1
 80045bc:	5aa4      	ldrh	r4, [r4, r2]
 80045be:	b28b      	uxth	r3, r1
 80045c0:	4284      	cmp	r4, r0
 80045c2:	d003      	beq.n	80045cc <ff_convert+0x2c>
 80045c4:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 80045c6:	2980      	cmp	r1, #128	; 0x80
 80045c8:	d1f7      	bne.n	80045ba <ff_convert+0x1a>
 80045ca:	000b      	movs	r3, r1
			c = (c + 0x80) & 0xFF;
 80045cc:	3380      	adds	r3, #128	; 0x80
 80045ce:	b2d8      	uxtb	r0, r3
 80045d0:	e7f1      	b.n	80045b6 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80045d2:	2000      	movs	r0, #0
 80045d4:	e7ef      	b.n	80045b6 <ff_convert+0x16>
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	08005fae 	.word	0x08005fae

080045dc <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80045dc:	2300      	movs	r3, #0
{
 80045de:	b510      	push	{r4, lr}
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80045e0:	4c05      	ldr	r4, [pc, #20]	; (80045f8 <ff_wtoupper+0x1c>)
 80045e2:	005a      	lsls	r2, r3, #1
 80045e4:	5b11      	ldrh	r1, [r2, r4]
 80045e6:	2900      	cmp	r1, #0
 80045e8:	d003      	beq.n	80045f2 <ff_wtoupper+0x16>
 80045ea:	4281      	cmp	r1, r0
 80045ec:	d102      	bne.n	80045f4 <ff_wtoupper+0x18>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80045ee:	4b03      	ldr	r3, [pc, #12]	; (80045fc <ff_wtoupper+0x20>)
 80045f0:	5ad0      	ldrh	r0, [r2, r3]
}
 80045f2:	bd10      	pop	{r4, pc}
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80045f4:	3301      	adds	r3, #1
 80045f6:	e7f4      	b.n	80045e2 <ff_wtoupper+0x6>
 80045f8:	080060ae 	.word	0x080060ae
 80045fc:	0800628e 	.word	0x0800628e

08004600 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004600:	b510      	push	{r4, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004602:	4903      	ldr	r1, [pc, #12]	; (8004610 <MX_FATFS_Init+0x10>)
 8004604:	4803      	ldr	r0, [pc, #12]	; (8004614 <MX_FATFS_Init+0x14>)
 8004606:	f7ff ffc5 	bl	8004594 <FATFS_LinkDriver>
 800460a:	4b03      	ldr	r3, [pc, #12]	; (8004618 <MX_FATFS_Init+0x18>)
 800460c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800460e:	bd10      	pop	{r4, pc}
 8004610:	200002f8 	.word	0x200002f8
 8004614:	20000010 	.word	0x20000010
 8004618:	200002fc 	.word	0x200002fc

0800461c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800461c:	2000      	movs	r0, #0
 800461e:	4770      	bx	lr

08004620 <SPI_TxByte>:
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
}

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8004620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004622:	466b      	mov	r3, sp
 8004624:	1ddd      	adds	r5, r3, #7
 8004626:	7028      	strb	r0, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004628:	4c06      	ldr	r4, [pc, #24]	; (8004644 <SPI_TxByte+0x24>)
 800462a:	0020      	movs	r0, r4
 800462c:	f7fd f9b2 	bl	8001994 <HAL_SPI_GetState>
 8004630:	0002      	movs	r2, r0
 8004632:	2801      	cmp	r0, #1
 8004634:	d1f8      	bne.n	8004628 <SPI_TxByte+0x8>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8004636:	23fa      	movs	r3, #250	; 0xfa
 8004638:	0029      	movs	r1, r5
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	0020      	movs	r0, r4
 800463e:	f7fc ffa7 	bl	8001590 <HAL_SPI_Transmit>
}
 8004642:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8004644:	20001478 	.word	0x20001478

08004648 <SELECT>:
{
 8004648:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800464a:	2200      	movs	r2, #0
 800464c:	2140      	movs	r1, #64	; 0x40
 800464e:	4802      	ldr	r0, [pc, #8]	; (8004658 <SELECT+0x10>)
 8004650:	f7fc fb52 	bl	8000cf8 <HAL_GPIO_WritePin>
}
 8004654:	bd10      	pop	{r4, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	48000400 	.word	0x48000400

0800465c <DESELECT>:
{
 800465c:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800465e:	2201      	movs	r2, #1
 8004660:	2140      	movs	r1, #64	; 0x40
 8004662:	4802      	ldr	r0, [pc, #8]	; (800466c <DESELECT+0x10>)
 8004664:	f7fc fb48 	bl	8000cf8 <HAL_GPIO_WritePin>
}
 8004668:	bd10      	pop	{r4, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	48000400 	.word	0x48000400

08004670 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8004670:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t dummy, data;
  dummy = 0xFF;
 8004672:	260e      	movs	r6, #14
 8004674:	23ff      	movs	r3, #255	; 0xff
 8004676:	446e      	add	r6, sp
  data = 0;
 8004678:	240f      	movs	r4, #15
  dummy = 0xFF;
 800467a:	7033      	strb	r3, [r6, #0]
  data = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	446c      	add	r4, sp
 8004680:	7023      	strb	r3, [r4, #0]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8004682:	4d09      	ldr	r5, [pc, #36]	; (80046a8 <SPI_RxByte+0x38>)
 8004684:	0028      	movs	r0, r5
 8004686:	f7fd f985 	bl	8001994 <HAL_SPI_GetState>
 800468a:	0003      	movs	r3, r0
 800468c:	2801      	cmp	r0, #1
 800468e:	d1f8      	bne.n	8004682 <SPI_RxByte+0x12>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8004690:	22fa      	movs	r2, #250	; 0xfa
 8004692:	0092      	lsls	r2, r2, #2
 8004694:	9200      	str	r2, [sp, #0]
 8004696:	0031      	movs	r1, r6
 8004698:	0022      	movs	r2, r4
 800469a:	0028      	movs	r0, r5
 800469c:	f7fd f848 	bl	8001730 <HAL_SPI_TransmitReceive>
  
  return data;
 80046a0:	7820      	ldrb	r0, [r4, #0]
}
 80046a2:	b004      	add	sp, #16
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	20001478 	.word	0x20001478

080046ac <SD_PowerOn>:
  return res;
}

/*Power on*/
static void SD_PowerOn(void) 
{
 80046ac:	b513      	push	{r0, r1, r4, lr}
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
  

  DESELECT();
 80046ae:	f7ff ffd5 	bl	800465c <DESELECT>
 80046b2:	240a      	movs	r4, #10
  
  for(int i = 0; i < 10; i++)
  {
    SPI_TxByte(0xFF);
 80046b4:	20ff      	movs	r0, #255	; 0xff
 80046b6:	3c01      	subs	r4, #1
 80046b8:	f7ff ffb2 	bl	8004620 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80046bc:	2c00      	cmp	r4, #0
 80046be:	d1f9      	bne.n	80046b4 <SD_PowerOn+0x8>
  }
  
  /* SPI Chips Select */
  SELECT();
 80046c0:	f7ff ffc2 	bl	8004648 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80046c4:	466a      	mov	r2, sp
 80046c6:	2340      	movs	r3, #64	; 0x40
 80046c8:	7013      	strb	r3, [r2, #0]
  cmd_arg[1] = 0;
  cmd_arg[2] = 0;
  cmd_arg[3] = 0;
  cmd_arg[4] = 0;
  cmd_arg[5] = 0x95;
 80046ca:	2395      	movs	r3, #149	; 0x95
  cmd_arg[1] = 0;
 80046cc:	7054      	strb	r4, [r2, #1]
  cmd_arg[2] = 0;
 80046ce:	7094      	strb	r4, [r2, #2]
  cmd_arg[3] = 0;
 80046d0:	70d4      	strb	r4, [r2, #3]
  cmd_arg[4] = 0;
 80046d2:	7114      	strb	r4, [r2, #4]
  cmd_arg[5] = 0x95;
 80046d4:	7153      	strb	r3, [r2, #5]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
  {
    SPI_TxByte(cmd_arg[i]);
 80046d6:	466b      	mov	r3, sp
 80046d8:	5d18      	ldrb	r0, [r3, r4]
  for (int i = 0; i < 6; i++)
 80046da:	3401      	adds	r4, #1
    SPI_TxByte(cmd_arg[i]);
 80046dc:	f7ff ffa0 	bl	8004620 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80046e0:	2c06      	cmp	r4, #6
 80046e2:	d1f8      	bne.n	80046d6 <SD_PowerOn+0x2a>
 80046e4:	2480      	movs	r4, #128	; 0x80
 80046e6:	01a4      	lsls	r4, r4, #6
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80046e8:	f7ff ffc2 	bl	8004670 <SPI_RxByte>
 80046ec:	2801      	cmp	r0, #1
 80046ee:	d002      	beq.n	80046f6 <SD_PowerOn+0x4a>
 80046f0:	3c01      	subs	r4, #1
 80046f2:	2c00      	cmp	r4, #0
 80046f4:	d1f8      	bne.n	80046e8 <SD_PowerOn+0x3c>
  {
    Count--;
  }
  
  DESELECT();
 80046f6:	f7ff ffb1 	bl	800465c <DESELECT>
  SPI_TxByte(0XFF);
 80046fa:	20ff      	movs	r0, #255	; 0xff
 80046fc:	f7ff ff90 	bl	8004620 <SPI_TxByte>
  
  PowerFlag = 1;
 8004700:	2201      	movs	r2, #1
 8004702:	4b01      	ldr	r3, [pc, #4]	; (8004708 <SD_PowerOn+0x5c>)
 8004704:	701a      	strb	r2, [r3, #0]
}
 8004706:	bd13      	pop	{r0, r1, r4, pc}
 8004708:	200002d1 	.word	0x200002d1

0800470c <SD_ReadyWait>:
  Timer2 = 50;
 800470c:	2332      	movs	r3, #50	; 0x32
{
 800470e:	b510      	push	{r4, lr}
  Timer2 = 50;
 8004710:	4c05      	ldr	r4, [pc, #20]	; (8004728 <SD_ReadyWait+0x1c>)
 8004712:	7023      	strb	r3, [r4, #0]
  SPI_RxByte();
 8004714:	f7ff ffac 	bl	8004670 <SPI_RxByte>
    res = SPI_RxByte();
 8004718:	f7ff ffaa 	bl	8004670 <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 800471c:	28ff      	cmp	r0, #255	; 0xff
 800471e:	d002      	beq.n	8004726 <SD_ReadyWait+0x1a>
 8004720:	7823      	ldrb	r3, [r4, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f8      	bne.n	8004718 <SD_ReadyWait+0xc>
}
 8004726:	bd10      	pop	{r4, pc}
 8004728:	200019c8 	.word	0x200019c8

0800472c <SD_TxDataBlock>:
}

/* ë�°ì�´í„° ì „ì†¡ íŒ¨í‚· */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	0005      	movs	r5, r0
 8004730:	000e      	movs	r6, r1
  uint8_t resp, wc;
  uint8_t i = 0;
    
  /* SDì¹´ë“œ ì¤€ë¹„ ëŒ€ê¸° */
  if (SD_ReadyWait() != 0xFF)
 8004732:	f7ff ffeb 	bl	800470c <SD_ReadyWait>
 8004736:	0003      	movs	r3, r0
    return FALSE;
 8004738:	2000      	movs	r0, #0
  if (SD_ReadyWait() != 0xFF)
 800473a:	2bff      	cmp	r3, #255	; 0xff
 800473c:	d12c      	bne.n	8004798 <SD_TxDataBlock+0x6c>
  
  /* í† í�° ì „ì†¡ */
  SPI_TxByte(token);      
 800473e:	0030      	movs	r0, r6
 8004740:	f7ff ff6e 	bl	8004620 <SPI_TxByte>
  
  /* ë�°ì�´í„° í† í�°ì�¸ ê²½ìš° */
  if (token != 0xFD) 
 8004744:	2efd      	cmp	r6, #253	; 0xfd
 8004746:	d021      	beq.n	800478c <SD_TxDataBlock+0x60>
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	002c      	movs	r4, r5
 800474e:	18ed      	adds	r5, r5, r3
    wc = 0;
    
    /* 512 ë°”ì�´íŠ¸ ë�°ì�´í„° ì „ì†¡ */
    do 
    { 
      SPI_TxByte(*buff++);
 8004750:	7820      	ldrb	r0, [r4, #0]
 8004752:	f7ff ff65 	bl	8004620 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8004756:	7860      	ldrb	r0, [r4, #1]
 8004758:	3402      	adds	r4, #2
 800475a:	f7ff ff61 	bl	8004620 <SPI_TxByte>
    } while (--wc);
 800475e:	42ac      	cmp	r4, r5
 8004760:	d1f6      	bne.n	8004750 <SD_TxDataBlock+0x24>
    
    SPI_RxByte();       /* CRC ë¬´ì‹œ */
 8004762:	f7ff ff85 	bl	8004670 <SPI_RxByte>
    SPI_RxByte();
 8004766:	2541      	movs	r5, #65	; 0x41
 8004768:	f7ff ff82 	bl	8004670 <SPI_RxByte>
    while (i <= 64) 
    {			
      resp = SPI_RxByte();
      
      /* ì—�ëŸ¬ ì�‘ë‹µ ì²˜ë¦¬ */
      if ((resp & 0x1F) == 0x05) 
 800476c:	261f      	movs	r6, #31
      resp = SPI_RxByte();
 800476e:	f7ff ff7f 	bl	8004670 <SPI_RxByte>
      if ((resp & 0x1F) == 0x05) 
 8004772:	0003      	movs	r3, r0
      resp = SPI_RxByte();
 8004774:	0004      	movs	r4, r0
      if ((resp & 0x1F) == 0x05) 
 8004776:	4033      	ands	r3, r6
 8004778:	2b05      	cmp	r3, #5
 800477a:	d003      	beq.n	8004784 <SD_TxDataBlock+0x58>
 800477c:	3d01      	subs	r5, #1
 800477e:	b2ed      	uxtb	r5, r5
    while (i <= 64) 
 8004780:	2d00      	cmp	r5, #0
 8004782:	d1f4      	bne.n	800476e <SD_TxDataBlock+0x42>
      
      i++;
    }
    
    /* SPI ìˆ˜ì‹  ë²„í�¼ Clear */
    while (SPI_RxByte() == 0);
 8004784:	f7ff ff74 	bl	8004670 <SPI_RxByte>
 8004788:	2800      	cmp	r0, #0
 800478a:	d0fb      	beq.n	8004784 <SD_TxDataBlock+0x58>
  }
  
  if ((resp & 0x1F) == 0x05)
 800478c:	201f      	movs	r0, #31
 800478e:	4004      	ands	r4, r0
 8004790:	3c05      	subs	r4, #5
 8004792:	4260      	negs	r0, r4
 8004794:	4160      	adcs	r0, r4
    return FALSE;
 8004796:	b2c0      	uxtb	r0, r0
    return TRUE;
  else
    return FALSE;
}
 8004798:	bd70      	pop	{r4, r5, r6, pc}

0800479a <SD_SendCmd>:
#endif /* _READONLY */

/* CMD íŒ¨í‚· ì „ì†¡ */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800479a:	b570      	push	{r4, r5, r6, lr}
 800479c:	0005      	movs	r5, r0
 800479e:	000c      	movs	r4, r1
  uint8_t crc, res;
  
  /* SDì¹´ë“œ ëŒ€ê¸° */
  if (SD_ReadyWait() != 0xFF)
 80047a0:	f7ff ffb4 	bl	800470c <SD_ReadyWait>
 80047a4:	0003      	movs	r3, r0
    return 0xFF;
 80047a6:	20ff      	movs	r0, #255	; 0xff
  if (SD_ReadyWait() != 0xFF)
 80047a8:	4283      	cmp	r3, r0
 80047aa:	d126      	bne.n	80047fa <SD_SendCmd+0x60>
  
  /* ëª…ë ¹ íŒ¨í‚· ì „ì†¡ */
  SPI_TxByte(cmd); 			/* Command */
 80047ac:	0028      	movs	r0, r5
 80047ae:	f7ff ff37 	bl	8004620 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80047b2:	0e20      	lsrs	r0, r4, #24
 80047b4:	f7ff ff34 	bl	8004620 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80047b8:	0c20      	lsrs	r0, r4, #16
 80047ba:	b2c0      	uxtb	r0, r0
 80047bc:	f7ff ff30 	bl	8004620 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80047c0:	0a20      	lsrs	r0, r4, #8
 80047c2:	b2c0      	uxtb	r0, r0
 80047c4:	f7ff ff2c 	bl	8004620 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80047c8:	b2e0      	uxtb	r0, r4
 80047ca:	f7ff ff29 	bl	8004620 <SPI_TxByte>
  
  /* ëª…ë ¹ë³„ CRC ì¤€ë¹„ */
  crc = 0;  
  if (cmd == CMD0)
    crc = 0x95; /* CRC for CMD0(0) */
 80047ce:	2095      	movs	r0, #149	; 0x95
  if (cmd == CMD0)
 80047d0:	2d40      	cmp	r5, #64	; 0x40
 80047d2:	d003      	beq.n	80047dc <SD_SendCmd+0x42>
  crc = 0;  
 80047d4:	2000      	movs	r0, #0
  
  if (cmd == CMD8)
 80047d6:	2d48      	cmp	r5, #72	; 0x48
 80047d8:	d100      	bne.n	80047dc <SD_SendCmd+0x42>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80047da:	3087      	adds	r0, #135	; 0x87
  
  /* CRC ì „ì†¡ */
  SPI_TxByte(crc);
 80047dc:	f7ff ff20 	bl	8004620 <SPI_TxByte>
  
  /* CMD12 Stop Reading ëª…ë ¹ì�¸ ê²½ìš°ì—�ëŠ” ì�‘ë‹µ ë°”ì�´íŠ¸ í•˜ë‚˜ë¥¼ ë²„ë¦°ë‹¤ */
  if (cmd == CMD12)
 80047e0:	2d4c      	cmp	r5, #76	; 0x4c
 80047e2:	d101      	bne.n	80047e8 <SD_SendCmd+0x4e>
    SPI_RxByte();
 80047e4:	f7ff ff44 	bl	8004670 <SPI_RxByte>
  crc = 0;  
 80047e8:	240a      	movs	r4, #10
  
  /* 10íšŒ ë‚´ì—� ì •ìƒ� ë�°ì�´í„°ë¥¼ ìˆ˜ì‹ í•œë‹¤. */
  uint8_t n = 10; 
  do
  {
    res = SPI_RxByte();
 80047ea:	f7ff ff41 	bl	8004670 <SPI_RxByte>
  } while ((res & 0x80) && --n);
 80047ee:	0603      	lsls	r3, r0, #24
 80047f0:	d503      	bpl.n	80047fa <SD_SendCmd+0x60>
 80047f2:	3c01      	subs	r4, #1
 80047f4:	b2e4      	uxtb	r4, r4
 80047f6:	2c00      	cmp	r4, #0
 80047f8:	d1f7      	bne.n	80047ea <SD_SendCmd+0x50>
  
  return res;
}
 80047fa:	bd70      	pop	{r4, r5, r6, pc}

080047fc <SD_RxDataBlock>:
  Timer1 = 10;
 80047fc:	230a      	movs	r3, #10
{
 80047fe:	b570      	push	{r4, r5, r6, lr}
 8004800:	0004      	movs	r4, r0
 8004802:	000d      	movs	r5, r1
  Timer1 = 10;
 8004804:	4e0f      	ldr	r6, [pc, #60]	; (8004844 <SD_RxDataBlock+0x48>)
 8004806:	7033      	strb	r3, [r6, #0]
    token = SPI_RxByte();
 8004808:	f7ff ff32 	bl	8004670 <SPI_RxByte>
 800480c:	0003      	movs	r3, r0
  } while((token == 0xFF) && Timer1);
 800480e:	28ff      	cmp	r0, #255	; 0xff
 8004810:	d104      	bne.n	800481c <SD_RxDataBlock+0x20>
 8004812:	7830      	ldrb	r0, [r6, #0]
 8004814:	b2c0      	uxtb	r0, r0
 8004816:	2800      	cmp	r0, #0
 8004818:	d1f6      	bne.n	8004808 <SD_RxDataBlock+0xc>
}
 800481a:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 800481c:	2000      	movs	r0, #0
  if(token != 0xFE)
 800481e:	2bfe      	cmp	r3, #254	; 0xfe
 8004820:	d1fb      	bne.n	800481a <SD_RxDataBlock+0x1e>
 8004822:	0026      	movs	r6, r4
  *buff = SPI_RxByte();
 8004824:	f7ff ff24 	bl	8004670 <SPI_RxByte>
 8004828:	7030      	strb	r0, [r6, #0]
 800482a:	f7ff ff21 	bl	8004670 <SPI_RxByte>
 800482e:	7070      	strb	r0, [r6, #1]
 8004830:	3602      	adds	r6, #2
  } while(btr -= 2);
 8004832:	1b73      	subs	r3, r6, r5
 8004834:	42a3      	cmp	r3, r4
 8004836:	d1f5      	bne.n	8004824 <SD_RxDataBlock+0x28>
  SPI_RxByte(); /* CRC ë¬´ì‹œ */
 8004838:	f7ff ff1a 	bl	8004670 <SPI_RxByte>
  SPI_RxByte();
 800483c:	f7ff ff18 	bl	8004670 <SPI_RxByte>
 8004840:	2001      	movs	r0, #1
 8004842:	e7ea      	b.n	800481a <SD_RxDataBlock+0x1e>
 8004844:	200019c9 	.word	0x200019c9

08004848 <SD_disk_initialize>:
  user_diskio.c íŒŒì�¼ì—�ì„œ ì‚¬ìš©ë�œë‹¤.
-----------------------------------------------------------------------*/

/* SDì¹´ë“œ ì´ˆê¸°í™” */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t n, type, ocr[4];
  
  /* í•œì¢…ë¥˜ì�˜ ë“œë�¼ì�´ë¸Œë§Œ ì§€ì›� */
  if(drv)
    return STA_NOINIT;  
 800484a:	2301      	movs	r3, #1
  if(drv)
 800484c:	2800      	cmp	r0, #0
 800484e:	d106      	bne.n	800485e <SD_disk_initialize+0x16>
  
  /* SDì¹´ë“œ ë¯¸ì‚½ìž… */
  if(Stat & STA_NODISK)
 8004850:	2602      	movs	r6, #2
 8004852:	4d46      	ldr	r5, [pc, #280]	; (800496c <SD_disk_initialize+0x124>)
 8004854:	782c      	ldrb	r4, [r5, #0]
 8004856:	4034      	ands	r4, r6
 8004858:	d003      	beq.n	8004862 <SD_disk_initialize+0x1a>
  {
    /* Initialization failed */
    SD_PowerOff();
  }
  
  return Stat;
 800485a:	782b      	ldrb	r3, [r5, #0]
 800485c:	b2db      	uxtb	r3, r3
}
 800485e:	0018      	movs	r0, r3
 8004860:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  SD_PowerOn();         
 8004862:	f7ff ff23 	bl	80046ac <SD_PowerOn>
  SELECT();             
 8004866:	f7ff feef 	bl	8004648 <SELECT>
  if (SD_SendCmd(CMD0, 0) == 1) 
 800486a:	0021      	movs	r1, r4
 800486c:	2040      	movs	r0, #64	; 0x40
 800486e:	f7ff ff94 	bl	800479a <SD_SendCmd>
 8004872:	2801      	cmp	r0, #1
 8004874:	d16d      	bne.n	8004952 <SD_disk_initialize+0x10a>
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8004876:	21d5      	movs	r1, #213	; 0xd5
    Timer1 = 100;
 8004878:	2364      	movs	r3, #100	; 0x64
 800487a:	4f3d      	ldr	r7, [pc, #244]	; (8004970 <SD_disk_initialize+0x128>)
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800487c:	0049      	lsls	r1, r1, #1
 800487e:	3047      	adds	r0, #71	; 0x47
    Timer1 = 100;
 8004880:	703b      	strb	r3, [r7, #0]
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8004882:	f7ff ff8a 	bl	800479a <SD_SendCmd>
 8004886:	2801      	cmp	r0, #1
 8004888:	d140      	bne.n	800490c <SD_disk_initialize+0xc4>
        ocr[n] = SPI_RxByte();
 800488a:	f7ff fef1 	bl	8004670 <SPI_RxByte>
 800488e:	ae01      	add	r6, sp, #4
 8004890:	55a0      	strb	r0, [r4, r6]
 8004892:	3401      	adds	r4, #1
      for (n = 0; n < 4; n++)
 8004894:	2c04      	cmp	r4, #4
 8004896:	d1f8      	bne.n	800488a <SD_disk_initialize+0x42>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8004898:	78b3      	ldrb	r3, [r6, #2]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d159      	bne.n	8004952 <SD_disk_initialize+0x10a>
 800489e:	78f3      	ldrb	r3, [r6, #3]
 80048a0:	2baa      	cmp	r3, #170	; 0xaa
 80048a2:	d156      	bne.n	8004952 <SD_disk_initialize+0x10a>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80048a4:	2480      	movs	r4, #128	; 0x80
 80048a6:	05e4      	lsls	r4, r4, #23
 80048a8:	2100      	movs	r1, #0
 80048aa:	2077      	movs	r0, #119	; 0x77
 80048ac:	f7ff ff75 	bl	800479a <SD_SendCmd>
 80048b0:	2801      	cmp	r0, #1
 80048b2:	d924      	bls.n	80048fe <SD_disk_initialize+0xb6>
        } while (Timer1);
 80048b4:	783b      	ldrb	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f6      	bne.n	80048a8 <SD_disk_initialize+0x60>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80048ba:	783b      	ldrb	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d048      	beq.n	8004952 <SD_disk_initialize+0x10a>
 80048c0:	2100      	movs	r1, #0
 80048c2:	207a      	movs	r0, #122	; 0x7a
 80048c4:	f7ff ff69 	bl	800479a <SD_SendCmd>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d142      	bne.n	8004952 <SD_disk_initialize+0x10a>
 80048cc:	0004      	movs	r4, r0
            ocr[n] = SPI_RxByte();
 80048ce:	f7ff fecf 	bl	8004670 <SPI_RxByte>
 80048d2:	5530      	strb	r0, [r6, r4]
 80048d4:	3401      	adds	r4, #1
          for (n = 0; n < 4; n++)
 80048d6:	2c04      	cmp	r4, #4
 80048d8:	d1f9      	bne.n	80048ce <SD_disk_initialize+0x86>
          type = (ocr[0] & 0x40) ? 6 : 2;
 80048da:	7833      	ldrb	r3, [r6, #0]
 80048dc:	2606      	movs	r6, #6
 80048de:	065b      	lsls	r3, r3, #25
 80048e0:	d400      	bmi.n	80048e4 <SD_disk_initialize+0x9c>
 80048e2:	3e04      	subs	r6, #4
  CardType = type;
 80048e4:	4b23      	ldr	r3, [pc, #140]	; (8004974 <SD_disk_initialize+0x12c>)
 80048e6:	701e      	strb	r6, [r3, #0]
  DESELECT();
 80048e8:	f7ff feb8 	bl	800465c <DESELECT>
  SPI_RxByte(); /* Idle ìƒ�íƒœ ì „í™˜ (Release DO) */
 80048ec:	f7ff fec0 	bl	8004670 <SPI_RxByte>
  if (type) 
 80048f0:	2e00      	cmp	r6, #0
 80048f2:	d037      	beq.n	8004964 <SD_disk_initialize+0x11c>
    Stat &= ~STA_NOINIT; 
 80048f4:	2201      	movs	r2, #1
 80048f6:	782b      	ldrb	r3, [r5, #0]
 80048f8:	4393      	bics	r3, r2
 80048fa:	702b      	strb	r3, [r5, #0]
 80048fc:	e7ad      	b.n	800485a <SD_disk_initialize+0x12>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80048fe:	0021      	movs	r1, r4
 8004900:	2069      	movs	r0, #105	; 0x69
 8004902:	f7ff ff4a 	bl	800479a <SD_SendCmd>
 8004906:	2800      	cmp	r0, #0
 8004908:	d1d4      	bne.n	80048b4 <SD_disk_initialize+0x6c>
 800490a:	e7d6      	b.n	80048ba <SD_disk_initialize+0x72>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800490c:	0021      	movs	r1, r4
 800490e:	2077      	movs	r0, #119	; 0x77
 8004910:	f7ff ff43 	bl	800479a <SD_SendCmd>
 8004914:	2801      	cmp	r0, #1
 8004916:	d805      	bhi.n	8004924 <SD_disk_initialize+0xdc>
 8004918:	0021      	movs	r1, r4
 800491a:	2069      	movs	r0, #105	; 0x69
 800491c:	f7ff ff3d 	bl	800479a <SD_SendCmd>
 8004920:	2801      	cmp	r0, #1
 8004922:	d900      	bls.n	8004926 <SD_disk_initialize+0xde>
 8004924:	2601      	movs	r6, #1
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8004926:	2100      	movs	r1, #0
          if (SD_SendCmd(CMD1, 0) == 0)
 8004928:	2041      	movs	r0, #65	; 0x41
        if (type == 2) 
 800492a:	2e02      	cmp	r6, #2
 800492c:	d115      	bne.n	800495a <SD_disk_initialize+0x112>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800492e:	2077      	movs	r0, #119	; 0x77
 8004930:	f7ff ff33 	bl	800479a <SD_SendCmd>
 8004934:	2801      	cmp	r0, #1
 8004936:	d90e      	bls.n	8004956 <SD_disk_initialize+0x10e>
      } while (Timer1);
 8004938:	783b      	ldrb	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f3      	bne.n	8004926 <SD_disk_initialize+0xde>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800493e:	783b      	ldrb	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d006      	beq.n	8004952 <SD_disk_initialize+0x10a>
 8004944:	2180      	movs	r1, #128	; 0x80
 8004946:	2050      	movs	r0, #80	; 0x50
 8004948:	0089      	lsls	r1, r1, #2
 800494a:	f7ff ff26 	bl	800479a <SD_SendCmd>
 800494e:	2800      	cmp	r0, #0
 8004950:	d0c8      	beq.n	80048e4 <SD_disk_initialize+0x9c>
        type = 0;
 8004952:	2600      	movs	r6, #0
 8004954:	e7c6      	b.n	80048e4 <SD_disk_initialize+0x9c>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8004956:	2100      	movs	r1, #0
 8004958:	2069      	movs	r0, #105	; 0x69
 800495a:	f7ff ff1e 	bl	800479a <SD_SendCmd>
 800495e:	2800      	cmp	r0, #0
 8004960:	d1ea      	bne.n	8004938 <SD_disk_initialize+0xf0>
 8004962:	e7ec      	b.n	800493e <SD_disk_initialize+0xf6>
  PowerFlag = 0;
 8004964:	4b04      	ldr	r3, [pc, #16]	; (8004978 <SD_disk_initialize+0x130>)
 8004966:	701e      	strb	r6, [r3, #0]
 8004968:	e777      	b.n	800485a <SD_disk_initialize+0x12>
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	20000008 	.word	0x20000008
 8004970:	200019c9 	.word	0x200019c9
 8004974:	200002d0 	.word	0x200002d0
 8004978:	200002d1 	.word	0x200002d1

0800497c <SD_disk_status>:

/* ë””ìŠ¤í�¬ ìƒ�íƒœ í™•ì�¸ */
DSTATUS SD_disk_status(BYTE drv) 
{
  if (drv)
    return STA_NOINIT; 
 800497c:	2301      	movs	r3, #1
  if (drv)
 800497e:	2800      	cmp	r0, #0
 8004980:	d102      	bne.n	8004988 <SD_disk_status+0xc>
  
  return Stat;
 8004982:	4b02      	ldr	r3, [pc, #8]	; (800498c <SD_disk_status+0x10>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	b2db      	uxtb	r3, r3
}
 8004988:	0018      	movs	r0, r3
 800498a:	4770      	bx	lr
 800498c:	20000008 	.word	0x20000008

08004990 <SD_disk_read>:

/* ì„¹í„° ì�½ê¸° */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	0007      	movs	r7, r0
 8004994:	000d      	movs	r5, r1
 8004996:	0016      	movs	r6, r2
 8004998:	001c      	movs	r4, r3
  if (pdrv || !count)
    return RES_PARERR;
 800499a:	2004      	movs	r0, #4
  if (pdrv || !count)
 800499c:	2f00      	cmp	r7, #0
 800499e:	d123      	bne.n	80049e8 <SD_disk_read+0x58>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d021      	beq.n	80049e8 <SD_disk_read+0x58>
  
  if (Stat & STA_NOINIT)
 80049a4:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <SD_disk_read+0x8c>)
    return RES_NOTRDY;
 80049a6:	3801      	subs	r0, #1
  if (Stat & STA_NOINIT)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	07db      	lsls	r3, r3, #31
 80049ac:	d41c      	bmi.n	80049e8 <SD_disk_read+0x58>
  
  if (!(CardType & 4))
 80049ae:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <SD_disk_read+0x90>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	075b      	lsls	r3, r3, #29
 80049b4:	d400      	bmi.n	80049b8 <SD_disk_read+0x28>
    sector *= 512;      /* ì§€ì • sectorë¥¼ Byte addressing ë‹¨ìœ„ë¡œ ë³€ê²½ */
 80049b6:	0256      	lsls	r6, r2, #9
  
  SELECT();
 80049b8:	f7ff fe46 	bl	8004648 <SELECT>
  
  if (count == 1) 
  { 
    /* ì‹±ê¸€ ë¸”ë¡� ì�½ê¸° */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80049bc:	0031      	movs	r1, r6
  if (count == 1) 
 80049be:	2c01      	cmp	r4, #1
 80049c0:	d113      	bne.n	80049ea <SD_disk_read+0x5a>
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80049c2:	2051      	movs	r0, #81	; 0x51
 80049c4:	f7ff fee9 	bl	800479a <SD_SendCmd>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d106      	bne.n	80049da <SD_disk_read+0x4a>
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	0028      	movs	r0, r5
 80049d0:	0089      	lsls	r1, r1, #2
 80049d2:	f7ff ff13 	bl	80047fc <SD_RxDataBlock>
 80049d6:	4244      	negs	r4, r0
 80049d8:	4144      	adcs	r4, r0
      /* STOP_TRANSMISSION, ëª¨ë“  ë¸”ëŸ­ì�„ ë‹¤ ì�½ì�€ í›„, ì „ì†¡ ì¤‘ì§€ ìš”ì²­ */
      SD_SendCmd(CMD12, 0); 
    }
  }
  
  DESELECT();
 80049da:	f7ff fe3f 	bl	800465c <DESELECT>
  SPI_RxByte(); /* Idle ìƒ�íƒœ(Release DO) */
 80049de:	f7ff fe47 	bl	8004670 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80049e2:	1e60      	subs	r0, r4, #1
 80049e4:	4184      	sbcs	r4, r0
 80049e6:	b2e0      	uxtb	r0, r4
}
 80049e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (SD_SendCmd(CMD18, sector) == 0) 
 80049ea:	2052      	movs	r0, #82	; 0x52
 80049ec:	f7ff fed5 	bl	800479a <SD_SendCmd>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d1f2      	bne.n	80049da <SD_disk_read+0x4a>
        if (!SD_RxDataBlock(buff, 512))
 80049f4:	2680      	movs	r6, #128	; 0x80
 80049f6:	00b6      	lsls	r6, r6, #2
 80049f8:	0031      	movs	r1, r6
 80049fa:	0028      	movs	r0, r5
 80049fc:	f7ff fefe 	bl	80047fc <SD_RxDataBlock>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d005      	beq.n	8004a10 <SD_disk_read+0x80>
        buff += 512;
 8004a04:	2380      	movs	r3, #128	; 0x80
      } while (--count);
 8004a06:	3c01      	subs	r4, #1
        buff += 512;
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	18ed      	adds	r5, r5, r3
      } while (--count);
 8004a0c:	2c00      	cmp	r4, #0
 8004a0e:	d1f3      	bne.n	80049f8 <SD_disk_read+0x68>
      SD_SendCmd(CMD12, 0); 
 8004a10:	2100      	movs	r1, #0
 8004a12:	204c      	movs	r0, #76	; 0x4c
 8004a14:	f7ff fec1 	bl	800479a <SD_SendCmd>
 8004a18:	e7df      	b.n	80049da <SD_disk_read+0x4a>
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	20000008 	.word	0x20000008
 8004a20:	200002d0 	.word	0x200002d0

08004a24 <SD_disk_write>:

/* ì„¹í„° ì“°ê¸° */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	0007      	movs	r7, r0
 8004a28:	000d      	movs	r5, r1
 8004a2a:	0016      	movs	r6, r2
 8004a2c:	001c      	movs	r4, r3
  if (pdrv || !count)
    return RES_PARERR;
 8004a2e:	2004      	movs	r0, #4
  if (pdrv || !count)
 8004a30:	2f00      	cmp	r7, #0
 8004a32:	d127      	bne.n	8004a84 <SD_disk_write+0x60>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d025      	beq.n	8004a84 <SD_disk_write+0x60>
  
  if (Stat & STA_NOINIT)
 8004a38:	4b25      	ldr	r3, [pc, #148]	; (8004ad0 <SD_disk_write+0xac>)
    return RES_NOTRDY;
 8004a3a:	3801      	subs	r0, #1
  if (Stat & STA_NOINIT)
 8004a3c:	781a      	ldrb	r2, [r3, #0]
 8004a3e:	07d2      	lsls	r2, r2, #31
 8004a40:	d420      	bmi.n	8004a84 <SD_disk_write+0x60>
  
  if (Stat & STA_PROTECT)
 8004a42:	781a      	ldrb	r2, [r3, #0]
 8004a44:	2304      	movs	r3, #4
    return RES_WRPRT;
 8004a46:	3801      	subs	r0, #1
  if (Stat & STA_PROTECT)
 8004a48:	421a      	tst	r2, r3
 8004a4a:	d11b      	bne.n	8004a84 <SD_disk_write+0x60>
  
  if (!(CardType & 4))
 8004a4c:	4f21      	ldr	r7, [pc, #132]	; (8004ad4 <SD_disk_write+0xb0>)
 8004a4e:	783a      	ldrb	r2, [r7, #0]
 8004a50:	421a      	tst	r2, r3
 8004a52:	d100      	bne.n	8004a56 <SD_disk_write+0x32>
    sector *= 512; /* ì§€ì • sectorë¥¼ Byte addressing ë‹¨ìœ„ë¡œ ë³€ê²½ */
 8004a54:	0276      	lsls	r6, r6, #9
  
  SELECT();
 8004a56:	f7ff fdf7 	bl	8004648 <SELECT>
  
  if (count == 1) 
 8004a5a:	2c01      	cmp	r4, #1
 8004a5c:	d113      	bne.n	8004a86 <SD_disk_write+0x62>
  { 
    /* ì‹±ê¸€ ë¸”ë¡� ì“°ê¸° */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004a5e:	0031      	movs	r1, r6
 8004a60:	2058      	movs	r0, #88	; 0x58
 8004a62:	f7ff fe9a 	bl	800479a <SD_SendCmd>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d130      	bne.n	8004acc <SD_disk_write+0xa8>
 8004a6a:	21fe      	movs	r1, #254	; 0xfe
 8004a6c:	0028      	movs	r0, r5
 8004a6e:	f7ff fe5d 	bl	800472c <SD_TxDataBlock>
 8004a72:	4244      	negs	r4, r0
 8004a74:	4144      	adcs	r4, r0
        count = 1;
      }
    }
  }
  
  DESELECT();
 8004a76:	f7ff fdf1 	bl	800465c <DESELECT>
  SPI_RxByte();
 8004a7a:	f7ff fdf9 	bl	8004670 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8004a7e:	1e60      	subs	r0, r4, #1
 8004a80:	4184      	sbcs	r4, r0
 8004a82:	b2e0      	uxtb	r0, r4
}
 8004a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (CardType & 2) 
 8004a86:	783b      	ldrb	r3, [r7, #0]
 8004a88:	079b      	lsls	r3, r3, #30
 8004a8a:	d507      	bpl.n	8004a9c <SD_disk_write+0x78>
      SD_SendCmd(CMD55, 0);
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	2077      	movs	r0, #119	; 0x77
 8004a90:	f7ff fe83 	bl	800479a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8004a94:	0021      	movs	r1, r4
 8004a96:	2057      	movs	r0, #87	; 0x57
 8004a98:	f7ff fe7f 	bl	800479a <SD_SendCmd>
    if (SD_SendCmd(CMD25, sector) == 0) 
 8004a9c:	0031      	movs	r1, r6
 8004a9e:	2059      	movs	r0, #89	; 0x59
 8004aa0:	f7ff fe7b 	bl	800479a <SD_SendCmd>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d1e6      	bne.n	8004a76 <SD_disk_write+0x52>
        if(!SD_TxDataBlock(buff, 0xFC))
 8004aa8:	21fc      	movs	r1, #252	; 0xfc
 8004aaa:	0028      	movs	r0, r5
 8004aac:	f7ff fe3e 	bl	800472c <SD_TxDataBlock>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d005      	beq.n	8004ac0 <SD_disk_write+0x9c>
        buff += 512;
 8004ab4:	2380      	movs	r3, #128	; 0x80
      } while (--count);
 8004ab6:	3c01      	subs	r4, #1
        buff += 512;
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	18ed      	adds	r5, r5, r3
      } while (--count);
 8004abc:	2c00      	cmp	r4, #0
 8004abe:	d1f3      	bne.n	8004aa8 <SD_disk_write+0x84>
      if(!SD_TxDataBlock(0, 0xFD))
 8004ac0:	21fd      	movs	r1, #253	; 0xfd
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f7ff fe32 	bl	800472c <SD_TxDataBlock>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d1d4      	bne.n	8004a76 <SD_disk_write+0x52>
        count = 1;
 8004acc:	2401      	movs	r4, #1
 8004ace:	e7d2      	b.n	8004a76 <SD_disk_write+0x52>
 8004ad0:	20000008 	.word	0x20000008
 8004ad4:	200002d0 	.word	0x200002d0

08004ad8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* ê¸°íƒ€ í•¨ìˆ˜ */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ada:	0006      	movs	r6, r0
 8004adc:	b085      	sub	sp, #20
 8004ade:	000f      	movs	r7, r1
 8004ae0:	0015      	movs	r5, r2
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;
  
  if (drv)
    return RES_PARERR;
 8004ae2:	2404      	movs	r4, #4
  if (drv)
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d108      	bne.n	8004afa <SD_disk_ioctl+0x22>
  
  res = RES_ERROR;
  
  if (ctrl == CTRL_POWER) 
 8004ae8:	2905      	cmp	r1, #5
 8004aea:	d118      	bne.n	8004b1e <SD_disk_ioctl+0x46>
  {
    switch (*ptr) 
 8004aec:	7813      	ldrb	r3, [r2, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d00d      	beq.n	8004b0e <SD_disk_ioctl+0x36>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <SD_disk_ioctl+0x28>
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d00d      	beq.n	8004b16 <SD_disk_ioctl+0x3e>
    DESELECT();
    SPI_RxByte();
  }
  
  return res;
}
 8004afa:	0020      	movs	r0, r4
 8004afc:	b005      	add	sp, #20
 8004afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return PowerFlag;
 8004b00:	4a46      	ldr	r2, [pc, #280]	; (8004c1c <SD_disk_ioctl+0x144>)
      res = RES_OK;
 8004b02:	001c      	movs	r4, r3
      if (SD_CheckPower())
 8004b04:	7811      	ldrb	r1, [r2, #0]
 8004b06:	2900      	cmp	r1, #0
 8004b08:	d0f7      	beq.n	8004afa <SD_disk_ioctl+0x22>
  PowerFlag = 0;
 8004b0a:	7013      	strb	r3, [r2, #0]
 8004b0c:	e7f5      	b.n	8004afa <SD_disk_ioctl+0x22>
      SD_PowerOn();             /* Power On */
 8004b0e:	f7ff fdcd 	bl	80046ac <SD_PowerOn>
      res = RES_OK;             /* Power Check */
 8004b12:	0034      	movs	r4, r6
      break;
 8004b14:	e7f1      	b.n	8004afa <SD_disk_ioctl+0x22>
  return PowerFlag;
 8004b16:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <SD_disk_ioctl+0x144>)
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	7053      	strb	r3, [r2, #1]
 8004b1c:	e7f9      	b.n	8004b12 <SD_disk_ioctl+0x3a>
    if (Stat & STA_NOINIT)
 8004b1e:	4b40      	ldr	r3, [pc, #256]	; (8004c20 <SD_disk_ioctl+0x148>)
      return RES_NOTRDY;
 8004b20:	2403      	movs	r4, #3
    if (Stat & STA_NOINIT)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	07db      	lsls	r3, r3, #31
 8004b26:	d4e8      	bmi.n	8004afa <SD_disk_ioctl+0x22>
    SELECT();
 8004b28:	f7ff fd8e 	bl	8004648 <SELECT>
    switch (ctrl) 
 8004b2c:	2f0d      	cmp	r7, #13
 8004b2e:	d86b      	bhi.n	8004c08 <SD_disk_ioctl+0x130>
 8004b30:	0038      	movs	r0, r7
 8004b32:	f7fb fafb 	bl	800012c <__gnu_thumb1_case_uqi>
 8004b36:	074b      	.short	0x074b
 8004b38:	69696946 	.word	0x69696946
 8004b3c:	69696969 	.word	0x69696969
 8004b40:	63605369 	.word	0x63605369
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8004b44:	2100      	movs	r1, #0
 8004b46:	2049      	movs	r0, #73	; 0x49
 8004b48:	f7ff fe27 	bl	800479a <SD_SendCmd>
 8004b4c:	1e04      	subs	r4, r0, #0
 8004b4e:	d005      	beq.n	8004b5c <SD_disk_ioctl+0x84>
  res = RES_ERROR;
 8004b50:	2401      	movs	r4, #1
    DESELECT();
 8004b52:	f7ff fd83 	bl	800465c <DESELECT>
    SPI_RxByte();
 8004b56:	f7ff fd8b 	bl	8004670 <SPI_RxByte>
 8004b5a:	e7ce      	b.n	8004afa <SD_disk_ioctl+0x22>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8004b5c:	2110      	movs	r1, #16
 8004b5e:	4668      	mov	r0, sp
 8004b60:	f7ff fe4c 	bl	80047fc <SD_RxDataBlock>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d0f3      	beq.n	8004b50 <SD_disk_ioctl+0x78>
        if ((csd[0] >> 6) == 1) 
 8004b68:	466b      	mov	r3, sp
 8004b6a:	7819      	ldrb	r1, [r3, #0]
 8004b6c:	7a5a      	ldrb	r2, [r3, #9]
 8004b6e:	0989      	lsrs	r1, r1, #6
 8004b70:	7a1b      	ldrb	r3, [r3, #8]
 8004b72:	2901      	cmp	r1, #1
 8004b74:	d106      	bne.n	8004b84 <SD_disk_ioctl+0xac>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004b76:	3201      	adds	r2, #1
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	18d3      	adds	r3, r2, r3
          *(DWORD*) buff = (DWORD) csize << 10;
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	029b      	lsls	r3, r3, #10
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8004b80:	602b      	str	r3, [r5, #0]
 8004b82:	e7e6      	b.n	8004b52 <SD_disk_ioctl+0x7a>
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004b84:	4669      	mov	r1, sp
 8004b86:	79c9      	ldrb	r1, [r1, #7]
 8004b88:	099b      	lsrs	r3, r3, #6
 8004b8a:	0089      	lsls	r1, r1, #2
 8004b8c:	185b      	adds	r3, r3, r1
 8004b8e:	4669      	mov	r1, sp
 8004b90:	20c0      	movs	r0, #192	; 0xc0
 8004b92:	7989      	ldrb	r1, [r1, #6]
 8004b94:	0100      	lsls	r0, r0, #4
 8004b96:	0289      	lsls	r1, r1, #10
 8004b98:	4001      	ands	r1, r0
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	185b      	adds	r3, r3, r1
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004b9e:	4669      	mov	r1, sp
 8004ba0:	200f      	movs	r0, #15
 8004ba2:	7949      	ldrb	r1, [r1, #5]
 8004ba4:	0052      	lsls	r2, r2, #1
 8004ba6:	4001      	ands	r1, r0
 8004ba8:	4668      	mov	r0, sp
 8004baa:	7a80      	ldrb	r0, [r0, #10]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8004bac:	b29b      	uxth	r3, r3
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004bae:	09c0      	lsrs	r0, r0, #7
 8004bb0:	1809      	adds	r1, r1, r0
 8004bb2:	2006      	movs	r0, #6
 8004bb4:	3102      	adds	r1, #2
 8004bb6:	4002      	ands	r2, r0
 8004bb8:	188a      	adds	r2, r1, r2
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	3a09      	subs	r2, #9
 8004bbe:	4093      	lsls	r3, r2
 8004bc0:	e7de      	b.n	8004b80 <SD_disk_ioctl+0xa8>
      *(WORD*) buff = 512;
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	802b      	strh	r3, [r5, #0]
      res = RES_OK;
 8004bc8:	2400      	movs	r4, #0
      break;
 8004bca:	e7c2      	b.n	8004b52 <SD_disk_ioctl+0x7a>
      if (SD_ReadyWait() == 0xFF)
 8004bcc:	f7ff fd9e 	bl	800470c <SD_ReadyWait>
 8004bd0:	38ff      	subs	r0, #255	; 0xff
 8004bd2:	0004      	movs	r4, r0
 8004bd4:	1e60      	subs	r0, r4, #1
 8004bd6:	4184      	sbcs	r4, r0
  res = RES_ERROR;
 8004bd8:	b2e4      	uxtb	r4, r4
 8004bda:	e7ba      	b.n	8004b52 <SD_disk_ioctl+0x7a>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004bdc:	2100      	movs	r1, #0
 8004bde:	2049      	movs	r0, #73	; 0x49
 8004be0:	f7ff fddb 	bl	800479a <SD_SendCmd>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d1b3      	bne.n	8004b50 <SD_disk_ioctl+0x78>
 8004be8:	2110      	movs	r1, #16
 8004bea:	0028      	movs	r0, r5
 8004bec:	f7ff fe06 	bl	80047fc <SD_RxDataBlock>
 8004bf0:	4244      	negs	r4, r0
 8004bf2:	4144      	adcs	r4, r0
 8004bf4:	e7f0      	b.n	8004bd8 <SD_disk_ioctl+0x100>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	204a      	movs	r0, #74	; 0x4a
 8004bfa:	e7f1      	b.n	8004be0 <SD_disk_ioctl+0x108>
      if (SD_SendCmd(CMD58, 0) == 0) 
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	207a      	movs	r0, #122	; 0x7a
 8004c00:	f7ff fdcb 	bl	800479a <SD_SendCmd>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d001      	beq.n	8004c0c <SD_disk_ioctl+0x134>
      res = RES_PARERR;
 8004c08:	2404      	movs	r4, #4
 8004c0a:	e7a2      	b.n	8004b52 <SD_disk_ioctl+0x7a>
 8004c0c:	1d2c      	adds	r4, r5, #4
          *ptr++ = SPI_RxByte();
 8004c0e:	f7ff fd2f 	bl	8004670 <SPI_RxByte>
 8004c12:	7028      	strb	r0, [r5, #0]
 8004c14:	3501      	adds	r5, #1
        for (n = 0; n < 4; n++)
 8004c16:	42a5      	cmp	r5, r4
 8004c18:	d1f9      	bne.n	8004c0e <SD_disk_ioctl+0x136>
 8004c1a:	e7f5      	b.n	8004c08 <SD_disk_ioctl+0x130>
 8004c1c:	200002d1 	.word	0x200002d1
 8004c20:	20000008 	.word	0x20000008

08004c24 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004c24:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004c26:	2510      	movs	r5, #16
void SystemClock_Config(void) {
 8004c28:	b097      	sub	sp, #92	; 0x5c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004c2a:	2230      	movs	r2, #48	; 0x30
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	a80a      	add	r0, sp, #40	; 0x28
 8004c30:	f000 fd2f 	bl	8005692 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004c34:	002a      	movs	r2, r5
 8004c36:	2100      	movs	r1, #0
 8004c38:	a801      	add	r0, sp, #4
 8004c3a:	f000 fd2a 	bl	8005692 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8004c3e:	2214      	movs	r2, #20
 8004c40:	2100      	movs	r1, #0
 8004c42:	a805      	add	r0, sp, #20
 8004c44:	f000 fd25 	bl	8005692 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8004c48:	2312      	movs	r3, #18
 8004c4a:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004c4c:	23a0      	movs	r3, #160	; 0xa0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c4e:	2401      	movs	r4, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c50:	950e      	str	r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004c52:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004c54:	039b      	lsls	r3, r3, #14
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c56:	3d0e      	subs	r5, #14
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004c58:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c5a:	9512      	str	r5, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004c5c:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c5e:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004c60:	940f      	str	r4, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004c62:	f7fc f861 	bl	8000d28 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004c66:	2307      	movs	r3, #7
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c68:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c6a:	2500      	movs	r5, #0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8004c6c:	0021      	movs	r1, r4
 8004c6e:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004c70:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c72:	9503      	str	r5, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c74:	9504      	str	r5, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8004c76:	f7fc fa8b 	bl	8001190 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8004c7a:	a805      	add	r0, sp, #20
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c7c:	9405      	str	r4, [sp, #20]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004c7e:	9507      	str	r5, [sp, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8004c80:	f7fc fb1a 	bl	80012b8 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 8004c84:	b017      	add	sp, #92	; 0x5c
 8004c86:	bd30      	pop	{r4, r5, pc}

08004c88 <send_uart>:
/* USER CODE BEGIN 4 */

/*********************User Defined Functions********************/

/* to send the data to the uart */
void send_uart(char *string) {
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	0004      	movs	r4, r0
	uint8_t len = strlen(string);
 8004c8c:	f7fb fa3c 	bl	8000108 <strlen>
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000); // transmit in blocking mode
 8004c90:	23fa      	movs	r3, #250	; 0xfa
 8004c92:	b2c2      	uxtb	r2, r0
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	0021      	movs	r1, r4
 8004c98:	4801      	ldr	r0, [pc, #4]	; (8004ca0 <send_uart+0x18>)
 8004c9a:	f7fd fc3f 	bl	800251c <HAL_UART_Transmit>
}
 8004c9e:	bd10      	pop	{r4, pc}
 8004ca0:	20000f98 	.word	0x20000f98

08004ca4 <bufclear>:
	return i;
}

void bufclear(void) // clear buffer
{
	for (int i = 0; i < 1024; i++) {
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2280      	movs	r2, #128	; 0x80
		buffer[i] = '\0';
 8004ca8:	0018      	movs	r0, r3
{
 8004caa:	b510      	push	{r4, lr}
		buffer[i] = '\0';
 8004cac:	4c03      	ldr	r4, [pc, #12]	; (8004cbc <bufclear+0x18>)
	for (int i = 0; i < 1024; i++) {
 8004cae:	00d2      	lsls	r2, r2, #3
		buffer[i] = '\0';
 8004cb0:	1919      	adds	r1, r3, r4
	for (int i = 0; i < 1024; i++) {
 8004cb2:	3301      	adds	r3, #1
		buffer[i] = '\0';
 8004cb4:	7008      	strb	r0, [r1, #0]
	for (int i = 0; i < 1024; i++) {
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d1fa      	bne.n	8004cb0 <bufclear+0xc>
	}
}
 8004cba:	bd10      	pop	{r4, pc}
 8004cbc:	20001018 	.word	0x20001018

08004cc0 <mount_sd>:

void mount_sd() {
 8004cc0:	b510      	push	{r4, lr}
	/* Mount SD Card */
	fresult = f_mount(&fs, "", 1);
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4906      	ldr	r1, [pc, #24]	; (8004ce0 <mount_sd+0x20>)
 8004cc6:	4807      	ldr	r0, [pc, #28]	; (8004ce4 <mount_sd+0x24>)
 8004cc8:	f7fe ffdc 	bl	8003c84 <f_mount>
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <mount_sd+0x28>)
 8004cce:	7018      	strb	r0, [r3, #0]
	if (fresult != FR_OK)
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d003      	beq.n	8004cdc <mount_sd+0x1c>
		send_uart("error in mounting SD CARD...\n");
 8004cd4:	4805      	ldr	r0, [pc, #20]	; (8004cec <mount_sd+0x2c>)
	else
		send_uart("SD CARD mounted successfully...\n");
 8004cd6:	f7ff ffd7 	bl	8004c88 <send_uart>
}
 8004cda:	bd10      	pop	{r4, pc}
		send_uart("SD CARD mounted successfully...\n");
 8004cdc:	4804      	ldr	r0, [pc, #16]	; (8004cf0 <mount_sd+0x30>)
 8004cde:	e7fa      	b.n	8004cd6 <mount_sd+0x16>
 8004ce0:	0800656c 	.word	0x0800656c
 8004ce4:	20000b60 	.word	0x20000b60
 8004ce8:	20001474 	.word	0x20001474
 8004cec:	0800656d 	.word	0x0800656d
 8004cf0:	0800658b 	.word	0x0800658b

08004cf4 <create_file>:
	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
	sprintf(buffer, "SD CARD Free Space: \t%d\n", free_space);
	send_uart(buffer);
}

void create_file() {
 8004cf4:	b570      	push	{r4, r5, r6, lr}
	/*************** Create File For Data Storage ********************/

	int fileNumber = 0;

	//check if filename exist
	sprintf(name, "F%d.TXT", fileNumber);
 8004cf6:	4e20      	ldr	r6, [pc, #128]	; (8004d78 <create_file+0x84>)
 8004cf8:	4c20      	ldr	r4, [pc, #128]	; (8004d7c <create_file+0x88>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	0031      	movs	r1, r6
 8004cfe:	0020      	movs	r0, r4
 8004d00:	f000 fcd0 	bl	80056a4 <siprintf>
	int fileNumber = 0;
 8004d04:	2500      	movs	r5, #0
	while (f_stat(name, NULL) == FR_OK) {
 8004d06:	2100      	movs	r1, #0
 8004d08:	0020      	movs	r0, r4
 8004d0a:	f7ff fad1 	bl	80042b0 <f_stat>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d02b      	beq.n	8004d6a <create_file+0x76>
		fileNumber++;
		sprintf(name, "F%d.TXT", fileNumber);
	}

	/* once filename is new create file */
	fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8004d12:	4e1b      	ldr	r6, [pc, #108]	; (8004d80 <create_file+0x8c>)
 8004d14:	2213      	movs	r2, #19
 8004d16:	0021      	movs	r1, r4
 8004d18:	0030      	movs	r0, r6
 8004d1a:	f7fe ffeb 	bl	8003cf4 <f_open>
 8004d1e:	4d19      	ldr	r5, [pc, #100]	; (8004d84 <create_file+0x90>)
 8004d20:	1e02      	subs	r2, r0, #0
 8004d22:	7028      	strb	r0, [r5, #0]

	if (fresult != FR_OK) {
 8004d24:	d003      	beq.n	8004d2e <create_file+0x3a>
		sprintf(str, "f_open err: %d\n", fresult);
 8004d26:	4918      	ldr	r1, [pc, #96]	; (8004d88 <create_file+0x94>)
 8004d28:	4818      	ldr	r0, [pc, #96]	; (8004d8c <create_file+0x98>)
 8004d2a:	f000 fcbb 	bl	80056a4 <siprintf>
	}

	/* Writing text */
	fresult = f_printf(&fil,
 8004d2e:	4918      	ldr	r1, [pc, #96]	; (8004d90 <create_file+0x9c>)
 8004d30:	0030      	movs	r0, r6
 8004d32:	f7ff faef 	bl	8004314 <f_printf>
 8004d36:	b2c3      	uxtb	r3, r0
 8004d38:	702b      	strb	r3, [r5, #0]
			"ADC0 ADC1 ADC2 ADC3 ADC4 ADC5 ADC6 ADC7 ADC8 ADC9\n");

	if (fresult != FR_OK) {
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d004      	beq.n	8004d48 <create_file+0x54>
		sprintf(str, "f_printf err: %d\n", fresult);
 8004d3e:	b2c2      	uxtb	r2, r0
 8004d40:	4914      	ldr	r1, [pc, #80]	; (8004d94 <create_file+0xa0>)
 8004d42:	4812      	ldr	r0, [pc, #72]	; (8004d8c <create_file+0x98>)
 8004d44:	f000 fcae 	bl	80056a4 <siprintf>
	}

	/* Close file */
	fresult = f_close(&fil);
 8004d48:	0030      	movs	r0, r6
 8004d4a:	f7ff fa9b 	bl	8004284 <f_close>
 8004d4e:	1e02      	subs	r2, r0, #0
 8004d50:	7028      	strb	r0, [r5, #0]

	if (fresult != FR_OK) {
 8004d52:	d003      	beq.n	8004d5c <create_file+0x68>
		sprintf(str, "f_close err: %d\n", fresult);
 8004d54:	4910      	ldr	r1, [pc, #64]	; (8004d98 <create_file+0xa4>)
 8004d56:	480d      	ldr	r0, [pc, #52]	; (8004d8c <create_file+0x98>)
 8004d58:	f000 fca4 	bl	80056a4 <siprintf>
	}

	send_uart(name); //ex: File1.txt created and is ready for data to be written
 8004d5c:	0020      	movs	r0, r4
 8004d5e:	f7ff ff93 	bl	8004c88 <send_uart>

	send_uart(" created and header was written \n");
 8004d62:	480e      	ldr	r0, [pc, #56]	; (8004d9c <create_file+0xa8>)
 8004d64:	f7ff ff90 	bl	8004c88 <send_uart>
}
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
		fileNumber++;
 8004d6a:	3501      	adds	r5, #1
		sprintf(name, "F%d.TXT", fileNumber);
 8004d6c:	002a      	movs	r2, r5
 8004d6e:	0031      	movs	r1, r6
 8004d70:	0020      	movs	r0, r4
 8004d72:	f000 fc97 	bl	80056a4 <siprintf>
 8004d76:	e7c6      	b.n	8004d06 <create_file+0x12>
 8004d78:	0800646e 	.word	0x0800646e
 8004d7c:	20001590 	.word	0x20001590
 8004d80:	2000159c 	.word	0x2000159c
 8004d84:	20001474 	.word	0x20001474
 8004d88:	08006476 	.word	0x08006476
 8004d8c:	200014f2 	.word	0x200014f2
 8004d90:	08006486 	.word	0x08006486
 8004d94:	08006542 	.word	0x08006542
 8004d98:	080064b9 	.word	0x080064b9
 8004d9c:	080064ca 	.word	0x080064ca

08004da0 <unmount_sd>:

void unmount_sd() {
 8004da0:	b510      	push	{r4, lr}
	/* Unmount SDCARD */
	fresult = f_mount(NULL, "", 1);
 8004da2:	2201      	movs	r2, #1
 8004da4:	490a      	ldr	r1, [pc, #40]	; (8004dd0 <unmount_sd+0x30>)
 8004da6:	2000      	movs	r0, #0
 8004da8:	f7fe ff6c 	bl	8003c84 <f_mount>
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <unmount_sd+0x34>)
 8004dae:	7018      	strb	r0, [r3, #0]
	if (fresult == FR_OK)
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d102      	bne.n	8004dba <unmount_sd+0x1a>
		send_uart("SD CARD UNMOUNTED successfully...\n");
 8004db4:	4808      	ldr	r0, [pc, #32]	; (8004dd8 <unmount_sd+0x38>)
 8004db6:	f7ff ff67 	bl	8004c88 <send_uart>

	sprintf(str, "line count: %d\n", line_count);
 8004dba:	4c08      	ldr	r4, [pc, #32]	; (8004ddc <unmount_sd+0x3c>)
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <unmount_sd+0x40>)
 8004dbe:	4909      	ldr	r1, [pc, #36]	; (8004de4 <unmount_sd+0x44>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	0020      	movs	r0, r4
 8004dc4:	f000 fc6e 	bl	80056a4 <siprintf>

	send_uart(str);
 8004dc8:	0020      	movs	r0, r4
 8004dca:	f7ff ff5d 	bl	8004c88 <send_uart>
}
 8004dce:	bd10      	pop	{r4, pc}
 8004dd0:	0800656c 	.word	0x0800656c
 8004dd4:	20001474 	.word	0x20001474
 8004dd8:	080065ac 	.word	0x080065ac
 8004ddc:	200014f2 	.word	0x200014f2
 8004de0:	200002e0 	.word	0x200002e0
 8004de4:	080065cf 	.word	0x080065cf

08004de8 <blink>:

/*Wrapper to blink LEDs*/
void blink(int num_blinks, GPIO_TypeDef* port, uint16_t pin) {
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	000d      	movs	r5, r1
 8004dec:	0016      	movs	r6, r2
	//blink led <num_blink> times to show that data collection is initialized
	for (int i = 0; i < num_blinks * 2; i++) {
 8004dee:	2700      	movs	r7, #0
 8004df0:	0044      	lsls	r4, r0, #1
 8004df2:	42a7      	cmp	r7, r4
 8004df4:	db00      	blt.n	8004df8 <blink+0x10>
		HAL_GPIO_TogglePin(port, pin);
		HAL_Delay(100); //1000ms delay
	}
}
 8004df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_TogglePin(port, pin);
 8004df8:	0031      	movs	r1, r6
 8004dfa:	0028      	movs	r0, r5
 8004dfc:	f7fb ff82 	bl	8000d04 <HAL_GPIO_TogglePin>
		HAL_Delay(100); //1000ms delay
 8004e00:	2064      	movs	r0, #100	; 0x64
 8004e02:	f7fb fa6f 	bl	80002e4 <HAL_Delay>
	for (int i = 0; i < num_blinks * 2; i++) {
 8004e06:	3701      	adds	r7, #1
 8004e08:	e7f3      	b.n	8004df2 <blink+0xa>
	...

08004e0c <main>:
int main(void) {
 8004e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0e:	b0a5      	sub	sp, #148	; 0x94
	HAL_Init();
 8004e10:	f7fb fa46 	bl	80002a0 <HAL_Init>
	SystemClock_Config();
 8004e14:	f7ff ff06 	bl	8004c24 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004e18:	2214      	movs	r2, #20
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	a81c      	add	r0, sp, #112	; 0x70
 8004e1e:	f000 fc38 	bl	8005692 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8004e22:	2180      	movs	r1, #128	; 0x80
 8004e24:	4de3      	ldr	r5, [pc, #908]	; (80051b4 <main+0x3a8>)
 8004e26:	0309      	lsls	r1, r1, #12
 8004e28:	696a      	ldr	r2, [r5, #20]
	HAL_GPIO_WritePin(GPIOC, SEL_Pin | LD4_BLUE_LED_Pin | LD3_GREEN_LED_Pin,
 8004e2a:	26c2      	movs	r6, #194	; 0xc2
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	616a      	str	r2, [r5, #20]
 8004e30:	696b      	ldr	r3, [r5, #20]
	HAL_GPIO_WritePin(GPIOC, SEL_Pin | LD4_BLUE_LED_Pin | LD3_GREEN_LED_Pin,
 8004e32:	00b6      	lsls	r6, r6, #2
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8004e34:	400b      	ands	r3, r1
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8004e36:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8004e38:	930c      	str	r3, [sp, #48]	; 0x30
 8004e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8004e3c:	696a      	ldr	r2, [r5, #20]
 8004e3e:	0289      	lsls	r1, r1, #10
 8004e40:	430a      	orrs	r2, r1
 8004e42:	616a      	str	r2, [r5, #20]
 8004e44:	696b      	ldr	r3, [r5, #20]
	HAL_GPIO_WritePin(GPIOC, SEL_Pin | LD4_BLUE_LED_Pin | LD3_GREEN_LED_Pin,
 8004e46:	48dc      	ldr	r0, [pc, #880]	; (80051b8 <main+0x3ac>)
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8004e48:	400b      	ands	r3, r1
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8004e4a:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8004e4c:	930d      	str	r3, [sp, #52]	; 0x34
 8004e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8004e50:	696a      	ldr	r2, [r5, #20]
 8004e52:	02c9      	lsls	r1, r1, #11
 8004e54:	430a      	orrs	r2, r1
 8004e56:	616a      	str	r2, [r5, #20]
 8004e58:	696b      	ldr	r3, [r5, #20]
	HAL_GPIO_WritePin(GPIOC, SEL_Pin | LD4_BLUE_LED_Pin | LD3_GREEN_LED_Pin,
 8004e5a:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8004e5c:	400b      	ands	r3, r1
 8004e5e:	930e      	str	r3, [sp, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOC, SEL_Pin | LD4_BLUE_LED_Pin | LD3_GREEN_LED_Pin,
 8004e60:	0031      	movs	r1, r6
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8004e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOC, SEL_Pin | LD4_BLUE_LED_Pin | LD3_GREEN_LED_Pin,
 8004e64:	f7fb ff48 	bl	8000cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2140      	movs	r1, #64	; 0x40
 8004e6c:	48d3      	ldr	r0, [pc, #844]	; (80051bc <main+0x3b0>)
 8004e6e:	f7fb ff43 	bl	8000cf8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = BUTTON_Pin;
 8004e72:	2301      	movs	r3, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e74:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = BUTTON_Pin;
 8004e76:	931c      	str	r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004e78:	4bd1      	ldr	r3, [pc, #836]	; (80051c0 <main+0x3b4>)
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004e7a:	a91c      	add	r1, sp, #112	; 0x70
 8004e7c:	48ce      	ldr	r0, [pc, #824]	; (80051b8 <main+0x3ac>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004e7e:	931d      	str	r3, [sp, #116]	; 0x74
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e80:	941e      	str	r4, [sp, #120]	; 0x78
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004e82:	f7fb fe89 	bl	8000b98 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e86:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e88:	a91c      	add	r1, sp, #112	; 0x70
 8004e8a:	48cb      	ldr	r0, [pc, #812]	; (80051b8 <main+0x3ac>)
	GPIO_InitStruct.Pin = SEL_Pin | LD4_BLUE_LED_Pin | LD3_GREEN_LED_Pin;
 8004e8c:	961c      	str	r6, [sp, #112]	; 0x70
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e8e:	931d      	str	r3, [sp, #116]	; 0x74
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e90:	941e      	str	r4, [sp, #120]	; 0x78
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e92:	941f      	str	r4, [sp, #124]	; 0x7c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e94:	f7fb fe80 	bl	8000b98 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e98:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e9a:	a91c      	add	r1, sp, #112	; 0x70
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e9c:	931c      	str	r3, [sp, #112]	; 0x70
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e9e:	48c7      	ldr	r0, [pc, #796]	; (80051bc <main+0x3b0>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ea0:	3b3f      	subs	r3, #63	; 0x3f
 8004ea2:	931d      	str	r3, [sp, #116]	; 0x74
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea4:	941e      	str	r4, [sp, #120]	; 0x78
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea6:	941f      	str	r4, [sp, #124]	; 0x7c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea8:	f7fb fe76 	bl	8000b98 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004eac:	0022      	movs	r2, r4
 8004eae:	0021      	movs	r1, r4
 8004eb0:	2005      	movs	r0, #5
 8004eb2:	f7fb fd23 	bl	80008fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004eb6:	2005      	movs	r0, #5
 8004eb8:	f7fb fd50 	bl	800095c <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE()
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004ec0:	0021      	movs	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	616b      	str	r3, [r5, #20]
 8004ec6:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004ec8:	2009      	movs	r0, #9
	__HAL_RCC_DMA1_CLK_ENABLE()
 8004eca:	4013      	ands	r3, r2
 8004ecc:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004ece:	0022      	movs	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8004ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004ed2:	f7fb fd13 	bl	80008fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ed6:	2009      	movs	r0, #9
 8004ed8:	f7fb fd40 	bl	800095c <HAL_NVIC_EnableIRQ>
	hspi1.Instance = SPI1;
 8004edc:	48b9      	ldr	r0, [pc, #740]	; (80051c4 <main+0x3b8>)
 8004ede:	4bba      	ldr	r3, [pc, #744]	; (80051c8 <main+0x3bc>)
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ee0:	2608      	movs	r6, #8
	hspi1.Instance = SPI1;
 8004ee2:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ee4:	2382      	movs	r3, #130	; 0x82
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	6043      	str	r3, [r0, #4]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004eea:	23e0      	movs	r3, #224	; 0xe0
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	60c3      	str	r3, [r0, #12]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	6183      	str	r3, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004ef6:	3bf1      	subs	r3, #241	; 0xf1
 8004ef8:	3bff      	subs	r3, #255	; 0xff
 8004efa:	61c3      	str	r3, [r0, #28]
	hspi1.Init.CRCPolynomial = 7;
 8004efc:	3b09      	subs	r3, #9
 8004efe:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004f00:	6346      	str	r6, [r0, #52]	; 0x34
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f02:	6084      	str	r4, [r0, #8]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f04:	6104      	str	r4, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f06:	6144      	str	r4, [r0, #20]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f08:	6204      	str	r4, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f0a:	6244      	str	r4, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f0c:	6284      	str	r4, [r0, #40]	; 0x28
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004f0e:	6304      	str	r4, [r0, #48]	; 0x30
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8004f10:	f7fc fae0 	bl	80014d4 <HAL_SPI_Init>
	huart1.Instance = USART1;
 8004f14:	4fad      	ldr	r7, [pc, #692]	; (80051cc <main+0x3c0>)
 8004f16:	4bae      	ldr	r3, [pc, #696]	; (80051d0 <main+0x3c4>)
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004f18:	0038      	movs	r0, r7
	huart1.Instance = USART1;
 8004f1a:	603b      	str	r3, [r7, #0]
	huart1.Init.BaudRate = 115200;
 8004f1c:	23e1      	movs	r3, #225	; 0xe1
 8004f1e:	025b      	lsls	r3, r3, #9
 8004f20:	607b      	str	r3, [r7, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004f22:	230c      	movs	r3, #12
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f24:	60bc      	str	r4, [r7, #8]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004f26:	617b      	str	r3, [r7, #20]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004f28:	60fc      	str	r4, [r7, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004f2a:	613c      	str	r4, [r7, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f2c:	61bc      	str	r4, [r7, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f2e:	61fc      	str	r4, [r7, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f30:	623c      	str	r4, [r7, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f32:	627c      	str	r4, [r7, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004f34:	f7fd fb8c 	bl	8002650 <HAL_UART_Init>
	MX_FATFS_Init();
 8004f38:	f7ff fb62 	bl	8004600 <MX_FATFS_Init>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8004f3c:	0021      	movs	r1, r4
 8004f3e:	220c      	movs	r2, #12
 8004f40:	a81c      	add	r0, sp, #112	; 0x70
 8004f42:	f000 fba6 	bl	8005692 <memset>
	hadc.Instance = ADC1;
 8004f46:	4da3      	ldr	r5, [pc, #652]	; (80051d4 <main+0x3c8>)
 8004f48:	4ba3      	ldr	r3, [pc, #652]	; (80051d8 <main+0x3cc>)
	hadc.Init.DMAContinuousRequests = ENABLE;
 8004f4a:	2201      	movs	r2, #1
	hadc.Instance = ADC1;
 8004f4c:	602b      	str	r3, [r5, #0]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	612b      	str	r3, [r5, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f52:	3303      	adds	r3, #3
 8004f54:	616b      	str	r3, [r5, #20]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004f56:	2380      	movs	r3, #128	; 0x80
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	622b      	str	r3, [r5, #32]
	hadc.Init.DMAContinuousRequests = ENABLE;
 8004f5c:	1d6b      	adds	r3, r5, #5
 8004f5e:	77da      	strb	r2, [r3, #31]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004f60:	2301      	movs	r3, #1
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8004f62:	0028      	movs	r0, r5
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004f64:	62ab      	str	r3, [r5, #40]	; 0x28
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004f66:	606c      	str	r4, [r5, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004f68:	60ac      	str	r4, [r5, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f6a:	60ec      	str	r4, [r5, #12]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8004f6c:	762c      	strb	r4, [r5, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004f6e:	766c      	strb	r4, [r5, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8004f70:	76ac      	strb	r4, [r5, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8004f72:	76ec      	strb	r4, [r5, #27]
	hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8004f74:	61ec      	str	r4, [r5, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8004f76:	f7fb fa77 	bl	8000468 <HAL_ADC_Init>
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	015b      	lsls	r3, r3, #5
 8004f7e:	931d      	str	r3, [sp, #116]	; 0x74
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004f80:	2307      	movs	r3, #7
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004f82:	a91c      	add	r1, sp, #112	; 0x70
 8004f84:	0028      	movs	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004f86:	931e      	str	r3, [sp, #120]	; 0x78
	sConfig.Channel = ADC_CHANNEL_0;
 8004f88:	941c      	str	r4, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004f8a:	f7fb fbe3 	bl	8000754 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_1;
 8004f8e:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004f90:	a91c      	add	r1, sp, #112	; 0x70
 8004f92:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_1;
 8004f94:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004f96:	f7fb fbdd 	bl	8000754 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_2;
 8004f9a:	2302      	movs	r3, #2
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004f9c:	a91c      	add	r1, sp, #112	; 0x70
 8004f9e:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_2;
 8004fa0:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fa2:	f7fb fbd7 	bl	8000754 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_3;
 8004fa6:	2303      	movs	r3, #3
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fa8:	a91c      	add	r1, sp, #112	; 0x70
 8004faa:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_3;
 8004fac:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fae:	f7fb fbd1 	bl	8000754 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_4;
 8004fb2:	2304      	movs	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fb4:	a91c      	add	r1, sp, #112	; 0x70
 8004fb6:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_4;
 8004fb8:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fba:	f7fb fbcb 	bl	8000754 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_5;
 8004fbe:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fc0:	a91c      	add	r1, sp, #112	; 0x70
 8004fc2:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_5;
 8004fc4:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fc6:	f7fb fbc5 	bl	8000754 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_6;
 8004fca:	2306      	movs	r3, #6
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fcc:	a91c      	add	r1, sp, #112	; 0x70
 8004fce:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_6;
 8004fd0:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fd2:	f7fb fbbf 	bl	8000754 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_7;
 8004fd6:	2307      	movs	r3, #7
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fd8:	a91c      	add	r1, sp, #112	; 0x70
 8004fda:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_7;
 8004fdc:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fde:	f7fb fbb9 	bl	8000754 <HAL_ADC_ConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fe2:	a91c      	add	r1, sp, #112	; 0x70
 8004fe4:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_8;
 8004fe6:	961c      	str	r6, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fe8:	f7fb fbb4 	bl	8000754 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_9;
 8004fec:	2309      	movs	r3, #9
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004fee:	a91c      	add	r1, sp, #112	; 0x70
 8004ff0:	0028      	movs	r0, r5
	sConfig.Channel = ADC_CHANNEL_9;
 8004ff2:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8004ff4:	f7fb fbae 	bl	8000754 <HAL_ADC_ConfigChannel>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004ff8:	2210      	movs	r2, #16
 8004ffa:	0021      	movs	r1, r4
 8004ffc:	a811      	add	r0, sp, #68	; 0x44
 8004ffe:	f000 fb48 	bl	8005692 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005002:	0032      	movs	r2, r6
 8005004:	0021      	movs	r1, r4
 8005006:	a80f      	add	r0, sp, #60	; 0x3c
 8005008:	f000 fb43 	bl	8005692 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800500c:	221c      	movs	r2, #28
 800500e:	0021      	movs	r1, r4
 8005010:	a815      	add	r0, sp, #84	; 0x54
 8005012:	f000 fb3e 	bl	8005692 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8005016:	2220      	movs	r2, #32
 8005018:	0021      	movs	r1, r4
 800501a:	a81c      	add	r0, sp, #112	; 0x70
 800501c:	f000 fb39 	bl	8005692 <memset>
	htim1.Instance = TIM1;
 8005020:	4e6e      	ldr	r6, [pc, #440]	; (80051dc <main+0x3d0>)
 8005022:	4b6f      	ldr	r3, [pc, #444]	; (80051e0 <main+0x3d4>)
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8005024:	0030      	movs	r0, r6
	htim1.Instance = TIM1;
 8005026:	6033      	str	r3, [r6, #0]
	htim1.Init.Prescaler = 7200 - 1;
 8005028:	4b6e      	ldr	r3, [pc, #440]	; (80051e4 <main+0x3d8>)
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800502a:	60b4      	str	r4, [r6, #8]
	htim1.Init.Prescaler = 7200 - 1;
 800502c:	6073      	str	r3, [r6, #4]
	htim1.Init.Period = 1000 - 1;
 800502e:	4b6e      	ldr	r3, [pc, #440]	; (80051e8 <main+0x3dc>)
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005030:	6134      	str	r4, [r6, #16]
	htim1.Init.Period = 1000 - 1;
 8005032:	60f3      	str	r3, [r6, #12]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005034:	2380      	movs	r3, #128	; 0x80
	htim1.Init.RepetitionCounter = 0;
 8005036:	6174      	str	r4, [r6, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005038:	61b3      	str	r3, [r6, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800503a:	f7fc fde9 	bl	8001c10 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800503e:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8005040:	a911      	add	r1, sp, #68	; 0x44
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005042:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8005044:	0030      	movs	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005046:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8005048:	f7fc fe92 	bl	8001d70 <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 800504c:	0030      	movs	r0, r6
 800504e:	f7fc fdfa 	bl	8001c46 <HAL_TIM_OC_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005052:	2320      	movs	r3, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8005054:	a90f      	add	r1, sp, #60	; 0x3c
 8005056:	0030      	movs	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005058:	930f      	str	r3, [sp, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800505a:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800505c:	f7fc ff1e 	bl	8001e9c <HAL_TIMEx_MasterConfigSynchronization>
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8005060:	220c      	movs	r2, #12
 8005062:	a915      	add	r1, sp, #84	; 0x54
 8005064:	0030      	movs	r0, r6
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005066:	9415      	str	r4, [sp, #84]	; 0x54
	sConfigOC.Pulse = 0;
 8005068:	9416      	str	r4, [sp, #88]	; 0x58
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800506a:	9417      	str	r4, [sp, #92]	; 0x5c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800506c:	9419      	str	r4, [sp, #100]	; 0x64
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800506e:	941a      	str	r4, [sp, #104]	; 0x68
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005070:	941b      	str	r4, [sp, #108]	; 0x6c
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8005072:	f7fc fe43 	bl	8001cfc <HAL_TIM_OC_ConfigChannel>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005076:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8005078:	a91c      	add	r1, sp, #112	; 0x70
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800507a:	019b      	lsls	r3, r3, #6
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800507c:	0030      	movs	r0, r6
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800507e:	9321      	str	r3, [sp, #132]	; 0x84
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005080:	941c      	str	r4, [sp, #112]	; 0x70
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005082:	941d      	str	r4, [sp, #116]	; 0x74
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005084:	941e      	str	r4, [sp, #120]	; 0x78
	sBreakDeadTimeConfig.DeadTime = 0;
 8005086:	941f      	str	r4, [sp, #124]	; 0x7c
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005088:	9420      	str	r4, [sp, #128]	; 0x80
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800508a:	9423      	str	r4, [sp, #140]	; 0x8c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800508c:	f7fc ff3a 	bl	8001f04 <HAL_TIMEx_ConfigBreakDeadTime>
	HAL_UART_Receive_IT(&huart1, (uint8_t *) &RxData, UART_BUF_SIZE);
 8005090:	2201      	movs	r2, #1
 8005092:	4956      	ldr	r1, [pc, #344]	; (80051ec <main+0x3e0>)
 8005094:	0038      	movs	r0, r7
 8005096:	f7fc ff79 	bl	8001f8c <HAL_UART_Receive_IT>
	send_uart("Begin 10 Chan ADC to Micro SD\n");
 800509a:	4855      	ldr	r0, [pc, #340]	; (80051f0 <main+0x3e4>)
 800509c:	f7ff fdf4 	bl	8004c88 <send_uart>
	HAL_ADCEx_Calibration_Start(&hadc);
 80050a0:	0028      	movs	r0, r5
 80050a2:	f7fb fbd7 	bl	8000854 <HAL_ADCEx_Calibration_Start>
		switch (cur_state) {
 80050a6:	4c53      	ldr	r4, [pc, #332]	; (80051f4 <main+0x3e8>)
 80050a8:	7823      	ldrb	r3, [r4, #0]
 80050aa:	2b07      	cmp	r3, #7
 80050ac:	d8fd      	bhi.n	80050aa <main+0x29e>
 80050ae:	0018      	movs	r0, r3
 80050b0:	f7fb f832 	bl	8000118 <__gnu_thumb1_case_sqi>
 80050b4:	1ffb0b04 	.word	0x1ffb0b04
 80050b8:	630f2522 	.word	0x630f2522
			blink(1, LD4_BLUE_LED_GPIO_Port, LD4_BLUE_LED_Pin);
 80050bc:	2280      	movs	r2, #128	; 0x80
 80050be:	0052      	lsls	r2, r2, #1
			blink(1, LD3_GREEN_LED_GPIO_Port, LD3_GREEN_LED_Pin);
 80050c0:	493d      	ldr	r1, [pc, #244]	; (80051b8 <main+0x3ac>)
 80050c2:	2001      	movs	r0, #1
 80050c4:	f7ff fe90 	bl	8004de8 <blink>
			break;
 80050c8:	e7ed      	b.n	80050a6 <main+0x29a>
			send_uart("s\nd\nv\nf\n");
 80050ca:	484b      	ldr	r0, [pc, #300]	; (80051f8 <main+0x3ec>)
 80050cc:	f7ff fddc 	bl	8004c88 <send_uart>
			break;
 80050d0:	e7e9      	b.n	80050a6 <main+0x29a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050d2:	b672      	cpsid	i
			mount_sd();
 80050d4:	f7ff fdf4 	bl	8004cc0 <mount_sd>
			create_file();
 80050d8:	f7ff fe0c 	bl	8004cf4 <create_file>
			fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_WRITE); // Open the file with write access
 80050dc:	2212      	movs	r2, #18
 80050de:	4947      	ldr	r1, [pc, #284]	; (80051fc <main+0x3f0>)
 80050e0:	4847      	ldr	r0, [pc, #284]	; (8005200 <main+0x3f4>)
 80050e2:	f7fe fe07 	bl	8003cf4 <f_open>
 80050e6:	4b47      	ldr	r3, [pc, #284]	; (8005204 <main+0x3f8>)
 80050e8:	7018      	strb	r0, [r3, #0]
			cur_state = LOADED;
 80050ea:	2303      	movs	r3, #3
 80050ec:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80050ee:	b662      	cpsie	i
 80050f0:	e7d9      	b.n	80050a6 <main+0x29a>
			blink(1, LD3_GREEN_LED_GPIO_Port, LD3_GREEN_LED_Pin);
 80050f2:	2280      	movs	r2, #128	; 0x80
 80050f4:	0092      	lsls	r2, r2, #2
 80050f6:	e7e3      	b.n	80050c0 <main+0x2b4>
			cur_state = LOADED;
 80050f8:	2303      	movs	r3, #3
			cur_state = IDLE;
 80050fa:	7023      	strb	r3, [r4, #0]
			break;
 80050fc:	e7d3      	b.n	80050a6 <main+0x29a>
			if (adc_flag == 0) //restart adc collection
 80050fe:	4c42      	ldr	r4, [pc, #264]	; (8005208 <main+0x3fc>)
 8005100:	6825      	ldr	r5, [r4, #0]
 8005102:	2d00      	cmp	r5, #0
 8005104:	d10c      	bne.n	8005120 <main+0x314>
				HAL_ADC_Start_DMA(&hadc, (uint32_t*) &adc_buf,
 8005106:	220a      	movs	r2, #10
 8005108:	4940      	ldr	r1, [pc, #256]	; (800520c <main+0x400>)
 800510a:	4832      	ldr	r0, [pc, #200]	; (80051d4 <main+0x3c8>)
 800510c:	f7fb fa54 	bl	80005b8 <HAL_ADC_Start_DMA>
				HAL_TIM_Base_Start_IT(&htim1);
 8005110:	4832      	ldr	r0, [pc, #200]	; (80051dc <main+0x3d0>)
 8005112:	f7fc fd05 	bl	8001b20 <HAL_TIM_Base_Start_IT>
				line_count = 0;
 8005116:	4b3e      	ldr	r3, [pc, #248]	; (8005210 <main+0x404>)
 8005118:	601d      	str	r5, [r3, #0]
				adc_flag = 1;
 800511a:	2301      	movs	r3, #1
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	e7c2      	b.n	80050a6 <main+0x29a>
						"%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d\n", adc[0],
 8005120:	493c      	ldr	r1, [pc, #240]	; (8005214 <main+0x408>)
 8005122:	880a      	ldrh	r2, [r1, #0]
						adc[1], adc[2], adc[3], adc[4], adc[5], adc[6], adc[7],
 8005124:	884b      	ldrh	r3, [r1, #2]
						"%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d,%4d\n", adc[0],
 8005126:	b292      	uxth	r2, r2
						adc[1], adc[2], adc[3], adc[4], adc[5], adc[6], adc[7],
 8005128:	b29b      	uxth	r3, r3
 800512a:	9308      	str	r3, [sp, #32]
 800512c:	8888      	ldrh	r0, [r1, #4]
 800512e:	9009      	str	r0, [sp, #36]	; 0x24
 8005130:	88c8      	ldrh	r0, [r1, #6]
 8005132:	890c      	ldrh	r4, [r1, #8]
 8005134:	894d      	ldrh	r5, [r1, #10]
 8005136:	898e      	ldrh	r6, [r1, #12]
 8005138:	89cf      	ldrh	r7, [r1, #14]
						adc[8], adc[9]);
 800513a:	8a0b      	ldrh	r3, [r1, #16]
 800513c:	8a49      	ldrh	r1, [r1, #18]
				fresult = f_printf(&fil,
 800513e:	9306      	str	r3, [sp, #24]
 8005140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005142:	9107      	str	r1, [sp, #28]
 8005144:	9001      	str	r0, [sp, #4]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	9705      	str	r7, [sp, #20]
 800514a:	9b08      	ldr	r3, [sp, #32]
 800514c:	9604      	str	r6, [sp, #16]
 800514e:	9503      	str	r5, [sp, #12]
 8005150:	9402      	str	r4, [sp, #8]
 8005152:	4931      	ldr	r1, [pc, #196]	; (8005218 <main+0x40c>)
 8005154:	482a      	ldr	r0, [pc, #168]	; (8005200 <main+0x3f4>)
 8005156:	f7ff f8dd 	bl	8004314 <f_printf>
 800515a:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <main+0x3f8>)
 800515c:	b2c3      	uxtb	r3, r0
 800515e:	7013      	strb	r3, [r2, #0]
				if (fresult != FR_OK) {
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <main+0x364>
					sprintf(str, "main f_printf err: %d\n", fresult);
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	492d      	ldr	r1, [pc, #180]	; (800521c <main+0x410>)
 8005168:	4002      	ands	r2, r0
 800516a:	482d      	ldr	r0, [pc, #180]	; (8005220 <main+0x414>)
 800516c:	f000 fa9a 	bl	80056a4 <siprintf>
				line_count++;
 8005170:	4a27      	ldr	r2, [pc, #156]	; (8005210 <main+0x404>)
 8005172:	6813      	ldr	r3, [r2, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	e795      	b.n	80050a6 <main+0x29a>
			HAL_ADC_Stop_DMA(&hadc);
 800517a:	4816      	ldr	r0, [pc, #88]	; (80051d4 <main+0x3c8>)
 800517c:	f7fb fa66 	bl	800064c <HAL_ADC_Stop_DMA>
			HAL_TIM_Base_Stop_IT(&htim1);
 8005180:	4816      	ldr	r0, [pc, #88]	; (80051dc <main+0x3d0>)
 8005182:	f7fc fcdd 	bl	8001b40 <HAL_TIM_Base_Stop_IT>
			adc_flag = 0;
 8005186:	2200      	movs	r2, #0
 8005188:	4b1f      	ldr	r3, [pc, #124]	; (8005208 <main+0x3fc>)
			fresult = f_close(&fil);
 800518a:	481d      	ldr	r0, [pc, #116]	; (8005200 <main+0x3f4>)
			adc_flag = 0;
 800518c:	601a      	str	r2, [r3, #0]
			fresult = f_close(&fil);
 800518e:	f7ff f879 	bl	8004284 <f_close>
 8005192:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <main+0x3f8>)
 8005194:	1e02      	subs	r2, r0, #0
 8005196:	7018      	strb	r0, [r3, #0]
			if (fresult != FR_OK) {
 8005198:	d003      	beq.n	80051a2 <main+0x396>
				sprintf(str, "main f_printf err: %d\n", fresult);
 800519a:	4920      	ldr	r1, [pc, #128]	; (800521c <main+0x410>)
 800519c:	4820      	ldr	r0, [pc, #128]	; (8005220 <main+0x414>)
 800519e:	f000 fa81 	bl	80056a4 <siprintf>
			send_uart("Data Collection Halted\n\n");
 80051a2:	4820      	ldr	r0, [pc, #128]	; (8005224 <main+0x418>)
 80051a4:	f7ff fd70 	bl	8004c88 <send_uart>
			bufclear();
 80051a8:	f7ff fd7c 	bl	8004ca4 <bufclear>
			unmount_sd();
 80051ac:	f7ff fdf8 	bl	8004da0 <unmount_sd>
			cur_state = IDLE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e7a2      	b.n	80050fa <main+0x2ee>
 80051b4:	40021000 	.word	0x40021000
 80051b8:	48000800 	.word	0x48000800
 80051bc:	48000400 	.word	0x48000400
 80051c0:	10110000 	.word	0x10110000
 80051c4:	20001478 	.word	0x20001478
 80051c8:	40013000 	.word	0x40013000
 80051cc:	20000f98 	.word	0x20000f98
 80051d0:	40013800 	.word	0x40013800
 80051d4:	20001550 	.word	0x20001550
 80051d8:	40012400 	.word	0x40012400
 80051dc:	2000142c 	.word	0x2000142c
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	00001c1f 	.word	0x00001c1f
 80051e8:	000003e7 	.word	0x000003e7
 80051ec:	200014dc 	.word	0x200014dc
 80051f0:	080064ec 	.word	0x080064ec
 80051f4:	200002dc 	.word	0x200002dc
 80051f8:	0800650b 	.word	0x0800650b
 80051fc:	20001590 	.word	0x20001590
 8005200:	2000159c 	.word	0x2000159c
 8005204:	20001474 	.word	0x20001474
 8005208:	200002d4 	.word	0x200002d4
 800520c:	200014de 	.word	0x200014de
 8005210:	200002e0 	.word	0x200002e0
 8005214:	20001418 	.word	0x20001418
 8005218:	08006514 	.word	0x08006514
 800521c:	0800653d 	.word	0x0800653d
 8005220:	200014f2 	.word	0x200014f2
 8005224:	08006554 	.word	0x08006554

08005228 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	/* Toggle LED1 */
	bp++;
 8005228:	4a02      	ldr	r2, [pc, #8]	; (8005234 <HAL_GPIO_EXTI_Callback+0xc>)
 800522a:	6813      	ldr	r3, [r2, #0]
 800522c:	3301      	adds	r3, #1
 800522e:	6013      	str	r3, [r2, #0]
}
 8005230:	4770      	bx	lr
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	200002d8 	.word	0x200002d8

08005238 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
	SEL_GPIO_Port->ODR ^= SEL_Pin; //toggle SEL pin
 8005238:	2308      	movs	r3, #8
 800523a:	4a08      	ldr	r2, [pc, #32]	; (800525c <HAL_ADC_ConvCpltCallback+0x24>)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800523c:	b510      	push	{r4, lr}
	SEL_GPIO_Port->ODR ^= SEL_Pin; //toggle SEL pin
 800523e:	6951      	ldr	r1, [r2, #20]

	for (int i = 0; i < ADC_NUM_CHANNELS; i++) {
		adc[i] = adc_buf[i];  // store the values in adc[]
 8005240:	4c07      	ldr	r4, [pc, #28]	; (8005260 <HAL_ADC_ConvCpltCallback+0x28>)
	SEL_GPIO_Port->ODR ^= SEL_Pin; //toggle SEL pin
 8005242:	404b      	eors	r3, r1
 8005244:	6153      	str	r3, [r2, #20]
	for (int i = 0; i < ADC_NUM_CHANNELS; i++) {
 8005246:	2300      	movs	r3, #0
		adc[i] = adc_buf[i];  // store the values in adc[]
 8005248:	4806      	ldr	r0, [pc, #24]	; (8005264 <HAL_ADC_ConvCpltCallback+0x2c>)
 800524a:	0059      	lsls	r1, r3, #1
 800524c:	5b0a      	ldrh	r2, [r1, r4]
	for (int i = 0; i < ADC_NUM_CHANNELS; i++) {
 800524e:	3301      	adds	r3, #1
		adc[i] = adc_buf[i];  // store the values in adc[]
 8005250:	b292      	uxth	r2, r2
 8005252:	520a      	strh	r2, [r1, r0]
	for (int i = 0; i < ADC_NUM_CHANNELS; i++) {
 8005254:	2b0a      	cmp	r3, #10
 8005256:	d1f8      	bne.n	800524a <HAL_ADC_ConvCpltCallback+0x12>
	}
}
 8005258:	bd10      	pop	{r4, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	48000800 	.word	0x48000800
 8005260:	200014de 	.word	0x200014de
 8005264:	20001418 	.word	0x20001418

08005268 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *handle) {
	//echoback command for debugging
	HAL_UART_Transmit(&huart1, (uint8_t *) &RxData, UART_BUF_SIZE, 1000); // transmit in blocking mode
 8005268:	23fa      	movs	r3, #250	; 0xfa
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *handle) {
 800526a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_UART_Transmit(&huart1, (uint8_t *) &RxData, UART_BUF_SIZE, 1000); // transmit in blocking mode
 800526c:	4c1d      	ldr	r4, [pc, #116]	; (80052e4 <HAL_UART_RxCpltCallback+0x7c>)
 800526e:	4d1e      	ldr	r5, [pc, #120]	; (80052e8 <HAL_UART_RxCpltCallback+0x80>)
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	2201      	movs	r2, #1
 8005274:	0021      	movs	r1, r4
 8005276:	0028      	movs	r0, r5
 8005278:	f7fd f950 	bl	800251c <HAL_UART_Transmit>
	send_uart("\n");
 800527c:	481b      	ldr	r0, [pc, #108]	; (80052ec <HAL_UART_RxCpltCallback+0x84>)
 800527e:	f7ff fd03 	bl	8004c88 <send_uart>
	HAL_UART_Receive_IT(&huart1, (uint8_t *) &RxData, UART_BUF_SIZE); //restart listening for interrupt
 8005282:	2201      	movs	r2, #1
 8005284:	0021      	movs	r1, r4
 8005286:	0028      	movs	r0, r5
 8005288:	f7fc fe80 	bl	8001f8c <HAL_UART_Receive_IT>

	int valid_cmd = 0;

	switch (cur_state) {
 800528c:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <HAL_UART_RxCpltCallback+0x88>)
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	2a03      	cmp	r2, #3
 8005292:	d00e      	beq.n	80052b2 <HAL_UART_RxCpltCallback+0x4a>
 8005294:	2a05      	cmp	r2, #5
 8005296:	d015      	beq.n	80052c4 <HAL_UART_RxCpltCallback+0x5c>
 8005298:	2a00      	cmp	r2, #0
 800529a:	d118      	bne.n	80052ce <HAL_UART_RxCpltCallback+0x66>
	case IDLE:
		if (RxData[0] == CMD_CREATE_DEFAULT) {
 800529c:	7822      	ldrb	r2, [r4, #0]
 800529e:	2a64      	cmp	r2, #100	; 0x64
 80052a0:	d102      	bne.n	80052a8 <HAL_UART_RxCpltCallback+0x40>
			valid_cmd = 1;
			cur_state = CREATING_FILE;
 80052a2:	3a5e      	subs	r2, #94	; 0x5e
		}
		break;
	case RUNNING:
		if (RxData[0] == CMD_HALT) {
			valid_cmd = 1;
			cur_state = CLOSING_FILE;
 80052a4:	701a      	strb	r2, [r3, #0]
	{
		char c_buff = ACK_INVALID;
		HAL_UART_Transmit(&huart1, &c_buff, 1, 1000); // transmit in blocking mode

	}
	}
 80052a6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		} else if (RxData[1] == CMD_HELP) {
 80052a8:	7862      	ldrb	r2, [r4, #1]
 80052aa:	2a68      	cmp	r2, #104	; 0x68
 80052ac:	d10f      	bne.n	80052ce <HAL_UART_RxCpltCallback+0x66>
			cur_state = HELPING;
 80052ae:	3a67      	subs	r2, #103	; 0x67
 80052b0:	e7f8      	b.n	80052a4 <HAL_UART_RxCpltCallback+0x3c>
		if (RxData[0] == CMD_START) {
 80052b2:	7822      	ldrb	r2, [r4, #0]
 80052b4:	2a73      	cmp	r2, #115	; 0x73
 80052b6:	d101      	bne.n	80052bc <HAL_UART_RxCpltCallback+0x54>
			cur_state = RUNNING;
 80052b8:	3a6e      	subs	r2, #110	; 0x6e
 80052ba:	e7f3      	b.n	80052a4 <HAL_UART_RxCpltCallback+0x3c>
		} else if (RxData[0] == CMD_VIEW) {
 80052bc:	2a76      	cmp	r2, #118	; 0x76
 80052be:	d106      	bne.n	80052ce <HAL_UART_RxCpltCallback+0x66>
			cur_state = VIEWING;
 80052c0:	3a72      	subs	r2, #114	; 0x72
 80052c2:	e7ef      	b.n	80052a4 <HAL_UART_RxCpltCallback+0x3c>
		if (RxData[0] == CMD_HALT) {
 80052c4:	7822      	ldrb	r2, [r4, #0]
 80052c6:	2a66      	cmp	r2, #102	; 0x66
 80052c8:	d101      	bne.n	80052ce <HAL_UART_RxCpltCallback+0x66>
			cur_state = CLOSING_FILE;
 80052ca:	3a5f      	subs	r2, #95	; 0x5f
 80052cc:	e7ea      	b.n	80052a4 <HAL_UART_RxCpltCallback+0x3c>
		char c_buff = ACK_INVALID;
 80052ce:	466b      	mov	r3, sp
 80052d0:	1dd9      	adds	r1, r3, #7
 80052d2:	2365      	movs	r3, #101	; 0x65
 80052d4:	700b      	strb	r3, [r1, #0]
		HAL_UART_Transmit(&huart1, &c_buff, 1, 1000); // transmit in blocking mode
 80052d6:	23fa      	movs	r3, #250	; 0xfa
 80052d8:	2201      	movs	r2, #1
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	0028      	movs	r0, r5
 80052de:	f7fd f91d 	bl	800251c <HAL_UART_Transmit>
 80052e2:	e7e0      	b.n	80052a6 <HAL_UART_RxCpltCallback+0x3e>
 80052e4:	200014dc 	.word	0x200014dc
 80052e8:	20000f98 	.word	0x20000f98
 80052ec:	0800656b 	.word	0x0800656b
 80052f0:	200002dc 	.word	0x200002dc

080052f4 <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80052f4:	4770      	bx	lr
	...

080052f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052f8:	2001      	movs	r0, #1
 80052fa:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <HAL_MspInit+0x2c>)
{
 80052fc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052fe:	6999      	ldr	r1, [r3, #24]
 8005300:	4301      	orrs	r1, r0
 8005302:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005304:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005306:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005308:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800530a:	4002      	ands	r2, r0
 800530c:	9200      	str	r2, [sp, #0]
 800530e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005310:	69da      	ldr	r2, [r3, #28]
 8005312:	430a      	orrs	r2, r1
 8005314:	61da      	str	r2, [r3, #28]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	400b      	ands	r3, r1
 800531a:	9301      	str	r3, [sp, #4]
 800531c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800531e:	b002      	add	sp, #8
 8005320:	4770      	bx	lr
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	40021000 	.word	0x40021000

08005328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	0006      	movs	r6, r0
 800532c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800532e:	2214      	movs	r2, #20
 8005330:	2100      	movs	r1, #0
 8005332:	a803      	add	r0, sp, #12
 8005334:	f000 f9ad 	bl	8005692 <memset>
  if(hadc->Instance==ADC1)
 8005338:	4b25      	ldr	r3, [pc, #148]	; (80053d0 <HAL_ADC_MspInit+0xa8>)
 800533a:	6832      	ldr	r2, [r6, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d144      	bne.n	80053ca <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005340:	2080      	movs	r0, #128	; 0x80
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <HAL_ADC_MspInit+0xac>)
 8005344:	0080      	lsls	r0, r0, #2
 8005346:	6999      	ldr	r1, [r3, #24]
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005348:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800534a:	4301      	orrs	r1, r0
 800534c:	6199      	str	r1, [r3, #24]
 800534e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005350:	2500      	movs	r5, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005352:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005354:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005356:	9200      	str	r2, [sp, #0]
 8005358:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800535a:	6959      	ldr	r1, [r3, #20]
 800535c:	0280      	lsls	r0, r0, #10
 800535e:	4301      	orrs	r1, r0
 8005360:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005362:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005364:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005366:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005368:	4002      	ands	r2, r0
 800536a:	9201      	str	r2, [sp, #4]
 800536c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800536e:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005370:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005372:	430a      	orrs	r2, r1
 8005374:	615a      	str	r2, [r3, #20]
 8005376:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005378:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800537a:	400b      	ands	r3, r1
 800537c:	9302      	str	r3, [sp, #8]
 800537e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005380:	23ff      	movs	r3, #255	; 0xff
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005382:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005384:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005386:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005388:	f7fb fc06 	bl	8000b98 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800538c:	4812      	ldr	r0, [pc, #72]	; (80053d8 <HAL_ADC_MspInit+0xb0>)
 800538e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005390:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005392:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005394:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005396:	f7fb fbff 	bl	8000b98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800539a:	4c10      	ldr	r4, [pc, #64]	; (80053dc <HAL_ADC_MspInit+0xb4>)
 800539c:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <HAL_ADC_MspInit+0xb8>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800539e:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 80053a0:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80053a6:	18db      	adds	r3, r3, r3
 80053a8:	6123      	str	r3, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80053b0:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053b2:	6065      	str	r5, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80053b4:	60a5      	str	r5, [r4, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80053b6:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80053b8:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80053ba:	f7fb faf5 	bl	80009a8 <HAL_DMA_Init>
 80053be:	42a8      	cmp	r0, r5
 80053c0:	d001      	beq.n	80053c6 <HAL_ADC_MspInit+0x9e>
    {
      Error_Handler();
 80053c2:	f7ff ff97 	bl	80052f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80053c6:	6334      	str	r4, [r6, #48]	; 0x30
 80053c8:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80053ca:	b008      	add	sp, #32
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	40012400 	.word	0x40012400
 80053d4:	40021000 	.word	0x40021000
 80053d8:	48000400 	.word	0x48000400
 80053dc:	2000150c 	.word	0x2000150c
 80053e0:	40020008 	.word	0x40020008

080053e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80053e4:	b510      	push	{r4, lr}
 80053e6:	0004      	movs	r4, r0
 80053e8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ea:	2214      	movs	r2, #20
 80053ec:	2100      	movs	r1, #0
 80053ee:	a803      	add	r0, sp, #12
 80053f0:	f000 f94f 	bl	8005692 <memset>
  if(hspi->Instance==SPI1)
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <HAL_SPI_MspInit+0x58>)
 80053f6:	6822      	ldr	r2, [r4, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d11c      	bne.n	8005436 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053fc:	2080      	movs	r0, #128	; 0x80
 80053fe:	4b10      	ldr	r3, [pc, #64]	; (8005440 <HAL_SPI_MspInit+0x5c>)
 8005400:	0140      	lsls	r0, r0, #5
 8005402:	6999      	ldr	r1, [r3, #24]
 8005404:	4301      	orrs	r1, r0
 8005406:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005408:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 800540a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800540c:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_SPI1_CLK_ENABLE();
 800540e:	4002      	ands	r2, r0
 8005410:	9201      	str	r2, [sp, #4]
 8005412:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005414:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005416:	480b      	ldr	r0, [pc, #44]	; (8005444 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005418:	430a      	orrs	r2, r1
 800541a:	615a      	str	r2, [r3, #20]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	400b      	ands	r3, r1
 8005420:	9302      	str	r3, [sp, #8]
 8005422:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005424:	2338      	movs	r3, #56	; 0x38
 8005426:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005428:	3b36      	subs	r3, #54	; 0x36
 800542a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800542c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800542e:	3301      	adds	r3, #1
 8005430:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005432:	f7fb fbb1 	bl	8000b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005436:	b008      	add	sp, #32
 8005438:	bd10      	pop	{r4, pc}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	40013000 	.word	0x40013000
 8005440:	40021000 	.word	0x40021000
 8005444:	48000400 	.word	0x48000400

08005448 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8005448:	4b08      	ldr	r3, [pc, #32]	; (800546c <HAL_TIM_Base_MspInit+0x24>)
 800544a:	6802      	ldr	r2, [r0, #0]
{
 800544c:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 800544e:	429a      	cmp	r2, r3
 8005450:	d109      	bne.n	8005466 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005452:	2080      	movs	r0, #128	; 0x80
 8005454:	4a06      	ldr	r2, [pc, #24]	; (8005470 <HAL_TIM_Base_MspInit+0x28>)
 8005456:	0100      	lsls	r0, r0, #4
 8005458:	6991      	ldr	r1, [r2, #24]
 800545a:	4301      	orrs	r1, r0
 800545c:	6191      	str	r1, [r2, #24]
 800545e:	6993      	ldr	r3, [r2, #24]
 8005460:	4003      	ands	r3, r0
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005466:	b002      	add	sp, #8
 8005468:	4770      	bx	lr
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40021000 	.word	0x40021000

08005474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005474:	b510      	push	{r4, lr}
 8005476:	0004      	movs	r4, r0
 8005478:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800547a:	2214      	movs	r2, #20
 800547c:	2100      	movs	r1, #0
 800547e:	a803      	add	r0, sp, #12
 8005480:	f000 f907 	bl	8005692 <memset>
  if(huart->Instance==USART1)
 8005484:	4b17      	ldr	r3, [pc, #92]	; (80054e4 <HAL_UART_MspInit+0x70>)
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d128      	bne.n	80054de <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800548c:	2080      	movs	r0, #128	; 0x80
 800548e:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <HAL_UART_MspInit+0x74>)
 8005490:	01c0      	lsls	r0, r0, #7
 8005492:	6999      	ldr	r1, [r3, #24]
 8005494:	4301      	orrs	r1, r0
 8005496:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005498:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 800549a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800549c:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 800549e:	4002      	ands	r2, r0
 80054a0:	9201      	str	r2, [sp, #4]
 80054a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a4:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a8:	430a      	orrs	r2, r1
 80054aa:	615a      	str	r2, [r3, #20]
 80054ac:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ae:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b0:	400b      	ands	r3, r1
 80054b2:	9302      	str	r3, [sp, #8]
 80054b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80054b6:	23c0      	movs	r3, #192	; 0xc0
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054bc:	2302      	movs	r3, #2
 80054be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054c0:	3301      	adds	r3, #1
 80054c2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80054c6:	3b02      	subs	r3, #2
 80054c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ca:	f7fb fb65 	bl	8000b98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80054ce:	2200      	movs	r2, #0
 80054d0:	201b      	movs	r0, #27
 80054d2:	0011      	movs	r1, r2
 80054d4:	f7fb fa12 	bl	80008fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80054d8:	201b      	movs	r0, #27
 80054da:	f7fb fa3f 	bl	800095c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80054de:	b008      	add	sp, #32
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	40013800 	.word	0x40013800
 80054e8:	40021000 	.word	0x40021000

080054ec <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 80054ec:	4a08      	ldr	r2, [pc, #32]	; (8005510 <SDTimer_Handler+0x24>)
 80054ee:	7813      	ldrb	r3, [r2, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <SDTimer_Handler+0x10>
    Timer1--;
 80054f4:	7813      	ldrb	r3, [r2, #0]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 80054fc:	4a05      	ldr	r2, [pc, #20]	; (8005514 <SDTimer_Handler+0x28>)
 80054fe:	7813      	ldrb	r3, [r2, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <SDTimer_Handler+0x20>
    Timer2--;
 8005504:	7813      	ldrb	r3, [r2, #0]
 8005506:	3b01      	subs	r3, #1
 8005508:	b2db      	uxtb	r3, r3
 800550a:	7013      	strb	r3, [r2, #0]
}
 800550c:	4770      	bx	lr
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	200019c9 	.word	0x200019c9
 8005514:	200019c8 	.word	0x200019c8

08005518 <NMI_Handler>:
 8005518:	4770      	bx	lr

0800551a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800551a:	e7fe      	b.n	800551a <HardFault_Handler>

0800551c <SVC_Handler>:
 800551c:	4770      	bx	lr

0800551e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800551e:	4770      	bx	lr

08005520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005520:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8005522:	4a07      	ldr	r2, [pc, #28]	; (8005540 <SysTick_Handler+0x20>)
 8005524:	7813      	ldrb	r3, [r2, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	7013      	strb	r3, [r2, #0]
    if(FatFsCnt >= 10)
 800552c:	7813      	ldrb	r3, [r2, #0]
 800552e:	2b09      	cmp	r3, #9
 8005530:	d903      	bls.n	800553a <SysTick_Handler+0x1a>
    {
	  FatFsCnt = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	7013      	strb	r3, [r2, #0]
	  SDTimer_Handler();
 8005536:	f7ff ffd9 	bl	80054ec <SDTimer_Handler>
    }


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800553a:	f7fa fec1 	bl	80002c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800553e:	bd10      	pop	{r4, pc}
 8005540:	200002e4 	.word	0x200002e4

08005544 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8005544:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005546:	2001      	movs	r0, #1
 8005548:	f7fb fbe2 	bl	8000d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800554c:	bd10      	pop	{r4, pc}
	...

08005550 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005550:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005552:	4802      	ldr	r0, [pc, #8]	; (800555c <DMA1_Channel1_IRQHandler+0xc>)
 8005554:	f7fb fad6 	bl	8000b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005558:	bd10      	pop	{r4, pc}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	2000150c 	.word	0x2000150c

08005560 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005560:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005562:	4802      	ldr	r0, [pc, #8]	; (800556c <USART1_IRQHandler+0xc>)
 8005564:	f7fc fdce 	bl	8002104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005568:	bd10      	pop	{r4, pc}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	20000f98 	.word	0x20000f98

08005570 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <_sbrk+0x2c>)
{
 8005572:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8005574:	6819      	ldr	r1, [r3, #0]
{
 8005576:	0002      	movs	r2, r0
	if (heap_end == 0)
 8005578:	2900      	cmp	r1, #0
 800557a:	d101      	bne.n	8005580 <_sbrk+0x10>
		heap_end = &end;
 800557c:	4908      	ldr	r1, [pc, #32]	; (80055a0 <_sbrk+0x30>)
 800557e:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005580:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8005582:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005584:	1882      	adds	r2, r0, r2
 8005586:	428a      	cmp	r2, r1
 8005588:	d906      	bls.n	8005598 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800558a:	f000 f84f 	bl	800562c <__errno>
 800558e:	230c      	movs	r3, #12
 8005590:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005592:	2001      	movs	r0, #1
 8005594:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8005596:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8005598:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800559a:	e7fc      	b.n	8005596 <_sbrk+0x26>
 800559c:	200002e8 	.word	0x200002e8
 80055a0:	200019d0 	.word	0x200019d0

080055a4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80055a4:	4770      	bx	lr

080055a6 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80055a6:	b510      	push	{r4, lr}
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80055a8:	f7ff f94e 	bl	8004848 <SD_disk_initialize>
 80055ac:	b2c0      	uxtb	r0, r0
  /* USER CODE END INIT */
}
 80055ae:	bd10      	pop	{r4, pc}

080055b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80055b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80055b2:	f7ff f9e3 	bl	800497c <SD_disk_status>
 80055b6:	b2c0      	uxtb	r0, r0
  /* USER CODE END STATUS */
}
 80055b8:	bd10      	pop	{r4, pc}

080055ba <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80055ba:	b510      	push	{r4, lr}
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80055bc:	f7ff f9e8 	bl	8004990 <SD_disk_read>
 80055c0:	b2c0      	uxtb	r0, r0
  /* USER CODE END READ */
}
 80055c2:	bd10      	pop	{r4, pc}

080055c4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80055c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80055c6:	f7ff fa2d 	bl	8004a24 <SD_disk_write>
 80055ca:	b2c0      	uxtb	r0, r0
  /* USER CODE END WRITE */
}
 80055cc:	bd10      	pop	{r4, pc}

080055ce <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80055ce:	b510      	push	{r4, lr}
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80055d0:	f7ff fa82 	bl	8004ad8 <SD_disk_ioctl>
 80055d4:	b2c0      	uxtb	r0, r0
  /* USER CODE END IOCTL */
}
 80055d6:	bd10      	pop	{r4, pc}

080055d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055d8:	480d      	ldr	r0, [pc, #52]	; (8005610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055dc:	480d      	ldr	r0, [pc, #52]	; (8005614 <LoopForever+0x6>)
  ldr r1, =_edata
 80055de:	490e      	ldr	r1, [pc, #56]	; (8005618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055e0:	4a0e      	ldr	r2, [pc, #56]	; (800561c <LoopForever+0xe>)
  movs r3, #0
 80055e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055e4:	e002      	b.n	80055ec <LoopCopyDataInit>

080055e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055ea:	3304      	adds	r3, #4

080055ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055f0:	d3f9      	bcc.n	80055e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055f2:	4a0b      	ldr	r2, [pc, #44]	; (8005620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055f4:	4c0b      	ldr	r4, [pc, #44]	; (8005624 <LoopForever+0x16>)
  movs r3, #0
 80055f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055f8:	e001      	b.n	80055fe <LoopFillZerobss>

080055fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055fc:	3204      	adds	r2, #4

080055fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005600:	d3fb      	bcc.n	80055fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005602:	f7ff ffcf 	bl	80055a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005606:	f000 f817 	bl	8005638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800560a:	f7ff fbff 	bl	8004e0c <main>

0800560e <LoopForever>:

LoopForever:
    b LoopForever
 800560e:	e7fe      	b.n	800560e <LoopForever>
  ldr   r0, =_estack
 8005610:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005618:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800561c:	08006634 	.word	0x08006634
  ldr r2, =_sbss
 8005620:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005624:	200019d0 	.word	0x200019d0

08005628 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005628:	e7fe      	b.n	8005628 <ADC1_COMP_IRQHandler>
	...

0800562c <__errno>:
 800562c:	4b01      	ldr	r3, [pc, #4]	; (8005634 <__errno+0x8>)
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	4770      	bx	lr
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	20000024 	.word	0x20000024

08005638 <__libc_init_array>:
 8005638:	b570      	push	{r4, r5, r6, lr}
 800563a:	2600      	movs	r6, #0
 800563c:	4d0c      	ldr	r5, [pc, #48]	; (8005670 <__libc_init_array+0x38>)
 800563e:	4c0d      	ldr	r4, [pc, #52]	; (8005674 <__libc_init_array+0x3c>)
 8005640:	1b64      	subs	r4, r4, r5
 8005642:	10a4      	asrs	r4, r4, #2
 8005644:	42a6      	cmp	r6, r4
 8005646:	d109      	bne.n	800565c <__libc_init_array+0x24>
 8005648:	2600      	movs	r6, #0
 800564a:	f000 fc43 	bl	8005ed4 <_init>
 800564e:	4d0a      	ldr	r5, [pc, #40]	; (8005678 <__libc_init_array+0x40>)
 8005650:	4c0a      	ldr	r4, [pc, #40]	; (800567c <__libc_init_array+0x44>)
 8005652:	1b64      	subs	r4, r4, r5
 8005654:	10a4      	asrs	r4, r4, #2
 8005656:	42a6      	cmp	r6, r4
 8005658:	d105      	bne.n	8005666 <__libc_init_array+0x2e>
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	00b3      	lsls	r3, r6, #2
 800565e:	58eb      	ldr	r3, [r5, r3]
 8005660:	4798      	blx	r3
 8005662:	3601      	adds	r6, #1
 8005664:	e7ee      	b.n	8005644 <__libc_init_array+0xc>
 8005666:	00b3      	lsls	r3, r6, #2
 8005668:	58eb      	ldr	r3, [r5, r3]
 800566a:	4798      	blx	r3
 800566c:	3601      	adds	r6, #1
 800566e:	e7f2      	b.n	8005656 <__libc_init_array+0x1e>
 8005670:	0800662c 	.word	0x0800662c
 8005674:	0800662c 	.word	0x0800662c
 8005678:	0800662c 	.word	0x0800662c
 800567c:	08006630 	.word	0x08006630

08005680 <memcpy>:
 8005680:	2300      	movs	r3, #0
 8005682:	b510      	push	{r4, lr}
 8005684:	429a      	cmp	r2, r3
 8005686:	d100      	bne.n	800568a <memcpy+0xa>
 8005688:	bd10      	pop	{r4, pc}
 800568a:	5ccc      	ldrb	r4, [r1, r3]
 800568c:	54c4      	strb	r4, [r0, r3]
 800568e:	3301      	adds	r3, #1
 8005690:	e7f8      	b.n	8005684 <memcpy+0x4>

08005692 <memset>:
 8005692:	0003      	movs	r3, r0
 8005694:	1882      	adds	r2, r0, r2
 8005696:	4293      	cmp	r3, r2
 8005698:	d100      	bne.n	800569c <memset+0xa>
 800569a:	4770      	bx	lr
 800569c:	7019      	strb	r1, [r3, #0]
 800569e:	3301      	adds	r3, #1
 80056a0:	e7f9      	b.n	8005696 <memset+0x4>
	...

080056a4 <siprintf>:
 80056a4:	b40e      	push	{r1, r2, r3}
 80056a6:	b510      	push	{r4, lr}
 80056a8:	b09d      	sub	sp, #116	; 0x74
 80056aa:	a902      	add	r1, sp, #8
 80056ac:	9002      	str	r0, [sp, #8]
 80056ae:	6108      	str	r0, [r1, #16]
 80056b0:	480b      	ldr	r0, [pc, #44]	; (80056e0 <siprintf+0x3c>)
 80056b2:	2482      	movs	r4, #130	; 0x82
 80056b4:	6088      	str	r0, [r1, #8]
 80056b6:	6148      	str	r0, [r1, #20]
 80056b8:	2001      	movs	r0, #1
 80056ba:	4240      	negs	r0, r0
 80056bc:	ab1f      	add	r3, sp, #124	; 0x7c
 80056be:	81c8      	strh	r0, [r1, #14]
 80056c0:	4808      	ldr	r0, [pc, #32]	; (80056e4 <siprintf+0x40>)
 80056c2:	cb04      	ldmia	r3!, {r2}
 80056c4:	00a4      	lsls	r4, r4, #2
 80056c6:	6800      	ldr	r0, [r0, #0]
 80056c8:	9301      	str	r3, [sp, #4]
 80056ca:	818c      	strh	r4, [r1, #12]
 80056cc:	f000 f86e 	bl	80057ac <_svfiprintf_r>
 80056d0:	2300      	movs	r3, #0
 80056d2:	9a02      	ldr	r2, [sp, #8]
 80056d4:	7013      	strb	r3, [r2, #0]
 80056d6:	b01d      	add	sp, #116	; 0x74
 80056d8:	bc10      	pop	{r4}
 80056da:	bc08      	pop	{r3}
 80056dc:	b003      	add	sp, #12
 80056de:	4718      	bx	r3
 80056e0:	7fffffff 	.word	0x7fffffff
 80056e4:	20000024 	.word	0x20000024

080056e8 <__ssputs_r>:
 80056e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ea:	688e      	ldr	r6, [r1, #8]
 80056ec:	b085      	sub	sp, #20
 80056ee:	0007      	movs	r7, r0
 80056f0:	000c      	movs	r4, r1
 80056f2:	9203      	str	r2, [sp, #12]
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	429e      	cmp	r6, r3
 80056f8:	d839      	bhi.n	800576e <__ssputs_r+0x86>
 80056fa:	2390      	movs	r3, #144	; 0x90
 80056fc:	898a      	ldrh	r2, [r1, #12]
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	421a      	tst	r2, r3
 8005702:	d034      	beq.n	800576e <__ssputs_r+0x86>
 8005704:	2503      	movs	r5, #3
 8005706:	6909      	ldr	r1, [r1, #16]
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	1a5b      	subs	r3, r3, r1
 800570c:	9302      	str	r3, [sp, #8]
 800570e:	6963      	ldr	r3, [r4, #20]
 8005710:	9802      	ldr	r0, [sp, #8]
 8005712:	435d      	muls	r5, r3
 8005714:	0feb      	lsrs	r3, r5, #31
 8005716:	195d      	adds	r5, r3, r5
 8005718:	9b01      	ldr	r3, [sp, #4]
 800571a:	106d      	asrs	r5, r5, #1
 800571c:	3301      	adds	r3, #1
 800571e:	181b      	adds	r3, r3, r0
 8005720:	42ab      	cmp	r3, r5
 8005722:	d900      	bls.n	8005726 <__ssputs_r+0x3e>
 8005724:	001d      	movs	r5, r3
 8005726:	0553      	lsls	r3, r2, #21
 8005728:	d532      	bpl.n	8005790 <__ssputs_r+0xa8>
 800572a:	0029      	movs	r1, r5
 800572c:	0038      	movs	r0, r7
 800572e:	f000 fb31 	bl	8005d94 <_malloc_r>
 8005732:	1e06      	subs	r6, r0, #0
 8005734:	d109      	bne.n	800574a <__ssputs_r+0x62>
 8005736:	230c      	movs	r3, #12
 8005738:	603b      	str	r3, [r7, #0]
 800573a:	2340      	movs	r3, #64	; 0x40
 800573c:	2001      	movs	r0, #1
 800573e:	89a2      	ldrh	r2, [r4, #12]
 8005740:	4240      	negs	r0, r0
 8005742:	4313      	orrs	r3, r2
 8005744:	81a3      	strh	r3, [r4, #12]
 8005746:	b005      	add	sp, #20
 8005748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800574a:	9a02      	ldr	r2, [sp, #8]
 800574c:	6921      	ldr	r1, [r4, #16]
 800574e:	f7ff ff97 	bl	8005680 <memcpy>
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <__ssputs_r+0xc0>)
 8005756:	401a      	ands	r2, r3
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	4313      	orrs	r3, r2
 800575c:	81a3      	strh	r3, [r4, #12]
 800575e:	9b02      	ldr	r3, [sp, #8]
 8005760:	6126      	str	r6, [r4, #16]
 8005762:	18f6      	adds	r6, r6, r3
 8005764:	6026      	str	r6, [r4, #0]
 8005766:	6165      	str	r5, [r4, #20]
 8005768:	9e01      	ldr	r6, [sp, #4]
 800576a:	1aed      	subs	r5, r5, r3
 800576c:	60a5      	str	r5, [r4, #8]
 800576e:	9b01      	ldr	r3, [sp, #4]
 8005770:	42b3      	cmp	r3, r6
 8005772:	d200      	bcs.n	8005776 <__ssputs_r+0x8e>
 8005774:	001e      	movs	r6, r3
 8005776:	0032      	movs	r2, r6
 8005778:	9903      	ldr	r1, [sp, #12]
 800577a:	6820      	ldr	r0, [r4, #0]
 800577c:	f000 faad 	bl	8005cda <memmove>
 8005780:	68a3      	ldr	r3, [r4, #8]
 8005782:	2000      	movs	r0, #0
 8005784:	1b9b      	subs	r3, r3, r6
 8005786:	60a3      	str	r3, [r4, #8]
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	199e      	adds	r6, r3, r6
 800578c:	6026      	str	r6, [r4, #0]
 800578e:	e7da      	b.n	8005746 <__ssputs_r+0x5e>
 8005790:	002a      	movs	r2, r5
 8005792:	0038      	movs	r0, r7
 8005794:	f000 fb5c 	bl	8005e50 <_realloc_r>
 8005798:	1e06      	subs	r6, r0, #0
 800579a:	d1e0      	bne.n	800575e <__ssputs_r+0x76>
 800579c:	6921      	ldr	r1, [r4, #16]
 800579e:	0038      	movs	r0, r7
 80057a0:	f000 faae 	bl	8005d00 <_free_r>
 80057a4:	e7c7      	b.n	8005736 <__ssputs_r+0x4e>
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	fffffb7f 	.word	0xfffffb7f

080057ac <_svfiprintf_r>:
 80057ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ae:	b09f      	sub	sp, #124	; 0x7c
 80057b0:	9002      	str	r0, [sp, #8]
 80057b2:	9305      	str	r3, [sp, #20]
 80057b4:	898b      	ldrh	r3, [r1, #12]
 80057b6:	000f      	movs	r7, r1
 80057b8:	0016      	movs	r6, r2
 80057ba:	061b      	lsls	r3, r3, #24
 80057bc:	d511      	bpl.n	80057e2 <_svfiprintf_r+0x36>
 80057be:	690b      	ldr	r3, [r1, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10e      	bne.n	80057e2 <_svfiprintf_r+0x36>
 80057c4:	2140      	movs	r1, #64	; 0x40
 80057c6:	f000 fae5 	bl	8005d94 <_malloc_r>
 80057ca:	6038      	str	r0, [r7, #0]
 80057cc:	6138      	str	r0, [r7, #16]
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d105      	bne.n	80057de <_svfiprintf_r+0x32>
 80057d2:	230c      	movs	r3, #12
 80057d4:	9a02      	ldr	r2, [sp, #8]
 80057d6:	3801      	subs	r0, #1
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	b01f      	add	sp, #124	; 0x7c
 80057dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057de:	2340      	movs	r3, #64	; 0x40
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	2300      	movs	r3, #0
 80057e4:	ad06      	add	r5, sp, #24
 80057e6:	616b      	str	r3, [r5, #20]
 80057e8:	3320      	adds	r3, #32
 80057ea:	766b      	strb	r3, [r5, #25]
 80057ec:	3310      	adds	r3, #16
 80057ee:	76ab      	strb	r3, [r5, #26]
 80057f0:	0034      	movs	r4, r6
 80057f2:	7823      	ldrb	r3, [r4, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d147      	bne.n	8005888 <_svfiprintf_r+0xdc>
 80057f8:	1ba3      	subs	r3, r4, r6
 80057fa:	9304      	str	r3, [sp, #16]
 80057fc:	d00d      	beq.n	800581a <_svfiprintf_r+0x6e>
 80057fe:	1ba3      	subs	r3, r4, r6
 8005800:	0032      	movs	r2, r6
 8005802:	0039      	movs	r1, r7
 8005804:	9802      	ldr	r0, [sp, #8]
 8005806:	f7ff ff6f 	bl	80056e8 <__ssputs_r>
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	d100      	bne.n	8005810 <_svfiprintf_r+0x64>
 800580e:	e0b5      	b.n	800597c <_svfiprintf_r+0x1d0>
 8005810:	696a      	ldr	r2, [r5, #20]
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	4694      	mov	ip, r2
 8005816:	4463      	add	r3, ip
 8005818:	616b      	str	r3, [r5, #20]
 800581a:	7823      	ldrb	r3, [r4, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d100      	bne.n	8005822 <_svfiprintf_r+0x76>
 8005820:	e0ac      	b.n	800597c <_svfiprintf_r+0x1d0>
 8005822:	2201      	movs	r2, #1
 8005824:	2300      	movs	r3, #0
 8005826:	4252      	negs	r2, r2
 8005828:	606a      	str	r2, [r5, #4]
 800582a:	a902      	add	r1, sp, #8
 800582c:	3254      	adds	r2, #84	; 0x54
 800582e:	1852      	adds	r2, r2, r1
 8005830:	3401      	adds	r4, #1
 8005832:	602b      	str	r3, [r5, #0]
 8005834:	60eb      	str	r3, [r5, #12]
 8005836:	60ab      	str	r3, [r5, #8]
 8005838:	7013      	strb	r3, [r2, #0]
 800583a:	65ab      	str	r3, [r5, #88]	; 0x58
 800583c:	4e58      	ldr	r6, [pc, #352]	; (80059a0 <_svfiprintf_r+0x1f4>)
 800583e:	2205      	movs	r2, #5
 8005840:	7821      	ldrb	r1, [r4, #0]
 8005842:	0030      	movs	r0, r6
 8005844:	f000 fa3e 	bl	8005cc4 <memchr>
 8005848:	1c62      	adds	r2, r4, #1
 800584a:	2800      	cmp	r0, #0
 800584c:	d120      	bne.n	8005890 <_svfiprintf_r+0xe4>
 800584e:	6829      	ldr	r1, [r5, #0]
 8005850:	06cb      	lsls	r3, r1, #27
 8005852:	d504      	bpl.n	800585e <_svfiprintf_r+0xb2>
 8005854:	2353      	movs	r3, #83	; 0x53
 8005856:	ae02      	add	r6, sp, #8
 8005858:	3020      	adds	r0, #32
 800585a:	199b      	adds	r3, r3, r6
 800585c:	7018      	strb	r0, [r3, #0]
 800585e:	070b      	lsls	r3, r1, #28
 8005860:	d504      	bpl.n	800586c <_svfiprintf_r+0xc0>
 8005862:	2353      	movs	r3, #83	; 0x53
 8005864:	202b      	movs	r0, #43	; 0x2b
 8005866:	ae02      	add	r6, sp, #8
 8005868:	199b      	adds	r3, r3, r6
 800586a:	7018      	strb	r0, [r3, #0]
 800586c:	7823      	ldrb	r3, [r4, #0]
 800586e:	2b2a      	cmp	r3, #42	; 0x2a
 8005870:	d016      	beq.n	80058a0 <_svfiprintf_r+0xf4>
 8005872:	2000      	movs	r0, #0
 8005874:	210a      	movs	r1, #10
 8005876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005878:	7822      	ldrb	r2, [r4, #0]
 800587a:	3a30      	subs	r2, #48	; 0x30
 800587c:	2a09      	cmp	r2, #9
 800587e:	d955      	bls.n	800592c <_svfiprintf_r+0x180>
 8005880:	2800      	cmp	r0, #0
 8005882:	d015      	beq.n	80058b0 <_svfiprintf_r+0x104>
 8005884:	9309      	str	r3, [sp, #36]	; 0x24
 8005886:	e013      	b.n	80058b0 <_svfiprintf_r+0x104>
 8005888:	2b25      	cmp	r3, #37	; 0x25
 800588a:	d0b5      	beq.n	80057f8 <_svfiprintf_r+0x4c>
 800588c:	3401      	adds	r4, #1
 800588e:	e7b0      	b.n	80057f2 <_svfiprintf_r+0x46>
 8005890:	2301      	movs	r3, #1
 8005892:	1b80      	subs	r0, r0, r6
 8005894:	4083      	lsls	r3, r0
 8005896:	6829      	ldr	r1, [r5, #0]
 8005898:	0014      	movs	r4, r2
 800589a:	430b      	orrs	r3, r1
 800589c:	602b      	str	r3, [r5, #0]
 800589e:	e7cd      	b.n	800583c <_svfiprintf_r+0x90>
 80058a0:	9b05      	ldr	r3, [sp, #20]
 80058a2:	1d18      	adds	r0, r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	9005      	str	r0, [sp, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	db39      	blt.n	8005920 <_svfiprintf_r+0x174>
 80058ac:	9309      	str	r3, [sp, #36]	; 0x24
 80058ae:	0014      	movs	r4, r2
 80058b0:	7823      	ldrb	r3, [r4, #0]
 80058b2:	2b2e      	cmp	r3, #46	; 0x2e
 80058b4:	d10b      	bne.n	80058ce <_svfiprintf_r+0x122>
 80058b6:	7863      	ldrb	r3, [r4, #1]
 80058b8:	1c62      	adds	r2, r4, #1
 80058ba:	2b2a      	cmp	r3, #42	; 0x2a
 80058bc:	d13e      	bne.n	800593c <_svfiprintf_r+0x190>
 80058be:	9b05      	ldr	r3, [sp, #20]
 80058c0:	3402      	adds	r4, #2
 80058c2:	1d1a      	adds	r2, r3, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	9205      	str	r2, [sp, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	db34      	blt.n	8005936 <_svfiprintf_r+0x18a>
 80058cc:	9307      	str	r3, [sp, #28]
 80058ce:	4e35      	ldr	r6, [pc, #212]	; (80059a4 <_svfiprintf_r+0x1f8>)
 80058d0:	7821      	ldrb	r1, [r4, #0]
 80058d2:	2203      	movs	r2, #3
 80058d4:	0030      	movs	r0, r6
 80058d6:	f000 f9f5 	bl	8005cc4 <memchr>
 80058da:	2800      	cmp	r0, #0
 80058dc:	d006      	beq.n	80058ec <_svfiprintf_r+0x140>
 80058de:	2340      	movs	r3, #64	; 0x40
 80058e0:	1b80      	subs	r0, r0, r6
 80058e2:	4083      	lsls	r3, r0
 80058e4:	682a      	ldr	r2, [r5, #0]
 80058e6:	3401      	adds	r4, #1
 80058e8:	4313      	orrs	r3, r2
 80058ea:	602b      	str	r3, [r5, #0]
 80058ec:	7821      	ldrb	r1, [r4, #0]
 80058ee:	2206      	movs	r2, #6
 80058f0:	482d      	ldr	r0, [pc, #180]	; (80059a8 <_svfiprintf_r+0x1fc>)
 80058f2:	1c66      	adds	r6, r4, #1
 80058f4:	7629      	strb	r1, [r5, #24]
 80058f6:	f000 f9e5 	bl	8005cc4 <memchr>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d046      	beq.n	800598c <_svfiprintf_r+0x1e0>
 80058fe:	4b2b      	ldr	r3, [pc, #172]	; (80059ac <_svfiprintf_r+0x200>)
 8005900:	2b00      	cmp	r3, #0
 8005902:	d12f      	bne.n	8005964 <_svfiprintf_r+0x1b8>
 8005904:	6829      	ldr	r1, [r5, #0]
 8005906:	9b05      	ldr	r3, [sp, #20]
 8005908:	2207      	movs	r2, #7
 800590a:	05c9      	lsls	r1, r1, #23
 800590c:	d528      	bpl.n	8005960 <_svfiprintf_r+0x1b4>
 800590e:	189b      	adds	r3, r3, r2
 8005910:	4393      	bics	r3, r2
 8005912:	3308      	adds	r3, #8
 8005914:	9305      	str	r3, [sp, #20]
 8005916:	696b      	ldr	r3, [r5, #20]
 8005918:	9a03      	ldr	r2, [sp, #12]
 800591a:	189b      	adds	r3, r3, r2
 800591c:	616b      	str	r3, [r5, #20]
 800591e:	e767      	b.n	80057f0 <_svfiprintf_r+0x44>
 8005920:	425b      	negs	r3, r3
 8005922:	60eb      	str	r3, [r5, #12]
 8005924:	2302      	movs	r3, #2
 8005926:	430b      	orrs	r3, r1
 8005928:	602b      	str	r3, [r5, #0]
 800592a:	e7c0      	b.n	80058ae <_svfiprintf_r+0x102>
 800592c:	434b      	muls	r3, r1
 800592e:	3401      	adds	r4, #1
 8005930:	189b      	adds	r3, r3, r2
 8005932:	2001      	movs	r0, #1
 8005934:	e7a0      	b.n	8005878 <_svfiprintf_r+0xcc>
 8005936:	2301      	movs	r3, #1
 8005938:	425b      	negs	r3, r3
 800593a:	e7c7      	b.n	80058cc <_svfiprintf_r+0x120>
 800593c:	2300      	movs	r3, #0
 800593e:	0014      	movs	r4, r2
 8005940:	200a      	movs	r0, #10
 8005942:	001a      	movs	r2, r3
 8005944:	606b      	str	r3, [r5, #4]
 8005946:	7821      	ldrb	r1, [r4, #0]
 8005948:	3930      	subs	r1, #48	; 0x30
 800594a:	2909      	cmp	r1, #9
 800594c:	d903      	bls.n	8005956 <_svfiprintf_r+0x1aa>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0bd      	beq.n	80058ce <_svfiprintf_r+0x122>
 8005952:	9207      	str	r2, [sp, #28]
 8005954:	e7bb      	b.n	80058ce <_svfiprintf_r+0x122>
 8005956:	4342      	muls	r2, r0
 8005958:	3401      	adds	r4, #1
 800595a:	1852      	adds	r2, r2, r1
 800595c:	2301      	movs	r3, #1
 800595e:	e7f2      	b.n	8005946 <_svfiprintf_r+0x19a>
 8005960:	3307      	adds	r3, #7
 8005962:	e7d5      	b.n	8005910 <_svfiprintf_r+0x164>
 8005964:	ab05      	add	r3, sp, #20
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	003a      	movs	r2, r7
 800596a:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <_svfiprintf_r+0x204>)
 800596c:	0029      	movs	r1, r5
 800596e:	9802      	ldr	r0, [sp, #8]
 8005970:	e000      	b.n	8005974 <_svfiprintf_r+0x1c8>
 8005972:	bf00      	nop
 8005974:	9003      	str	r0, [sp, #12]
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	3301      	adds	r3, #1
 800597a:	d1cc      	bne.n	8005916 <_svfiprintf_r+0x16a>
 800597c:	89bb      	ldrh	r3, [r7, #12]
 800597e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005980:	065b      	lsls	r3, r3, #25
 8005982:	d400      	bmi.n	8005986 <_svfiprintf_r+0x1da>
 8005984:	e729      	b.n	80057da <_svfiprintf_r+0x2e>
 8005986:	2001      	movs	r0, #1
 8005988:	4240      	negs	r0, r0
 800598a:	e726      	b.n	80057da <_svfiprintf_r+0x2e>
 800598c:	ab05      	add	r3, sp, #20
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	003a      	movs	r2, r7
 8005992:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <_svfiprintf_r+0x204>)
 8005994:	0029      	movs	r1, r5
 8005996:	9802      	ldr	r0, [sp, #8]
 8005998:	f000 f87a 	bl	8005a90 <_printf_i>
 800599c:	e7ea      	b.n	8005974 <_svfiprintf_r+0x1c8>
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	080065f7 	.word	0x080065f7
 80059a4:	080065fd 	.word	0x080065fd
 80059a8:	08006601 	.word	0x08006601
 80059ac:	00000000 	.word	0x00000000
 80059b0:	080056e9 	.word	0x080056e9

080059b4 <_printf_common>:
 80059b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059b6:	0015      	movs	r5, r2
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	688a      	ldr	r2, [r1, #8]
 80059bc:	690b      	ldr	r3, [r1, #16]
 80059be:	9000      	str	r0, [sp, #0]
 80059c0:	000c      	movs	r4, r1
 80059c2:	4293      	cmp	r3, r2
 80059c4:	da00      	bge.n	80059c8 <_printf_common+0x14>
 80059c6:	0013      	movs	r3, r2
 80059c8:	0022      	movs	r2, r4
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	3243      	adds	r2, #67	; 0x43
 80059ce:	7812      	ldrb	r2, [r2, #0]
 80059d0:	2a00      	cmp	r2, #0
 80059d2:	d001      	beq.n	80059d8 <_printf_common+0x24>
 80059d4:	3301      	adds	r3, #1
 80059d6:	602b      	str	r3, [r5, #0]
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	069b      	lsls	r3, r3, #26
 80059dc:	d502      	bpl.n	80059e4 <_printf_common+0x30>
 80059de:	682b      	ldr	r3, [r5, #0]
 80059e0:	3302      	adds	r3, #2
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	2706      	movs	r7, #6
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	401f      	ands	r7, r3
 80059ea:	d027      	beq.n	8005a3c <_printf_common+0x88>
 80059ec:	0023      	movs	r3, r4
 80059ee:	3343      	adds	r3, #67	; 0x43
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	1e5a      	subs	r2, r3, #1
 80059f4:	4193      	sbcs	r3, r2
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	0692      	lsls	r2, r2, #26
 80059fa:	d430      	bmi.n	8005a5e <_printf_common+0xaa>
 80059fc:	0022      	movs	r2, r4
 80059fe:	9901      	ldr	r1, [sp, #4]
 8005a00:	3243      	adds	r2, #67	; 0x43
 8005a02:	9800      	ldr	r0, [sp, #0]
 8005a04:	9e08      	ldr	r6, [sp, #32]
 8005a06:	47b0      	blx	r6
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d025      	beq.n	8005a58 <_printf_common+0xa4>
 8005a0c:	2306      	movs	r3, #6
 8005a0e:	6820      	ldr	r0, [r4, #0]
 8005a10:	682a      	ldr	r2, [r5, #0]
 8005a12:	68e1      	ldr	r1, [r4, #12]
 8005a14:	4003      	ands	r3, r0
 8005a16:	2500      	movs	r5, #0
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d103      	bne.n	8005a24 <_printf_common+0x70>
 8005a1c:	1a8d      	subs	r5, r1, r2
 8005a1e:	43eb      	mvns	r3, r5
 8005a20:	17db      	asrs	r3, r3, #31
 8005a22:	401d      	ands	r5, r3
 8005a24:	68a3      	ldr	r3, [r4, #8]
 8005a26:	6922      	ldr	r2, [r4, #16]
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	dd01      	ble.n	8005a30 <_printf_common+0x7c>
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	18ed      	adds	r5, r5, r3
 8005a30:	2700      	movs	r7, #0
 8005a32:	42bd      	cmp	r5, r7
 8005a34:	d120      	bne.n	8005a78 <_printf_common+0xc4>
 8005a36:	2000      	movs	r0, #0
 8005a38:	e010      	b.n	8005a5c <_printf_common+0xa8>
 8005a3a:	3701      	adds	r7, #1
 8005a3c:	68e3      	ldr	r3, [r4, #12]
 8005a3e:	682a      	ldr	r2, [r5, #0]
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	429f      	cmp	r7, r3
 8005a44:	dad2      	bge.n	80059ec <_printf_common+0x38>
 8005a46:	0022      	movs	r2, r4
 8005a48:	2301      	movs	r3, #1
 8005a4a:	3219      	adds	r2, #25
 8005a4c:	9901      	ldr	r1, [sp, #4]
 8005a4e:	9800      	ldr	r0, [sp, #0]
 8005a50:	9e08      	ldr	r6, [sp, #32]
 8005a52:	47b0      	blx	r6
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d1f0      	bne.n	8005a3a <_printf_common+0x86>
 8005a58:	2001      	movs	r0, #1
 8005a5a:	4240      	negs	r0, r0
 8005a5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a5e:	2030      	movs	r0, #48	; 0x30
 8005a60:	18e1      	adds	r1, r4, r3
 8005a62:	3143      	adds	r1, #67	; 0x43
 8005a64:	7008      	strb	r0, [r1, #0]
 8005a66:	0021      	movs	r1, r4
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	3145      	adds	r1, #69	; 0x45
 8005a6c:	7809      	ldrb	r1, [r1, #0]
 8005a6e:	18a2      	adds	r2, r4, r2
 8005a70:	3243      	adds	r2, #67	; 0x43
 8005a72:	3302      	adds	r3, #2
 8005a74:	7011      	strb	r1, [r2, #0]
 8005a76:	e7c1      	b.n	80059fc <_printf_common+0x48>
 8005a78:	0022      	movs	r2, r4
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	321a      	adds	r2, #26
 8005a7e:	9901      	ldr	r1, [sp, #4]
 8005a80:	9800      	ldr	r0, [sp, #0]
 8005a82:	9e08      	ldr	r6, [sp, #32]
 8005a84:	47b0      	blx	r6
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	d0e6      	beq.n	8005a58 <_printf_common+0xa4>
 8005a8a:	3701      	adds	r7, #1
 8005a8c:	e7d1      	b.n	8005a32 <_printf_common+0x7e>
	...

08005a90 <_printf_i>:
 8005a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a92:	b08b      	sub	sp, #44	; 0x2c
 8005a94:	9206      	str	r2, [sp, #24]
 8005a96:	000a      	movs	r2, r1
 8005a98:	3243      	adds	r2, #67	; 0x43
 8005a9a:	9307      	str	r3, [sp, #28]
 8005a9c:	9005      	str	r0, [sp, #20]
 8005a9e:	9204      	str	r2, [sp, #16]
 8005aa0:	7e0a      	ldrb	r2, [r1, #24]
 8005aa2:	000c      	movs	r4, r1
 8005aa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005aa6:	2a6e      	cmp	r2, #110	; 0x6e
 8005aa8:	d100      	bne.n	8005aac <_printf_i+0x1c>
 8005aaa:	e08f      	b.n	8005bcc <_printf_i+0x13c>
 8005aac:	d817      	bhi.n	8005ade <_printf_i+0x4e>
 8005aae:	2a63      	cmp	r2, #99	; 0x63
 8005ab0:	d02c      	beq.n	8005b0c <_printf_i+0x7c>
 8005ab2:	d808      	bhi.n	8005ac6 <_printf_i+0x36>
 8005ab4:	2a00      	cmp	r2, #0
 8005ab6:	d100      	bne.n	8005aba <_printf_i+0x2a>
 8005ab8:	e099      	b.n	8005bee <_printf_i+0x15e>
 8005aba:	2a58      	cmp	r2, #88	; 0x58
 8005abc:	d054      	beq.n	8005b68 <_printf_i+0xd8>
 8005abe:	0026      	movs	r6, r4
 8005ac0:	3642      	adds	r6, #66	; 0x42
 8005ac2:	7032      	strb	r2, [r6, #0]
 8005ac4:	e029      	b.n	8005b1a <_printf_i+0x8a>
 8005ac6:	2a64      	cmp	r2, #100	; 0x64
 8005ac8:	d001      	beq.n	8005ace <_printf_i+0x3e>
 8005aca:	2a69      	cmp	r2, #105	; 0x69
 8005acc:	d1f7      	bne.n	8005abe <_printf_i+0x2e>
 8005ace:	6821      	ldr	r1, [r4, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	0608      	lsls	r0, r1, #24
 8005ad4:	d523      	bpl.n	8005b1e <_printf_i+0x8e>
 8005ad6:	1d11      	adds	r1, r2, #4
 8005ad8:	6019      	str	r1, [r3, #0]
 8005ada:	6815      	ldr	r5, [r2, #0]
 8005adc:	e025      	b.n	8005b2a <_printf_i+0x9a>
 8005ade:	2a73      	cmp	r2, #115	; 0x73
 8005ae0:	d100      	bne.n	8005ae4 <_printf_i+0x54>
 8005ae2:	e088      	b.n	8005bf6 <_printf_i+0x166>
 8005ae4:	d808      	bhi.n	8005af8 <_printf_i+0x68>
 8005ae6:	2a6f      	cmp	r2, #111	; 0x6f
 8005ae8:	d029      	beq.n	8005b3e <_printf_i+0xae>
 8005aea:	2a70      	cmp	r2, #112	; 0x70
 8005aec:	d1e7      	bne.n	8005abe <_printf_i+0x2e>
 8005aee:	2220      	movs	r2, #32
 8005af0:	6809      	ldr	r1, [r1, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	6022      	str	r2, [r4, #0]
 8005af6:	e003      	b.n	8005b00 <_printf_i+0x70>
 8005af8:	2a75      	cmp	r2, #117	; 0x75
 8005afa:	d020      	beq.n	8005b3e <_printf_i+0xae>
 8005afc:	2a78      	cmp	r2, #120	; 0x78
 8005afe:	d1de      	bne.n	8005abe <_printf_i+0x2e>
 8005b00:	0022      	movs	r2, r4
 8005b02:	2178      	movs	r1, #120	; 0x78
 8005b04:	3245      	adds	r2, #69	; 0x45
 8005b06:	7011      	strb	r1, [r2, #0]
 8005b08:	4a6c      	ldr	r2, [pc, #432]	; (8005cbc <_printf_i+0x22c>)
 8005b0a:	e030      	b.n	8005b6e <_printf_i+0xde>
 8005b0c:	000e      	movs	r6, r1
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	3642      	adds	r6, #66	; 0x42
 8005b12:	1d11      	adds	r1, r2, #4
 8005b14:	6019      	str	r1, [r3, #0]
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	7033      	strb	r3, [r6, #0]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e079      	b.n	8005c12 <_printf_i+0x182>
 8005b1e:	0649      	lsls	r1, r1, #25
 8005b20:	d5d9      	bpl.n	8005ad6 <_printf_i+0x46>
 8005b22:	1d11      	adds	r1, r2, #4
 8005b24:	6019      	str	r1, [r3, #0]
 8005b26:	2300      	movs	r3, #0
 8005b28:	5ed5      	ldrsh	r5, [r2, r3]
 8005b2a:	2d00      	cmp	r5, #0
 8005b2c:	da03      	bge.n	8005b36 <_printf_i+0xa6>
 8005b2e:	232d      	movs	r3, #45	; 0x2d
 8005b30:	9a04      	ldr	r2, [sp, #16]
 8005b32:	426d      	negs	r5, r5
 8005b34:	7013      	strb	r3, [r2, #0]
 8005b36:	4b62      	ldr	r3, [pc, #392]	; (8005cc0 <_printf_i+0x230>)
 8005b38:	270a      	movs	r7, #10
 8005b3a:	9303      	str	r3, [sp, #12]
 8005b3c:	e02f      	b.n	8005b9e <_printf_i+0x10e>
 8005b3e:	6820      	ldr	r0, [r4, #0]
 8005b40:	6819      	ldr	r1, [r3, #0]
 8005b42:	0605      	lsls	r5, r0, #24
 8005b44:	d503      	bpl.n	8005b4e <_printf_i+0xbe>
 8005b46:	1d08      	adds	r0, r1, #4
 8005b48:	6018      	str	r0, [r3, #0]
 8005b4a:	680d      	ldr	r5, [r1, #0]
 8005b4c:	e005      	b.n	8005b5a <_printf_i+0xca>
 8005b4e:	0640      	lsls	r0, r0, #25
 8005b50:	d5f9      	bpl.n	8005b46 <_printf_i+0xb6>
 8005b52:	680d      	ldr	r5, [r1, #0]
 8005b54:	1d08      	adds	r0, r1, #4
 8005b56:	6018      	str	r0, [r3, #0]
 8005b58:	b2ad      	uxth	r5, r5
 8005b5a:	4b59      	ldr	r3, [pc, #356]	; (8005cc0 <_printf_i+0x230>)
 8005b5c:	2708      	movs	r7, #8
 8005b5e:	9303      	str	r3, [sp, #12]
 8005b60:	2a6f      	cmp	r2, #111	; 0x6f
 8005b62:	d018      	beq.n	8005b96 <_printf_i+0x106>
 8005b64:	270a      	movs	r7, #10
 8005b66:	e016      	b.n	8005b96 <_printf_i+0x106>
 8005b68:	3145      	adds	r1, #69	; 0x45
 8005b6a:	700a      	strb	r2, [r1, #0]
 8005b6c:	4a54      	ldr	r2, [pc, #336]	; (8005cc0 <_printf_i+0x230>)
 8005b6e:	9203      	str	r2, [sp, #12]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	6821      	ldr	r1, [r4, #0]
 8005b74:	1d10      	adds	r0, r2, #4
 8005b76:	6018      	str	r0, [r3, #0]
 8005b78:	6815      	ldr	r5, [r2, #0]
 8005b7a:	0608      	lsls	r0, r1, #24
 8005b7c:	d522      	bpl.n	8005bc4 <_printf_i+0x134>
 8005b7e:	07cb      	lsls	r3, r1, #31
 8005b80:	d502      	bpl.n	8005b88 <_printf_i+0xf8>
 8005b82:	2320      	movs	r3, #32
 8005b84:	4319      	orrs	r1, r3
 8005b86:	6021      	str	r1, [r4, #0]
 8005b88:	2710      	movs	r7, #16
 8005b8a:	2d00      	cmp	r5, #0
 8005b8c:	d103      	bne.n	8005b96 <_printf_i+0x106>
 8005b8e:	2320      	movs	r3, #32
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	439a      	bics	r2, r3
 8005b94:	6022      	str	r2, [r4, #0]
 8005b96:	0023      	movs	r3, r4
 8005b98:	2200      	movs	r2, #0
 8005b9a:	3343      	adds	r3, #67	; 0x43
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	6863      	ldr	r3, [r4, #4]
 8005ba0:	60a3      	str	r3, [r4, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	db5c      	blt.n	8005c60 <_printf_i+0x1d0>
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	6821      	ldr	r1, [r4, #0]
 8005baa:	4391      	bics	r1, r2
 8005bac:	6021      	str	r1, [r4, #0]
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	d158      	bne.n	8005c64 <_printf_i+0x1d4>
 8005bb2:	9e04      	ldr	r6, [sp, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d064      	beq.n	8005c82 <_printf_i+0x1f2>
 8005bb8:	0026      	movs	r6, r4
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	3642      	adds	r6, #66	; 0x42
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	7033      	strb	r3, [r6, #0]
 8005bc2:	e05e      	b.n	8005c82 <_printf_i+0x1f2>
 8005bc4:	0648      	lsls	r0, r1, #25
 8005bc6:	d5da      	bpl.n	8005b7e <_printf_i+0xee>
 8005bc8:	b2ad      	uxth	r5, r5
 8005bca:	e7d8      	b.n	8005b7e <_printf_i+0xee>
 8005bcc:	6809      	ldr	r1, [r1, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	0608      	lsls	r0, r1, #24
 8005bd2:	d505      	bpl.n	8005be0 <_printf_i+0x150>
 8005bd4:	1d11      	adds	r1, r2, #4
 8005bd6:	6019      	str	r1, [r3, #0]
 8005bd8:	6813      	ldr	r3, [r2, #0]
 8005bda:	6962      	ldr	r2, [r4, #20]
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e006      	b.n	8005bee <_printf_i+0x15e>
 8005be0:	0649      	lsls	r1, r1, #25
 8005be2:	d5f7      	bpl.n	8005bd4 <_printf_i+0x144>
 8005be4:	1d11      	adds	r1, r2, #4
 8005be6:	6019      	str	r1, [r3, #0]
 8005be8:	6813      	ldr	r3, [r2, #0]
 8005bea:	8aa2      	ldrh	r2, [r4, #20]
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9e04      	ldr	r6, [sp, #16]
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	e054      	b.n	8005ca0 <_printf_i+0x210>
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	1d11      	adds	r1, r2, #4
 8005bfa:	6019      	str	r1, [r3, #0]
 8005bfc:	6816      	ldr	r6, [r2, #0]
 8005bfe:	2100      	movs	r1, #0
 8005c00:	6862      	ldr	r2, [r4, #4]
 8005c02:	0030      	movs	r0, r6
 8005c04:	f000 f85e 	bl	8005cc4 <memchr>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d001      	beq.n	8005c10 <_printf_i+0x180>
 8005c0c:	1b80      	subs	r0, r0, r6
 8005c0e:	6060      	str	r0, [r4, #4]
 8005c10:	6863      	ldr	r3, [r4, #4]
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	2300      	movs	r3, #0
 8005c16:	9a04      	ldr	r2, [sp, #16]
 8005c18:	7013      	strb	r3, [r2, #0]
 8005c1a:	e041      	b.n	8005ca0 <_printf_i+0x210>
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	0032      	movs	r2, r6
 8005c20:	9906      	ldr	r1, [sp, #24]
 8005c22:	9805      	ldr	r0, [sp, #20]
 8005c24:	9d07      	ldr	r5, [sp, #28]
 8005c26:	47a8      	blx	r5
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d043      	beq.n	8005cb4 <_printf_i+0x224>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	2500      	movs	r5, #0
 8005c30:	079b      	lsls	r3, r3, #30
 8005c32:	d40f      	bmi.n	8005c54 <_printf_i+0x1c4>
 8005c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c36:	68e0      	ldr	r0, [r4, #12]
 8005c38:	4298      	cmp	r0, r3
 8005c3a:	da3d      	bge.n	8005cb8 <_printf_i+0x228>
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	e03b      	b.n	8005cb8 <_printf_i+0x228>
 8005c40:	0022      	movs	r2, r4
 8005c42:	2301      	movs	r3, #1
 8005c44:	3219      	adds	r2, #25
 8005c46:	9906      	ldr	r1, [sp, #24]
 8005c48:	9805      	ldr	r0, [sp, #20]
 8005c4a:	9e07      	ldr	r6, [sp, #28]
 8005c4c:	47b0      	blx	r6
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	d030      	beq.n	8005cb4 <_printf_i+0x224>
 8005c52:	3501      	adds	r5, #1
 8005c54:	68e3      	ldr	r3, [r4, #12]
 8005c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	429d      	cmp	r5, r3
 8005c5c:	dbf0      	blt.n	8005c40 <_printf_i+0x1b0>
 8005c5e:	e7e9      	b.n	8005c34 <_printf_i+0x1a4>
 8005c60:	2d00      	cmp	r5, #0
 8005c62:	d0a9      	beq.n	8005bb8 <_printf_i+0x128>
 8005c64:	9e04      	ldr	r6, [sp, #16]
 8005c66:	0028      	movs	r0, r5
 8005c68:	0039      	movs	r1, r7
 8005c6a:	f7fa faef 	bl	800024c <__aeabi_uidivmod>
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	3e01      	subs	r6, #1
 8005c72:	5c5b      	ldrb	r3, [r3, r1]
 8005c74:	0028      	movs	r0, r5
 8005c76:	7033      	strb	r3, [r6, #0]
 8005c78:	0039      	movs	r1, r7
 8005c7a:	f7fa fa61 	bl	8000140 <__udivsi3>
 8005c7e:	1e05      	subs	r5, r0, #0
 8005c80:	d1f1      	bne.n	8005c66 <_printf_i+0x1d6>
 8005c82:	2f08      	cmp	r7, #8
 8005c84:	d109      	bne.n	8005c9a <_printf_i+0x20a>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	07db      	lsls	r3, r3, #31
 8005c8a:	d506      	bpl.n	8005c9a <_printf_i+0x20a>
 8005c8c:	6863      	ldr	r3, [r4, #4]
 8005c8e:	6922      	ldr	r2, [r4, #16]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	dc02      	bgt.n	8005c9a <_printf_i+0x20a>
 8005c94:	2330      	movs	r3, #48	; 0x30
 8005c96:	3e01      	subs	r6, #1
 8005c98:	7033      	strb	r3, [r6, #0]
 8005c9a:	9b04      	ldr	r3, [sp, #16]
 8005c9c:	1b9b      	subs	r3, r3, r6
 8005c9e:	6123      	str	r3, [r4, #16]
 8005ca0:	9b07      	ldr	r3, [sp, #28]
 8005ca2:	aa09      	add	r2, sp, #36	; 0x24
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	0021      	movs	r1, r4
 8005ca8:	9b06      	ldr	r3, [sp, #24]
 8005caa:	9805      	ldr	r0, [sp, #20]
 8005cac:	f7ff fe82 	bl	80059b4 <_printf_common>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d1b3      	bne.n	8005c1c <_printf_i+0x18c>
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	4240      	negs	r0, r0
 8005cb8:	b00b      	add	sp, #44	; 0x2c
 8005cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cbc:	08006619 	.word	0x08006619
 8005cc0:	08006608 	.word	0x08006608

08005cc4 <memchr>:
 8005cc4:	b2c9      	uxtb	r1, r1
 8005cc6:	1882      	adds	r2, r0, r2
 8005cc8:	4290      	cmp	r0, r2
 8005cca:	d101      	bne.n	8005cd0 <memchr+0xc>
 8005ccc:	2000      	movs	r0, #0
 8005cce:	4770      	bx	lr
 8005cd0:	7803      	ldrb	r3, [r0, #0]
 8005cd2:	428b      	cmp	r3, r1
 8005cd4:	d0fb      	beq.n	8005cce <memchr+0xa>
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	e7f6      	b.n	8005cc8 <memchr+0x4>

08005cda <memmove>:
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	4288      	cmp	r0, r1
 8005cde:	d902      	bls.n	8005ce6 <memmove+0xc>
 8005ce0:	188b      	adds	r3, r1, r2
 8005ce2:	4298      	cmp	r0, r3
 8005ce4:	d308      	bcc.n	8005cf8 <memmove+0x1e>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d007      	beq.n	8005cfc <memmove+0x22>
 8005cec:	5ccc      	ldrb	r4, [r1, r3]
 8005cee:	54c4      	strb	r4, [r0, r3]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	e7f9      	b.n	8005ce8 <memmove+0xe>
 8005cf4:	5c8b      	ldrb	r3, [r1, r2]
 8005cf6:	5483      	strb	r3, [r0, r2]
 8005cf8:	3a01      	subs	r2, #1
 8005cfa:	d2fb      	bcs.n	8005cf4 <memmove+0x1a>
 8005cfc:	bd10      	pop	{r4, pc}
	...

08005d00 <_free_r>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	0005      	movs	r5, r0
 8005d04:	2900      	cmp	r1, #0
 8005d06:	d010      	beq.n	8005d2a <_free_r+0x2a>
 8005d08:	1f0c      	subs	r4, r1, #4
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da00      	bge.n	8005d12 <_free_r+0x12>
 8005d10:	18e4      	adds	r4, r4, r3
 8005d12:	0028      	movs	r0, r5
 8005d14:	f000 f8d4 	bl	8005ec0 <__malloc_lock>
 8005d18:	4a1d      	ldr	r2, [pc, #116]	; (8005d90 <_free_r+0x90>)
 8005d1a:	6813      	ldr	r3, [r2, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d105      	bne.n	8005d2c <_free_r+0x2c>
 8005d20:	6063      	str	r3, [r4, #4]
 8005d22:	6014      	str	r4, [r2, #0]
 8005d24:	0028      	movs	r0, r5
 8005d26:	f000 f8cc 	bl	8005ec2 <__malloc_unlock>
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d909      	bls.n	8005d44 <_free_r+0x44>
 8005d30:	6821      	ldr	r1, [r4, #0]
 8005d32:	1860      	adds	r0, r4, r1
 8005d34:	4283      	cmp	r3, r0
 8005d36:	d1f3      	bne.n	8005d20 <_free_r+0x20>
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	1841      	adds	r1, r0, r1
 8005d3e:	6021      	str	r1, [r4, #0]
 8005d40:	e7ee      	b.n	8005d20 <_free_r+0x20>
 8005d42:	0013      	movs	r3, r2
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d001      	beq.n	8005d4e <_free_r+0x4e>
 8005d4a:	42a2      	cmp	r2, r4
 8005d4c:	d9f9      	bls.n	8005d42 <_free_r+0x42>
 8005d4e:	6819      	ldr	r1, [r3, #0]
 8005d50:	1858      	adds	r0, r3, r1
 8005d52:	42a0      	cmp	r0, r4
 8005d54:	d10b      	bne.n	8005d6e <_free_r+0x6e>
 8005d56:	6820      	ldr	r0, [r4, #0]
 8005d58:	1809      	adds	r1, r1, r0
 8005d5a:	1858      	adds	r0, r3, r1
 8005d5c:	6019      	str	r1, [r3, #0]
 8005d5e:	4282      	cmp	r2, r0
 8005d60:	d1e0      	bne.n	8005d24 <_free_r+0x24>
 8005d62:	6810      	ldr	r0, [r2, #0]
 8005d64:	6852      	ldr	r2, [r2, #4]
 8005d66:	1841      	adds	r1, r0, r1
 8005d68:	6019      	str	r1, [r3, #0]
 8005d6a:	605a      	str	r2, [r3, #4]
 8005d6c:	e7da      	b.n	8005d24 <_free_r+0x24>
 8005d6e:	42a0      	cmp	r0, r4
 8005d70:	d902      	bls.n	8005d78 <_free_r+0x78>
 8005d72:	230c      	movs	r3, #12
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	e7d5      	b.n	8005d24 <_free_r+0x24>
 8005d78:	6821      	ldr	r1, [r4, #0]
 8005d7a:	1860      	adds	r0, r4, r1
 8005d7c:	4282      	cmp	r2, r0
 8005d7e:	d103      	bne.n	8005d88 <_free_r+0x88>
 8005d80:	6810      	ldr	r0, [r2, #0]
 8005d82:	6852      	ldr	r2, [r2, #4]
 8005d84:	1841      	adds	r1, r0, r1
 8005d86:	6021      	str	r1, [r4, #0]
 8005d88:	6062      	str	r2, [r4, #4]
 8005d8a:	605c      	str	r4, [r3, #4]
 8005d8c:	e7ca      	b.n	8005d24 <_free_r+0x24>
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	200002ec 	.word	0x200002ec

08005d94 <_malloc_r>:
 8005d94:	2303      	movs	r3, #3
 8005d96:	b570      	push	{r4, r5, r6, lr}
 8005d98:	1ccd      	adds	r5, r1, #3
 8005d9a:	439d      	bics	r5, r3
 8005d9c:	3508      	adds	r5, #8
 8005d9e:	0006      	movs	r6, r0
 8005da0:	2d0c      	cmp	r5, #12
 8005da2:	d21e      	bcs.n	8005de2 <_malloc_r+0x4e>
 8005da4:	250c      	movs	r5, #12
 8005da6:	42a9      	cmp	r1, r5
 8005da8:	d81d      	bhi.n	8005de6 <_malloc_r+0x52>
 8005daa:	0030      	movs	r0, r6
 8005dac:	f000 f888 	bl	8005ec0 <__malloc_lock>
 8005db0:	4a25      	ldr	r2, [pc, #148]	; (8005e48 <_malloc_r+0xb4>)
 8005db2:	6814      	ldr	r4, [r2, #0]
 8005db4:	0021      	movs	r1, r4
 8005db6:	2900      	cmp	r1, #0
 8005db8:	d119      	bne.n	8005dee <_malloc_r+0x5a>
 8005dba:	4c24      	ldr	r4, [pc, #144]	; (8005e4c <_malloc_r+0xb8>)
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <_malloc_r+0x36>
 8005dc2:	0030      	movs	r0, r6
 8005dc4:	f000 f86a 	bl	8005e9c <_sbrk_r>
 8005dc8:	6020      	str	r0, [r4, #0]
 8005dca:	0029      	movs	r1, r5
 8005dcc:	0030      	movs	r0, r6
 8005dce:	f000 f865 	bl	8005e9c <_sbrk_r>
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	d12c      	bne.n	8005e30 <_malloc_r+0x9c>
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	0030      	movs	r0, r6
 8005dda:	6033      	str	r3, [r6, #0]
 8005ddc:	f000 f871 	bl	8005ec2 <__malloc_unlock>
 8005de0:	e003      	b.n	8005dea <_malloc_r+0x56>
 8005de2:	2d00      	cmp	r5, #0
 8005de4:	dadf      	bge.n	8005da6 <_malloc_r+0x12>
 8005de6:	230c      	movs	r3, #12
 8005de8:	6033      	str	r3, [r6, #0]
 8005dea:	2000      	movs	r0, #0
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
 8005dee:	680b      	ldr	r3, [r1, #0]
 8005df0:	1b5b      	subs	r3, r3, r5
 8005df2:	d41a      	bmi.n	8005e2a <_malloc_r+0x96>
 8005df4:	2b0b      	cmp	r3, #11
 8005df6:	d903      	bls.n	8005e00 <_malloc_r+0x6c>
 8005df8:	600b      	str	r3, [r1, #0]
 8005dfa:	18cc      	adds	r4, r1, r3
 8005dfc:	6025      	str	r5, [r4, #0]
 8005dfe:	e003      	b.n	8005e08 <_malloc_r+0x74>
 8005e00:	428c      	cmp	r4, r1
 8005e02:	d10e      	bne.n	8005e22 <_malloc_r+0x8e>
 8005e04:	6863      	ldr	r3, [r4, #4]
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	0030      	movs	r0, r6
 8005e0a:	f000 f85a 	bl	8005ec2 <__malloc_unlock>
 8005e0e:	0020      	movs	r0, r4
 8005e10:	2207      	movs	r2, #7
 8005e12:	300b      	adds	r0, #11
 8005e14:	1d23      	adds	r3, r4, #4
 8005e16:	4390      	bics	r0, r2
 8005e18:	1ac3      	subs	r3, r0, r3
 8005e1a:	d0e7      	beq.n	8005dec <_malloc_r+0x58>
 8005e1c:	425a      	negs	r2, r3
 8005e1e:	50e2      	str	r2, [r4, r3]
 8005e20:	e7e4      	b.n	8005dec <_malloc_r+0x58>
 8005e22:	684b      	ldr	r3, [r1, #4]
 8005e24:	6063      	str	r3, [r4, #4]
 8005e26:	000c      	movs	r4, r1
 8005e28:	e7ee      	b.n	8005e08 <_malloc_r+0x74>
 8005e2a:	000c      	movs	r4, r1
 8005e2c:	6849      	ldr	r1, [r1, #4]
 8005e2e:	e7c2      	b.n	8005db6 <_malloc_r+0x22>
 8005e30:	2303      	movs	r3, #3
 8005e32:	1cc4      	adds	r4, r0, #3
 8005e34:	439c      	bics	r4, r3
 8005e36:	42a0      	cmp	r0, r4
 8005e38:	d0e0      	beq.n	8005dfc <_malloc_r+0x68>
 8005e3a:	1a21      	subs	r1, r4, r0
 8005e3c:	0030      	movs	r0, r6
 8005e3e:	f000 f82d 	bl	8005e9c <_sbrk_r>
 8005e42:	1c43      	adds	r3, r0, #1
 8005e44:	d1da      	bne.n	8005dfc <_malloc_r+0x68>
 8005e46:	e7c6      	b.n	8005dd6 <_malloc_r+0x42>
 8005e48:	200002ec 	.word	0x200002ec
 8005e4c:	200002f0 	.word	0x200002f0

08005e50 <_realloc_r>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	0007      	movs	r7, r0
 8005e54:	000d      	movs	r5, r1
 8005e56:	0016      	movs	r6, r2
 8005e58:	2900      	cmp	r1, #0
 8005e5a:	d105      	bne.n	8005e68 <_realloc_r+0x18>
 8005e5c:	0011      	movs	r1, r2
 8005e5e:	f7ff ff99 	bl	8005d94 <_malloc_r>
 8005e62:	0004      	movs	r4, r0
 8005e64:	0020      	movs	r0, r4
 8005e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	d103      	bne.n	8005e74 <_realloc_r+0x24>
 8005e6c:	f7ff ff48 	bl	8005d00 <_free_r>
 8005e70:	0034      	movs	r4, r6
 8005e72:	e7f7      	b.n	8005e64 <_realloc_r+0x14>
 8005e74:	f000 f826 	bl	8005ec4 <_malloc_usable_size_r>
 8005e78:	002c      	movs	r4, r5
 8005e7a:	4286      	cmp	r6, r0
 8005e7c:	d9f2      	bls.n	8005e64 <_realloc_r+0x14>
 8005e7e:	0031      	movs	r1, r6
 8005e80:	0038      	movs	r0, r7
 8005e82:	f7ff ff87 	bl	8005d94 <_malloc_r>
 8005e86:	1e04      	subs	r4, r0, #0
 8005e88:	d0ec      	beq.n	8005e64 <_realloc_r+0x14>
 8005e8a:	0029      	movs	r1, r5
 8005e8c:	0032      	movs	r2, r6
 8005e8e:	f7ff fbf7 	bl	8005680 <memcpy>
 8005e92:	0029      	movs	r1, r5
 8005e94:	0038      	movs	r0, r7
 8005e96:	f7ff ff33 	bl	8005d00 <_free_r>
 8005e9a:	e7e3      	b.n	8005e64 <_realloc_r+0x14>

08005e9c <_sbrk_r>:
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	b570      	push	{r4, r5, r6, lr}
 8005ea0:	4c06      	ldr	r4, [pc, #24]	; (8005ebc <_sbrk_r+0x20>)
 8005ea2:	0005      	movs	r5, r0
 8005ea4:	0008      	movs	r0, r1
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	f7ff fb62 	bl	8005570 <_sbrk>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d103      	bne.n	8005eb8 <_sbrk_r+0x1c>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d000      	beq.n	8005eb8 <_sbrk_r+0x1c>
 8005eb6:	602b      	str	r3, [r5, #0]
 8005eb8:	bd70      	pop	{r4, r5, r6, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	200019cc 	.word	0x200019cc

08005ec0 <__malloc_lock>:
 8005ec0:	4770      	bx	lr

08005ec2 <__malloc_unlock>:
 8005ec2:	4770      	bx	lr

08005ec4 <_malloc_usable_size_r>:
 8005ec4:	1f0b      	subs	r3, r1, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	1f18      	subs	r0, r3, #4
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	da01      	bge.n	8005ed2 <_malloc_usable_size_r+0xe>
 8005ece:	580b      	ldr	r3, [r1, r0]
 8005ed0:	18c0      	adds	r0, r0, r3
 8005ed2:	4770      	bx	lr

08005ed4 <_init>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eda:	bc08      	pop	{r3}
 8005edc:	469e      	mov	lr, r3
 8005ede:	4770      	bx	lr

08005ee0 <_fini>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr
