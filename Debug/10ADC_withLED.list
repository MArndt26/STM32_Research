
10ADC_withLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800446c  0800446c  0001446c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08004598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ed0  20000088  08004620  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000f58  08004620  00020f58  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013451  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002fa2  00000000  00000000  00033501  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b5c1  00000000  00000000  000364a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bf0  00000000  00000000  00041a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001138  00000000  00000000  00042658  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006f41  00000000  00000000  00043790  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003884  00000000  00000000  0004a6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004df55  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000273c  00000000  00000000  0004dfd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004454 	.word	0x08004454

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08004454 	.word	0x08004454

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_d2uiz>:
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	2200      	movs	r2, #0
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <__aeabi_d2uiz+0x38>)
 800025e:	0004      	movs	r4, r0
 8000260:	000d      	movs	r5, r1
 8000262:	f000 fe4d 	bl	8000f00 <__aeabi_dcmpge>
 8000266:	2800      	cmp	r0, #0
 8000268:	d104      	bne.n	8000274 <__aeabi_d2uiz+0x1c>
 800026a:	0020      	movs	r0, r4
 800026c:	0029      	movs	r1, r5
 800026e:	f000 fda7 	bl	8000dc0 <__aeabi_d2iz>
 8000272:	bd70      	pop	{r4, r5, r6, pc}
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <__aeabi_d2uiz+0x38>)
 8000276:	2200      	movs	r2, #0
 8000278:	0020      	movs	r0, r4
 800027a:	0029      	movs	r1, r5
 800027c:	f000 fa8a 	bl	8000794 <__aeabi_dsub>
 8000280:	f000 fd9e 	bl	8000dc0 <__aeabi_d2iz>
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	061b      	lsls	r3, r3, #24
 8000288:	469c      	mov	ip, r3
 800028a:	4460      	add	r0, ip
 800028c:	e7f1      	b.n	8000272 <__aeabi_d2uiz+0x1a>
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	41e00000 	.word	0x41e00000

08000294 <__aeabi_dmul>:
 8000294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000296:	4657      	mov	r7, sl
 8000298:	4645      	mov	r5, r8
 800029a:	46de      	mov	lr, fp
 800029c:	464e      	mov	r6, r9
 800029e:	b5e0      	push	{r5, r6, r7, lr}
 80002a0:	030c      	lsls	r4, r1, #12
 80002a2:	4698      	mov	r8, r3
 80002a4:	004e      	lsls	r6, r1, #1
 80002a6:	0b23      	lsrs	r3, r4, #12
 80002a8:	b087      	sub	sp, #28
 80002aa:	0007      	movs	r7, r0
 80002ac:	4692      	mov	sl, r2
 80002ae:	469b      	mov	fp, r3
 80002b0:	0d76      	lsrs	r6, r6, #21
 80002b2:	0fcd      	lsrs	r5, r1, #31
 80002b4:	2e00      	cmp	r6, #0
 80002b6:	d06b      	beq.n	8000390 <__aeabi_dmul+0xfc>
 80002b8:	4b6d      	ldr	r3, [pc, #436]	; (8000470 <__aeabi_dmul+0x1dc>)
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d035      	beq.n	800032a <__aeabi_dmul+0x96>
 80002be:	2480      	movs	r4, #128	; 0x80
 80002c0:	465b      	mov	r3, fp
 80002c2:	0f42      	lsrs	r2, r0, #29
 80002c4:	0424      	lsls	r4, r4, #16
 80002c6:	00db      	lsls	r3, r3, #3
 80002c8:	4314      	orrs	r4, r2
 80002ca:	431c      	orrs	r4, r3
 80002cc:	00c3      	lsls	r3, r0, #3
 80002ce:	4699      	mov	r9, r3
 80002d0:	4b68      	ldr	r3, [pc, #416]	; (8000474 <__aeabi_dmul+0x1e0>)
 80002d2:	46a3      	mov	fp, r4
 80002d4:	469c      	mov	ip, r3
 80002d6:	2300      	movs	r3, #0
 80002d8:	2700      	movs	r7, #0
 80002da:	4466      	add	r6, ip
 80002dc:	9302      	str	r3, [sp, #8]
 80002de:	4643      	mov	r3, r8
 80002e0:	031c      	lsls	r4, r3, #12
 80002e2:	005a      	lsls	r2, r3, #1
 80002e4:	0fdb      	lsrs	r3, r3, #31
 80002e6:	4650      	mov	r0, sl
 80002e8:	0b24      	lsrs	r4, r4, #12
 80002ea:	0d52      	lsrs	r2, r2, #21
 80002ec:	4698      	mov	r8, r3
 80002ee:	d100      	bne.n	80002f2 <__aeabi_dmul+0x5e>
 80002f0:	e076      	b.n	80003e0 <__aeabi_dmul+0x14c>
 80002f2:	4b5f      	ldr	r3, [pc, #380]	; (8000470 <__aeabi_dmul+0x1dc>)
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d06d      	beq.n	80003d4 <__aeabi_dmul+0x140>
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	0f41      	lsrs	r1, r0, #29
 80002fc:	041b      	lsls	r3, r3, #16
 80002fe:	430b      	orrs	r3, r1
 8000300:	495c      	ldr	r1, [pc, #368]	; (8000474 <__aeabi_dmul+0x1e0>)
 8000302:	00e4      	lsls	r4, r4, #3
 8000304:	468c      	mov	ip, r1
 8000306:	431c      	orrs	r4, r3
 8000308:	00c3      	lsls	r3, r0, #3
 800030a:	2000      	movs	r0, #0
 800030c:	4462      	add	r2, ip
 800030e:	4641      	mov	r1, r8
 8000310:	18b6      	adds	r6, r6, r2
 8000312:	4069      	eors	r1, r5
 8000314:	1c72      	adds	r2, r6, #1
 8000316:	9101      	str	r1, [sp, #4]
 8000318:	4694      	mov	ip, r2
 800031a:	4307      	orrs	r7, r0
 800031c:	2f0f      	cmp	r7, #15
 800031e:	d900      	bls.n	8000322 <__aeabi_dmul+0x8e>
 8000320:	e0b0      	b.n	8000484 <__aeabi_dmul+0x1f0>
 8000322:	4a55      	ldr	r2, [pc, #340]	; (8000478 <__aeabi_dmul+0x1e4>)
 8000324:	00bf      	lsls	r7, r7, #2
 8000326:	59d2      	ldr	r2, [r2, r7]
 8000328:	4697      	mov	pc, r2
 800032a:	465b      	mov	r3, fp
 800032c:	4303      	orrs	r3, r0
 800032e:	4699      	mov	r9, r3
 8000330:	d000      	beq.n	8000334 <__aeabi_dmul+0xa0>
 8000332:	e087      	b.n	8000444 <__aeabi_dmul+0x1b0>
 8000334:	2300      	movs	r3, #0
 8000336:	469b      	mov	fp, r3
 8000338:	3302      	adds	r3, #2
 800033a:	2708      	movs	r7, #8
 800033c:	9302      	str	r3, [sp, #8]
 800033e:	e7ce      	b.n	80002de <__aeabi_dmul+0x4a>
 8000340:	4642      	mov	r2, r8
 8000342:	9201      	str	r2, [sp, #4]
 8000344:	2802      	cmp	r0, #2
 8000346:	d067      	beq.n	8000418 <__aeabi_dmul+0x184>
 8000348:	2803      	cmp	r0, #3
 800034a:	d100      	bne.n	800034e <__aeabi_dmul+0xba>
 800034c:	e20e      	b.n	800076c <__aeabi_dmul+0x4d8>
 800034e:	2801      	cmp	r0, #1
 8000350:	d000      	beq.n	8000354 <__aeabi_dmul+0xc0>
 8000352:	e162      	b.n	800061a <__aeabi_dmul+0x386>
 8000354:	2300      	movs	r3, #0
 8000356:	2400      	movs	r4, #0
 8000358:	2200      	movs	r2, #0
 800035a:	4699      	mov	r9, r3
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	4001      	ands	r1, r0
 8000360:	b2cd      	uxtb	r5, r1
 8000362:	2100      	movs	r1, #0
 8000364:	0312      	lsls	r2, r2, #12
 8000366:	0d0b      	lsrs	r3, r1, #20
 8000368:	0b12      	lsrs	r2, r2, #12
 800036a:	051b      	lsls	r3, r3, #20
 800036c:	4313      	orrs	r3, r2
 800036e:	4a43      	ldr	r2, [pc, #268]	; (800047c <__aeabi_dmul+0x1e8>)
 8000370:	0524      	lsls	r4, r4, #20
 8000372:	4013      	ands	r3, r2
 8000374:	431c      	orrs	r4, r3
 8000376:	0064      	lsls	r4, r4, #1
 8000378:	07ed      	lsls	r5, r5, #31
 800037a:	0864      	lsrs	r4, r4, #1
 800037c:	432c      	orrs	r4, r5
 800037e:	4648      	mov	r0, r9
 8000380:	0021      	movs	r1, r4
 8000382:	b007      	add	sp, #28
 8000384:	bc3c      	pop	{r2, r3, r4, r5}
 8000386:	4690      	mov	r8, r2
 8000388:	4699      	mov	r9, r3
 800038a:	46a2      	mov	sl, r4
 800038c:	46ab      	mov	fp, r5
 800038e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000390:	4303      	orrs	r3, r0
 8000392:	4699      	mov	r9, r3
 8000394:	d04f      	beq.n	8000436 <__aeabi_dmul+0x1a2>
 8000396:	465b      	mov	r3, fp
 8000398:	2b00      	cmp	r3, #0
 800039a:	d100      	bne.n	800039e <__aeabi_dmul+0x10a>
 800039c:	e189      	b.n	80006b2 <__aeabi_dmul+0x41e>
 800039e:	4658      	mov	r0, fp
 80003a0:	f000 fdb8 	bl	8000f14 <__clzsi2>
 80003a4:	0003      	movs	r3, r0
 80003a6:	3b0b      	subs	r3, #11
 80003a8:	2b1c      	cmp	r3, #28
 80003aa:	dd00      	ble.n	80003ae <__aeabi_dmul+0x11a>
 80003ac:	e17a      	b.n	80006a4 <__aeabi_dmul+0x410>
 80003ae:	221d      	movs	r2, #29
 80003b0:	1ad3      	subs	r3, r2, r3
 80003b2:	003a      	movs	r2, r7
 80003b4:	0001      	movs	r1, r0
 80003b6:	465c      	mov	r4, fp
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	3908      	subs	r1, #8
 80003bc:	408c      	lsls	r4, r1
 80003be:	0013      	movs	r3, r2
 80003c0:	408f      	lsls	r7, r1
 80003c2:	4323      	orrs	r3, r4
 80003c4:	469b      	mov	fp, r3
 80003c6:	46b9      	mov	r9, r7
 80003c8:	2300      	movs	r3, #0
 80003ca:	4e2d      	ldr	r6, [pc, #180]	; (8000480 <__aeabi_dmul+0x1ec>)
 80003cc:	2700      	movs	r7, #0
 80003ce:	1a36      	subs	r6, r6, r0
 80003d0:	9302      	str	r3, [sp, #8]
 80003d2:	e784      	b.n	80002de <__aeabi_dmul+0x4a>
 80003d4:	4653      	mov	r3, sl
 80003d6:	4323      	orrs	r3, r4
 80003d8:	d12a      	bne.n	8000430 <__aeabi_dmul+0x19c>
 80003da:	2400      	movs	r4, #0
 80003dc:	2002      	movs	r0, #2
 80003de:	e796      	b.n	800030e <__aeabi_dmul+0x7a>
 80003e0:	4653      	mov	r3, sl
 80003e2:	4323      	orrs	r3, r4
 80003e4:	d020      	beq.n	8000428 <__aeabi_dmul+0x194>
 80003e6:	2c00      	cmp	r4, #0
 80003e8:	d100      	bne.n	80003ec <__aeabi_dmul+0x158>
 80003ea:	e157      	b.n	800069c <__aeabi_dmul+0x408>
 80003ec:	0020      	movs	r0, r4
 80003ee:	f000 fd91 	bl	8000f14 <__clzsi2>
 80003f2:	0003      	movs	r3, r0
 80003f4:	3b0b      	subs	r3, #11
 80003f6:	2b1c      	cmp	r3, #28
 80003f8:	dd00      	ble.n	80003fc <__aeabi_dmul+0x168>
 80003fa:	e149      	b.n	8000690 <__aeabi_dmul+0x3fc>
 80003fc:	211d      	movs	r1, #29
 80003fe:	1acb      	subs	r3, r1, r3
 8000400:	4651      	mov	r1, sl
 8000402:	0002      	movs	r2, r0
 8000404:	40d9      	lsrs	r1, r3
 8000406:	4653      	mov	r3, sl
 8000408:	3a08      	subs	r2, #8
 800040a:	4094      	lsls	r4, r2
 800040c:	4093      	lsls	r3, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <__aeabi_dmul+0x1ec>)
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	2000      	movs	r0, #0
 8000416:	e77a      	b.n	800030e <__aeabi_dmul+0x7a>
 8000418:	2501      	movs	r5, #1
 800041a:	9b01      	ldr	r3, [sp, #4]
 800041c:	4c14      	ldr	r4, [pc, #80]	; (8000470 <__aeabi_dmul+0x1dc>)
 800041e:	401d      	ands	r5, r3
 8000420:	2300      	movs	r3, #0
 8000422:	2200      	movs	r2, #0
 8000424:	4699      	mov	r9, r3
 8000426:	e79c      	b.n	8000362 <__aeabi_dmul+0xce>
 8000428:	2400      	movs	r4, #0
 800042a:	2200      	movs	r2, #0
 800042c:	2001      	movs	r0, #1
 800042e:	e76e      	b.n	800030e <__aeabi_dmul+0x7a>
 8000430:	4653      	mov	r3, sl
 8000432:	2003      	movs	r0, #3
 8000434:	e76b      	b.n	800030e <__aeabi_dmul+0x7a>
 8000436:	2300      	movs	r3, #0
 8000438:	469b      	mov	fp, r3
 800043a:	3301      	adds	r3, #1
 800043c:	2704      	movs	r7, #4
 800043e:	2600      	movs	r6, #0
 8000440:	9302      	str	r3, [sp, #8]
 8000442:	e74c      	b.n	80002de <__aeabi_dmul+0x4a>
 8000444:	2303      	movs	r3, #3
 8000446:	4681      	mov	r9, r0
 8000448:	270c      	movs	r7, #12
 800044a:	9302      	str	r3, [sp, #8]
 800044c:	e747      	b.n	80002de <__aeabi_dmul+0x4a>
 800044e:	2280      	movs	r2, #128	; 0x80
 8000450:	2300      	movs	r3, #0
 8000452:	2500      	movs	r5, #0
 8000454:	0312      	lsls	r2, r2, #12
 8000456:	4699      	mov	r9, r3
 8000458:	4c05      	ldr	r4, [pc, #20]	; (8000470 <__aeabi_dmul+0x1dc>)
 800045a:	e782      	b.n	8000362 <__aeabi_dmul+0xce>
 800045c:	465c      	mov	r4, fp
 800045e:	464b      	mov	r3, r9
 8000460:	9802      	ldr	r0, [sp, #8]
 8000462:	e76f      	b.n	8000344 <__aeabi_dmul+0xb0>
 8000464:	465c      	mov	r4, fp
 8000466:	464b      	mov	r3, r9
 8000468:	9501      	str	r5, [sp, #4]
 800046a:	9802      	ldr	r0, [sp, #8]
 800046c:	e76a      	b.n	8000344 <__aeabi_dmul+0xb0>
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	000007ff 	.word	0x000007ff
 8000474:	fffffc01 	.word	0xfffffc01
 8000478:	0800448c 	.word	0x0800448c
 800047c:	800fffff 	.word	0x800fffff
 8000480:	fffffc0d 	.word	0xfffffc0d
 8000484:	464a      	mov	r2, r9
 8000486:	4649      	mov	r1, r9
 8000488:	0c17      	lsrs	r7, r2, #16
 800048a:	0c1a      	lsrs	r2, r3, #16
 800048c:	041b      	lsls	r3, r3, #16
 800048e:	0c1b      	lsrs	r3, r3, #16
 8000490:	0408      	lsls	r0, r1, #16
 8000492:	0019      	movs	r1, r3
 8000494:	0c00      	lsrs	r0, r0, #16
 8000496:	4341      	muls	r1, r0
 8000498:	0015      	movs	r5, r2
 800049a:	4688      	mov	r8, r1
 800049c:	0019      	movs	r1, r3
 800049e:	437d      	muls	r5, r7
 80004a0:	4379      	muls	r1, r7
 80004a2:	9503      	str	r5, [sp, #12]
 80004a4:	4689      	mov	r9, r1
 80004a6:	0029      	movs	r1, r5
 80004a8:	0015      	movs	r5, r2
 80004aa:	4345      	muls	r5, r0
 80004ac:	444d      	add	r5, r9
 80004ae:	9502      	str	r5, [sp, #8]
 80004b0:	4645      	mov	r5, r8
 80004b2:	0c2d      	lsrs	r5, r5, #16
 80004b4:	46aa      	mov	sl, r5
 80004b6:	9d02      	ldr	r5, [sp, #8]
 80004b8:	4455      	add	r5, sl
 80004ba:	45a9      	cmp	r9, r5
 80004bc:	d906      	bls.n	80004cc <__aeabi_dmul+0x238>
 80004be:	468a      	mov	sl, r1
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0249      	lsls	r1, r1, #9
 80004c4:	4689      	mov	r9, r1
 80004c6:	44ca      	add	sl, r9
 80004c8:	4651      	mov	r1, sl
 80004ca:	9103      	str	r1, [sp, #12]
 80004cc:	0c29      	lsrs	r1, r5, #16
 80004ce:	9104      	str	r1, [sp, #16]
 80004d0:	4641      	mov	r1, r8
 80004d2:	0409      	lsls	r1, r1, #16
 80004d4:	042d      	lsls	r5, r5, #16
 80004d6:	0c09      	lsrs	r1, r1, #16
 80004d8:	4688      	mov	r8, r1
 80004da:	0029      	movs	r1, r5
 80004dc:	0c25      	lsrs	r5, r4, #16
 80004de:	0424      	lsls	r4, r4, #16
 80004e0:	4441      	add	r1, r8
 80004e2:	0c24      	lsrs	r4, r4, #16
 80004e4:	9105      	str	r1, [sp, #20]
 80004e6:	0021      	movs	r1, r4
 80004e8:	4341      	muls	r1, r0
 80004ea:	4688      	mov	r8, r1
 80004ec:	0021      	movs	r1, r4
 80004ee:	4379      	muls	r1, r7
 80004f0:	468a      	mov	sl, r1
 80004f2:	4368      	muls	r0, r5
 80004f4:	4641      	mov	r1, r8
 80004f6:	4450      	add	r0, sl
 80004f8:	4681      	mov	r9, r0
 80004fa:	0c08      	lsrs	r0, r1, #16
 80004fc:	4448      	add	r0, r9
 80004fe:	436f      	muls	r7, r5
 8000500:	4582      	cmp	sl, r0
 8000502:	d903      	bls.n	800050c <__aeabi_dmul+0x278>
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	0249      	lsls	r1, r1, #9
 8000508:	4689      	mov	r9, r1
 800050a:	444f      	add	r7, r9
 800050c:	0c01      	lsrs	r1, r0, #16
 800050e:	4689      	mov	r9, r1
 8000510:	0039      	movs	r1, r7
 8000512:	4449      	add	r1, r9
 8000514:	9102      	str	r1, [sp, #8]
 8000516:	4641      	mov	r1, r8
 8000518:	040f      	lsls	r7, r1, #16
 800051a:	9904      	ldr	r1, [sp, #16]
 800051c:	0c3f      	lsrs	r7, r7, #16
 800051e:	4688      	mov	r8, r1
 8000520:	0400      	lsls	r0, r0, #16
 8000522:	19c0      	adds	r0, r0, r7
 8000524:	4480      	add	r8, r0
 8000526:	4641      	mov	r1, r8
 8000528:	9104      	str	r1, [sp, #16]
 800052a:	4659      	mov	r1, fp
 800052c:	0c0f      	lsrs	r7, r1, #16
 800052e:	0409      	lsls	r1, r1, #16
 8000530:	0c09      	lsrs	r1, r1, #16
 8000532:	4688      	mov	r8, r1
 8000534:	4359      	muls	r1, r3
 8000536:	468a      	mov	sl, r1
 8000538:	0039      	movs	r1, r7
 800053a:	4351      	muls	r1, r2
 800053c:	4689      	mov	r9, r1
 800053e:	4641      	mov	r1, r8
 8000540:	434a      	muls	r2, r1
 8000542:	4651      	mov	r1, sl
 8000544:	0c09      	lsrs	r1, r1, #16
 8000546:	468b      	mov	fp, r1
 8000548:	437b      	muls	r3, r7
 800054a:	18d2      	adds	r2, r2, r3
 800054c:	445a      	add	r2, fp
 800054e:	4293      	cmp	r3, r2
 8000550:	d903      	bls.n	800055a <__aeabi_dmul+0x2c6>
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	025b      	lsls	r3, r3, #9
 8000556:	469b      	mov	fp, r3
 8000558:	44d9      	add	r9, fp
 800055a:	4651      	mov	r1, sl
 800055c:	0409      	lsls	r1, r1, #16
 800055e:	0c09      	lsrs	r1, r1, #16
 8000560:	468a      	mov	sl, r1
 8000562:	4641      	mov	r1, r8
 8000564:	4361      	muls	r1, r4
 8000566:	437c      	muls	r4, r7
 8000568:	0c13      	lsrs	r3, r2, #16
 800056a:	0412      	lsls	r2, r2, #16
 800056c:	444b      	add	r3, r9
 800056e:	4452      	add	r2, sl
 8000570:	46a1      	mov	r9, r4
 8000572:	468a      	mov	sl, r1
 8000574:	003c      	movs	r4, r7
 8000576:	4641      	mov	r1, r8
 8000578:	436c      	muls	r4, r5
 800057a:	434d      	muls	r5, r1
 800057c:	4651      	mov	r1, sl
 800057e:	444d      	add	r5, r9
 8000580:	0c0f      	lsrs	r7, r1, #16
 8000582:	197d      	adds	r5, r7, r5
 8000584:	45a9      	cmp	r9, r5
 8000586:	d903      	bls.n	8000590 <__aeabi_dmul+0x2fc>
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0249      	lsls	r1, r1, #9
 800058c:	4688      	mov	r8, r1
 800058e:	4444      	add	r4, r8
 8000590:	9f04      	ldr	r7, [sp, #16]
 8000592:	9903      	ldr	r1, [sp, #12]
 8000594:	46b8      	mov	r8, r7
 8000596:	4441      	add	r1, r8
 8000598:	468b      	mov	fp, r1
 800059a:	4583      	cmp	fp, r0
 800059c:	4180      	sbcs	r0, r0
 800059e:	4241      	negs	r1, r0
 80005a0:	4688      	mov	r8, r1
 80005a2:	4651      	mov	r1, sl
 80005a4:	0408      	lsls	r0, r1, #16
 80005a6:	042f      	lsls	r7, r5, #16
 80005a8:	0c00      	lsrs	r0, r0, #16
 80005aa:	183f      	adds	r7, r7, r0
 80005ac:	4658      	mov	r0, fp
 80005ae:	9902      	ldr	r1, [sp, #8]
 80005b0:	1810      	adds	r0, r2, r0
 80005b2:	4689      	mov	r9, r1
 80005b4:	4290      	cmp	r0, r2
 80005b6:	4192      	sbcs	r2, r2
 80005b8:	444f      	add	r7, r9
 80005ba:	46ba      	mov	sl, r7
 80005bc:	4252      	negs	r2, r2
 80005be:	4699      	mov	r9, r3
 80005c0:	4693      	mov	fp, r2
 80005c2:	44c2      	add	sl, r8
 80005c4:	44d1      	add	r9, sl
 80005c6:	44cb      	add	fp, r9
 80005c8:	428f      	cmp	r7, r1
 80005ca:	41bf      	sbcs	r7, r7
 80005cc:	45c2      	cmp	sl, r8
 80005ce:	4189      	sbcs	r1, r1
 80005d0:	4599      	cmp	r9, r3
 80005d2:	419b      	sbcs	r3, r3
 80005d4:	4593      	cmp	fp, r2
 80005d6:	4192      	sbcs	r2, r2
 80005d8:	427f      	negs	r7, r7
 80005da:	4249      	negs	r1, r1
 80005dc:	0c2d      	lsrs	r5, r5, #16
 80005de:	4252      	negs	r2, r2
 80005e0:	430f      	orrs	r7, r1
 80005e2:	425b      	negs	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	197f      	adds	r7, r7, r5
 80005e8:	18ff      	adds	r7, r7, r3
 80005ea:	465b      	mov	r3, fp
 80005ec:	193c      	adds	r4, r7, r4
 80005ee:	0ddb      	lsrs	r3, r3, #23
 80005f0:	9a05      	ldr	r2, [sp, #20]
 80005f2:	0264      	lsls	r4, r4, #9
 80005f4:	431c      	orrs	r4, r3
 80005f6:	0243      	lsls	r3, r0, #9
 80005f8:	4313      	orrs	r3, r2
 80005fa:	1e5d      	subs	r5, r3, #1
 80005fc:	41ab      	sbcs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	0dc0      	lsrs	r0, r0, #23
 8000602:	4303      	orrs	r3, r0
 8000604:	0252      	lsls	r2, r2, #9
 8000606:	4313      	orrs	r3, r2
 8000608:	01e2      	lsls	r2, r4, #7
 800060a:	d556      	bpl.n	80006ba <__aeabi_dmul+0x426>
 800060c:	2001      	movs	r0, #1
 800060e:	085a      	lsrs	r2, r3, #1
 8000610:	4003      	ands	r3, r0
 8000612:	4313      	orrs	r3, r2
 8000614:	07e2      	lsls	r2, r4, #31
 8000616:	4313      	orrs	r3, r2
 8000618:	0864      	lsrs	r4, r4, #1
 800061a:	485a      	ldr	r0, [pc, #360]	; (8000784 <__aeabi_dmul+0x4f0>)
 800061c:	4460      	add	r0, ip
 800061e:	2800      	cmp	r0, #0
 8000620:	dd4d      	ble.n	80006be <__aeabi_dmul+0x42a>
 8000622:	075a      	lsls	r2, r3, #29
 8000624:	d009      	beq.n	800063a <__aeabi_dmul+0x3a6>
 8000626:	220f      	movs	r2, #15
 8000628:	401a      	ands	r2, r3
 800062a:	2a04      	cmp	r2, #4
 800062c:	d005      	beq.n	800063a <__aeabi_dmul+0x3a6>
 800062e:	1d1a      	adds	r2, r3, #4
 8000630:	429a      	cmp	r2, r3
 8000632:	419b      	sbcs	r3, r3
 8000634:	425b      	negs	r3, r3
 8000636:	18e4      	adds	r4, r4, r3
 8000638:	0013      	movs	r3, r2
 800063a:	01e2      	lsls	r2, r4, #7
 800063c:	d504      	bpl.n	8000648 <__aeabi_dmul+0x3b4>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	4a51      	ldr	r2, [pc, #324]	; (8000788 <__aeabi_dmul+0x4f4>)
 8000642:	00c0      	lsls	r0, r0, #3
 8000644:	4014      	ands	r4, r2
 8000646:	4460      	add	r0, ip
 8000648:	4a50      	ldr	r2, [pc, #320]	; (800078c <__aeabi_dmul+0x4f8>)
 800064a:	4290      	cmp	r0, r2
 800064c:	dd00      	ble.n	8000650 <__aeabi_dmul+0x3bc>
 800064e:	e6e3      	b.n	8000418 <__aeabi_dmul+0x184>
 8000650:	2501      	movs	r5, #1
 8000652:	08db      	lsrs	r3, r3, #3
 8000654:	0762      	lsls	r2, r4, #29
 8000656:	431a      	orrs	r2, r3
 8000658:	0264      	lsls	r4, r4, #9
 800065a:	9b01      	ldr	r3, [sp, #4]
 800065c:	4691      	mov	r9, r2
 800065e:	0b22      	lsrs	r2, r4, #12
 8000660:	0544      	lsls	r4, r0, #21
 8000662:	0d64      	lsrs	r4, r4, #21
 8000664:	401d      	ands	r5, r3
 8000666:	e67c      	b.n	8000362 <__aeabi_dmul+0xce>
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	4659      	mov	r1, fp
 800066c:	0312      	lsls	r2, r2, #12
 800066e:	4211      	tst	r1, r2
 8000670:	d008      	beq.n	8000684 <__aeabi_dmul+0x3f0>
 8000672:	4214      	tst	r4, r2
 8000674:	d106      	bne.n	8000684 <__aeabi_dmul+0x3f0>
 8000676:	4322      	orrs	r2, r4
 8000678:	0312      	lsls	r2, r2, #12
 800067a:	0b12      	lsrs	r2, r2, #12
 800067c:	4645      	mov	r5, r8
 800067e:	4699      	mov	r9, r3
 8000680:	4c43      	ldr	r4, [pc, #268]	; (8000790 <__aeabi_dmul+0x4fc>)
 8000682:	e66e      	b.n	8000362 <__aeabi_dmul+0xce>
 8000684:	465b      	mov	r3, fp
 8000686:	431a      	orrs	r2, r3
 8000688:	0312      	lsls	r2, r2, #12
 800068a:	0b12      	lsrs	r2, r2, #12
 800068c:	4c40      	ldr	r4, [pc, #256]	; (8000790 <__aeabi_dmul+0x4fc>)
 800068e:	e668      	b.n	8000362 <__aeabi_dmul+0xce>
 8000690:	0003      	movs	r3, r0
 8000692:	4654      	mov	r4, sl
 8000694:	3b28      	subs	r3, #40	; 0x28
 8000696:	409c      	lsls	r4, r3
 8000698:	2300      	movs	r3, #0
 800069a:	e6b9      	b.n	8000410 <__aeabi_dmul+0x17c>
 800069c:	f000 fc3a 	bl	8000f14 <__clzsi2>
 80006a0:	3020      	adds	r0, #32
 80006a2:	e6a6      	b.n	80003f2 <__aeabi_dmul+0x15e>
 80006a4:	0003      	movs	r3, r0
 80006a6:	3b28      	subs	r3, #40	; 0x28
 80006a8:	409f      	lsls	r7, r3
 80006aa:	2300      	movs	r3, #0
 80006ac:	46bb      	mov	fp, r7
 80006ae:	4699      	mov	r9, r3
 80006b0:	e68a      	b.n	80003c8 <__aeabi_dmul+0x134>
 80006b2:	f000 fc2f 	bl	8000f14 <__clzsi2>
 80006b6:	3020      	adds	r0, #32
 80006b8:	e674      	b.n	80003a4 <__aeabi_dmul+0x110>
 80006ba:	46b4      	mov	ip, r6
 80006bc:	e7ad      	b.n	800061a <__aeabi_dmul+0x386>
 80006be:	2501      	movs	r5, #1
 80006c0:	1a2a      	subs	r2, r5, r0
 80006c2:	2a38      	cmp	r2, #56	; 0x38
 80006c4:	dd06      	ble.n	80006d4 <__aeabi_dmul+0x440>
 80006c6:	9b01      	ldr	r3, [sp, #4]
 80006c8:	2400      	movs	r4, #0
 80006ca:	401d      	ands	r5, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	2200      	movs	r2, #0
 80006d0:	4699      	mov	r9, r3
 80006d2:	e646      	b.n	8000362 <__aeabi_dmul+0xce>
 80006d4:	2a1f      	cmp	r2, #31
 80006d6:	dc21      	bgt.n	800071c <__aeabi_dmul+0x488>
 80006d8:	2520      	movs	r5, #32
 80006da:	0020      	movs	r0, r4
 80006dc:	1aad      	subs	r5, r5, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	40ab      	lsls	r3, r5
 80006e2:	40a8      	lsls	r0, r5
 80006e4:	40d6      	lsrs	r6, r2
 80006e6:	1e5d      	subs	r5, r3, #1
 80006e8:	41ab      	sbcs	r3, r5
 80006ea:	4330      	orrs	r0, r6
 80006ec:	4318      	orrs	r0, r3
 80006ee:	40d4      	lsrs	r4, r2
 80006f0:	0743      	lsls	r3, r0, #29
 80006f2:	d009      	beq.n	8000708 <__aeabi_dmul+0x474>
 80006f4:	230f      	movs	r3, #15
 80006f6:	4003      	ands	r3, r0
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d005      	beq.n	8000708 <__aeabi_dmul+0x474>
 80006fc:	0003      	movs	r3, r0
 80006fe:	1d18      	adds	r0, r3, #4
 8000700:	4298      	cmp	r0, r3
 8000702:	419b      	sbcs	r3, r3
 8000704:	425b      	negs	r3, r3
 8000706:	18e4      	adds	r4, r4, r3
 8000708:	0223      	lsls	r3, r4, #8
 800070a:	d521      	bpl.n	8000750 <__aeabi_dmul+0x4bc>
 800070c:	2501      	movs	r5, #1
 800070e:	9b01      	ldr	r3, [sp, #4]
 8000710:	2401      	movs	r4, #1
 8000712:	401d      	ands	r5, r3
 8000714:	2300      	movs	r3, #0
 8000716:	2200      	movs	r2, #0
 8000718:	4699      	mov	r9, r3
 800071a:	e622      	b.n	8000362 <__aeabi_dmul+0xce>
 800071c:	251f      	movs	r5, #31
 800071e:	0021      	movs	r1, r4
 8000720:	426d      	negs	r5, r5
 8000722:	1a28      	subs	r0, r5, r0
 8000724:	40c1      	lsrs	r1, r0
 8000726:	0008      	movs	r0, r1
 8000728:	2a20      	cmp	r2, #32
 800072a:	d01d      	beq.n	8000768 <__aeabi_dmul+0x4d4>
 800072c:	355f      	adds	r5, #95	; 0x5f
 800072e:	1aaa      	subs	r2, r5, r2
 8000730:	4094      	lsls	r4, r2
 8000732:	4323      	orrs	r3, r4
 8000734:	1e5c      	subs	r4, r3, #1
 8000736:	41a3      	sbcs	r3, r4
 8000738:	2507      	movs	r5, #7
 800073a:	4303      	orrs	r3, r0
 800073c:	401d      	ands	r5, r3
 800073e:	2200      	movs	r2, #0
 8000740:	2d00      	cmp	r5, #0
 8000742:	d009      	beq.n	8000758 <__aeabi_dmul+0x4c4>
 8000744:	220f      	movs	r2, #15
 8000746:	2400      	movs	r4, #0
 8000748:	401a      	ands	r2, r3
 800074a:	0018      	movs	r0, r3
 800074c:	2a04      	cmp	r2, #4
 800074e:	d1d6      	bne.n	80006fe <__aeabi_dmul+0x46a>
 8000750:	0003      	movs	r3, r0
 8000752:	0765      	lsls	r5, r4, #29
 8000754:	0264      	lsls	r4, r4, #9
 8000756:	0b22      	lsrs	r2, r4, #12
 8000758:	08db      	lsrs	r3, r3, #3
 800075a:	432b      	orrs	r3, r5
 800075c:	2501      	movs	r5, #1
 800075e:	4699      	mov	r9, r3
 8000760:	9b01      	ldr	r3, [sp, #4]
 8000762:	2400      	movs	r4, #0
 8000764:	401d      	ands	r5, r3
 8000766:	e5fc      	b.n	8000362 <__aeabi_dmul+0xce>
 8000768:	2400      	movs	r4, #0
 800076a:	e7e2      	b.n	8000732 <__aeabi_dmul+0x49e>
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	2501      	movs	r5, #1
 8000770:	0312      	lsls	r2, r2, #12
 8000772:	4322      	orrs	r2, r4
 8000774:	9901      	ldr	r1, [sp, #4]
 8000776:	0312      	lsls	r2, r2, #12
 8000778:	0b12      	lsrs	r2, r2, #12
 800077a:	400d      	ands	r5, r1
 800077c:	4699      	mov	r9, r3
 800077e:	4c04      	ldr	r4, [pc, #16]	; (8000790 <__aeabi_dmul+0x4fc>)
 8000780:	e5ef      	b.n	8000362 <__aeabi_dmul+0xce>
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	000003ff 	.word	0x000003ff
 8000788:	feffffff 	.word	0xfeffffff
 800078c:	000007fe 	.word	0x000007fe
 8000790:	000007ff 	.word	0x000007ff

08000794 <__aeabi_dsub>:
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000796:	4646      	mov	r6, r8
 8000798:	46d6      	mov	lr, sl
 800079a:	464f      	mov	r7, r9
 800079c:	030c      	lsls	r4, r1, #12
 800079e:	b5c0      	push	{r6, r7, lr}
 80007a0:	0fcd      	lsrs	r5, r1, #31
 80007a2:	004e      	lsls	r6, r1, #1
 80007a4:	0a61      	lsrs	r1, r4, #9
 80007a6:	0f44      	lsrs	r4, r0, #29
 80007a8:	430c      	orrs	r4, r1
 80007aa:	00c1      	lsls	r1, r0, #3
 80007ac:	0058      	lsls	r0, r3, #1
 80007ae:	0d40      	lsrs	r0, r0, #21
 80007b0:	4684      	mov	ip, r0
 80007b2:	468a      	mov	sl, r1
 80007b4:	000f      	movs	r7, r1
 80007b6:	0319      	lsls	r1, r3, #12
 80007b8:	0f50      	lsrs	r0, r2, #29
 80007ba:	0a49      	lsrs	r1, r1, #9
 80007bc:	4301      	orrs	r1, r0
 80007be:	48c6      	ldr	r0, [pc, #792]	; (8000ad8 <__aeabi_dsub+0x344>)
 80007c0:	0d76      	lsrs	r6, r6, #21
 80007c2:	46a8      	mov	r8, r5
 80007c4:	0fdb      	lsrs	r3, r3, #31
 80007c6:	00d2      	lsls	r2, r2, #3
 80007c8:	4584      	cmp	ip, r0
 80007ca:	d100      	bne.n	80007ce <__aeabi_dsub+0x3a>
 80007cc:	e0d8      	b.n	8000980 <__aeabi_dsub+0x1ec>
 80007ce:	2001      	movs	r0, #1
 80007d0:	4043      	eors	r3, r0
 80007d2:	42ab      	cmp	r3, r5
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dsub+0x44>
 80007d6:	e0a6      	b.n	8000926 <__aeabi_dsub+0x192>
 80007d8:	4660      	mov	r0, ip
 80007da:	1a35      	subs	r5, r6, r0
 80007dc:	2d00      	cmp	r5, #0
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dsub+0x4e>
 80007e0:	e105      	b.n	80009ee <__aeabi_dsub+0x25a>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d110      	bne.n	8000808 <__aeabi_dsub+0x74>
 80007e6:	000b      	movs	r3, r1
 80007e8:	4313      	orrs	r3, r2
 80007ea:	d100      	bne.n	80007ee <__aeabi_dsub+0x5a>
 80007ec:	e0d7      	b.n	800099e <__aeabi_dsub+0x20a>
 80007ee:	1e6b      	subs	r3, r5, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_dsub+0x62>
 80007f4:	e14b      	b.n	8000a8e <__aeabi_dsub+0x2fa>
 80007f6:	4653      	mov	r3, sl
 80007f8:	1a9f      	subs	r7, r3, r2
 80007fa:	45ba      	cmp	sl, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	1a64      	subs	r4, r4, r1
 8000800:	4240      	negs	r0, r0
 8000802:	1a24      	subs	r4, r4, r0
 8000804:	2601      	movs	r6, #1
 8000806:	e01e      	b.n	8000846 <__aeabi_dsub+0xb2>
 8000808:	4bb3      	ldr	r3, [pc, #716]	; (8000ad8 <__aeabi_dsub+0x344>)
 800080a:	429e      	cmp	r6, r3
 800080c:	d048      	beq.n	80008a0 <__aeabi_dsub+0x10c>
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	041b      	lsls	r3, r3, #16
 8000812:	4319      	orrs	r1, r3
 8000814:	2d38      	cmp	r5, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dsub+0x86>
 8000818:	e119      	b.n	8000a4e <__aeabi_dsub+0x2ba>
 800081a:	2d1f      	cmp	r5, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dsub+0x8c>
 800081e:	e14c      	b.n	8000aba <__aeabi_dsub+0x326>
 8000820:	2320      	movs	r3, #32
 8000822:	000f      	movs	r7, r1
 8000824:	1b5b      	subs	r3, r3, r5
 8000826:	0010      	movs	r0, r2
 8000828:	409a      	lsls	r2, r3
 800082a:	409f      	lsls	r7, r3
 800082c:	40e8      	lsrs	r0, r5
 800082e:	1e53      	subs	r3, r2, #1
 8000830:	419a      	sbcs	r2, r3
 8000832:	40e9      	lsrs	r1, r5
 8000834:	4307      	orrs	r7, r0
 8000836:	4317      	orrs	r7, r2
 8000838:	4653      	mov	r3, sl
 800083a:	1bdf      	subs	r7, r3, r7
 800083c:	1a61      	subs	r1, r4, r1
 800083e:	45ba      	cmp	sl, r7
 8000840:	41a4      	sbcs	r4, r4
 8000842:	4264      	negs	r4, r4
 8000844:	1b0c      	subs	r4, r1, r4
 8000846:	0223      	lsls	r3, r4, #8
 8000848:	d400      	bmi.n	800084c <__aeabi_dsub+0xb8>
 800084a:	e0c5      	b.n	80009d8 <__aeabi_dsub+0x244>
 800084c:	0264      	lsls	r4, r4, #9
 800084e:	0a65      	lsrs	r5, r4, #9
 8000850:	2d00      	cmp	r5, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_dsub+0xc2>
 8000854:	e0f6      	b.n	8000a44 <__aeabi_dsub+0x2b0>
 8000856:	0028      	movs	r0, r5
 8000858:	f000 fb5c 	bl	8000f14 <__clzsi2>
 800085c:	0003      	movs	r3, r0
 800085e:	3b08      	subs	r3, #8
 8000860:	2b1f      	cmp	r3, #31
 8000862:	dd00      	ble.n	8000866 <__aeabi_dsub+0xd2>
 8000864:	e0e9      	b.n	8000a3a <__aeabi_dsub+0x2a6>
 8000866:	2220      	movs	r2, #32
 8000868:	003c      	movs	r4, r7
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	409d      	lsls	r5, r3
 800086e:	40d4      	lsrs	r4, r2
 8000870:	409f      	lsls	r7, r3
 8000872:	4325      	orrs	r5, r4
 8000874:	429e      	cmp	r6, r3
 8000876:	dd00      	ble.n	800087a <__aeabi_dsub+0xe6>
 8000878:	e0db      	b.n	8000a32 <__aeabi_dsub+0x29e>
 800087a:	1b9e      	subs	r6, r3, r6
 800087c:	1c73      	adds	r3, r6, #1
 800087e:	2b1f      	cmp	r3, #31
 8000880:	dd00      	ble.n	8000884 <__aeabi_dsub+0xf0>
 8000882:	e10a      	b.n	8000a9a <__aeabi_dsub+0x306>
 8000884:	2220      	movs	r2, #32
 8000886:	0038      	movs	r0, r7
 8000888:	1ad2      	subs	r2, r2, r3
 800088a:	0029      	movs	r1, r5
 800088c:	4097      	lsls	r7, r2
 800088e:	002c      	movs	r4, r5
 8000890:	4091      	lsls	r1, r2
 8000892:	40d8      	lsrs	r0, r3
 8000894:	1e7a      	subs	r2, r7, #1
 8000896:	4197      	sbcs	r7, r2
 8000898:	40dc      	lsrs	r4, r3
 800089a:	2600      	movs	r6, #0
 800089c:	4301      	orrs	r1, r0
 800089e:	430f      	orrs	r7, r1
 80008a0:	077b      	lsls	r3, r7, #29
 80008a2:	d009      	beq.n	80008b8 <__aeabi_dsub+0x124>
 80008a4:	230f      	movs	r3, #15
 80008a6:	403b      	ands	r3, r7
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d005      	beq.n	80008b8 <__aeabi_dsub+0x124>
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	42bb      	cmp	r3, r7
 80008b0:	41bf      	sbcs	r7, r7
 80008b2:	427f      	negs	r7, r7
 80008b4:	19e4      	adds	r4, r4, r7
 80008b6:	001f      	movs	r7, r3
 80008b8:	0223      	lsls	r3, r4, #8
 80008ba:	d525      	bpl.n	8000908 <__aeabi_dsub+0x174>
 80008bc:	4b86      	ldr	r3, [pc, #536]	; (8000ad8 <__aeabi_dsub+0x344>)
 80008be:	3601      	adds	r6, #1
 80008c0:	429e      	cmp	r6, r3
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dsub+0x132>
 80008c4:	e0af      	b.n	8000a26 <__aeabi_dsub+0x292>
 80008c6:	4b85      	ldr	r3, [pc, #532]	; (8000adc <__aeabi_dsub+0x348>)
 80008c8:	2501      	movs	r5, #1
 80008ca:	401c      	ands	r4, r3
 80008cc:	4643      	mov	r3, r8
 80008ce:	0762      	lsls	r2, r4, #29
 80008d0:	08ff      	lsrs	r7, r7, #3
 80008d2:	0264      	lsls	r4, r4, #9
 80008d4:	0576      	lsls	r6, r6, #21
 80008d6:	4317      	orrs	r7, r2
 80008d8:	0b24      	lsrs	r4, r4, #12
 80008da:	0d76      	lsrs	r6, r6, #21
 80008dc:	401d      	ands	r5, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	0324      	lsls	r4, r4, #12
 80008e2:	0b23      	lsrs	r3, r4, #12
 80008e4:	0d0c      	lsrs	r4, r1, #20
 80008e6:	4a7e      	ldr	r2, [pc, #504]	; (8000ae0 <__aeabi_dsub+0x34c>)
 80008e8:	0524      	lsls	r4, r4, #20
 80008ea:	431c      	orrs	r4, r3
 80008ec:	4014      	ands	r4, r2
 80008ee:	0533      	lsls	r3, r6, #20
 80008f0:	4323      	orrs	r3, r4
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	07ed      	lsls	r5, r5, #31
 80008f6:	085b      	lsrs	r3, r3, #1
 80008f8:	432b      	orrs	r3, r5
 80008fa:	0038      	movs	r0, r7
 80008fc:	0019      	movs	r1, r3
 80008fe:	bc1c      	pop	{r2, r3, r4}
 8000900:	4690      	mov	r8, r2
 8000902:	4699      	mov	r9, r3
 8000904:	46a2      	mov	sl, r4
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	2501      	movs	r5, #1
 800090a:	4643      	mov	r3, r8
 800090c:	0762      	lsls	r2, r4, #29
 800090e:	08ff      	lsrs	r7, r7, #3
 8000910:	4317      	orrs	r7, r2
 8000912:	08e4      	lsrs	r4, r4, #3
 8000914:	401d      	ands	r5, r3
 8000916:	4b70      	ldr	r3, [pc, #448]	; (8000ad8 <__aeabi_dsub+0x344>)
 8000918:	429e      	cmp	r6, r3
 800091a:	d036      	beq.n	800098a <__aeabi_dsub+0x1f6>
 800091c:	0324      	lsls	r4, r4, #12
 800091e:	0576      	lsls	r6, r6, #21
 8000920:	0b24      	lsrs	r4, r4, #12
 8000922:	0d76      	lsrs	r6, r6, #21
 8000924:	e7db      	b.n	80008de <__aeabi_dsub+0x14a>
 8000926:	4663      	mov	r3, ip
 8000928:	1af3      	subs	r3, r6, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	dc00      	bgt.n	8000930 <__aeabi_dsub+0x19c>
 800092e:	e094      	b.n	8000a5a <__aeabi_dsub+0x2c6>
 8000930:	4660      	mov	r0, ip
 8000932:	2800      	cmp	r0, #0
 8000934:	d035      	beq.n	80009a2 <__aeabi_dsub+0x20e>
 8000936:	4868      	ldr	r0, [pc, #416]	; (8000ad8 <__aeabi_dsub+0x344>)
 8000938:	4286      	cmp	r6, r0
 800093a:	d0b1      	beq.n	80008a0 <__aeabi_dsub+0x10c>
 800093c:	2780      	movs	r7, #128	; 0x80
 800093e:	043f      	lsls	r7, r7, #16
 8000940:	4339      	orrs	r1, r7
 8000942:	2b38      	cmp	r3, #56	; 0x38
 8000944:	dc00      	bgt.n	8000948 <__aeabi_dsub+0x1b4>
 8000946:	e0fd      	b.n	8000b44 <__aeabi_dsub+0x3b0>
 8000948:	430a      	orrs	r2, r1
 800094a:	0017      	movs	r7, r2
 800094c:	2100      	movs	r1, #0
 800094e:	1e7a      	subs	r2, r7, #1
 8000950:	4197      	sbcs	r7, r2
 8000952:	4457      	add	r7, sl
 8000954:	4557      	cmp	r7, sl
 8000956:	4180      	sbcs	r0, r0
 8000958:	1909      	adds	r1, r1, r4
 800095a:	4244      	negs	r4, r0
 800095c:	190c      	adds	r4, r1, r4
 800095e:	0223      	lsls	r3, r4, #8
 8000960:	d53a      	bpl.n	80009d8 <__aeabi_dsub+0x244>
 8000962:	4b5d      	ldr	r3, [pc, #372]	; (8000ad8 <__aeabi_dsub+0x344>)
 8000964:	3601      	adds	r6, #1
 8000966:	429e      	cmp	r6, r3
 8000968:	d100      	bne.n	800096c <__aeabi_dsub+0x1d8>
 800096a:	e14b      	b.n	8000c04 <__aeabi_dsub+0x470>
 800096c:	2201      	movs	r2, #1
 800096e:	4b5b      	ldr	r3, [pc, #364]	; (8000adc <__aeabi_dsub+0x348>)
 8000970:	401c      	ands	r4, r3
 8000972:	087b      	lsrs	r3, r7, #1
 8000974:	4017      	ands	r7, r2
 8000976:	431f      	orrs	r7, r3
 8000978:	07e2      	lsls	r2, r4, #31
 800097a:	4317      	orrs	r7, r2
 800097c:	0864      	lsrs	r4, r4, #1
 800097e:	e78f      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000980:	0008      	movs	r0, r1
 8000982:	4310      	orrs	r0, r2
 8000984:	d000      	beq.n	8000988 <__aeabi_dsub+0x1f4>
 8000986:	e724      	b.n	80007d2 <__aeabi_dsub+0x3e>
 8000988:	e721      	b.n	80007ce <__aeabi_dsub+0x3a>
 800098a:	0023      	movs	r3, r4
 800098c:	433b      	orrs	r3, r7
 800098e:	d100      	bne.n	8000992 <__aeabi_dsub+0x1fe>
 8000990:	e1b9      	b.n	8000d06 <__aeabi_dsub+0x572>
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	0312      	lsls	r2, r2, #12
 8000996:	4314      	orrs	r4, r2
 8000998:	0324      	lsls	r4, r4, #12
 800099a:	0b24      	lsrs	r4, r4, #12
 800099c:	e79f      	b.n	80008de <__aeabi_dsub+0x14a>
 800099e:	002e      	movs	r6, r5
 80009a0:	e77e      	b.n	80008a0 <__aeabi_dsub+0x10c>
 80009a2:	0008      	movs	r0, r1
 80009a4:	4310      	orrs	r0, r2
 80009a6:	d100      	bne.n	80009aa <__aeabi_dsub+0x216>
 80009a8:	e0ca      	b.n	8000b40 <__aeabi_dsub+0x3ac>
 80009aa:	1e58      	subs	r0, r3, #1
 80009ac:	4684      	mov	ip, r0
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dsub+0x220>
 80009b2:	e0e7      	b.n	8000b84 <__aeabi_dsub+0x3f0>
 80009b4:	4452      	add	r2, sl
 80009b6:	4552      	cmp	r2, sl
 80009b8:	4180      	sbcs	r0, r0
 80009ba:	1864      	adds	r4, r4, r1
 80009bc:	4240      	negs	r0, r0
 80009be:	1824      	adds	r4, r4, r0
 80009c0:	0017      	movs	r7, r2
 80009c2:	2601      	movs	r6, #1
 80009c4:	0223      	lsls	r3, r4, #8
 80009c6:	d507      	bpl.n	80009d8 <__aeabi_dsub+0x244>
 80009c8:	2602      	movs	r6, #2
 80009ca:	e7cf      	b.n	800096c <__aeabi_dsub+0x1d8>
 80009cc:	4664      	mov	r4, ip
 80009ce:	432c      	orrs	r4, r5
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dsub+0x240>
 80009d2:	e1b3      	b.n	8000d3c <__aeabi_dsub+0x5a8>
 80009d4:	002c      	movs	r4, r5
 80009d6:	4667      	mov	r7, ip
 80009d8:	077b      	lsls	r3, r7, #29
 80009da:	d000      	beq.n	80009de <__aeabi_dsub+0x24a>
 80009dc:	e762      	b.n	80008a4 <__aeabi_dsub+0x110>
 80009de:	0763      	lsls	r3, r4, #29
 80009e0:	08ff      	lsrs	r7, r7, #3
 80009e2:	431f      	orrs	r7, r3
 80009e4:	2501      	movs	r5, #1
 80009e6:	4643      	mov	r3, r8
 80009e8:	08e4      	lsrs	r4, r4, #3
 80009ea:	401d      	ands	r5, r3
 80009ec:	e793      	b.n	8000916 <__aeabi_dsub+0x182>
 80009ee:	2d00      	cmp	r5, #0
 80009f0:	d178      	bne.n	8000ae4 <__aeabi_dsub+0x350>
 80009f2:	1c75      	adds	r5, r6, #1
 80009f4:	056d      	lsls	r5, r5, #21
 80009f6:	0d6d      	lsrs	r5, r5, #21
 80009f8:	2d01      	cmp	r5, #1
 80009fa:	dc00      	bgt.n	80009fe <__aeabi_dsub+0x26a>
 80009fc:	e0f2      	b.n	8000be4 <__aeabi_dsub+0x450>
 80009fe:	4650      	mov	r0, sl
 8000a00:	1a80      	subs	r0, r0, r2
 8000a02:	4582      	cmp	sl, r0
 8000a04:	41bf      	sbcs	r7, r7
 8000a06:	1a65      	subs	r5, r4, r1
 8000a08:	427f      	negs	r7, r7
 8000a0a:	1bed      	subs	r5, r5, r7
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	0228      	lsls	r0, r5, #8
 8000a10:	d400      	bmi.n	8000a14 <__aeabi_dsub+0x280>
 8000a12:	e08c      	b.n	8000b2e <__aeabi_dsub+0x39a>
 8000a14:	4650      	mov	r0, sl
 8000a16:	1a17      	subs	r7, r2, r0
 8000a18:	42ba      	cmp	r2, r7
 8000a1a:	4192      	sbcs	r2, r2
 8000a1c:	1b0c      	subs	r4, r1, r4
 8000a1e:	4255      	negs	r5, r2
 8000a20:	1b65      	subs	r5, r4, r5
 8000a22:	4698      	mov	r8, r3
 8000a24:	e714      	b.n	8000850 <__aeabi_dsub+0xbc>
 8000a26:	2501      	movs	r5, #1
 8000a28:	4643      	mov	r3, r8
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	401d      	ands	r5, r3
 8000a2e:	2700      	movs	r7, #0
 8000a30:	e755      	b.n	80008de <__aeabi_dsub+0x14a>
 8000a32:	4c2a      	ldr	r4, [pc, #168]	; (8000adc <__aeabi_dsub+0x348>)
 8000a34:	1af6      	subs	r6, r6, r3
 8000a36:	402c      	ands	r4, r5
 8000a38:	e732      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000a3a:	003d      	movs	r5, r7
 8000a3c:	3828      	subs	r0, #40	; 0x28
 8000a3e:	4085      	lsls	r5, r0
 8000a40:	2700      	movs	r7, #0
 8000a42:	e717      	b.n	8000874 <__aeabi_dsub+0xe0>
 8000a44:	0038      	movs	r0, r7
 8000a46:	f000 fa65 	bl	8000f14 <__clzsi2>
 8000a4a:	3020      	adds	r0, #32
 8000a4c:	e706      	b.n	800085c <__aeabi_dsub+0xc8>
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	0017      	movs	r7, r2
 8000a52:	2100      	movs	r1, #0
 8000a54:	1e7a      	subs	r2, r7, #1
 8000a56:	4197      	sbcs	r7, r2
 8000a58:	e6ee      	b.n	8000838 <__aeabi_dsub+0xa4>
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_dsub+0x2cc>
 8000a5e:	e0e5      	b.n	8000c2c <__aeabi_dsub+0x498>
 8000a60:	1c73      	adds	r3, r6, #1
 8000a62:	469c      	mov	ip, r3
 8000a64:	055b      	lsls	r3, r3, #21
 8000a66:	0d5b      	lsrs	r3, r3, #21
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	dc00      	bgt.n	8000a6e <__aeabi_dsub+0x2da>
 8000a6c:	e09f      	b.n	8000bae <__aeabi_dsub+0x41a>
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <__aeabi_dsub+0x344>)
 8000a70:	459c      	cmp	ip, r3
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dsub+0x2e2>
 8000a74:	e0c5      	b.n	8000c02 <__aeabi_dsub+0x46e>
 8000a76:	4452      	add	r2, sl
 8000a78:	4552      	cmp	r2, sl
 8000a7a:	4180      	sbcs	r0, r0
 8000a7c:	1864      	adds	r4, r4, r1
 8000a7e:	4240      	negs	r0, r0
 8000a80:	1824      	adds	r4, r4, r0
 8000a82:	07e7      	lsls	r7, r4, #31
 8000a84:	0852      	lsrs	r2, r2, #1
 8000a86:	4317      	orrs	r7, r2
 8000a88:	0864      	lsrs	r4, r4, #1
 8000a8a:	4666      	mov	r6, ip
 8000a8c:	e708      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <__aeabi_dsub+0x344>)
 8000a90:	4285      	cmp	r5, r0
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dsub+0x302>
 8000a94:	e085      	b.n	8000ba2 <__aeabi_dsub+0x40e>
 8000a96:	001d      	movs	r5, r3
 8000a98:	e6bc      	b.n	8000814 <__aeabi_dsub+0x80>
 8000a9a:	0029      	movs	r1, r5
 8000a9c:	3e1f      	subs	r6, #31
 8000a9e:	40f1      	lsrs	r1, r6
 8000aa0:	2b20      	cmp	r3, #32
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dsub+0x312>
 8000aa4:	e07f      	b.n	8000ba6 <__aeabi_dsub+0x412>
 8000aa6:	2240      	movs	r2, #64	; 0x40
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	409d      	lsls	r5, r3
 8000aac:	432f      	orrs	r7, r5
 8000aae:	1e7d      	subs	r5, r7, #1
 8000ab0:	41af      	sbcs	r7, r5
 8000ab2:	2400      	movs	r4, #0
 8000ab4:	430f      	orrs	r7, r1
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	e78e      	b.n	80009d8 <__aeabi_dsub+0x244>
 8000aba:	002b      	movs	r3, r5
 8000abc:	000f      	movs	r7, r1
 8000abe:	3b20      	subs	r3, #32
 8000ac0:	40df      	lsrs	r7, r3
 8000ac2:	2d20      	cmp	r5, #32
 8000ac4:	d071      	beq.n	8000baa <__aeabi_dsub+0x416>
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	1b5d      	subs	r5, r3, r5
 8000aca:	40a9      	lsls	r1, r5
 8000acc:	430a      	orrs	r2, r1
 8000ace:	1e51      	subs	r1, r2, #1
 8000ad0:	418a      	sbcs	r2, r1
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4317      	orrs	r7, r2
 8000ad6:	e6af      	b.n	8000838 <__aeabi_dsub+0xa4>
 8000ad8:	000007ff 	.word	0x000007ff
 8000adc:	ff7fffff 	.word	0xff7fffff
 8000ae0:	800fffff 	.word	0x800fffff
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d03e      	beq.n	8000b66 <__aeabi_dsub+0x3d2>
 8000ae8:	4eb3      	ldr	r6, [pc, #716]	; (8000db8 <__aeabi_dsub+0x624>)
 8000aea:	45b4      	cmp	ip, r6
 8000aec:	d045      	beq.n	8000b7a <__aeabi_dsub+0x3e6>
 8000aee:	2680      	movs	r6, #128	; 0x80
 8000af0:	0436      	lsls	r6, r6, #16
 8000af2:	426d      	negs	r5, r5
 8000af4:	4334      	orrs	r4, r6
 8000af6:	2d38      	cmp	r5, #56	; 0x38
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dsub+0x368>
 8000afa:	e0a8      	b.n	8000c4e <__aeabi_dsub+0x4ba>
 8000afc:	2d1f      	cmp	r5, #31
 8000afe:	dd00      	ble.n	8000b02 <__aeabi_dsub+0x36e>
 8000b00:	e11f      	b.n	8000d42 <__aeabi_dsub+0x5ae>
 8000b02:	2620      	movs	r6, #32
 8000b04:	0027      	movs	r7, r4
 8000b06:	4650      	mov	r0, sl
 8000b08:	1b76      	subs	r6, r6, r5
 8000b0a:	40b7      	lsls	r7, r6
 8000b0c:	40e8      	lsrs	r0, r5
 8000b0e:	4307      	orrs	r7, r0
 8000b10:	4650      	mov	r0, sl
 8000b12:	40b0      	lsls	r0, r6
 8000b14:	1e46      	subs	r6, r0, #1
 8000b16:	41b0      	sbcs	r0, r6
 8000b18:	40ec      	lsrs	r4, r5
 8000b1a:	4338      	orrs	r0, r7
 8000b1c:	1a17      	subs	r7, r2, r0
 8000b1e:	42ba      	cmp	r2, r7
 8000b20:	4192      	sbcs	r2, r2
 8000b22:	1b0c      	subs	r4, r1, r4
 8000b24:	4252      	negs	r2, r2
 8000b26:	1aa4      	subs	r4, r4, r2
 8000b28:	4666      	mov	r6, ip
 8000b2a:	4698      	mov	r8, r3
 8000b2c:	e68b      	b.n	8000846 <__aeabi_dsub+0xb2>
 8000b2e:	4664      	mov	r4, ip
 8000b30:	4667      	mov	r7, ip
 8000b32:	432c      	orrs	r4, r5
 8000b34:	d000      	beq.n	8000b38 <__aeabi_dsub+0x3a4>
 8000b36:	e68b      	b.n	8000850 <__aeabi_dsub+0xbc>
 8000b38:	2500      	movs	r5, #0
 8000b3a:	2600      	movs	r6, #0
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e6ea      	b.n	8000916 <__aeabi_dsub+0x182>
 8000b40:	001e      	movs	r6, r3
 8000b42:	e6ad      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000b44:	2b1f      	cmp	r3, #31
 8000b46:	dc60      	bgt.n	8000c0a <__aeabi_dsub+0x476>
 8000b48:	2720      	movs	r7, #32
 8000b4a:	1af8      	subs	r0, r7, r3
 8000b4c:	000f      	movs	r7, r1
 8000b4e:	4684      	mov	ip, r0
 8000b50:	4087      	lsls	r7, r0
 8000b52:	0010      	movs	r0, r2
 8000b54:	40d8      	lsrs	r0, r3
 8000b56:	4307      	orrs	r7, r0
 8000b58:	4660      	mov	r0, ip
 8000b5a:	4082      	lsls	r2, r0
 8000b5c:	1e50      	subs	r0, r2, #1
 8000b5e:	4182      	sbcs	r2, r0
 8000b60:	40d9      	lsrs	r1, r3
 8000b62:	4317      	orrs	r7, r2
 8000b64:	e6f5      	b.n	8000952 <__aeabi_dsub+0x1be>
 8000b66:	0026      	movs	r6, r4
 8000b68:	4650      	mov	r0, sl
 8000b6a:	4306      	orrs	r6, r0
 8000b6c:	d005      	beq.n	8000b7a <__aeabi_dsub+0x3e6>
 8000b6e:	43ed      	mvns	r5, r5
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0d3      	beq.n	8000b1c <__aeabi_dsub+0x388>
 8000b74:	4e90      	ldr	r6, [pc, #576]	; (8000db8 <__aeabi_dsub+0x624>)
 8000b76:	45b4      	cmp	ip, r6
 8000b78:	d1bd      	bne.n	8000af6 <__aeabi_dsub+0x362>
 8000b7a:	000c      	movs	r4, r1
 8000b7c:	0017      	movs	r7, r2
 8000b7e:	4666      	mov	r6, ip
 8000b80:	4698      	mov	r8, r3
 8000b82:	e68d      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000b84:	488c      	ldr	r0, [pc, #560]	; (8000db8 <__aeabi_dsub+0x624>)
 8000b86:	4283      	cmp	r3, r0
 8000b88:	d00b      	beq.n	8000ba2 <__aeabi_dsub+0x40e>
 8000b8a:	4663      	mov	r3, ip
 8000b8c:	e6d9      	b.n	8000942 <__aeabi_dsub+0x1ae>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d000      	beq.n	8000b94 <__aeabi_dsub+0x400>
 8000b92:	e096      	b.n	8000cc2 <__aeabi_dsub+0x52e>
 8000b94:	0008      	movs	r0, r1
 8000b96:	4310      	orrs	r0, r2
 8000b98:	d100      	bne.n	8000b9c <__aeabi_dsub+0x408>
 8000b9a:	e0e2      	b.n	8000d62 <__aeabi_dsub+0x5ce>
 8000b9c:	000c      	movs	r4, r1
 8000b9e:	0017      	movs	r7, r2
 8000ba0:	4698      	mov	r8, r3
 8000ba2:	4e85      	ldr	r6, [pc, #532]	; (8000db8 <__aeabi_dsub+0x624>)
 8000ba4:	e67c      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000ba6:	2500      	movs	r5, #0
 8000ba8:	e780      	b.n	8000aac <__aeabi_dsub+0x318>
 8000baa:	2100      	movs	r1, #0
 8000bac:	e78e      	b.n	8000acc <__aeabi_dsub+0x338>
 8000bae:	0023      	movs	r3, r4
 8000bb0:	4650      	mov	r0, sl
 8000bb2:	4303      	orrs	r3, r0
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_dsub+0x426>
 8000bb8:	e0a8      	b.n	8000d0c <__aeabi_dsub+0x578>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dsub+0x42c>
 8000bbe:	e0de      	b.n	8000d7e <__aeabi_dsub+0x5ea>
 8000bc0:	000b      	movs	r3, r1
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dsub+0x434>
 8000bc6:	e66b      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000bc8:	4452      	add	r2, sl
 8000bca:	4552      	cmp	r2, sl
 8000bcc:	4180      	sbcs	r0, r0
 8000bce:	1864      	adds	r4, r4, r1
 8000bd0:	4240      	negs	r0, r0
 8000bd2:	1824      	adds	r4, r4, r0
 8000bd4:	0017      	movs	r7, r2
 8000bd6:	0223      	lsls	r3, r4, #8
 8000bd8:	d400      	bmi.n	8000bdc <__aeabi_dsub+0x448>
 8000bda:	e6fd      	b.n	80009d8 <__aeabi_dsub+0x244>
 8000bdc:	4b77      	ldr	r3, [pc, #476]	; (8000dbc <__aeabi_dsub+0x628>)
 8000bde:	4666      	mov	r6, ip
 8000be0:	401c      	ands	r4, r3
 8000be2:	e65d      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000be4:	0025      	movs	r5, r4
 8000be6:	4650      	mov	r0, sl
 8000be8:	4305      	orrs	r5, r0
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d1cf      	bne.n	8000b8e <__aeabi_dsub+0x3fa>
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d14f      	bne.n	8000c92 <__aeabi_dsub+0x4fe>
 8000bf2:	000c      	movs	r4, r1
 8000bf4:	4314      	orrs	r4, r2
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_dsub+0x466>
 8000bf8:	e0a0      	b.n	8000d3c <__aeabi_dsub+0x5a8>
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	0017      	movs	r7, r2
 8000bfe:	4698      	mov	r8, r3
 8000c00:	e64e      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000c02:	4666      	mov	r6, ip
 8000c04:	2400      	movs	r4, #0
 8000c06:	2700      	movs	r7, #0
 8000c08:	e685      	b.n	8000916 <__aeabi_dsub+0x182>
 8000c0a:	001f      	movs	r7, r3
 8000c0c:	0008      	movs	r0, r1
 8000c0e:	3f20      	subs	r7, #32
 8000c10:	40f8      	lsrs	r0, r7
 8000c12:	0007      	movs	r7, r0
 8000c14:	2b20      	cmp	r3, #32
 8000c16:	d100      	bne.n	8000c1a <__aeabi_dsub+0x486>
 8000c18:	e08e      	b.n	8000d38 <__aeabi_dsub+0x5a4>
 8000c1a:	2040      	movs	r0, #64	; 0x40
 8000c1c:	1ac3      	subs	r3, r0, r3
 8000c1e:	4099      	lsls	r1, r3
 8000c20:	430a      	orrs	r2, r1
 8000c22:	1e51      	subs	r1, r2, #1
 8000c24:	418a      	sbcs	r2, r1
 8000c26:	2100      	movs	r1, #0
 8000c28:	4317      	orrs	r7, r2
 8000c2a:	e692      	b.n	8000952 <__aeabi_dsub+0x1be>
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d114      	bne.n	8000c5a <__aeabi_dsub+0x4c6>
 8000c30:	0026      	movs	r6, r4
 8000c32:	4650      	mov	r0, sl
 8000c34:	4306      	orrs	r6, r0
 8000c36:	d062      	beq.n	8000cfe <__aeabi_dsub+0x56a>
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d15c      	bne.n	8000cf8 <__aeabi_dsub+0x564>
 8000c3e:	1887      	adds	r7, r0, r2
 8000c40:	4297      	cmp	r7, r2
 8000c42:	4192      	sbcs	r2, r2
 8000c44:	1864      	adds	r4, r4, r1
 8000c46:	4252      	negs	r2, r2
 8000c48:	18a4      	adds	r4, r4, r2
 8000c4a:	4666      	mov	r6, ip
 8000c4c:	e687      	b.n	800095e <__aeabi_dsub+0x1ca>
 8000c4e:	4650      	mov	r0, sl
 8000c50:	4320      	orrs	r0, r4
 8000c52:	1e44      	subs	r4, r0, #1
 8000c54:	41a0      	sbcs	r0, r4
 8000c56:	2400      	movs	r4, #0
 8000c58:	e760      	b.n	8000b1c <__aeabi_dsub+0x388>
 8000c5a:	4e57      	ldr	r6, [pc, #348]	; (8000db8 <__aeabi_dsub+0x624>)
 8000c5c:	45b4      	cmp	ip, r6
 8000c5e:	d04e      	beq.n	8000cfe <__aeabi_dsub+0x56a>
 8000c60:	2680      	movs	r6, #128	; 0x80
 8000c62:	0436      	lsls	r6, r6, #16
 8000c64:	425b      	negs	r3, r3
 8000c66:	4334      	orrs	r4, r6
 8000c68:	2b38      	cmp	r3, #56	; 0x38
 8000c6a:	dd00      	ble.n	8000c6e <__aeabi_dsub+0x4da>
 8000c6c:	e07f      	b.n	8000d6e <__aeabi_dsub+0x5da>
 8000c6e:	2b1f      	cmp	r3, #31
 8000c70:	dd00      	ble.n	8000c74 <__aeabi_dsub+0x4e0>
 8000c72:	e08b      	b.n	8000d8c <__aeabi_dsub+0x5f8>
 8000c74:	2620      	movs	r6, #32
 8000c76:	0027      	movs	r7, r4
 8000c78:	4650      	mov	r0, sl
 8000c7a:	1af6      	subs	r6, r6, r3
 8000c7c:	40b7      	lsls	r7, r6
 8000c7e:	40d8      	lsrs	r0, r3
 8000c80:	4307      	orrs	r7, r0
 8000c82:	4650      	mov	r0, sl
 8000c84:	40b0      	lsls	r0, r6
 8000c86:	1e46      	subs	r6, r0, #1
 8000c88:	41b0      	sbcs	r0, r6
 8000c8a:	4307      	orrs	r7, r0
 8000c8c:	40dc      	lsrs	r4, r3
 8000c8e:	18bf      	adds	r7, r7, r2
 8000c90:	e7d6      	b.n	8000c40 <__aeabi_dsub+0x4ac>
 8000c92:	000d      	movs	r5, r1
 8000c94:	4315      	orrs	r5, r2
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dsub+0x506>
 8000c98:	e602      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000c9a:	4650      	mov	r0, sl
 8000c9c:	1a80      	subs	r0, r0, r2
 8000c9e:	4582      	cmp	sl, r0
 8000ca0:	41bf      	sbcs	r7, r7
 8000ca2:	1a65      	subs	r5, r4, r1
 8000ca4:	427f      	negs	r7, r7
 8000ca6:	1bed      	subs	r5, r5, r7
 8000ca8:	4684      	mov	ip, r0
 8000caa:	0228      	lsls	r0, r5, #8
 8000cac:	d400      	bmi.n	8000cb0 <__aeabi_dsub+0x51c>
 8000cae:	e68d      	b.n	80009cc <__aeabi_dsub+0x238>
 8000cb0:	4650      	mov	r0, sl
 8000cb2:	1a17      	subs	r7, r2, r0
 8000cb4:	42ba      	cmp	r2, r7
 8000cb6:	4192      	sbcs	r2, r2
 8000cb8:	1b0c      	subs	r4, r1, r4
 8000cba:	4252      	negs	r2, r2
 8000cbc:	1aa4      	subs	r4, r4, r2
 8000cbe:	4698      	mov	r8, r3
 8000cc0:	e5ee      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000cc2:	000d      	movs	r5, r1
 8000cc4:	4315      	orrs	r5, r2
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dsub+0x536>
 8000cc8:	e76b      	b.n	8000ba2 <__aeabi_dsub+0x40e>
 8000cca:	4650      	mov	r0, sl
 8000ccc:	0767      	lsls	r7, r4, #29
 8000cce:	08c0      	lsrs	r0, r0, #3
 8000cd0:	4307      	orrs	r7, r0
 8000cd2:	2080      	movs	r0, #128	; 0x80
 8000cd4:	08e4      	lsrs	r4, r4, #3
 8000cd6:	0300      	lsls	r0, r0, #12
 8000cd8:	4204      	tst	r4, r0
 8000cda:	d007      	beq.n	8000cec <__aeabi_dsub+0x558>
 8000cdc:	08cd      	lsrs	r5, r1, #3
 8000cde:	4205      	tst	r5, r0
 8000ce0:	d104      	bne.n	8000cec <__aeabi_dsub+0x558>
 8000ce2:	002c      	movs	r4, r5
 8000ce4:	4698      	mov	r8, r3
 8000ce6:	08d7      	lsrs	r7, r2, #3
 8000ce8:	0749      	lsls	r1, r1, #29
 8000cea:	430f      	orrs	r7, r1
 8000cec:	0f7b      	lsrs	r3, r7, #29
 8000cee:	00e4      	lsls	r4, r4, #3
 8000cf0:	431c      	orrs	r4, r3
 8000cf2:	00ff      	lsls	r7, r7, #3
 8000cf4:	4e30      	ldr	r6, [pc, #192]	; (8000db8 <__aeabi_dsub+0x624>)
 8000cf6:	e5d3      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000cf8:	4e2f      	ldr	r6, [pc, #188]	; (8000db8 <__aeabi_dsub+0x624>)
 8000cfa:	45b4      	cmp	ip, r6
 8000cfc:	d1b4      	bne.n	8000c68 <__aeabi_dsub+0x4d4>
 8000cfe:	000c      	movs	r4, r1
 8000d00:	0017      	movs	r7, r2
 8000d02:	4666      	mov	r6, ip
 8000d04:	e5cc      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000d06:	2700      	movs	r7, #0
 8000d08:	2400      	movs	r4, #0
 8000d0a:	e5e8      	b.n	80008de <__aeabi_dsub+0x14a>
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d039      	beq.n	8000d84 <__aeabi_dsub+0x5f0>
 8000d10:	000b      	movs	r3, r1
 8000d12:	4313      	orrs	r3, r2
 8000d14:	d100      	bne.n	8000d18 <__aeabi_dsub+0x584>
 8000d16:	e744      	b.n	8000ba2 <__aeabi_dsub+0x40e>
 8000d18:	08c0      	lsrs	r0, r0, #3
 8000d1a:	0767      	lsls	r7, r4, #29
 8000d1c:	4307      	orrs	r7, r0
 8000d1e:	2080      	movs	r0, #128	; 0x80
 8000d20:	08e4      	lsrs	r4, r4, #3
 8000d22:	0300      	lsls	r0, r0, #12
 8000d24:	4204      	tst	r4, r0
 8000d26:	d0e1      	beq.n	8000cec <__aeabi_dsub+0x558>
 8000d28:	08cb      	lsrs	r3, r1, #3
 8000d2a:	4203      	tst	r3, r0
 8000d2c:	d1de      	bne.n	8000cec <__aeabi_dsub+0x558>
 8000d2e:	08d7      	lsrs	r7, r2, #3
 8000d30:	0749      	lsls	r1, r1, #29
 8000d32:	430f      	orrs	r7, r1
 8000d34:	001c      	movs	r4, r3
 8000d36:	e7d9      	b.n	8000cec <__aeabi_dsub+0x558>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e771      	b.n	8000c20 <__aeabi_dsub+0x48c>
 8000d3c:	2500      	movs	r5, #0
 8000d3e:	2700      	movs	r7, #0
 8000d40:	e5e9      	b.n	8000916 <__aeabi_dsub+0x182>
 8000d42:	002e      	movs	r6, r5
 8000d44:	0027      	movs	r7, r4
 8000d46:	3e20      	subs	r6, #32
 8000d48:	40f7      	lsrs	r7, r6
 8000d4a:	2d20      	cmp	r5, #32
 8000d4c:	d02f      	beq.n	8000dae <__aeabi_dsub+0x61a>
 8000d4e:	2640      	movs	r6, #64	; 0x40
 8000d50:	1b75      	subs	r5, r6, r5
 8000d52:	40ac      	lsls	r4, r5
 8000d54:	4650      	mov	r0, sl
 8000d56:	4320      	orrs	r0, r4
 8000d58:	1e44      	subs	r4, r0, #1
 8000d5a:	41a0      	sbcs	r0, r4
 8000d5c:	2400      	movs	r4, #0
 8000d5e:	4338      	orrs	r0, r7
 8000d60:	e6dc      	b.n	8000b1c <__aeabi_dsub+0x388>
 8000d62:	2480      	movs	r4, #128	; 0x80
 8000d64:	2500      	movs	r5, #0
 8000d66:	0324      	lsls	r4, r4, #12
 8000d68:	4e13      	ldr	r6, [pc, #76]	; (8000db8 <__aeabi_dsub+0x624>)
 8000d6a:	2700      	movs	r7, #0
 8000d6c:	e5d3      	b.n	8000916 <__aeabi_dsub+0x182>
 8000d6e:	4650      	mov	r0, sl
 8000d70:	4320      	orrs	r0, r4
 8000d72:	0007      	movs	r7, r0
 8000d74:	1e78      	subs	r0, r7, #1
 8000d76:	4187      	sbcs	r7, r0
 8000d78:	2400      	movs	r4, #0
 8000d7a:	18bf      	adds	r7, r7, r2
 8000d7c:	e760      	b.n	8000c40 <__aeabi_dsub+0x4ac>
 8000d7e:	000c      	movs	r4, r1
 8000d80:	0017      	movs	r7, r2
 8000d82:	e58d      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000d84:	000c      	movs	r4, r1
 8000d86:	0017      	movs	r7, r2
 8000d88:	4e0b      	ldr	r6, [pc, #44]	; (8000db8 <__aeabi_dsub+0x624>)
 8000d8a:	e589      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000d8c:	001e      	movs	r6, r3
 8000d8e:	0027      	movs	r7, r4
 8000d90:	3e20      	subs	r6, #32
 8000d92:	40f7      	lsrs	r7, r6
 8000d94:	2b20      	cmp	r3, #32
 8000d96:	d00c      	beq.n	8000db2 <__aeabi_dsub+0x61e>
 8000d98:	2640      	movs	r6, #64	; 0x40
 8000d9a:	1af3      	subs	r3, r6, r3
 8000d9c:	409c      	lsls	r4, r3
 8000d9e:	4650      	mov	r0, sl
 8000da0:	4320      	orrs	r0, r4
 8000da2:	1e44      	subs	r4, r0, #1
 8000da4:	41a0      	sbcs	r0, r4
 8000da6:	4307      	orrs	r7, r0
 8000da8:	2400      	movs	r4, #0
 8000daa:	18bf      	adds	r7, r7, r2
 8000dac:	e748      	b.n	8000c40 <__aeabi_dsub+0x4ac>
 8000dae:	2400      	movs	r4, #0
 8000db0:	e7d0      	b.n	8000d54 <__aeabi_dsub+0x5c0>
 8000db2:	2400      	movs	r4, #0
 8000db4:	e7f3      	b.n	8000d9e <__aeabi_dsub+0x60a>
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	000007ff 	.word	0x000007ff
 8000dbc:	ff7fffff 	.word	0xff7fffff

08000dc0 <__aeabi_d2iz>:
 8000dc0:	b530      	push	{r4, r5, lr}
 8000dc2:	4d13      	ldr	r5, [pc, #76]	; (8000e10 <__aeabi_d2iz+0x50>)
 8000dc4:	030a      	lsls	r2, r1, #12
 8000dc6:	004b      	lsls	r3, r1, #1
 8000dc8:	0b12      	lsrs	r2, r2, #12
 8000dca:	0d5b      	lsrs	r3, r3, #21
 8000dcc:	0fc9      	lsrs	r1, r1, #31
 8000dce:	2400      	movs	r4, #0
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	dd10      	ble.n	8000df6 <__aeabi_d2iz+0x36>
 8000dd4:	4c0f      	ldr	r4, [pc, #60]	; (8000e14 <__aeabi_d2iz+0x54>)
 8000dd6:	42a3      	cmp	r3, r4
 8000dd8:	dc0f      	bgt.n	8000dfa <__aeabi_d2iz+0x3a>
 8000dda:	2480      	movs	r4, #128	; 0x80
 8000ddc:	4d0e      	ldr	r5, [pc, #56]	; (8000e18 <__aeabi_d2iz+0x58>)
 8000dde:	0364      	lsls	r4, r4, #13
 8000de0:	4322      	orrs	r2, r4
 8000de2:	1aed      	subs	r5, r5, r3
 8000de4:	2d1f      	cmp	r5, #31
 8000de6:	dd0b      	ble.n	8000e00 <__aeabi_d2iz+0x40>
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <__aeabi_d2iz+0x5c>)
 8000dea:	1ac3      	subs	r3, r0, r3
 8000dec:	40da      	lsrs	r2, r3
 8000dee:	4254      	negs	r4, r2
 8000df0:	2900      	cmp	r1, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_d2iz+0x36>
 8000df4:	0014      	movs	r4, r2
 8000df6:	0020      	movs	r0, r4
 8000df8:	bd30      	pop	{r4, r5, pc}
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <__aeabi_d2iz+0x60>)
 8000dfc:	18cc      	adds	r4, r1, r3
 8000dfe:	e7fa      	b.n	8000df6 <__aeabi_d2iz+0x36>
 8000e00:	4c08      	ldr	r4, [pc, #32]	; (8000e24 <__aeabi_d2iz+0x64>)
 8000e02:	40e8      	lsrs	r0, r5
 8000e04:	46a4      	mov	ip, r4
 8000e06:	4463      	add	r3, ip
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	4302      	orrs	r2, r0
 8000e0c:	e7ef      	b.n	8000dee <__aeabi_d2iz+0x2e>
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	000003fe 	.word	0x000003fe
 8000e14:	0000041d 	.word	0x0000041d
 8000e18:	00000433 	.word	0x00000433
 8000e1c:	00000413 	.word	0x00000413
 8000e20:	7fffffff 	.word	0x7fffffff
 8000e24:	fffffbed 	.word	0xfffffbed

08000e28 <__aeabi_ui2d>:
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	1e04      	subs	r4, r0, #0
 8000e2c:	d028      	beq.n	8000e80 <__aeabi_ui2d+0x58>
 8000e2e:	f000 f871 	bl	8000f14 <__clzsi2>
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <__aeabi_ui2d+0x60>)
 8000e34:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <__aeabi_ui2d+0x64>)
 8000e36:	1a1b      	subs	r3, r3, r0
 8000e38:	1ad2      	subs	r2, r2, r3
 8000e3a:	2a1f      	cmp	r2, #31
 8000e3c:	dd15      	ble.n	8000e6a <__aeabi_ui2d+0x42>
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <__aeabi_ui2d+0x68>)
 8000e40:	1ad2      	subs	r2, r2, r3
 8000e42:	4094      	lsls	r4, r2
 8000e44:	2200      	movs	r2, #0
 8000e46:	0324      	lsls	r4, r4, #12
 8000e48:	055b      	lsls	r3, r3, #21
 8000e4a:	0b24      	lsrs	r4, r4, #12
 8000e4c:	0d5b      	lsrs	r3, r3, #21
 8000e4e:	2100      	movs	r1, #0
 8000e50:	0010      	movs	r0, r2
 8000e52:	0324      	lsls	r4, r4, #12
 8000e54:	0d0a      	lsrs	r2, r1, #20
 8000e56:	0b24      	lsrs	r4, r4, #12
 8000e58:	0512      	lsls	r2, r2, #20
 8000e5a:	4322      	orrs	r2, r4
 8000e5c:	4c0d      	ldr	r4, [pc, #52]	; (8000e94 <__aeabi_ui2d+0x6c>)
 8000e5e:	051b      	lsls	r3, r3, #20
 8000e60:	4022      	ands	r2, r4
 8000e62:	4313      	orrs	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	0859      	lsrs	r1, r3, #1
 8000e68:	bd10      	pop	{r4, pc}
 8000e6a:	0021      	movs	r1, r4
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	210b      	movs	r1, #11
 8000e72:	1a08      	subs	r0, r1, r0
 8000e74:	40c4      	lsrs	r4, r0
 8000e76:	055b      	lsls	r3, r3, #21
 8000e78:	0324      	lsls	r4, r4, #12
 8000e7a:	0b24      	lsrs	r4, r4, #12
 8000e7c:	0d5b      	lsrs	r3, r3, #21
 8000e7e:	e7e6      	b.n	8000e4e <__aeabi_ui2d+0x26>
 8000e80:	2300      	movs	r3, #0
 8000e82:	2400      	movs	r4, #0
 8000e84:	2200      	movs	r2, #0
 8000e86:	e7e2      	b.n	8000e4e <__aeabi_ui2d+0x26>
 8000e88:	0000041e 	.word	0x0000041e
 8000e8c:	00000433 	.word	0x00000433
 8000e90:	00000413 	.word	0x00000413
 8000e94:	800fffff 	.word	0x800fffff

08000e98 <__aeabi_cdrcmple>:
 8000e98:	4684      	mov	ip, r0
 8000e9a:	1c10      	adds	r0, r2, #0
 8000e9c:	4662      	mov	r2, ip
 8000e9e:	468c      	mov	ip, r1
 8000ea0:	1c19      	adds	r1, r3, #0
 8000ea2:	4663      	mov	r3, ip
 8000ea4:	e000      	b.n	8000ea8 <__aeabi_cdcmpeq>
 8000ea6:	46c0      	nop			; (mov r8, r8)

08000ea8 <__aeabi_cdcmpeq>:
 8000ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000eaa:	f000 f8ef 	bl	800108c <__ledf2>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d401      	bmi.n	8000eb6 <__aeabi_cdcmpeq+0xe>
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	42c8      	cmn	r0, r1
 8000eb6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000eb8 <__aeabi_dcmpeq>:
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	f000 f849 	bl	8000f50 <__eqdf2>
 8000ebe:	4240      	negs	r0, r0
 8000ec0:	3001      	adds	r0, #1
 8000ec2:	bd10      	pop	{r4, pc}

08000ec4 <__aeabi_dcmplt>:
 8000ec4:	b510      	push	{r4, lr}
 8000ec6:	f000 f8e1 	bl	800108c <__ledf2>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	db01      	blt.n	8000ed2 <__aeabi_dcmplt+0xe>
 8000ece:	2000      	movs	r0, #0
 8000ed0:	bd10      	pop	{r4, pc}
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	bd10      	pop	{r4, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)

08000ed8 <__aeabi_dcmple>:
 8000ed8:	b510      	push	{r4, lr}
 8000eda:	f000 f8d7 	bl	800108c <__ledf2>
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	dd01      	ble.n	8000ee6 <__aeabi_dcmple+0xe>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	bd10      	pop	{r4, pc}
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	bd10      	pop	{r4, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)

08000eec <__aeabi_dcmpgt>:
 8000eec:	b510      	push	{r4, lr}
 8000eee:	f000 f869 	bl	8000fc4 <__gedf2>
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	dc01      	bgt.n	8000efa <__aeabi_dcmpgt+0xe>
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	bd10      	pop	{r4, pc}
 8000efa:	2001      	movs	r0, #1
 8000efc:	bd10      	pop	{r4, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)

08000f00 <__aeabi_dcmpge>:
 8000f00:	b510      	push	{r4, lr}
 8000f02:	f000 f85f 	bl	8000fc4 <__gedf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	da01      	bge.n	8000f0e <__aeabi_dcmpge+0xe>
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	bd10      	pop	{r4, pc}
 8000f0e:	2001      	movs	r0, #1
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)

08000f14 <__clzsi2>:
 8000f14:	211c      	movs	r1, #28
 8000f16:	2301      	movs	r3, #1
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	4298      	cmp	r0, r3
 8000f1c:	d301      	bcc.n	8000f22 <__clzsi2+0xe>
 8000f1e:	0c00      	lsrs	r0, r0, #16
 8000f20:	3910      	subs	r1, #16
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	4298      	cmp	r0, r3
 8000f26:	d301      	bcc.n	8000f2c <__clzsi2+0x18>
 8000f28:	0a00      	lsrs	r0, r0, #8
 8000f2a:	3908      	subs	r1, #8
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	d301      	bcc.n	8000f36 <__clzsi2+0x22>
 8000f32:	0900      	lsrs	r0, r0, #4
 8000f34:	3904      	subs	r1, #4
 8000f36:	a202      	add	r2, pc, #8	; (adr r2, 8000f40 <__clzsi2+0x2c>)
 8000f38:	5c10      	ldrb	r0, [r2, r0]
 8000f3a:	1840      	adds	r0, r0, r1
 8000f3c:	4770      	bx	lr
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	02020304 	.word	0x02020304
 8000f44:	01010101 	.word	0x01010101
	...

08000f50 <__eqdf2>:
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	464f      	mov	r7, r9
 8000f54:	4646      	mov	r6, r8
 8000f56:	46d6      	mov	lr, sl
 8000f58:	005c      	lsls	r4, r3, #1
 8000f5a:	b5c0      	push	{r6, r7, lr}
 8000f5c:	031f      	lsls	r7, r3, #12
 8000f5e:	0fdb      	lsrs	r3, r3, #31
 8000f60:	469a      	mov	sl, r3
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <__eqdf2+0x70>)
 8000f64:	030e      	lsls	r6, r1, #12
 8000f66:	004d      	lsls	r5, r1, #1
 8000f68:	4684      	mov	ip, r0
 8000f6a:	4680      	mov	r8, r0
 8000f6c:	0b36      	lsrs	r6, r6, #12
 8000f6e:	0d6d      	lsrs	r5, r5, #21
 8000f70:	0fc9      	lsrs	r1, r1, #31
 8000f72:	4691      	mov	r9, r2
 8000f74:	0b3f      	lsrs	r7, r7, #12
 8000f76:	0d64      	lsrs	r4, r4, #21
 8000f78:	2001      	movs	r0, #1
 8000f7a:	429d      	cmp	r5, r3
 8000f7c:	d008      	beq.n	8000f90 <__eqdf2+0x40>
 8000f7e:	429c      	cmp	r4, r3
 8000f80:	d001      	beq.n	8000f86 <__eqdf2+0x36>
 8000f82:	42a5      	cmp	r5, r4
 8000f84:	d00b      	beq.n	8000f9e <__eqdf2+0x4e>
 8000f86:	bc1c      	pop	{r2, r3, r4}
 8000f88:	4690      	mov	r8, r2
 8000f8a:	4699      	mov	r9, r3
 8000f8c:	46a2      	mov	sl, r4
 8000f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f90:	4663      	mov	r3, ip
 8000f92:	4333      	orrs	r3, r6
 8000f94:	d1f7      	bne.n	8000f86 <__eqdf2+0x36>
 8000f96:	42ac      	cmp	r4, r5
 8000f98:	d1f5      	bne.n	8000f86 <__eqdf2+0x36>
 8000f9a:	433a      	orrs	r2, r7
 8000f9c:	d1f3      	bne.n	8000f86 <__eqdf2+0x36>
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	42be      	cmp	r6, r7
 8000fa2:	d1f0      	bne.n	8000f86 <__eqdf2+0x36>
 8000fa4:	45c8      	cmp	r8, r9
 8000fa6:	d1ee      	bne.n	8000f86 <__eqdf2+0x36>
 8000fa8:	4551      	cmp	r1, sl
 8000faa:	d007      	beq.n	8000fbc <__eqdf2+0x6c>
 8000fac:	2d00      	cmp	r5, #0
 8000fae:	d1ea      	bne.n	8000f86 <__eqdf2+0x36>
 8000fb0:	4663      	mov	r3, ip
 8000fb2:	431e      	orrs	r6, r3
 8000fb4:	0030      	movs	r0, r6
 8000fb6:	1e46      	subs	r6, r0, #1
 8000fb8:	41b0      	sbcs	r0, r6
 8000fba:	e7e4      	b.n	8000f86 <__eqdf2+0x36>
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	e7e2      	b.n	8000f86 <__eqdf2+0x36>
 8000fc0:	000007ff 	.word	0x000007ff

08000fc4 <__gedf2>:
 8000fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc6:	4645      	mov	r5, r8
 8000fc8:	46de      	mov	lr, fp
 8000fca:	4657      	mov	r7, sl
 8000fcc:	464e      	mov	r6, r9
 8000fce:	b5e0      	push	{r5, r6, r7, lr}
 8000fd0:	031f      	lsls	r7, r3, #12
 8000fd2:	0b3d      	lsrs	r5, r7, #12
 8000fd4:	4f2c      	ldr	r7, [pc, #176]	; (8001088 <__gedf2+0xc4>)
 8000fd6:	030e      	lsls	r6, r1, #12
 8000fd8:	004c      	lsls	r4, r1, #1
 8000fda:	46ab      	mov	fp, r5
 8000fdc:	005d      	lsls	r5, r3, #1
 8000fde:	4684      	mov	ip, r0
 8000fe0:	0b36      	lsrs	r6, r6, #12
 8000fe2:	0d64      	lsrs	r4, r4, #21
 8000fe4:	0fc9      	lsrs	r1, r1, #31
 8000fe6:	4690      	mov	r8, r2
 8000fe8:	0d6d      	lsrs	r5, r5, #21
 8000fea:	0fdb      	lsrs	r3, r3, #31
 8000fec:	42bc      	cmp	r4, r7
 8000fee:	d02a      	beq.n	8001046 <__gedf2+0x82>
 8000ff0:	4f25      	ldr	r7, [pc, #148]	; (8001088 <__gedf2+0xc4>)
 8000ff2:	42bd      	cmp	r5, r7
 8000ff4:	d02d      	beq.n	8001052 <__gedf2+0x8e>
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	d10f      	bne.n	800101a <__gedf2+0x56>
 8000ffa:	4330      	orrs	r0, r6
 8000ffc:	0007      	movs	r7, r0
 8000ffe:	4681      	mov	r9, r0
 8001000:	4278      	negs	r0, r7
 8001002:	4178      	adcs	r0, r7
 8001004:	b2c0      	uxtb	r0, r0
 8001006:	2d00      	cmp	r5, #0
 8001008:	d117      	bne.n	800103a <__gedf2+0x76>
 800100a:	465f      	mov	r7, fp
 800100c:	433a      	orrs	r2, r7
 800100e:	d114      	bne.n	800103a <__gedf2+0x76>
 8001010:	464b      	mov	r3, r9
 8001012:	2000      	movs	r0, #0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00a      	beq.n	800102e <__gedf2+0x6a>
 8001018:	e006      	b.n	8001028 <__gedf2+0x64>
 800101a:	2d00      	cmp	r5, #0
 800101c:	d102      	bne.n	8001024 <__gedf2+0x60>
 800101e:	4658      	mov	r0, fp
 8001020:	4302      	orrs	r2, r0
 8001022:	d001      	beq.n	8001028 <__gedf2+0x64>
 8001024:	4299      	cmp	r1, r3
 8001026:	d018      	beq.n	800105a <__gedf2+0x96>
 8001028:	4248      	negs	r0, r1
 800102a:	2101      	movs	r1, #1
 800102c:	4308      	orrs	r0, r1
 800102e:	bc3c      	pop	{r2, r3, r4, r5}
 8001030:	4690      	mov	r8, r2
 8001032:	4699      	mov	r9, r3
 8001034:	46a2      	mov	sl, r4
 8001036:	46ab      	mov	fp, r5
 8001038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800103a:	2800      	cmp	r0, #0
 800103c:	d0f2      	beq.n	8001024 <__gedf2+0x60>
 800103e:	2001      	movs	r0, #1
 8001040:	3b01      	subs	r3, #1
 8001042:	4318      	orrs	r0, r3
 8001044:	e7f3      	b.n	800102e <__gedf2+0x6a>
 8001046:	0037      	movs	r7, r6
 8001048:	4307      	orrs	r7, r0
 800104a:	d0d1      	beq.n	8000ff0 <__gedf2+0x2c>
 800104c:	2002      	movs	r0, #2
 800104e:	4240      	negs	r0, r0
 8001050:	e7ed      	b.n	800102e <__gedf2+0x6a>
 8001052:	465f      	mov	r7, fp
 8001054:	4317      	orrs	r7, r2
 8001056:	d0ce      	beq.n	8000ff6 <__gedf2+0x32>
 8001058:	e7f8      	b.n	800104c <__gedf2+0x88>
 800105a:	42ac      	cmp	r4, r5
 800105c:	dce4      	bgt.n	8001028 <__gedf2+0x64>
 800105e:	da03      	bge.n	8001068 <__gedf2+0xa4>
 8001060:	1e48      	subs	r0, r1, #1
 8001062:	2101      	movs	r1, #1
 8001064:	4308      	orrs	r0, r1
 8001066:	e7e2      	b.n	800102e <__gedf2+0x6a>
 8001068:	455e      	cmp	r6, fp
 800106a:	d8dd      	bhi.n	8001028 <__gedf2+0x64>
 800106c:	d006      	beq.n	800107c <__gedf2+0xb8>
 800106e:	2000      	movs	r0, #0
 8001070:	455e      	cmp	r6, fp
 8001072:	d2dc      	bcs.n	800102e <__gedf2+0x6a>
 8001074:	2301      	movs	r3, #1
 8001076:	1e48      	subs	r0, r1, #1
 8001078:	4318      	orrs	r0, r3
 800107a:	e7d8      	b.n	800102e <__gedf2+0x6a>
 800107c:	45c4      	cmp	ip, r8
 800107e:	d8d3      	bhi.n	8001028 <__gedf2+0x64>
 8001080:	2000      	movs	r0, #0
 8001082:	45c4      	cmp	ip, r8
 8001084:	d3f6      	bcc.n	8001074 <__gedf2+0xb0>
 8001086:	e7d2      	b.n	800102e <__gedf2+0x6a>
 8001088:	000007ff 	.word	0x000007ff

0800108c <__ledf2>:
 800108c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108e:	464e      	mov	r6, r9
 8001090:	4645      	mov	r5, r8
 8001092:	46de      	mov	lr, fp
 8001094:	4657      	mov	r7, sl
 8001096:	005c      	lsls	r4, r3, #1
 8001098:	b5e0      	push	{r5, r6, r7, lr}
 800109a:	031f      	lsls	r7, r3, #12
 800109c:	0fdb      	lsrs	r3, r3, #31
 800109e:	4699      	mov	r9, r3
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <__ledf2+0xc0>)
 80010a2:	030e      	lsls	r6, r1, #12
 80010a4:	004d      	lsls	r5, r1, #1
 80010a6:	0fc9      	lsrs	r1, r1, #31
 80010a8:	4684      	mov	ip, r0
 80010aa:	0b36      	lsrs	r6, r6, #12
 80010ac:	0d6d      	lsrs	r5, r5, #21
 80010ae:	468b      	mov	fp, r1
 80010b0:	4690      	mov	r8, r2
 80010b2:	0b3f      	lsrs	r7, r7, #12
 80010b4:	0d64      	lsrs	r4, r4, #21
 80010b6:	429d      	cmp	r5, r3
 80010b8:	d020      	beq.n	80010fc <__ledf2+0x70>
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <__ledf2+0xc0>)
 80010bc:	429c      	cmp	r4, r3
 80010be:	d022      	beq.n	8001106 <__ledf2+0x7a>
 80010c0:	2d00      	cmp	r5, #0
 80010c2:	d112      	bne.n	80010ea <__ledf2+0x5e>
 80010c4:	4330      	orrs	r0, r6
 80010c6:	4243      	negs	r3, r0
 80010c8:	4143      	adcs	r3, r0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2c00      	cmp	r4, #0
 80010ce:	d01f      	beq.n	8001110 <__ledf2+0x84>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00c      	beq.n	80010ee <__ledf2+0x62>
 80010d4:	464b      	mov	r3, r9
 80010d6:	2001      	movs	r0, #1
 80010d8:	3b01      	subs	r3, #1
 80010da:	4303      	orrs	r3, r0
 80010dc:	0018      	movs	r0, r3
 80010de:	bc3c      	pop	{r2, r3, r4, r5}
 80010e0:	4690      	mov	r8, r2
 80010e2:	4699      	mov	r9, r3
 80010e4:	46a2      	mov	sl, r4
 80010e6:	46ab      	mov	fp, r5
 80010e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ea:	2c00      	cmp	r4, #0
 80010ec:	d016      	beq.n	800111c <__ledf2+0x90>
 80010ee:	45cb      	cmp	fp, r9
 80010f0:	d017      	beq.n	8001122 <__ledf2+0x96>
 80010f2:	465b      	mov	r3, fp
 80010f4:	4259      	negs	r1, r3
 80010f6:	2301      	movs	r3, #1
 80010f8:	430b      	orrs	r3, r1
 80010fa:	e7ef      	b.n	80010dc <__ledf2+0x50>
 80010fc:	0031      	movs	r1, r6
 80010fe:	2302      	movs	r3, #2
 8001100:	4301      	orrs	r1, r0
 8001102:	d1eb      	bne.n	80010dc <__ledf2+0x50>
 8001104:	e7d9      	b.n	80010ba <__ledf2+0x2e>
 8001106:	0039      	movs	r1, r7
 8001108:	2302      	movs	r3, #2
 800110a:	4311      	orrs	r1, r2
 800110c:	d1e6      	bne.n	80010dc <__ledf2+0x50>
 800110e:	e7d7      	b.n	80010c0 <__ledf2+0x34>
 8001110:	433a      	orrs	r2, r7
 8001112:	d1dd      	bne.n	80010d0 <__ledf2+0x44>
 8001114:	2300      	movs	r3, #0
 8001116:	2800      	cmp	r0, #0
 8001118:	d0e0      	beq.n	80010dc <__ledf2+0x50>
 800111a:	e7ea      	b.n	80010f2 <__ledf2+0x66>
 800111c:	433a      	orrs	r2, r7
 800111e:	d1e6      	bne.n	80010ee <__ledf2+0x62>
 8001120:	e7e7      	b.n	80010f2 <__ledf2+0x66>
 8001122:	42a5      	cmp	r5, r4
 8001124:	dce5      	bgt.n	80010f2 <__ledf2+0x66>
 8001126:	db05      	blt.n	8001134 <__ledf2+0xa8>
 8001128:	42be      	cmp	r6, r7
 800112a:	d8e2      	bhi.n	80010f2 <__ledf2+0x66>
 800112c:	d007      	beq.n	800113e <__ledf2+0xb2>
 800112e:	2300      	movs	r3, #0
 8001130:	42be      	cmp	r6, r7
 8001132:	d2d3      	bcs.n	80010dc <__ledf2+0x50>
 8001134:	4659      	mov	r1, fp
 8001136:	2301      	movs	r3, #1
 8001138:	3901      	subs	r1, #1
 800113a:	430b      	orrs	r3, r1
 800113c:	e7ce      	b.n	80010dc <__ledf2+0x50>
 800113e:	45c4      	cmp	ip, r8
 8001140:	d8d7      	bhi.n	80010f2 <__ledf2+0x66>
 8001142:	2300      	movs	r3, #0
 8001144:	45c4      	cmp	ip, r8
 8001146:	d3f5      	bcc.n	8001134 <__ledf2+0xa8>
 8001148:	e7c8      	b.n	80010dc <__ledf2+0x50>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	000007ff 	.word	0x000007ff

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	20fa      	movs	r0, #250	; 0xfa
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_InitTick+0x3c>)
 8001158:	0080      	lsls	r0, r0, #2
 800115a:	7819      	ldrb	r1, [r3, #0]
 800115c:	f7fe fff0 	bl	8000140 <__udivsi3>
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_InitTick+0x40>)
 8001162:	0001      	movs	r1, r0
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	f7fe ffeb 	bl	8000140 <__udivsi3>
 800116a:	f000 f99b 	bl	80014a4 <HAL_SYSTICK_Config>
 800116e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001170:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001172:	2c00      	cmp	r4, #0
 8001174:	d109      	bne.n	800118a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	2d03      	cmp	r5, #3
 8001178:	d807      	bhi.n	800118a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117a:	3802      	subs	r0, #2
 800117c:	0022      	movs	r2, r4
 800117e:	0029      	movs	r1, r5
 8001180:	f000 f954 	bl	800142c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	0020      	movs	r0, r4
 8001186:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_InitTick+0x44>)
 8001188:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800118a:	bd70      	pop	{r4, r5, r6, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	2000000c 	.word	0x2000000c
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	2310      	movs	r3, #16
 800119a:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_Init+0x1c>)
{
 800119c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a0:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a2:	430b      	orrs	r3, r1
 80011a4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	f7ff ffd3 	bl	8001150 <HAL_InitTick>
  HAL_MspInit();
 80011aa:	f002 fb7f 	bl	80038ac <HAL_MspInit>
}
 80011ae:	2000      	movs	r0, #0
 80011b0:	bd10      	pop	{r4, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	40022000 	.word	0x40022000

080011b8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_IncTick+0x10>)
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <HAL_IncTick+0x14>)
 80011bc:	6811      	ldr	r1, [r2, #0]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	185b      	adds	r3, r3, r1
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	4770      	bx	lr
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	200000e0 	.word	0x200000e0
 80011cc:	20000000 	.word	0x20000000

080011d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011d0:	4b01      	ldr	r3, [pc, #4]	; (80011d8 <HAL_GetTick+0x8>)
 80011d2:	6818      	ldr	r0, [r3, #0]
}
 80011d4:	4770      	bx	lr
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	200000e0 	.word	0x200000e0

080011dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011de:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80011e0:	2001      	movs	r0, #1
  if(hadc == NULL)
 80011e2:	2c00      	cmp	r4, #0
 80011e4:	d073      	beq.n	80012ce <HAL_ADC_Init+0xf2>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d106      	bne.n	80011fa <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ec:	0022      	movs	r2, r4
 80011ee:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80011f0:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011f2:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80011f4:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80011f6:	f002 fb71 	bl	80038dc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011fc:	06db      	lsls	r3, r3, #27
 80011fe:	d500      	bpl.n	8001202 <HAL_ADC_Init+0x26>
 8001200:	e07a      	b.n	80012f8 <HAL_ADC_Init+0x11c>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001202:	2204      	movs	r2, #4
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	6898      	ldr	r0, [r3, #8]
 8001208:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800120a:	d000      	beq.n	800120e <HAL_ADC_Init+0x32>
 800120c:	e074      	b.n	80012f8 <HAL_ADC_Init+0x11c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001210:	4943      	ldr	r1, [pc, #268]	; (8001320 <HAL_ADC_Init+0x144>)
 8001212:	4011      	ands	r1, r2
 8001214:	2202      	movs	r2, #2
 8001216:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001218:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800121a:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	400a      	ands	r2, r1
 8001220:	2a01      	cmp	r2, #1
 8001222:	d000      	beq.n	8001226 <HAL_ADC_Init+0x4a>
 8001224:	e06e      	b.n	8001304 <HAL_ADC_Init+0x128>
 8001226:	6819      	ldr	r1, [r3, #0]
 8001228:	4211      	tst	r1, r2
 800122a:	d102      	bne.n	8001232 <HAL_ADC_Init+0x56>
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	0412      	lsls	r2, r2, #16
 8001230:	d568      	bpl.n	8001304 <HAL_ADC_Init+0x128>
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	493b      	ldr	r1, [pc, #236]	; (8001324 <HAL_ADC_Init+0x148>)
 8001236:	400a      	ands	r2, r1
 8001238:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800123a:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800123c:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800123e:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001240:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001242:	4315      	orrs	r5, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001244:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001246:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001248:	3a01      	subs	r2, #1
 800124a:	1e56      	subs	r6, r2, #1
 800124c:	41b2      	sbcs	r2, r6
 800124e:	0316      	lsls	r6, r2, #12
 8001250:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001252:	034f      	lsls	r7, r1, #13
 8001254:	4315      	orrs	r5, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001256:	6922      	ldr	r2, [r4, #16]
 8001258:	432f      	orrs	r7, r5
 800125a:	2a02      	cmp	r2, #2
 800125c:	d100      	bne.n	8001260 <HAL_ADC_Init+0x84>
 800125e:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001260:	1d62      	adds	r2, r4, #5
 8001262:	7fd2      	ldrb	r2, [r2, #31]
 8001264:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001266:	433a      	orrs	r2, r7
 8001268:	4332      	orrs	r2, r6
 800126a:	4302      	orrs	r2, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800126c:	7ee0      	ldrb	r0, [r4, #27]
 800126e:	2801      	cmp	r0, #1
 8001270:	d104      	bne.n	800127c <HAL_ADC_Init+0xa0>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001272:	2900      	cmp	r1, #0
 8001274:	d12c      	bne.n	80012d0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0249      	lsls	r1, r1, #9
 800127a:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800127c:	20c2      	movs	r0, #194	; 0xc2
 800127e:	69e1      	ldr	r1, [r4, #28]
 8001280:	30ff      	adds	r0, #255	; 0xff
 8001282:	4281      	cmp	r1, r0
 8001284:	d002      	beq.n	800128c <HAL_ADC_Init+0xb0>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001286:	6a20      	ldr	r0, [r4, #32]
 8001288:	4301      	orrs	r1, r0
 800128a:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800128c:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800128e:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001290:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001292:	4311      	orrs	r1, r2
 8001294:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001296:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001298:	4281      	cmp	r1, r0
 800129a:	d002      	beq.n	80012a2 <HAL_ADC_Init+0xc6>
 800129c:	1e48      	subs	r0, r1, #1
 800129e:	2806      	cmp	r0, #6
 80012a0:	d807      	bhi.n	80012b2 <HAL_ADC_Init+0xd6>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012a2:	2507      	movs	r5, #7
 80012a4:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80012a6:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012a8:	43a8      	bics	r0, r5
 80012aa:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80012ac:	6958      	ldr	r0, [r3, #20]
 80012ae:	4301      	orrs	r1, r0
 80012b0:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	491c      	ldr	r1, [pc, #112]	; (8001328 <HAL_ADC_Init+0x14c>)
 80012b6:	400b      	ands	r3, r1
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d111      	bne.n	80012e0 <HAL_ADC_Init+0x104>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012bc:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012be:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80012c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012c4:	4393      	bics	r3, r2
 80012c6:	001a      	movs	r2, r3
 80012c8:	2301      	movs	r3, #1
 80012ca:	4313      	orrs	r3, r2
 80012cc:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80012ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d0:	2120      	movs	r1, #32
 80012d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80012d4:	4329      	orrs	r1, r5
 80012d6:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80012da:	4308      	orrs	r0, r1
 80012dc:	63e0      	str	r0, [r4, #60]	; 0x3c
 80012de:	e7cd      	b.n	800127c <HAL_ADC_Init+0xa0>
      ADC_STATE_CLR_SET(hadc->State,
 80012e0:	2212      	movs	r2, #18
 80012e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e4:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80012e6:	4393      	bics	r3, r2
 80012e8:	001a      	movs	r2, r3
 80012ea:	2310      	movs	r3, #16
 80012ec:	4313      	orrs	r3, r2
 80012ee:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012f2:	4303      	orrs	r3, r0
 80012f4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80012f6:	e7ea      	b.n	80012ce <HAL_ADC_Init+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f8:	2310      	movs	r3, #16
 80012fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80012fc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fe:	4313      	orrs	r3, r2
 8001300:	63a3      	str	r3, [r4, #56]	; 0x38
 8001302:	e7e4      	b.n	80012ce <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001304:	2118      	movs	r1, #24
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	438a      	bics	r2, r1
 800130a:	68a1      	ldr	r1, [r4, #8]
 800130c:	430a      	orrs	r2, r1
 800130e:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001310:	6919      	ldr	r1, [r3, #16]
 8001312:	6862      	ldr	r2, [r4, #4]
 8001314:	0089      	lsls	r1, r1, #2
 8001316:	0889      	lsrs	r1, r1, #2
 8001318:	4311      	orrs	r1, r2
 800131a:	6119      	str	r1, [r3, #16]
 800131c:	e789      	b.n	8001232 <HAL_ADC_Init+0x56>
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	fffffefd 	.word	0xfffffefd
 8001324:	fffe0219 	.word	0xfffe0219
 8001328:	833fffe7 	.word	0x833fffe7

0800132c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800132c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800132e:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001330:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001332:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001334:	3434      	adds	r4, #52	; 0x34
 8001336:	7823      	ldrb	r3, [r4, #0]
{
 8001338:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800133a:	2002      	movs	r0, #2
 800133c:	2b01      	cmp	r3, #1
 800133e:	d02b      	beq.n	8001398 <HAL_ADC_ConfigChannel+0x6c>
 8001340:	2301      	movs	r3, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001342:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001344:	6aee      	ldr	r6, [r5, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001346:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8001348:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800134a:	0740      	lsls	r0, r0, #29
 800134c:	d45a      	bmi.n	8001404 <HAL_ADC_ConfigChannel+0xd8>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800134e:	4830      	ldr	r0, [pc, #192]	; (8001410 <HAL_ADC_ConfigChannel+0xe4>)
 8001350:	684f      	ldr	r7, [r1, #4]
 8001352:	680d      	ldr	r5, [r1, #0]
 8001354:	4287      	cmp	r7, r0
 8001356:	d03f      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0xac>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001358:	40ab      	lsls	r3, r5
 800135a:	0018      	movs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800135c:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800135e:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001360:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001362:	4338      	orrs	r0, r7
 8001364:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001366:	429e      	cmp	r6, r3
 8001368:	d00f      	beq.n	800138a <HAL_ADC_ConfigChannel+0x5e>
 800136a:	3e01      	subs	r6, #1
 800136c:	2e06      	cmp	r6, #6
 800136e:	d90c      	bls.n	800138a <HAL_ADC_ConfigChannel+0x5e>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001370:	688b      	ldr	r3, [r1, #8]
 8001372:	2107      	movs	r1, #7
 8001374:	6950      	ldr	r0, [r2, #20]
 8001376:	4008      	ands	r0, r1
 8001378:	4283      	cmp	r3, r0
 800137a:	d006      	beq.n	800138a <HAL_ADC_ConfigChannel+0x5e>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800137c:	6950      	ldr	r0, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800137e:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001380:	4388      	bics	r0, r1
 8001382:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001384:	6950      	ldr	r0, [r2, #20]
 8001386:	4303      	orrs	r3, r0
 8001388:	6153      	str	r3, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800138a:	002b      	movs	r3, r5
 800138c:	3b10      	subs	r3, #16
 800138e:	2b02      	cmp	r3, #2
 8001390:	d903      	bls.n	800139a <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001392:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001394:	2300      	movs	r3, #0
 8001396:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001398:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800139a:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <HAL_ADC_ConfigChannel+0xe8>)
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	6811      	ldr	r1, [r2, #0]
 80013a0:	2d10      	cmp	r5, #16
 80013a2:	d015      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0xa4>
 80013a4:	2d11      	cmp	r5, #17
 80013a6:	d015      	beq.n	80013d4 <HAL_ADC_ConfigChannel+0xa8>
 80013a8:	045b      	lsls	r3, r3, #17
 80013aa:	430b      	orrs	r3, r1
 80013ac:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ae:	2d10      	cmp	r5, #16
 80013b0:	d1ef      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_ADC_ConfigChannel+0xec>)
 80013b4:	4919      	ldr	r1, [pc, #100]	; (800141c <HAL_ADC_ConfigChannel+0xf0>)
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	f7fe fec2 	bl	8000140 <__udivsi3>
 80013bc:	230a      	movs	r3, #10
 80013be:	4358      	muls	r0, r3
 80013c0:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 80013c2:	9b01      	ldr	r3, [sp, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0e4      	beq.n	8001392 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 80013c8:	9b01      	ldr	r3, [sp, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	e7f8      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013d0:	041b      	lsls	r3, r3, #16
 80013d2:	e7ea      	b.n	80013aa <HAL_ADC_ConfigChannel+0x7e>
 80013d4:	03db      	lsls	r3, r3, #15
 80013d6:	e7e8      	b.n	80013aa <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80013d8:	40ab      	lsls	r3, r5
 80013da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80013dc:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013de:	002b      	movs	r3, r5
 80013e0:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80013e2:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d8d4      	bhi.n	8001392 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_ADC_ConfigChannel+0xe8>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	2d10      	cmp	r5, #16
 80013ee:	d005      	beq.n	80013fc <HAL_ADC_ConfigChannel+0xd0>
 80013f0:	2d11      	cmp	r5, #17
 80013f2:	d005      	beq.n	8001400 <HAL_ADC_ConfigChannel+0xd4>
 80013f4:	490a      	ldr	r1, [pc, #40]	; (8001420 <HAL_ADC_ConfigChannel+0xf4>)
 80013f6:	400a      	ands	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e7ca      	b.n	8001392 <HAL_ADC_ConfigChannel+0x66>
 80013fc:	4909      	ldr	r1, [pc, #36]	; (8001424 <HAL_ADC_ConfigChannel+0xf8>)
 80013fe:	e7fa      	b.n	80013f6 <HAL_ADC_ConfigChannel+0xca>
 8001400:	4909      	ldr	r1, [pc, #36]	; (8001428 <HAL_ADC_ConfigChannel+0xfc>)
 8001402:	e7f8      	b.n	80013f6 <HAL_ADC_ConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001404:	2220      	movs	r2, #32
 8001406:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001408:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140a:	430a      	orrs	r2, r1
 800140c:	63aa      	str	r2, [r5, #56]	; 0x38
 800140e:	e7c1      	b.n	8001394 <HAL_ADC_ConfigChannel+0x68>
 8001410:	00001001 	.word	0x00001001
 8001414:	40012708 	.word	0x40012708
 8001418:	2000000c 	.word	0x2000000c
 800141c:	000f4240 	.word	0x000f4240
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	ff7fffff 	.word	0xff7fffff
 8001428:	ffbfffff 	.word	0xffbfffff

0800142c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142c:	b570      	push	{r4, r5, r6, lr}
 800142e:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001430:	2800      	cmp	r0, #0
 8001432:	db12      	blt.n	800145a <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001434:	0883      	lsrs	r3, r0, #2
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <HAL_NVIC_SetPriority+0x58>)
 8001438:	2403      	movs	r4, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	189b      	adds	r3, r3, r2
 800143e:	22ff      	movs	r2, #255	; 0xff
 8001440:	4020      	ands	r0, r4
 8001442:	40a0      	lsls	r0, r4
 8001444:	0014      	movs	r4, r2
 8001446:	25c0      	movs	r5, #192	; 0xc0
 8001448:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800144a:	4011      	ands	r1, r2
 800144c:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800144e:	00ad      	lsls	r5, r5, #2
 8001450:	595e      	ldr	r6, [r3, r5]
 8001452:	43a6      	bics	r6, r4
 8001454:	4331      	orrs	r1, r6
 8001456:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001458:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800145a:	2403      	movs	r4, #3
 800145c:	230f      	movs	r3, #15
 800145e:	b2c0      	uxtb	r0, r0
 8001460:	4003      	ands	r3, r0
 8001462:	4020      	ands	r0, r4
 8001464:	40a0      	lsls	r0, r4
 8001466:	34fc      	adds	r4, #252	; 0xfc
 8001468:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800146a:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800146c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800146e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001470:	3b08      	subs	r3, #8
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <HAL_NVIC_SetPriority+0x5c>)
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	189b      	adds	r3, r3, r2
 800147a:	69da      	ldr	r2, [r3, #28]
 800147c:	43aa      	bics	r2, r5
 800147e:	4311      	orrs	r1, r2
 8001480:	61d9      	str	r1, [r3, #28]
 8001482:	e7e9      	b.n	8001458 <HAL_NVIC_SetPriority+0x2c>
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800148c:	2800      	cmp	r0, #0
 800148e:	db05      	blt.n	800149c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001490:	231f      	movs	r3, #31
 8001492:	4018      	ands	r0, r3
 8001494:	3b1e      	subs	r3, #30
 8001496:	4083      	lsls	r3, r0
 8001498:	4a01      	ldr	r2, [pc, #4]	; (80014a0 <HAL_NVIC_EnableIRQ+0x14>)
 800149a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800149c:	4770      	bx	lr
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	4a09      	ldr	r2, [pc, #36]	; (80014cc <HAL_SYSTICK_Config+0x28>)
 80014a6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d80d      	bhi.n	80014ca <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ae:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b6:	6a03      	ldr	r3, [r0, #32]
 80014b8:	0609      	lsls	r1, r1, #24
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	430b      	orrs	r3, r1
 80014c0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c6:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014ca:	4770      	bx	lr
 80014cc:	00ffffff 	.word	0x00ffffff
 80014d0:	e000e010 	.word	0xe000e010
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80014d8:	b570      	push	{r4, r5, r6, lr}
 80014da:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 80014dc:	2001      	movs	r0, #1
  if(NULL == hdma)
 80014de:	2c00      	cmp	r4, #0
 80014e0:	d024      	beq.n	800152c <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e2:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014e4:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e6:	1ca5      	adds	r5, r4, #2
 80014e8:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 80014ea:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014ee:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014f0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80014f2:	6863      	ldr	r3, [r4, #4]
 80014f4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f6:	68e1      	ldr	r1, [r4, #12]
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6921      	ldr	r1, [r4, #16]
 80014fc:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fe:	6961      	ldr	r1, [r4, #20]
 8001500:	430b      	orrs	r3, r1
 8001502:	69a1      	ldr	r1, [r4, #24]
 8001504:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001506:	69e1      	ldr	r1, [r4, #28]
 8001508:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800150a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800150c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_DMA_Init+0x5c>)
 8001510:	2114      	movs	r1, #20
 8001512:	18c0      	adds	r0, r0, r3
 8001514:	f7fe fe14 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800151a:	0080      	lsls	r0, r0, #2
 800151c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800151e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001520:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001522:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001524:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8001526:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8001528:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 800152a:	77e0      	strb	r0, [r4, #31]
}  
 800152c:	bd70      	pop	{r4, r5, r6, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	ffffc00f 	.word	0xffffc00f
 8001534:	bffdfff8 	.word	0xbffdfff8
 8001538:	40020000 	.word	0x40020000

0800153c <HAL_DMA_IRQHandler>:
{
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800153e:	2704      	movs	r7, #4
 8001540:	003e      	movs	r6, r7
 8001542:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001544:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001546:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001548:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800154a:	6803      	ldr	r3, [r0, #0]
 800154c:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800154e:	422e      	tst	r6, r5
 8001550:	d00d      	beq.n	800156e <HAL_DMA_IRQHandler+0x32>
 8001552:	423c      	tst	r4, r7
 8001554:	d00b      	beq.n	800156e <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001556:	6819      	ldr	r1, [r3, #0]
 8001558:	0689      	lsls	r1, r1, #26
 800155a:	d402      	bmi.n	8001562 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800155c:	6819      	ldr	r1, [r3, #0]
 800155e:	43b9      	bics	r1, r7
 8001560:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001562:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001564:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001566:	2b00      	cmp	r3, #0
 8001568:	d019      	beq.n	800159e <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 800156a:	4798      	blx	r3
}  
 800156c:	e017      	b.n	800159e <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800156e:	2702      	movs	r7, #2
 8001570:	003e      	movs	r6, r7
 8001572:	408e      	lsls	r6, r1
 8001574:	422e      	tst	r6, r5
 8001576:	d013      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x64>
 8001578:	423c      	tst	r4, r7
 800157a:	d011      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	0689      	lsls	r1, r1, #26
 8001580:	d406      	bmi.n	8001590 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001582:	240a      	movs	r4, #10
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	43a1      	bics	r1, r4
 8001588:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800158a:	2101      	movs	r1, #1
 800158c:	19c3      	adds	r3, r0, r7
 800158e:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001590:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001592:	2200      	movs	r2, #0
 8001594:	1c43      	adds	r3, r0, #1
 8001596:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8001598:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 800159a:	4293      	cmp	r3, r2
 800159c:	d1e5      	bne.n	800156a <HAL_DMA_IRQHandler+0x2e>
}  
 800159e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015a0:	2608      	movs	r6, #8
 80015a2:	0037      	movs	r7, r6
 80015a4:	408f      	lsls	r7, r1
 80015a6:	423d      	tst	r5, r7
 80015a8:	d0f9      	beq.n	800159e <HAL_DMA_IRQHandler+0x62>
 80015aa:	4234      	tst	r4, r6
 80015ac:	d0f7      	beq.n	800159e <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015ae:	250e      	movs	r5, #14
 80015b0:	681c      	ldr	r4, [r3, #0]
 80015b2:	43ac      	bics	r4, r5
 80015b4:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015b6:	2301      	movs	r3, #1
 80015b8:	001c      	movs	r4, r3
 80015ba:	408c      	lsls	r4, r1
 80015bc:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 80015be:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015c0:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80015c2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 80015c4:	2200      	movs	r2, #0
 80015c6:	18c3      	adds	r3, r0, r3
 80015c8:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 80015ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80015cc:	e7e5      	b.n	800159a <HAL_DMA_IRQHandler+0x5e>
	...

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d2:	680b      	ldr	r3, [r1, #0]
{ 
 80015d4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 80015d8:	2300      	movs	r3, #0
{ 
 80015da:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015dc:	9a02      	ldr	r2, [sp, #8]
 80015de:	40da      	lsrs	r2, r3
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 80015e2:	b007      	add	sp, #28
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e6:	2201      	movs	r2, #1
 80015e8:	409a      	lsls	r2, r3
 80015ea:	9203      	str	r2, [sp, #12]
 80015ec:	9903      	ldr	r1, [sp, #12]
 80015ee:	9a02      	ldr	r2, [sp, #8]
 80015f0:	400a      	ands	r2, r1
 80015f2:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80015f4:	d100      	bne.n	80015f8 <HAL_GPIO_Init+0x28>
 80015f6:	e08c      	b.n	8001712 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f8:	9a01      	ldr	r2, [sp, #4]
 80015fa:	2110      	movs	r1, #16
 80015fc:	6852      	ldr	r2, [r2, #4]
 80015fe:	0016      	movs	r6, r2
 8001600:	438e      	bics	r6, r1
 8001602:	2e02      	cmp	r6, #2
 8001604:	d10e      	bne.n	8001624 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001606:	2507      	movs	r5, #7
 8001608:	401d      	ands	r5, r3
 800160a:	00ad      	lsls	r5, r5, #2
 800160c:	3901      	subs	r1, #1
 800160e:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8001610:	08dc      	lsrs	r4, r3, #3
 8001612:	00a4      	lsls	r4, r4, #2
 8001614:	1904      	adds	r4, r0, r4
 8001616:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001618:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800161a:	9901      	ldr	r1, [sp, #4]
 800161c:	6909      	ldr	r1, [r1, #16]
 800161e:	40a9      	lsls	r1, r5
 8001620:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8001622:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001624:	2403      	movs	r4, #3
 8001626:	005f      	lsls	r7, r3, #1
 8001628:	40bc      	lsls	r4, r7
 800162a:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 800162c:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800162e:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001630:	4025      	ands	r5, r4
 8001632:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001634:	2503      	movs	r5, #3
 8001636:	4015      	ands	r5, r2
 8001638:	40bd      	lsls	r5, r7
 800163a:	4661      	mov	r1, ip
 800163c:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800163e:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001640:	2e01      	cmp	r6, #1
 8001642:	d80f      	bhi.n	8001664 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001644:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8001646:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001648:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800164a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800164c:	40bd      	lsls	r5, r7
 800164e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001650:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001652:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001654:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001656:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001658:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800165a:	2101      	movs	r1, #1
 800165c:	400d      	ands	r5, r1
 800165e:	409d      	lsls	r5, r3
 8001660:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001662:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001664:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001666:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001668:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800166a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800166c:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800166e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001670:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001672:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001674:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001676:	420a      	tst	r2, r1
 8001678:	d04b      	beq.n	8001712 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	2101      	movs	r1, #1
 800167c:	4c26      	ldr	r4, [pc, #152]	; (8001718 <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800167e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001680:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001682:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001684:	430d      	orrs	r5, r1
 8001686:	61a5      	str	r5, [r4, #24]
 8001688:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800168a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168c:	400c      	ands	r4, r1
 800168e:	9405      	str	r4, [sp, #20]
 8001690:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001692:	240f      	movs	r4, #15
 8001694:	4921      	ldr	r1, [pc, #132]	; (800171c <HAL_GPIO_Init+0x14c>)
 8001696:	00ad      	lsls	r5, r5, #2
 8001698:	00b6      	lsls	r6, r6, #2
 800169a:	186d      	adds	r5, r5, r1
 800169c:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800169e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 80016a0:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a2:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016a4:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a6:	2400      	movs	r4, #0
 80016a8:	4288      	cmp	r0, r1
 80016aa:	d00c      	beq.n	80016c6 <HAL_GPIO_Init+0xf6>
 80016ac:	491c      	ldr	r1, [pc, #112]	; (8001720 <HAL_GPIO_Init+0x150>)
 80016ae:	3401      	adds	r4, #1
 80016b0:	4288      	cmp	r0, r1
 80016b2:	d008      	beq.n	80016c6 <HAL_GPIO_Init+0xf6>
 80016b4:	491b      	ldr	r1, [pc, #108]	; (8001724 <HAL_GPIO_Init+0x154>)
 80016b6:	3401      	adds	r4, #1
 80016b8:	4288      	cmp	r0, r1
 80016ba:	d004      	beq.n	80016c6 <HAL_GPIO_Init+0xf6>
 80016bc:	491a      	ldr	r1, [pc, #104]	; (8001728 <HAL_GPIO_Init+0x158>)
 80016be:	3403      	adds	r4, #3
 80016c0:	4288      	cmp	r0, r1
 80016c2:	d100      	bne.n	80016c6 <HAL_GPIO_Init+0xf6>
 80016c4:	3c02      	subs	r4, #2
 80016c6:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 80016c8:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ca:	433c      	orrs	r4, r7
          temp |= iocurrent;
 80016cc:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016ce:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80016d0:	4c16      	ldr	r4, [pc, #88]	; (800172c <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 80016d2:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80016d4:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 80016d6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d8:	03d1      	lsls	r1, r2, #15
 80016da:	d401      	bmi.n	80016e0 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 80016dc:	003e      	movs	r6, r7
 80016de:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80016e0:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80016e2:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 80016e4:	9e00      	ldr	r6, [sp, #0]
 80016e6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e8:	0391      	lsls	r1, r2, #14
 80016ea:	d401      	bmi.n	80016f0 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 80016ec:	003e      	movs	r6, r7
 80016ee:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80016f0:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80016f2:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 80016f4:	9e00      	ldr	r6, [sp, #0]
 80016f6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f8:	02d1      	lsls	r1, r2, #11
 80016fa:	d401      	bmi.n	8001700 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 80016fc:	003e      	movs	r6, r7
 80016fe:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8001700:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8001702:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8001704:	9f00      	ldr	r7, [sp, #0]
 8001706:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001708:	0292      	lsls	r2, r2, #10
 800170a:	d401      	bmi.n	8001710 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 800170c:	402e      	ands	r6, r5
 800170e:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8001710:	60e7      	str	r7, [r4, #12]
    position++;
 8001712:	3301      	adds	r3, #1
 8001714:	e762      	b.n	80015dc <HAL_GPIO_Init+0xc>
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001730:	2a00      	cmp	r2, #0
 8001732:	d001      	beq.n	8001738 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001734:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001736:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001738:	6281      	str	r1, [r0, #40]	; 0x28
}
 800173a:	e7fc      	b.n	8001736 <HAL_GPIO_WritePin+0x6>

0800173c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173e:	0004      	movs	r4, r0
 8001740:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001742:	2800      	cmp	r0, #0
 8001744:	d102      	bne.n	800174c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001746:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8001748:	b005      	add	sp, #20
 800174a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174c:	6803      	ldr	r3, [r0, #0]
 800174e:	07db      	lsls	r3, r3, #31
 8001750:	d42e      	bmi.n	80017b0 <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	079b      	lsls	r3, r3, #30
 8001756:	d47e      	bmi.n	8001856 <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	071b      	lsls	r3, r3, #28
 800175c:	d500      	bpl.n	8001760 <HAL_RCC_OscConfig+0x24>
 800175e:	e0ba      	b.n	80018d6 <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	075b      	lsls	r3, r3, #29
 8001764:	d500      	bpl.n	8001768 <HAL_RCC_OscConfig+0x2c>
 8001766:	e0dd      	b.n	8001924 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	06db      	lsls	r3, r3, #27
 800176c:	d51a      	bpl.n	80017a4 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800176e:	6962      	ldr	r2, [r4, #20]
 8001770:	4db4      	ldr	r5, [pc, #720]	; (8001a44 <HAL_RCC_OscConfig+0x308>)
 8001772:	2304      	movs	r3, #4
 8001774:	2a01      	cmp	r2, #1
 8001776:	d000      	beq.n	800177a <HAL_RCC_OscConfig+0x3e>
 8001778:	e149      	b.n	8001a0e <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 800177a:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800177c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800177e:	430b      	orrs	r3, r1
 8001780:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001782:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001784:	431a      	orrs	r2, r3
 8001786:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001788:	f7ff fd22 	bl	80011d0 <HAL_GetTick>
 800178c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800178e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001790:	4233      	tst	r3, r6
 8001792:	d100      	bne.n	8001796 <HAL_RCC_OscConfig+0x5a>
 8001794:	e134      	b.n	8001a00 <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001796:	21f8      	movs	r1, #248	; 0xf8
 8001798:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800179a:	69a3      	ldr	r3, [r4, #24]
 800179c:	438a      	bics	r2, r1
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a4:	6a23      	ldr	r3, [r4, #32]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d000      	beq.n	80017ac <HAL_RCC_OscConfig+0x70>
 80017aa:	e157      	b.n	8001a5c <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 80017ac:	2000      	movs	r0, #0
 80017ae:	e7cb      	b.n	8001748 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017b0:	210c      	movs	r1, #12
 80017b2:	4da4      	ldr	r5, [pc, #656]	; (8001a44 <HAL_RCC_OscConfig+0x308>)
 80017b4:	686a      	ldr	r2, [r5, #4]
 80017b6:	400a      	ands	r2, r1
 80017b8:	2a04      	cmp	r2, #4
 80017ba:	d006      	beq.n	80017ca <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017bc:	686b      	ldr	r3, [r5, #4]
 80017be:	400b      	ands	r3, r1
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d109      	bne.n	80017d8 <HAL_RCC_OscConfig+0x9c>
 80017c4:	686b      	ldr	r3, [r5, #4]
 80017c6:	03db      	lsls	r3, r3, #15
 80017c8:	d506      	bpl.n	80017d8 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ca:	682b      	ldr	r3, [r5, #0]
 80017cc:	039b      	lsls	r3, r3, #14
 80017ce:	d5c0      	bpl.n	8001752 <HAL_RCC_OscConfig+0x16>
 80017d0:	6863      	ldr	r3, [r4, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1bd      	bne.n	8001752 <HAL_RCC_OscConfig+0x16>
 80017d6:	e7b6      	b.n	8001746 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d8:	6863      	ldr	r3, [r4, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d113      	bne.n	8001806 <HAL_RCC_OscConfig+0xca>
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	682a      	ldr	r2, [r5, #0]
 80017e2:	025b      	lsls	r3, r3, #9
 80017e4:	4313      	orrs	r3, r2
 80017e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017e8:	f7ff fcf2 	bl	80011d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ec:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80017ee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f0:	02b6      	lsls	r6, r6, #10
 80017f2:	682b      	ldr	r3, [r5, #0]
 80017f4:	4233      	tst	r3, r6
 80017f6:	d1ac      	bne.n	8001752 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fcea 	bl	80011d0 <HAL_GetTick>
 80017fc:	1bc0      	subs	r0, r0, r7
 80017fe:	2864      	cmp	r0, #100	; 0x64
 8001800:	d9f7      	bls.n	80017f2 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8001802:	2003      	movs	r0, #3
 8001804:	e7a0      	b.n	8001748 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001806:	2b00      	cmp	r3, #0
 8001808:	d115      	bne.n	8001836 <HAL_RCC_OscConfig+0xfa>
 800180a:	682b      	ldr	r3, [r5, #0]
 800180c:	4a8e      	ldr	r2, [pc, #568]	; (8001a48 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001810:	4013      	ands	r3, r2
 8001812:	602b      	str	r3, [r5, #0]
 8001814:	682b      	ldr	r3, [r5, #0]
 8001816:	4a8d      	ldr	r2, [pc, #564]	; (8001a4c <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001818:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181a:	4013      	ands	r3, r2
 800181c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800181e:	f7ff fcd7 	bl	80011d0 <HAL_GetTick>
 8001822:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	4233      	tst	r3, r6
 8001828:	d093      	beq.n	8001752 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182a:	f7ff fcd1 	bl	80011d0 <HAL_GetTick>
 800182e:	1bc0      	subs	r0, r0, r7
 8001830:	2864      	cmp	r0, #100	; 0x64
 8001832:	d9f7      	bls.n	8001824 <HAL_RCC_OscConfig+0xe8>
 8001834:	e7e5      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001836:	2b05      	cmp	r3, #5
 8001838:	d105      	bne.n	8001846 <HAL_RCC_OscConfig+0x10a>
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	682a      	ldr	r2, [r5, #0]
 800183e:	02db      	lsls	r3, r3, #11
 8001840:	4313      	orrs	r3, r2
 8001842:	602b      	str	r3, [r5, #0]
 8001844:	e7cb      	b.n	80017de <HAL_RCC_OscConfig+0xa2>
 8001846:	682b      	ldr	r3, [r5, #0]
 8001848:	4a7f      	ldr	r2, [pc, #508]	; (8001a48 <HAL_RCC_OscConfig+0x30c>)
 800184a:	4013      	ands	r3, r2
 800184c:	602b      	str	r3, [r5, #0]
 800184e:	682b      	ldr	r3, [r5, #0]
 8001850:	4a7e      	ldr	r2, [pc, #504]	; (8001a4c <HAL_RCC_OscConfig+0x310>)
 8001852:	4013      	ands	r3, r2
 8001854:	e7c7      	b.n	80017e6 <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001856:	220c      	movs	r2, #12
 8001858:	4d7a      	ldr	r5, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x308>)
 800185a:	686b      	ldr	r3, [r5, #4]
 800185c:	4213      	tst	r3, r2
 800185e:	d006      	beq.n	800186e <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001860:	686b      	ldr	r3, [r5, #4]
 8001862:	4013      	ands	r3, r2
 8001864:	2b08      	cmp	r3, #8
 8001866:	d111      	bne.n	800188c <HAL_RCC_OscConfig+0x150>
 8001868:	686b      	ldr	r3, [r5, #4]
 800186a:	03db      	lsls	r3, r3, #15
 800186c:	d40e      	bmi.n	800188c <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	682b      	ldr	r3, [r5, #0]
 8001870:	079b      	lsls	r3, r3, #30
 8001872:	d503      	bpl.n	800187c <HAL_RCC_OscConfig+0x140>
 8001874:	68e3      	ldr	r3, [r4, #12]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d000      	beq.n	800187c <HAL_RCC_OscConfig+0x140>
 800187a:	e764      	b.n	8001746 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	21f8      	movs	r1, #248	; 0xf8
 800187e:	682a      	ldr	r2, [r5, #0]
 8001880:	6923      	ldr	r3, [r4, #16]
 8001882:	438a      	bics	r2, r1
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4313      	orrs	r3, r2
 8001888:	602b      	str	r3, [r5, #0]
 800188a:	e765      	b.n	8001758 <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188c:	68e2      	ldr	r2, [r4, #12]
 800188e:	2301      	movs	r3, #1
 8001890:	2a00      	cmp	r2, #0
 8001892:	d00f      	beq.n	80018b4 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8001894:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001898:	4313      	orrs	r3, r2
 800189a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800189c:	f7ff fc98 	bl	80011d0 <HAL_GetTick>
 80018a0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	682b      	ldr	r3, [r5, #0]
 80018a4:	4233      	tst	r3, r6
 80018a6:	d1e9      	bne.n	800187c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc92 	bl	80011d0 <HAL_GetTick>
 80018ac:	1bc0      	subs	r0, r0, r7
 80018ae:	2802      	cmp	r0, #2
 80018b0:	d9f7      	bls.n	80018a2 <HAL_RCC_OscConfig+0x166>
 80018b2:	e7a6      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 80018b4:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80018b8:	439a      	bics	r2, r3
 80018ba:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 80018bc:	f7ff fc88 	bl	80011d0 <HAL_GetTick>
 80018c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	682b      	ldr	r3, [r5, #0]
 80018c4:	4233      	tst	r3, r6
 80018c6:	d100      	bne.n	80018ca <HAL_RCC_OscConfig+0x18e>
 80018c8:	e746      	b.n	8001758 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fc81 	bl	80011d0 <HAL_GetTick>
 80018ce:	1bc0      	subs	r0, r0, r7
 80018d0:	2802      	cmp	r0, #2
 80018d2:	d9f6      	bls.n	80018c2 <HAL_RCC_OscConfig+0x186>
 80018d4:	e795      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d6:	69e2      	ldr	r2, [r4, #28]
 80018d8:	2301      	movs	r3, #1
 80018da:	4d5a      	ldr	r5, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x308>)
 80018dc:	2a00      	cmp	r2, #0
 80018de:	d010      	beq.n	8001902 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 80018e0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e2:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80018e4:	4313      	orrs	r3, r2
 80018e6:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80018e8:	f7ff fc72 	bl	80011d0 <HAL_GetTick>
 80018ec:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80018f0:	4233      	tst	r3, r6
 80018f2:	d000      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1ba>
 80018f4:	e734      	b.n	8001760 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f6:	f7ff fc6b 	bl	80011d0 <HAL_GetTick>
 80018fa:	1bc0      	subs	r0, r0, r7
 80018fc:	2802      	cmp	r0, #2
 80018fe:	d9f6      	bls.n	80018ee <HAL_RCC_OscConfig+0x1b2>
 8001900:	e77f      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8001902:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001904:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8001906:	439a      	bics	r2, r3
 8001908:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800190a:	f7ff fc61 	bl	80011d0 <HAL_GetTick>
 800190e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001912:	4233      	tst	r3, r6
 8001914:	d100      	bne.n	8001918 <HAL_RCC_OscConfig+0x1dc>
 8001916:	e723      	b.n	8001760 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fc5a 	bl	80011d0 <HAL_GetTick>
 800191c:	1bc0      	subs	r0, r0, r7
 800191e:	2802      	cmp	r0, #2
 8001920:	d9f6      	bls.n	8001910 <HAL_RCC_OscConfig+0x1d4>
 8001922:	e76e      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001924:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001928:	4d46      	ldr	r5, [pc, #280]	; (8001a44 <HAL_RCC_OscConfig+0x308>)
 800192a:	0552      	lsls	r2, r2, #21
 800192c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 800192e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001930:	4213      	tst	r3, r2
 8001932:	d108      	bne.n	8001946 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001934:	69eb      	ldr	r3, [r5, #28]
 8001936:	4313      	orrs	r3, r2
 8001938:	61eb      	str	r3, [r5, #28]
 800193a:	69eb      	ldr	r3, [r5, #28]
 800193c:	4013      	ands	r3, r2
 800193e:	9303      	str	r3, [sp, #12]
 8001940:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001942:	2301      	movs	r3, #1
 8001944:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001946:	2780      	movs	r7, #128	; 0x80
 8001948:	4e41      	ldr	r6, [pc, #260]	; (8001a50 <HAL_RCC_OscConfig+0x314>)
 800194a:	007f      	lsls	r7, r7, #1
 800194c:	6833      	ldr	r3, [r6, #0]
 800194e:	423b      	tst	r3, r7
 8001950:	d006      	beq.n	8001960 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001952:	68a3      	ldr	r3, [r4, #8]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d113      	bne.n	8001980 <HAL_RCC_OscConfig+0x244>
 8001958:	6a2a      	ldr	r2, [r5, #32]
 800195a:	4313      	orrs	r3, r2
 800195c:	622b      	str	r3, [r5, #32]
 800195e:	e030      	b.n	80019c2 <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001960:	6833      	ldr	r3, [r6, #0]
 8001962:	433b      	orrs	r3, r7
 8001964:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001966:	f7ff fc33 	bl	80011d0 <HAL_GetTick>
 800196a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	6833      	ldr	r3, [r6, #0]
 800196e:	423b      	tst	r3, r7
 8001970:	d1ef      	bne.n	8001952 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff fc2d 	bl	80011d0 <HAL_GetTick>
 8001976:	9b01      	ldr	r3, [sp, #4]
 8001978:	1ac0      	subs	r0, r0, r3
 800197a:	2864      	cmp	r0, #100	; 0x64
 800197c:	d9f6      	bls.n	800196c <HAL_RCC_OscConfig+0x230>
 800197e:	e740      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
 8001980:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001982:	2b00      	cmp	r3, #0
 8001984:	d114      	bne.n	80019b0 <HAL_RCC_OscConfig+0x274>
 8001986:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198a:	4393      	bics	r3, r2
 800198c:	622b      	str	r3, [r5, #32]
 800198e:	6a2b      	ldr	r3, [r5, #32]
 8001990:	3203      	adds	r2, #3
 8001992:	4393      	bics	r3, r2
 8001994:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001996:	f7ff fc1b 	bl	80011d0 <HAL_GetTick>
 800199a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199c:	6a2b      	ldr	r3, [r5, #32]
 800199e:	423b      	tst	r3, r7
 80019a0:	d025      	beq.n	80019ee <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff fc15 	bl	80011d0 <HAL_GetTick>
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x318>)
 80019a8:	1b80      	subs	r0, r0, r6
 80019aa:	4298      	cmp	r0, r3
 80019ac:	d9f6      	bls.n	800199c <HAL_RCC_OscConfig+0x260>
 80019ae:	e728      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d10b      	bne.n	80019cc <HAL_RCC_OscConfig+0x290>
 80019b4:	6a29      	ldr	r1, [r5, #32]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	430b      	orrs	r3, r1
 80019ba:	622b      	str	r3, [r5, #32]
 80019bc:	6a2b      	ldr	r3, [r5, #32]
 80019be:	431a      	orrs	r2, r3
 80019c0:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 80019c2:	f7ff fc05 	bl	80011d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c6:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80019c8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	e00d      	b.n	80019e8 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019cc:	6a2b      	ldr	r3, [r5, #32]
 80019ce:	4393      	bics	r3, r2
 80019d0:	2204      	movs	r2, #4
 80019d2:	622b      	str	r3, [r5, #32]
 80019d4:	6a2b      	ldr	r3, [r5, #32]
 80019d6:	4393      	bics	r3, r2
 80019d8:	e7c0      	b.n	800195c <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff fbf9 	bl	80011d0 <HAL_GetTick>
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_RCC_OscConfig+0x318>)
 80019e0:	1b80      	subs	r0, r0, r6
 80019e2:	4298      	cmp	r0, r3
 80019e4:	d900      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2ac>
 80019e6:	e70c      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e8:	6a2b      	ldr	r3, [r5, #32]
 80019ea:	423b      	tst	r3, r7
 80019ec:	d0f5      	beq.n	80019da <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 80019ee:	9b00      	ldr	r3, [sp, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d000      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2ba>
 80019f4:	e6b8      	b.n	8001768 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f6:	69eb      	ldr	r3, [r5, #28]
 80019f8:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_RCC_OscConfig+0x31c>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	61eb      	str	r3, [r5, #28]
 80019fe:	e6b3      	b.n	8001768 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a00:	f7ff fbe6 	bl	80011d0 <HAL_GetTick>
 8001a04:	1bc0      	subs	r0, r0, r7
 8001a06:	2802      	cmp	r0, #2
 8001a08:	d800      	bhi.n	8001a0c <HAL_RCC_OscConfig+0x2d0>
 8001a0a:	e6c0      	b.n	800178e <HAL_RCC_OscConfig+0x52>
 8001a0c:	e6f9      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a0e:	3205      	adds	r2, #5
 8001a10:	d103      	bne.n	8001a1a <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a12:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001a14:	439a      	bics	r2, r3
 8001a16:	636a      	str	r2, [r5, #52]	; 0x34
 8001a18:	e6bd      	b.n	8001796 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a1a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a1c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a1e:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001a20:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a22:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001a24:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a26:	4393      	bics	r3, r2
 8001a28:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fbd1 	bl	80011d0 <HAL_GetTick>
 8001a2e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001a32:	4233      	tst	r3, r6
 8001a34:	d100      	bne.n	8001a38 <HAL_RCC_OscConfig+0x2fc>
 8001a36:	e6b5      	b.n	80017a4 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a38:	f7ff fbca 	bl	80011d0 <HAL_GetTick>
 8001a3c:	1bc0      	subs	r0, r0, r7
 8001a3e:	2802      	cmp	r0, #2
 8001a40:	d9f6      	bls.n	8001a30 <HAL_RCC_OscConfig+0x2f4>
 8001a42:	e6de      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
 8001a44:	40021000 	.word	0x40021000
 8001a48:	fffeffff 	.word	0xfffeffff
 8001a4c:	fffbffff 	.word	0xfffbffff
 8001a50:	40007000 	.word	0x40007000
 8001a54:	00001388 	.word	0x00001388
 8001a58:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	200c      	movs	r0, #12
 8001a5e:	4a35      	ldr	r2, [pc, #212]	; (8001b34 <HAL_RCC_OscConfig+0x3f8>)
 8001a60:	6851      	ldr	r1, [r2, #4]
 8001a62:	0015      	movs	r5, r2
 8001a64:	4001      	ands	r1, r0
 8001a66:	2908      	cmp	r1, #8
 8001a68:	d047      	beq.n	8001afa <HAL_RCC_OscConfig+0x3be>
 8001a6a:	4a33      	ldr	r2, [pc, #204]	; (8001b38 <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d132      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 8001a70:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a72:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001a74:	4013      	ands	r3, r2
 8001a76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a78:	f7ff fbaa 	bl	80011d0 <HAL_GetTick>
 8001a7c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7e:	04b6      	lsls	r6, r6, #18
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	4233      	tst	r3, r6
 8001a84:	d121      	bne.n	8001aca <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a86:	220f      	movs	r2, #15
 8001a88:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001a8a:	4393      	bics	r3, r2
 8001a8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001a92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a96:	686a      	ldr	r2, [r5, #4]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	4928      	ldr	r1, [pc, #160]	; (8001b3c <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9c:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	682a      	ldr	r2, [r5, #0]
 8001aa8:	045b      	lsls	r3, r3, #17
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001aae:	f7ff fb8f 	bl	80011d0 <HAL_GetTick>
 8001ab2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab4:	04a4      	lsls	r4, r4, #18
 8001ab6:	682b      	ldr	r3, [r5, #0]
 8001ab8:	4223      	tst	r3, r4
 8001aba:	d000      	beq.n	8001abe <HAL_RCC_OscConfig+0x382>
 8001abc:	e676      	b.n	80017ac <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff fb87 	bl	80011d0 <HAL_GetTick>
 8001ac2:	1b80      	subs	r0, r0, r6
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d9f6      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x37a>
 8001ac8:	e69b      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff fb81 	bl	80011d0 <HAL_GetTick>
 8001ace:	1bc0      	subs	r0, r0, r7
 8001ad0:	2802      	cmp	r0, #2
 8001ad2:	d9d5      	bls.n	8001a80 <HAL_RCC_OscConfig+0x344>
 8001ad4:	e695      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad8:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4013      	ands	r3, r2
 8001adc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ade:	f7ff fb77 	bl	80011d0 <HAL_GetTick>
 8001ae2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae4:	04a4      	lsls	r4, r4, #18
 8001ae6:	682b      	ldr	r3, [r5, #0]
 8001ae8:	4223      	tst	r3, r4
 8001aea:	d100      	bne.n	8001aee <HAL_RCC_OscConfig+0x3b2>
 8001aec:	e65e      	b.n	80017ac <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff fb6f 	bl	80011d0 <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	2802      	cmp	r0, #2
 8001af6:	d9f6      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x3aa>
 8001af8:	e683      	b.n	8001802 <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 8001afa:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d100      	bne.n	8001b02 <HAL_RCC_OscConfig+0x3c6>
 8001b00:	e622      	b.n	8001748 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001b04:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001b08:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001b0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	4019      	ands	r1, r3
        return HAL_ERROR;
 8001b0e:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b10:	42a9      	cmp	r1, r5
 8001b12:	d000      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3da>
 8001b14:	e618      	b.n	8001748 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b16:	210f      	movs	r1, #15
 8001b18:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001b1c:	428a      	cmp	r2, r1
 8001b1e:	d000      	beq.n	8001b22 <HAL_RCC_OscConfig+0x3e6>
 8001b20:	e612      	b.n	8001748 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b22:	20f0      	movs	r0, #240	; 0xf0
 8001b24:	0380      	lsls	r0, r0, #14
 8001b26:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001b2a:	1a1b      	subs	r3, r3, r0
 8001b2c:	1e58      	subs	r0, r3, #1
 8001b2e:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 8001b30:	b2d8      	uxtb	r0, r3
 8001b32:	e609      	b.n	8001748 <HAL_RCC_OscConfig+0xc>
 8001b34:	40021000 	.word	0x40021000
 8001b38:	feffffff 	.word	0xfeffffff
 8001b3c:	ffc2ffff 	.word	0xffc2ffff

08001b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b42:	4c14      	ldr	r4, [pc, #80]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8001b44:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b46:	2210      	movs	r2, #16
 8001b48:	0021      	movs	r1, r4
 8001b4a:	4668      	mov	r0, sp
 8001b4c:	f002 f858 	bl	8003c00 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b50:	0021      	movs	r1, r4
 8001b52:	ad04      	add	r5, sp, #16
 8001b54:	2210      	movs	r2, #16
 8001b56:	3110      	adds	r1, #16
 8001b58:	0028      	movs	r0, r5
 8001b5a:	f002 f851 	bl	8003c00 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b5e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001b60:	4e0d      	ldr	r6, [pc, #52]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b62:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b64:	401a      	ands	r2, r3
 8001b66:	2a08      	cmp	r2, #8
 8001b68:	d111      	bne.n	8001b8e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b6a:	200f      	movs	r0, #15
 8001b6c:	466a      	mov	r2, sp
 8001b6e:	0c99      	lsrs	r1, r3, #18
 8001b70:	4001      	ands	r1, r0
 8001b72:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b74:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001b76:	4002      	ands	r2, r0
 8001b78:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b7a:	03db      	lsls	r3, r3, #15
 8001b7c:	d505      	bpl.n	8001b8a <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b7e:	4807      	ldr	r0, [pc, #28]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001b80:	f7fe fade 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b84:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b86:	b008      	add	sp, #32
 8001b88:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x60>)
 8001b8c:	e7fa      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8001b8e:	4803      	ldr	r0, [pc, #12]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001b90:	e7f9      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x46>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	0800446c 	.word	0x0800446c
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	007a1200 	.word	0x007a1200
 8001ba0:	003d0900 	.word	0x003d0900

08001ba4 <HAL_RCC_ClockConfig>:
{
 8001ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ba6:	0005      	movs	r5, r0
 8001ba8:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001bae:	2001      	movs	r0, #1
}
 8001bb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4c37      	ldr	r4, [pc, #220]	; (8001c94 <HAL_RCC_ClockConfig+0xf0>)
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	428b      	cmp	r3, r1
 8001bbc:	d31c      	bcc.n	8001bf8 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbe:	6829      	ldr	r1, [r5, #0]
 8001bc0:	078b      	lsls	r3, r1, #30
 8001bc2:	d422      	bmi.n	8001c0a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc4:	07cb      	lsls	r3, r1, #31
 8001bc6:	d42f      	bmi.n	8001c28 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	2301      	movs	r3, #1
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	401a      	ands	r2, r3
 8001bce:	4297      	cmp	r7, r2
 8001bd0:	d351      	bcc.n	8001c76 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd2:	682b      	ldr	r3, [r5, #0]
 8001bd4:	4c30      	ldr	r4, [pc, #192]	; (8001c98 <HAL_RCC_ClockConfig+0xf4>)
 8001bd6:	075b      	lsls	r3, r3, #29
 8001bd8:	d454      	bmi.n	8001c84 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bda:	f7ff ffb1 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001bde:	6863      	ldr	r3, [r4, #4]
 8001be0:	4a2e      	ldr	r2, [pc, #184]	; (8001c9c <HAL_RCC_ClockConfig+0xf8>)
 8001be2:	061b      	lsls	r3, r3, #24
 8001be4:	0f1b      	lsrs	r3, r3, #28
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	40d8      	lsrs	r0, r3
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_ClockConfig+0xfc>)
 8001bec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff faae 	bl	8001150 <HAL_InitTick>
  return HAL_OK;
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	e7db      	b.n	8001bb0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	4393      	bics	r3, r2
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	4013      	ands	r3, r2
 8001c04:	4299      	cmp	r1, r3
 8001c06:	d1d2      	bne.n	8001bae <HAL_RCC_ClockConfig+0xa>
 8001c08:	e7d9      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1a>
 8001c0a:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	074b      	lsls	r3, r1, #29
 8001c0e:	d504      	bpl.n	8001c1a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c10:	23e0      	movs	r3, #224	; 0xe0
 8001c12:	6850      	ldr	r0, [r2, #4]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4303      	orrs	r3, r0
 8001c18:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1a:	20f0      	movs	r0, #240	; 0xf0
 8001c1c:	6853      	ldr	r3, [r2, #4]
 8001c1e:	4383      	bics	r3, r0
 8001c20:	68a8      	ldr	r0, [r5, #8]
 8001c22:	4303      	orrs	r3, r0
 8001c24:	6053      	str	r3, [r2, #4]
 8001c26:	e7cd      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x20>
 8001c28:	4e1b      	ldr	r6, [pc, #108]	; (8001c98 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2e:	2a01      	cmp	r2, #1
 8001c30:	d119      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	039b      	lsls	r3, r3, #14
 8001c34:	d5bb      	bpl.n	8001bae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c36:	2103      	movs	r1, #3
 8001c38:	6873      	ldr	r3, [r6, #4]
 8001c3a:	438b      	bics	r3, r1
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c40:	f7ff fac6 	bl	80011d0 <HAL_GetTick>
 8001c44:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	230c      	movs	r3, #12
 8001c48:	6872      	ldr	r2, [r6, #4]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	686b      	ldr	r3, [r5, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d0b9      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7ff fabc 	bl	80011d0 <HAL_GetTick>
 8001c58:	9b01      	ldr	r3, [sp, #4]
 8001c5a:	1ac0      	subs	r0, r0, r3
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_RCC_ClockConfig+0x100>)
 8001c5e:	4298      	cmp	r0, r3
 8001c60:	d9f1      	bls.n	8001c46 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8001c62:	2003      	movs	r0, #3
 8001c64:	e7a4      	b.n	8001bb0 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c66:	2a02      	cmp	r2, #2
 8001c68:	d102      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	019b      	lsls	r3, r3, #6
 8001c6c:	d4e3      	bmi.n	8001c36 <HAL_RCC_ClockConfig+0x92>
 8001c6e:	e79e      	b.n	8001bae <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	079b      	lsls	r3, r3, #30
 8001c72:	d4e0      	bmi.n	8001c36 <HAL_RCC_ClockConfig+0x92>
 8001c74:	e79b      	b.n	8001bae <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	439a      	bics	r2, r3
 8001c7a:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7c:	6822      	ldr	r2, [r4, #0]
 8001c7e:	421a      	tst	r2, r3
 8001c80:	d195      	bne.n	8001bae <HAL_RCC_ClockConfig+0xa>
 8001c82:	e7a6      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	6863      	ldr	r3, [r4, #4]
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_RCC_ClockConfig+0x104>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	68ea      	ldr	r2, [r5, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	6063      	str	r3, [r4, #4]
 8001c90:	e7a3      	b.n	8001bda <HAL_RCC_ClockConfig+0x36>
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	40022000 	.word	0x40022000
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	08004543 	.word	0x08004543
 8001ca0:	2000000c 	.word	0x2000000c
 8001ca4:	00001388 	.word	0x00001388
 8001ca8:	fffff8ff 	.word	0xfffff8ff

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	055b      	lsls	r3, r3, #21
 8001cb4:	0f5b      	lsrs	r3, r3, #29
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001cba:	6810      	ldr	r0, [r2, #0]
 8001cbc:	40d8      	lsrs	r0, r3
}    
 8001cbe:	4770      	bx	lr
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08004553 	.word	0x08004553
 8001cc8:	2000000c 	.word	0x2000000c

08001ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ccc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cce:	6803      	ldr	r3, [r0, #0]
{
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cd4:	03db      	lsls	r3, r3, #15
 8001cd6:	d528      	bpl.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cdc:	4c3b      	ldr	r4, [pc, #236]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001cde:	0552      	lsls	r2, r2, #21
 8001ce0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001ce2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce4:	4213      	tst	r3, r2
 8001ce6:	d108      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	69e3      	ldr	r3, [r4, #28]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61e3      	str	r3, [r4, #28]
 8001cee:	69e3      	ldr	r3, [r4, #28]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	9303      	str	r3, [sp, #12]
 8001cf4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	2780      	movs	r7, #128	; 0x80
 8001cfc:	4e34      	ldr	r6, [pc, #208]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001cfe:	007f      	lsls	r7, r7, #1
 8001d00:	6833      	ldr	r3, [r6, #0]
 8001d02:	423b      	tst	r3, r7
 8001d04:	d02f      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d06:	22c0      	movs	r2, #192	; 0xc0
 8001d08:	6a23      	ldr	r3, [r4, #32]
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	4e31      	ldr	r6, [pc, #196]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d10:	d13b      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d12:	6a23      	ldr	r3, [r4, #32]
 8001d14:	401e      	ands	r6, r3
 8001d16:	686b      	ldr	r3, [r5, #4]
 8001d18:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d1a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d1c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d103      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d22:	69e3      	ldr	r3, [r4, #28]
 8001d24:	4a2c      	ldr	r2, [pc, #176]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d2a:	682a      	ldr	r2, [r5, #0]
 8001d2c:	07d3      	lsls	r3, r2, #31
 8001d2e:	d506      	bpl.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d30:	2003      	movs	r0, #3
 8001d32:	4926      	ldr	r1, [pc, #152]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001d34:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001d36:	4383      	bics	r3, r0
 8001d38:	68a8      	ldr	r0, [r5, #8]
 8001d3a:	4303      	orrs	r3, r0
 8001d3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d3e:	0693      	lsls	r3, r2, #26
 8001d40:	d506      	bpl.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d42:	2010      	movs	r0, #16
 8001d44:	4921      	ldr	r1, [pc, #132]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001d46:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001d48:	4383      	bics	r3, r0
 8001d4a:	68e8      	ldr	r0, [r5, #12]
 8001d4c:	4303      	orrs	r3, r0
 8001d4e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d50:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d52:	0553      	lsls	r3, r2, #21
 8001d54:	d517      	bpl.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d56:	2140      	movs	r1, #64	; 0x40
 8001d58:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001d5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d5c:	438b      	bics	r3, r1
 8001d5e:	6929      	ldr	r1, [r5, #16]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6313      	str	r3, [r2, #48]	; 0x30
 8001d64:	e00f      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d66:	6833      	ldr	r3, [r6, #0]
 8001d68:	433b      	orrs	r3, r7
 8001d6a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d6c:	f7ff fa30 	bl	80011d0 <HAL_GetTick>
 8001d70:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	6833      	ldr	r3, [r6, #0]
 8001d74:	423b      	tst	r3, r7
 8001d76:	d1c6      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d78:	f7ff fa2a 	bl	80011d0 <HAL_GetTick>
 8001d7c:	9b01      	ldr	r3, [sp, #4]
 8001d7e:	1ac0      	subs	r0, r0, r3
 8001d80:	2864      	cmp	r0, #100	; 0x64
 8001d82:	d9f6      	bls.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 8001d84:	2003      	movs	r0, #3
}
 8001d86:	b005      	add	sp, #20
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d8a:	6869      	ldr	r1, [r5, #4]
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d0bf      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d92:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d94:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d96:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d98:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	4303      	orrs	r3, r0
 8001d9e:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001da0:	6a23      	ldr	r3, [r4, #32]
 8001da2:	480e      	ldr	r0, [pc, #56]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001da4:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001da6:	4003      	ands	r3, r0
 8001da8:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001daa:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001dac:	07d3      	lsls	r3, r2, #31
 8001dae:	d5b0      	bpl.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8001db0:	f7ff fa0e 	bl	80011d0 <HAL_GetTick>
 8001db4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db6:	2202      	movs	r2, #2
 8001db8:	6a23      	ldr	r3, [r4, #32]
 8001dba:	4213      	tst	r3, r2
 8001dbc:	d1a9      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7ff fa07 	bl	80011d0 <HAL_GetTick>
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001dc4:	1bc0      	subs	r0, r0, r7
 8001dc6:	4298      	cmp	r0, r3
 8001dc8:	d9f5      	bls.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001dca:	e7db      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	fffffcff 	.word	0xfffffcff
 8001dd8:	efffffff 	.word	0xefffffff
 8001ddc:	fffeffff 	.word	0xfffeffff
 8001de0:	00001388 	.word	0x00001388

08001de4 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001de4:	21e0      	movs	r1, #224	; 0xe0
 8001de6:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001de8:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	438a      	bics	r2, r1
 8001dee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001df0:	2282      	movs	r2, #130	; 0x82
 8001df2:	6841      	ldr	r1, [r0, #4]
 8001df4:	0052      	lsls	r2, r2, #1
 8001df6:	4291      	cmp	r1, r2
 8001df8:	d10c      	bne.n	8001e14 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	6882      	ldr	r2, [r0, #8]
 8001dfe:	0209      	lsls	r1, r1, #8
 8001e00:	428a      	cmp	r2, r1
 8001e02:	d003      	beq.n	8001e0c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	00c9      	lsls	r1, r1, #3
 8001e08:	428a      	cmp	r2, r1
 8001e0a:	d103      	bne.n	8001e14 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e0c:	2140      	movs	r1, #64	; 0x40
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	438a      	bics	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001e18:	0189      	lsls	r1, r1, #6
 8001e1a:	428a      	cmp	r2, r1
 8001e1c:	d106      	bne.n	8001e2c <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	4c07      	ldr	r4, [pc, #28]	; (8001e40 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8001e22:	4021      	ands	r1, r4
 8001e24:	6019      	str	r1, [r3, #0]
 8001e26:	6819      	ldr	r1, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	2201      	movs	r2, #1
 8001e30:	335d      	adds	r3, #93	; 0x5d
 8001e32:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e34:	2300      	movs	r3, #0
 8001e36:	305c      	adds	r0, #92	; 0x5c
 8001e38:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	ffffdfff 	.word	0xffffdfff

08001e44 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	0004      	movs	r4, r0
 8001e48:	000d      	movs	r5, r1
 8001e4a:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e4c:	2680      	movs	r6, #128	; 0x80
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	6898      	ldr	r0, [r3, #8]
 8001e52:	4030      	ands	r0, r6
 8001e54:	d009      	beq.n	8001e6a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8001e56:	1c6a      	adds	r2, r5, #1
 8001e58:	d0fa      	beq.n	8001e50 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e5a:	f7ff f9b9 	bl	80011d0 <HAL_GetTick>
 8001e5e:	1bc0      	subs	r0, r0, r7
 8001e60:	4285      	cmp	r5, r0
 8001e62:	d8f4      	bhi.n	8001e4e <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 8001e64:	0020      	movs	r0, r4
 8001e66:	f7ff ffbd 	bl	8001de4 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e6c <SPI_WaitFifoStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001e6e:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001e70:	0005      	movs	r5, r0
 8001e72:	000c      	movs	r4, r1
 8001e74:	0016      	movs	r6, r2
 8001e76:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001e78:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8001e7a:	682b      	ldr	r3, [r5, #0]
 8001e7c:	6898      	ldr	r0, [r3, #8]
 8001e7e:	4020      	ands	r0, r4
 8001e80:	d00d      	beq.n	8001e9e <SPI_WaitFifoStateUntilTimeout.constprop.10+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001e82:	42bc      	cmp	r4, r7
 8001e84:	d100      	bne.n	8001e88 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001e86:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001e88:	1c72      	adds	r2, r6, #1
 8001e8a:	d0f7      	beq.n	8001e7c <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e8c:	f7ff f9a0 	bl	80011d0 <HAL_GetTick>
 8001e90:	9b01      	ldr	r3, [sp, #4]
 8001e92:	1ac0      	subs	r0, r0, r3
 8001e94:	4286      	cmp	r6, r0
 8001e96:	d8f0      	bhi.n	8001e7a <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
 8001e98:	0028      	movs	r0, r5
 8001e9a:	f7ff ffa3 	bl	8001de4 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001e9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001ea0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea0:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ea2:	0013      	movs	r3, r2
{
 8001ea4:	000d      	movs	r5, r1
 8001ea6:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ea8:	000a      	movs	r2, r1
 8001eaa:	21c0      	movs	r1, #192	; 0xc0
 8001eac:	0149      	lsls	r1, r1, #5
{
 8001eae:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001eb0:	f7ff ffdc 	bl	8001e6c <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d005      	beq.n	8001ec4 <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001eb8:	2320      	movs	r3, #32
 8001eba:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001ebc:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	6623      	str	r3, [r4, #96]	; 0x60
 8001ec2:	e00f      	b.n	8001ee4 <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec4:	0032      	movs	r2, r6
 8001ec6:	0029      	movs	r1, r5
 8001ec8:	0020      	movs	r0, r4
 8001eca:	f7ff ffbb 	bl	8001e44 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d1f2      	bne.n	8001eb8 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ed2:	21c0      	movs	r1, #192	; 0xc0
 8001ed4:	0033      	movs	r3, r6
 8001ed6:	002a      	movs	r2, r5
 8001ed8:	00c9      	lsls	r1, r1, #3
 8001eda:	0020      	movs	r0, r4
 8001edc:	f7ff ffc6 	bl	8001e6c <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	d1e9      	bne.n	8001eb8 <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001ee4:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ee8 <HAL_SPI_Init>:
{
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001eec:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001eee:	2c00      	cmp	r4, #0
 8001ef0:	d04b      	beq.n	8001f8a <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef2:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ef4:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ef8:	355d      	adds	r5, #93	; 0x5d
 8001efa:	782b      	ldrb	r3, [r5, #0]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8001f02:	0022      	movs	r2, r4
 8001f04:	325c      	adds	r2, #92	; 0x5c
 8001f06:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8001f08:	0020      	movs	r0, r4
 8001f0a:	f001 fd57 	bl	80039bc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f0e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f14:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001f16:	680b      	ldr	r3, [r1, #0]
 8001f18:	2000      	movs	r0, #0
 8001f1a:	4393      	bics	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
 8001f1e:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f20:	68e2      	ldr	r2, [r4, #12]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d931      	bls.n	8001f8c <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f28:	26f0      	movs	r6, #240	; 0xf0
 8001f2a:	0136      	lsls	r6, r6, #4
 8001f2c:	42b2      	cmp	r2, r6
 8001f2e:	d133      	bne.n	8001f98 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f30:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001f32:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d103      	bne.n	8001f40 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d92f      	bls.n	8001f9c <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001f3c:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001f3e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001f40:	68a7      	ldr	r7, [r4, #8]
 8001f42:	6863      	ldr	r3, [r4, #4]
 8001f44:	69a0      	ldr	r0, [r4, #24]
 8001f46:	433b      	orrs	r3, r7
 8001f48:	6927      	ldr	r7, [r4, #16]
 8001f4a:	433b      	orrs	r3, r7
 8001f4c:	6967      	ldr	r7, [r4, #20]
 8001f4e:	433b      	orrs	r3, r7
 8001f50:	69e7      	ldr	r7, [r4, #28]
 8001f52:	433b      	orrs	r3, r7
 8001f54:	6a27      	ldr	r7, [r4, #32]
 8001f56:	433b      	orrs	r3, r7
 8001f58:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001f5a:	433b      	orrs	r3, r7
 8001f5c:	2780      	movs	r7, #128	; 0x80
 8001f5e:	00bf      	lsls	r7, r7, #2
 8001f60:	4007      	ands	r7, r0
 8001f62:	433b      	orrs	r3, r7
 8001f64:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f68:	0c00      	lsrs	r0, r0, #16
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	2304      	movs	r3, #4
 8001f72:	4018      	ands	r0, r3
 8001f74:	4310      	orrs	r0, r2
 8001f76:	4306      	orrs	r6, r0
 8001f78:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f7a:	69cb      	ldr	r3, [r1, #28]
 8001f7c:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f7e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f80:	4013      	ands	r3, r2
 8001f82:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001f84:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f86:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f88:	702b      	strb	r3, [r5, #0]
}
 8001f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f8c:	2680      	movs	r6, #128	; 0x80
 8001f8e:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d0ce      	beq.n	8001f32 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f94:	62a0      	str	r0, [r4, #40]	; 0x28
 8001f96:	e7cc      	b.n	8001f32 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f98:	0006      	movs	r6, r0
 8001f9a:	e7fb      	b.n	8001f94 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e7ce      	b.n	8001f3e <HAL_SPI_Init+0x56>
 8001fa0:	fffff7ff 	.word	0xfffff7ff

08001fa4 <HAL_SPI_Transmit>:
{
 8001fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 8001faa:	0003      	movs	r3, r0
 8001fac:	335c      	adds	r3, #92	; 0x5c
 8001fae:	9303      	str	r3, [sp, #12]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
{
 8001fb2:	0004      	movs	r4, r0
 8001fb4:	000d      	movs	r5, r1
 8001fb6:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8001fb8:	2602      	movs	r6, #2
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d100      	bne.n	8001fc0 <HAL_SPI_Transmit+0x1c>
 8001fbe:	e07c      	b.n	80020ba <HAL_SPI_Transmit+0x116>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	9a03      	ldr	r2, [sp, #12]
 8001fc4:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001fc6:	f7ff f903 	bl	80011d0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001fca:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 8001fcc:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001fce:	325d      	adds	r2, #93	; 0x5d
 8001fd0:	7813      	ldrb	r3, [r2, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d16a      	bne.n	80020ae <HAL_SPI_Transmit+0x10a>
    errorcode = HAL_ERROR;
 8001fd8:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 8001fda:	2d00      	cmp	r5, #0
 8001fdc:	d067      	beq.n	80020ae <HAL_SPI_Transmit+0x10a>
 8001fde:	2f00      	cmp	r7, #0
 8001fe0:	d065      	beq.n	80020ae <HAL_SPI_Transmit+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fe6:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8001fe8:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fea:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fec:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fee:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ff0:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001ff2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8001ff4:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8001ff6:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ff8:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ffa:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001ffc:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	68a2      	ldr	r2, [r4, #8]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	429a      	cmp	r2, r3
 8002006:	d105      	bne.n	8002014 <HAL_SPI_Transmit+0x70>
    SPI_1LINE_TX(hspi);
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	6822      	ldr	r2, [r4, #0]
 800200c:	01db      	lsls	r3, r3, #7
 800200e:	6811      	ldr	r1, [r2, #0]
 8002010:	430b      	orrs	r3, r1
 8002012:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002014:	2240      	movs	r2, #64	; 0x40
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	6819      	ldr	r1, [r3, #0]
 800201a:	4211      	tst	r1, r2
 800201c:	d102      	bne.n	8002024 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 800201e:	6819      	ldr	r1, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002024:	21e0      	movs	r1, #224	; 0xe0
 8002026:	68e0      	ldr	r0, [r4, #12]
 8002028:	00c9      	lsls	r1, r1, #3
 800202a:	6862      	ldr	r2, [r4, #4]
 800202c:	4288      	cmp	r0, r1
 800202e:	d947      	bls.n	80020c0 <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002030:	2a00      	cmp	r2, #0
 8002032:	d001      	beq.n	8002038 <HAL_SPI_Transmit+0x94>
 8002034:	2f01      	cmp	r7, #1
 8002036:	d107      	bne.n	8002048 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002038:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800203a:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800203c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800203e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002040:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002042:	3b01      	subs	r3, #1
 8002044:	b29b      	uxth	r3, r3
 8002046:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002048:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 800204a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800204c:	2b00      	cmp	r3, #0
 800204e:	d116      	bne.n	800207e <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002050:	9a02      	ldr	r2, [sp, #8]
 8002052:	9901      	ldr	r1, [sp, #4]
 8002054:	0020      	movs	r0, r4
 8002056:	f7ff ff23 	bl	8001ea0 <SPI_EndRxTxTransaction>
 800205a:	2800      	cmp	r0, #0
 800205c:	d000      	beq.n	8002060 <HAL_SPI_Transmit+0xbc>
 800205e:	e06d      	b.n	800213c <HAL_SPI_Transmit+0x198>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002060:	68a3      	ldr	r3, [r4, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002066:	9305      	str	r3, [sp, #20]
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	9205      	str	r2, [sp, #20]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	9305      	str	r3, [sp, #20]
 8002072:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002074:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8002076:	1e73      	subs	r3, r6, #1
 8002078:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 800207a:	b2f6      	uxtb	r6, r6
 800207c:	e017      	b.n	80020ae <HAL_SPI_Transmit+0x10a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800207e:	6822      	ldr	r2, [r4, #0]
 8002080:	6893      	ldr	r3, [r2, #8]
 8002082:	422b      	tst	r3, r5
 8002084:	d009      	beq.n	800209a <HAL_SPI_Transmit+0xf6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002086:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002088:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800208a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800208c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800208e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002090:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002092:	3b01      	subs	r3, #1
 8002094:	b29b      	uxth	r3, r3
 8002096:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002098:	e7d7      	b.n	800204a <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800209a:	f7ff f899 	bl	80011d0 <HAL_GetTick>
 800209e:	9b02      	ldr	r3, [sp, #8]
 80020a0:	1ac0      	subs	r0, r0, r3
 80020a2:	9b01      	ldr	r3, [sp, #4]
 80020a4:	4298      	cmp	r0, r3
 80020a6:	d3d0      	bcc.n	800204a <HAL_SPI_Transmit+0xa6>
 80020a8:	3301      	adds	r3, #1
 80020aa:	d0ce      	beq.n	800204a <HAL_SPI_Transmit+0xa6>
          errorcode = HAL_TIMEOUT;
 80020ac:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 80020ae:	2301      	movs	r3, #1
 80020b0:	345d      	adds	r4, #93	; 0x5d
 80020b2:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 80020b4:	2300      	movs	r3, #0
 80020b6:	9a03      	ldr	r2, [sp, #12]
 80020b8:	7013      	strb	r3, [r2, #0]
}
 80020ba:	0030      	movs	r0, r6
 80020bc:	b007      	add	sp, #28
 80020be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_SPI_Transmit+0x124>
 80020c4:	2f01      	cmp	r7, #1
 80020c6:	d10a      	bne.n	80020de <HAL_SPI_Transmit+0x13a>
      if (hspi->TxXferCount > 1U)
 80020c8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80020ca:	2a01      	cmp	r2, #1
 80020cc:	d91c      	bls.n	8002108 <HAL_SPI_Transmit+0x164>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ce:	882a      	ldrh	r2, [r5, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d0:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020d2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80020d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d6:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80020d8:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80020da:	b29b      	uxth	r3, r3
 80020dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020de:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80020e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0b4      	beq.n	8002050 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020e6:	6822      	ldr	r2, [r4, #0]
 80020e8:	6893      	ldr	r3, [r2, #8]
 80020ea:	422b      	tst	r3, r5
 80020ec:	d01c      	beq.n	8002128 <HAL_SPI_Transmit+0x184>
        if (hspi->TxXferCount > 1U)
 80020ee:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80020f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020f2:	2901      	cmp	r1, #1
 80020f4:	d910      	bls.n	8002118 <HAL_SPI_Transmit+0x174>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f6:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f8:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020fa:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80020fc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80020fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002100:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8002102:	b29b      	uxth	r3, r3
 8002104:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002106:	e7eb      	b.n	80020e0 <HAL_SPI_Transmit+0x13c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002108:	782a      	ldrb	r2, [r5, #0]
 800210a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800210c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800210e:	3301      	adds	r3, #1
 8002110:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002112:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002114:	3b01      	subs	r3, #1
 8002116:	e7e0      	b.n	80020da <HAL_SPI_Transmit+0x136>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800211c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800211e:	3301      	adds	r3, #1
 8002120:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002122:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002124:	3b01      	subs	r3, #1
 8002126:	e7ec      	b.n	8002102 <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002128:	f7ff f852 	bl	80011d0 <HAL_GetTick>
 800212c:	9b02      	ldr	r3, [sp, #8]
 800212e:	1ac0      	subs	r0, r0, r3
 8002130:	9b01      	ldr	r3, [sp, #4]
 8002132:	4283      	cmp	r3, r0
 8002134:	d8d4      	bhi.n	80020e0 <HAL_SPI_Transmit+0x13c>
 8002136:	3301      	adds	r3, #1
 8002138:	d0d2      	beq.n	80020e0 <HAL_SPI_Transmit+0x13c>
 800213a:	e7b7      	b.n	80020ac <HAL_SPI_Transmit+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800213c:	2320      	movs	r3, #32
 800213e:	6623      	str	r3, [r4, #96]	; 0x60
 8002140:	e78e      	b.n	8002060 <HAL_SPI_Transmit+0xbc>
	...

08002144 <HAL_SPI_TransmitReceive>:
{
 8002144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002146:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8002148:	0003      	movs	r3, r0
{
 800214a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 800214c:	335c      	adds	r3, #92	; 0x5c
 800214e:	781a      	ldrb	r2, [r3, #0]
{
 8002150:	0004      	movs	r4, r0
 8002152:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 8002154:	2502      	movs	r5, #2
 8002156:	2a01      	cmp	r2, #1
 8002158:	d100      	bne.n	800215c <HAL_SPI_TransmitReceive+0x18>
 800215a:	e0ac      	b.n	80022b6 <HAL_SPI_TransmitReceive+0x172>
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002160:	f7ff f836 	bl	80011d0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002164:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8002166:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 8002168:	335d      	adds	r3, #93	; 0x5d
 800216a:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800216c:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800216e:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002170:	2b01      	cmp	r3, #1
 8002172:	d00b      	beq.n	800218c <HAL_SPI_TransmitReceive+0x48>
 8002174:	2282      	movs	r2, #130	; 0x82
 8002176:	0052      	lsls	r2, r2, #1
 8002178:	4291      	cmp	r1, r2
 800217a:	d000      	beq.n	800217e <HAL_SPI_TransmitReceive+0x3a>
 800217c:	e094      	b.n	80022a8 <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800217e:	68a2      	ldr	r2, [r4, #8]
 8002180:	2a00      	cmp	r2, #0
 8002182:	d000      	beq.n	8002186 <HAL_SPI_TransmitReceive+0x42>
 8002184:	e090      	b.n	80022a8 <HAL_SPI_TransmitReceive+0x164>
 8002186:	2b04      	cmp	r3, #4
 8002188:	d000      	beq.n	800218c <HAL_SPI_TransmitReceive+0x48>
 800218a:	e08d      	b.n	80022a8 <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 800218c:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800218e:	2f00      	cmp	r7, #0
 8002190:	d100      	bne.n	8002194 <HAL_SPI_TransmitReceive+0x50>
 8002192:	e089      	b.n	80022a8 <HAL_SPI_TransmitReceive+0x164>
 8002194:	9b01      	ldr	r3, [sp, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d100      	bne.n	800219c <HAL_SPI_TransmitReceive+0x58>
 800219a:	e085      	b.n	80022a8 <HAL_SPI_TransmitReceive+0x164>
 800219c:	2e00      	cmp	r6, #0
 800219e:	d100      	bne.n	80021a2 <HAL_SPI_TransmitReceive+0x5e>
 80021a0:	e082      	b.n	80022a8 <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021a2:	0023      	movs	r3, r4
 80021a4:	335d      	adds	r3, #93	; 0x5d
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	2a04      	cmp	r2, #4
 80021aa:	d001      	beq.n	80021b0 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021ac:	2205      	movs	r2, #5
 80021ae:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021b0:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b2:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021b4:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80021b6:	0022      	movs	r2, r4
 80021b8:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ba:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80021bc:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80021be:	1da2      	adds	r2, r4, #6
 80021c0:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80021c2:	22e0      	movs	r2, #224	; 0xe0
 80021c4:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 80021c6:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80021c8:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021ca:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80021cc:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80021ce:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80021d0:	00d2      	lsls	r2, r2, #3
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	4290      	cmp	r0, r2
 80021d6:	d801      	bhi.n	80021dc <HAL_SPI_TransmitReceive+0x98>
 80021d8:	2e01      	cmp	r6, #1
 80021da:	d931      	bls.n	8002240 <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4d71      	ldr	r5, [pc, #452]	; (80023a4 <HAL_SPI_TransmitReceive+0x260>)
 80021e0:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021e2:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021e4:	2240      	movs	r2, #64	; 0x40
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	681d      	ldr	r5, [r3, #0]
 80021ea:	4215      	tst	r5, r2
 80021ec:	d102      	bne.n	80021f4 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80021ee:	681d      	ldr	r5, [r3, #0]
 80021f0:	432a      	orrs	r2, r5
 80021f2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021f4:	22e0      	movs	r2, #224	; 0xe0
 80021f6:	00d2      	lsls	r2, r2, #3
 80021f8:	4290      	cmp	r0, r2
 80021fa:	d95e      	bls.n	80022ba <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021fc:	2900      	cmp	r1, #0
 80021fe:	d001      	beq.n	8002204 <HAL_SPI_TransmitReceive+0xc0>
 8002200:	2e01      	cmp	r6, #1
 8002202:	d107      	bne.n	8002214 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002204:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002206:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002208:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800220a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800220c:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800220e:	3b01      	subs	r3, #1
 8002210:	b29b      	uxth	r3, r3
 8002212:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002214:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002216:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002218:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800221a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800221c:	2b00      	cmp	r3, #0
 800221e:	d114      	bne.n	800224a <HAL_SPI_TransmitReceive+0x106>
 8002220:	0023      	movs	r3, r4
 8002222:	3308      	adds	r3, #8
 8002224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10f      	bne.n	800224a <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	9908      	ldr	r1, [sp, #32]
 800222e:	0020      	movs	r0, r4
 8002230:	f7ff fe36 	bl	8001ea0 <SPI_EndRxTxTransaction>
 8002234:	1e05      	subs	r5, r0, #0
 8002236:	d037      	beq.n	80022a8 <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002238:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800223a:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800223c:	6623      	str	r3, [r4, #96]	; 0x60
 800223e:	e033      	b.n	80022a8 <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	685d      	ldr	r5, [r3, #4]
 8002244:	0152      	lsls	r2, r2, #5
 8002246:	432a      	orrs	r2, r5
 8002248:	e7cb      	b.n	80021e2 <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	6893      	ldr	r3, [r2, #8]
 800224e:	423b      	tst	r3, r7
 8002250:	d00e      	beq.n	8002270 <HAL_SPI_TransmitReceive+0x12c>
 8002252:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00b      	beq.n	8002270 <HAL_SPI_TransmitReceive+0x12c>
 8002258:	2d01      	cmp	r5, #1
 800225a:	d109      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 800225c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800225e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002260:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002262:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002264:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002266:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002268:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800226a:	3b01      	subs	r3, #1
 800226c:	b29b      	uxth	r3, r3
 800226e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002270:	6893      	ldr	r3, [r2, #8]
 8002272:	4233      	tst	r3, r6
 8002274:	d00e      	beq.n	8002294 <HAL_SPI_TransmitReceive+0x150>
 8002276:	0021      	movs	r1, r4
 8002278:	3108      	adds	r1, #8
 800227a:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8002280:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002284:	68d2      	ldr	r2, [r2, #12]
 8002286:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002288:	3302      	adds	r3, #2
 800228a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800228c:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 800228e:	3b01      	subs	r3, #1
 8002290:	b29b      	uxth	r3, r3
 8002292:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002294:	f7fe ff9c 	bl	80011d0 <HAL_GetTick>
 8002298:	9b00      	ldr	r3, [sp, #0]
 800229a:	1ac0      	subs	r0, r0, r3
 800229c:	9b08      	ldr	r3, [sp, #32]
 800229e:	4283      	cmp	r3, r0
 80022a0:	d8bb      	bhi.n	800221a <HAL_SPI_TransmitReceive+0xd6>
 80022a2:	3301      	adds	r3, #1
 80022a4:	d0b9      	beq.n	800221a <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 80022a6:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80022a8:	0023      	movs	r3, r4
 80022aa:	2201      	movs	r2, #1
 80022ac:	335d      	adds	r3, #93	; 0x5d
 80022ae:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80022b0:	2300      	movs	r3, #0
 80022b2:	345c      	adds	r4, #92	; 0x5c
 80022b4:	7023      	strb	r3, [r4, #0]
}
 80022b6:	0028      	movs	r0, r5
 80022b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ba:	2900      	cmp	r1, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_SPI_TransmitReceive+0x17e>
 80022be:	2e01      	cmp	r6, #1
 80022c0:	d10a      	bne.n	80022d8 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 80022c2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80022c4:	2a01      	cmp	r2, #1
 80022c6:	d951      	bls.n	800236c <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022c8:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ca:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022cc:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80022ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022d0:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80022d2:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80022d8:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022da:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022dc:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <HAL_SPI_TransmitReceive+0x1ac>
 80022e4:	0023      	movs	r3, r4
 80022e6:	3308      	adds	r3, #8
 80022e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d100      	bne.n	80022f0 <HAL_SPI_TransmitReceive+0x1ac>
 80022ee:	e79c      	b.n	800222a <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022f0:	6822      	ldr	r2, [r4, #0]
 80022f2:	6893      	ldr	r3, [r2, #8]
 80022f4:	423b      	tst	r3, r7
 80022f6:	d011      	beq.n	800231c <HAL_SPI_TransmitReceive+0x1d8>
 80022f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00e      	beq.n	800231c <HAL_SPI_TransmitReceive+0x1d8>
 80022fe:	2d01      	cmp	r5, #1
 8002300:	d10c      	bne.n	800231c <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 8002302:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002304:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002306:	2901      	cmp	r1, #1
 8002308:	d938      	bls.n	800237c <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800230a:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800230c:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800230e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002310:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002312:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002314:	3b02      	subs	r3, #2
        txallowed = 0U;
 8002316:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 8002318:	b29b      	uxth	r3, r3
 800231a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800231c:	6821      	ldr	r1, [r4, #0]
 800231e:	688b      	ldr	r3, [r1, #8]
 8002320:	4233      	tst	r3, r6
 8002322:	d019      	beq.n	8002358 <HAL_SPI_TransmitReceive+0x214>
 8002324:	0023      	movs	r3, r4
 8002326:	3308      	adds	r3, #8
 8002328:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800232a:	2a00      	cmp	r2, #0
 800232c:	d014      	beq.n	8002358 <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 800232e:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8002330:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002332:	2801      	cmp	r0, #1
 8002334:	d92a      	bls.n	800238c <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002336:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 8002338:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800233a:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800233c:	3202      	adds	r2, #2
 800233e:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002340:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002342:	3a02      	subs	r2, #2
 8002344:	b292      	uxth	r2, r2
 8002346:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8002348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234a:	2b01      	cmp	r3, #1
 800234c:	d804      	bhi.n	8002358 <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	684a      	ldr	r2, [r1, #4]
 8002352:	015b      	lsls	r3, r3, #5
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002358:	f7fe ff3a 	bl	80011d0 <HAL_GetTick>
 800235c:	9b00      	ldr	r3, [sp, #0]
 800235e:	1ac0      	subs	r0, r0, r3
 8002360:	9b08      	ldr	r3, [sp, #32]
 8002362:	4283      	cmp	r3, r0
 8002364:	d8bb      	bhi.n	80022de <HAL_SPI_TransmitReceive+0x19a>
 8002366:	3301      	adds	r3, #1
 8002368:	d0b9      	beq.n	80022de <HAL_SPI_TransmitReceive+0x19a>
 800236a:	e79c      	b.n	80022a6 <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800236c:	783a      	ldrb	r2, [r7, #0]
 800236e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002372:	3301      	adds	r3, #1
 8002374:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002376:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002378:	3b01      	subs	r3, #1
 800237a:	e7ab      	b.n	80022d4 <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002382:	3301      	adds	r3, #1
 8002384:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002386:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002388:	3b01      	subs	r3, #1
 800238a:	e7c4      	b.n	8002316 <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800238c:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 800238e:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002390:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8002392:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002394:	3201      	adds	r2, #1
 8002396:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002398:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800239a:	3a01      	subs	r2, #1
 800239c:	b292      	uxth	r2, r2
 800239e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023a0:	e7da      	b.n	8002358 <HAL_SPI_TransmitReceive+0x214>
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	ffffefff 	.word	0xffffefff

080023a8 <HAL_SPI_GetState>:
  return hspi->State;
 80023a8:	305d      	adds	r0, #93	; 0x5d
 80023aa:	7800      	ldrb	r0, [r0, #0]
 80023ac:	b2c0      	uxtb	r0, r0
}
 80023ae:	4770      	bx	lr

080023b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023b4:	6925      	ldr	r5, [r4, #16]
 80023b6:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023b8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023ba:	432b      	orrs	r3, r5
 80023bc:	6965      	ldr	r5, [r4, #20]
 80023be:	69c1      	ldr	r1, [r0, #28]
 80023c0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023c2:	6810      	ldr	r0, [r2, #0]
 80023c4:	4d43      	ldr	r5, [pc, #268]	; (80024d4 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023c6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023c8:	4028      	ands	r0, r5
 80023ca:	4303      	orrs	r3, r0
 80023cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ce:	6853      	ldr	r3, [r2, #4]
 80023d0:	4841      	ldr	r0, [pc, #260]	; (80024d8 <UART_SetConfig+0x128>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80023d2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d4:	4003      	ands	r3, r0
 80023d6:	68e0      	ldr	r0, [r4, #12]
 80023d8:	4303      	orrs	r3, r0
 80023da:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80023dc:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023de:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80023e0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023e2:	4d3e      	ldr	r5, [pc, #248]	; (80024dc <UART_SetConfig+0x12c>)
 80023e4:	4028      	ands	r0, r5
 80023e6:	4303      	orrs	r3, r0
 80023e8:	6093      	str	r3, [r2, #8]
 80023ea:	2380      	movs	r3, #128	; 0x80


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023ec:	483c      	ldr	r0, [pc, #240]	; (80024e0 <UART_SetConfig+0x130>)
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	4282      	cmp	r2, r0
 80023f2:	d110      	bne.n	8002416 <UART_SetConfig+0x66>
 80023f4:	2003      	movs	r0, #3
 80023f6:	4a3b      	ldr	r2, [pc, #236]	; (80024e4 <UART_SetConfig+0x134>)
 80023f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023fa:	4002      	ands	r2, r0
 80023fc:	483a      	ldr	r0, [pc, #232]	; (80024e8 <UART_SetConfig+0x138>)
 80023fe:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002400:	4299      	cmp	r1, r3
 8002402:	d013      	beq.n	800242c <UART_SetConfig+0x7c>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8002404:	2808      	cmp	r0, #8
 8002406:	d828      	bhi.n	800245a <UART_SetConfig+0xaa>
 8002408:	f7fd fe90 	bl	800012c <__gnu_thumb1_case_uqi>
 800240c:	27462741 	.word	0x27462741
 8002410:	27272757 	.word	0x27272757
 8002414:	5a          	.byte	0x5a
 8002415:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002416:	4835      	ldr	r0, [pc, #212]	; (80024ec <UART_SetConfig+0x13c>)
 8002418:	4282      	cmp	r2, r0
 800241a:	d156      	bne.n	80024ca <UART_SetConfig+0x11a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800241c:	4299      	cmp	r1, r3
 800241e:	d136      	bne.n	800248e <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002420:	f7ff fc44 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002424:	6863      	ldr	r3, [r4, #4]
 8002426:	0040      	lsls	r0, r0, #1
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	e00b      	b.n	8002444 <UART_SetConfig+0x94>
    switch (clocksource)
 800242c:	2808      	cmp	r0, #8
 800242e:	d81e      	bhi.n	800246e <UART_SetConfig+0xbe>
 8002430:	f7fd fe72 	bl	8000118 <__gnu_thumb1_case_sqi>
 8002434:	1d051df6 	.word	0x1d051df6
 8002438:	1d1d1d15 	.word	0x1d1d1d15
 800243c:	18          	.byte	0x18
 800243d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800243e:	6863      	ldr	r3, [r4, #4]
 8002440:	0858      	lsrs	r0, r3, #1
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <UART_SetConfig+0x140>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002444:	18c0      	adds	r0, r0, r3
 8002446:	6861      	ldr	r1, [r4, #4]
 8002448:	f7fd fe7a 	bl	8000140 <__udivsi3>
 800244c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800244e:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002450:	001a      	movs	r2, r3
 8002452:	4928      	ldr	r1, [pc, #160]	; (80024f4 <UART_SetConfig+0x144>)
 8002454:	3a10      	subs	r2, #16
 8002456:	428a      	cmp	r2, r1
 8002458:	d90c      	bls.n	8002474 <UART_SetConfig+0xc4>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 800245a:	2001      	movs	r0, #1
 800245c:	e013      	b.n	8002486 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 800245e:	f7ff fb6f 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8002462:	e7df      	b.n	8002424 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002464:	6863      	ldr	r3, [r4, #4]
 8002466:	0858      	lsrs	r0, r3, #1
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	025b      	lsls	r3, r3, #9
 800246c:	e7ea      	b.n	8002444 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 800246e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002470:	2300      	movs	r3, #0
 8002472:	e7ed      	b.n	8002450 <UART_SetConfig+0xa0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002474:	220f      	movs	r2, #15
 8002476:	0019      	movs	r1, r3
 8002478:	4391      	bics	r1, r2
 800247a:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800247c:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 800247e:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002480:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8002482:	4313      	orrs	r3, r2
 8002484:	60cb      	str	r3, [r1, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002486:	2300      	movs	r3, #0
 8002488:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800248a:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800248c:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800248e:	f7ff fc0d 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002492:	6863      	ldr	r3, [r4, #4]
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	e002      	b.n	800249e <UART_SetConfig+0xee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002498:	6863      	ldr	r3, [r4, #4]
 800249a:	0858      	lsrs	r0, r3, #1
 800249c:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <UART_SetConfig+0x148>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800249e:	18c0      	adds	r0, r0, r3
 80024a0:	6861      	ldr	r1, [r4, #4]
 80024a2:	f7fd fe4d 	bl	8000140 <__udivsi3>
 80024a6:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80024a8:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024aa:	001a      	movs	r2, r3
 80024ac:	4911      	ldr	r1, [pc, #68]	; (80024f4 <UART_SetConfig+0x144>)
 80024ae:	3a10      	subs	r2, #16
 80024b0:	428a      	cmp	r2, r1
 80024b2:	d8d2      	bhi.n	800245a <UART_SetConfig+0xaa>
      huart->Instance->BRR = usartdiv;
 80024b4:	6822      	ldr	r2, [r4, #0]
 80024b6:	60d3      	str	r3, [r2, #12]
 80024b8:	e7e5      	b.n	8002486 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 80024ba:	f7ff fb41 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 80024be:	e7e8      	b.n	8002492 <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80024c0:	6863      	ldr	r3, [r4, #4]
 80024c2:	0858      	lsrs	r0, r3, #1
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	e7e9      	b.n	800249e <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ca:	4299      	cmp	r1, r3
 80024cc:	d0cf      	beq.n	800246e <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 80024ce:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e7ea      	b.n	80024aa <UART_SetConfig+0xfa>
 80024d4:	ffff69f3 	.word	0xffff69f3
 80024d8:	ffffcfff 	.word	0xffffcfff
 80024dc:	fffff4ff 	.word	0xfffff4ff
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40021000 	.word	0x40021000
 80024e8:	080044cc 	.word	0x080044cc
 80024ec:	40004400 	.word	0x40004400
 80024f0:	00f42400 	.word	0x00f42400
 80024f4:	0000ffef 	.word	0x0000ffef
 80024f8:	007a1200 	.word	0x007a1200

080024fc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80024fe:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002500:	07da      	lsls	r2, r3, #31
 8002502:	d506      	bpl.n	8002512 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002504:	6801      	ldr	r1, [r0, #0]
 8002506:	4c28      	ldr	r4, [pc, #160]	; (80025a8 <UART_AdvFeatureConfig+0xac>)
 8002508:	684a      	ldr	r2, [r1, #4]
 800250a:	4022      	ands	r2, r4
 800250c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800250e:	4322      	orrs	r2, r4
 8002510:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002512:	079a      	lsls	r2, r3, #30
 8002514:	d506      	bpl.n	8002524 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002516:	6801      	ldr	r1, [r0, #0]
 8002518:	4c24      	ldr	r4, [pc, #144]	; (80025ac <UART_AdvFeatureConfig+0xb0>)
 800251a:	684a      	ldr	r2, [r1, #4]
 800251c:	4022      	ands	r2, r4
 800251e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002520:	4322      	orrs	r2, r4
 8002522:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002524:	075a      	lsls	r2, r3, #29
 8002526:	d506      	bpl.n	8002536 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002528:	6801      	ldr	r1, [r0, #0]
 800252a:	4c21      	ldr	r4, [pc, #132]	; (80025b0 <UART_AdvFeatureConfig+0xb4>)
 800252c:	684a      	ldr	r2, [r1, #4]
 800252e:	4022      	ands	r2, r4
 8002530:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002532:	4322      	orrs	r2, r4
 8002534:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002536:	071a      	lsls	r2, r3, #28
 8002538:	d506      	bpl.n	8002548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800253a:	6801      	ldr	r1, [r0, #0]
 800253c:	4c1d      	ldr	r4, [pc, #116]	; (80025b4 <UART_AdvFeatureConfig+0xb8>)
 800253e:	684a      	ldr	r2, [r1, #4]
 8002540:	4022      	ands	r2, r4
 8002542:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002544:	4322      	orrs	r2, r4
 8002546:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002548:	06da      	lsls	r2, r3, #27
 800254a:	d506      	bpl.n	800255a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800254c:	6801      	ldr	r1, [r0, #0]
 800254e:	4c1a      	ldr	r4, [pc, #104]	; (80025b8 <UART_AdvFeatureConfig+0xbc>)
 8002550:	688a      	ldr	r2, [r1, #8]
 8002552:	4022      	ands	r2, r4
 8002554:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002556:	4322      	orrs	r2, r4
 8002558:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800255a:	069a      	lsls	r2, r3, #26
 800255c:	d506      	bpl.n	800256c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800255e:	6801      	ldr	r1, [r0, #0]
 8002560:	4c16      	ldr	r4, [pc, #88]	; (80025bc <UART_AdvFeatureConfig+0xc0>)
 8002562:	688a      	ldr	r2, [r1, #8]
 8002564:	4022      	ands	r2, r4
 8002566:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002568:	4322      	orrs	r2, r4
 800256a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800256c:	065a      	lsls	r2, r3, #25
 800256e:	d510      	bpl.n	8002592 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002570:	6801      	ldr	r1, [r0, #0]
 8002572:	4d13      	ldr	r5, [pc, #76]	; (80025c0 <UART_AdvFeatureConfig+0xc4>)
 8002574:	684a      	ldr	r2, [r1, #4]
 8002576:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002578:	402a      	ands	r2, r5
 800257a:	4322      	orrs	r2, r4
 800257c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800257e:	2280      	movs	r2, #128	; 0x80
 8002580:	0352      	lsls	r2, r2, #13
 8002582:	4294      	cmp	r4, r2
 8002584:	d105      	bne.n	8002592 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002586:	684a      	ldr	r2, [r1, #4]
 8002588:	4c0e      	ldr	r4, [pc, #56]	; (80025c4 <UART_AdvFeatureConfig+0xc8>)
 800258a:	4022      	ands	r2, r4
 800258c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800258e:	4322      	orrs	r2, r4
 8002590:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	d506      	bpl.n	80025a4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002596:	6802      	ldr	r2, [r0, #0]
 8002598:	490b      	ldr	r1, [pc, #44]	; (80025c8 <UART_AdvFeatureConfig+0xcc>)
 800259a:	6853      	ldr	r3, [r2, #4]
 800259c:	400b      	ands	r3, r1
 800259e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6053      	str	r3, [r2, #4]
  }
}
 80025a4:	bd30      	pop	{r4, r5, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	fffdffff 	.word	0xfffdffff
 80025ac:	fffeffff 	.word	0xfffeffff
 80025b0:	fffbffff 	.word	0xfffbffff
 80025b4:	ffff7fff 	.word	0xffff7fff
 80025b8:	ffffefff 	.word	0xffffefff
 80025bc:	ffffdfff 	.word	0xffffdfff
 80025c0:	ffefffff 	.word	0xffefffff
 80025c4:	ff9fffff 	.word	0xff9fffff
 80025c8:	fff7ffff 	.word	0xfff7ffff

080025cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025ce:	2780      	movs	r7, #128	; 0x80
{
 80025d0:	0004      	movs	r4, r0
 80025d2:	000e      	movs	r6, r1
 80025d4:	0015      	movs	r5, r2
 80025d6:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025d8:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025da:	6822      	ldr	r2, [r4, #0]
 80025dc:	69d3      	ldr	r3, [r2, #28]
 80025de:	4033      	ands	r3, r6
 80025e0:	1b9b      	subs	r3, r3, r6
 80025e2:	4259      	negs	r1, r3
 80025e4:	414b      	adcs	r3, r1
 80025e6:	42ab      	cmp	r3, r5
 80025e8:	d001      	beq.n	80025ee <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80025ea:	2000      	movs	r0, #0
 80025ec:	e01c      	b.n	8002628 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80025ee:	9b08      	ldr	r3, [sp, #32]
 80025f0:	3301      	adds	r3, #1
 80025f2:	d0f3      	beq.n	80025dc <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f4:	f7fe fdec 	bl	80011d0 <HAL_GetTick>
 80025f8:	9b01      	ldr	r3, [sp, #4]
 80025fa:	9a08      	ldr	r2, [sp, #32]
 80025fc:	1ac0      	subs	r0, r0, r3
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	4282      	cmp	r2, r0
 8002602:	d301      	bcc.n	8002608 <UART_WaitOnFlagUntilTimeout+0x3c>
 8002604:	2a00      	cmp	r2, #0
 8002606:	d110      	bne.n	800262a <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4913      	ldr	r1, [pc, #76]	; (8002658 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800260c:	400a      	ands	r2, r1
 800260e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	31a3      	adds	r1, #163	; 0xa3
 8002614:	31ff      	adds	r1, #255	; 0xff
 8002616:	438a      	bics	r2, r1
 8002618:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800261a:	2320      	movs	r3, #32
 800261c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800261e:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8002620:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002622:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002624:	3470      	adds	r4, #112	; 0x70
 8002626:	7023      	strb	r3, [r4, #0]
}
 8002628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800262a:	2104      	movs	r1, #4
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	420a      	tst	r2, r1
 8002630:	d0d3      	beq.n	80025da <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002632:	69da      	ldr	r2, [r3, #28]
 8002634:	423a      	tst	r2, r7
 8002636:	d0d0      	beq.n	80025da <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002638:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4906      	ldr	r1, [pc, #24]	; (8002658 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800263e:	400a      	ands	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	31a3      	adds	r1, #163	; 0xa3
 8002646:	31ff      	adds	r1, #255	; 0xff
 8002648:	438a      	bics	r2, r1
 800264a:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800264c:	2320      	movs	r3, #32
 800264e:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002650:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002652:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002654:	e7e4      	b.n	8002620 <UART_WaitOnFlagUntilTimeout+0x54>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	fffffe5f 	.word	0xfffffe5f

0800265c <HAL_UART_Transmit>:
{
 800265c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265e:	b087      	sub	sp, #28
 8002660:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002662:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002664:	0004      	movs	r4, r0
 8002666:	000d      	movs	r5, r1
 8002668:	0017      	movs	r7, r2
    return HAL_BUSY;
 800266a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800266c:	2b20      	cmp	r3, #32
 800266e:	d149      	bne.n	8002704 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8002670:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002672:	2900      	cmp	r1, #0
 8002674:	d046      	beq.n	8002704 <HAL_UART_Transmit+0xa8>
 8002676:	2a00      	cmp	r2, #0
 8002678:	d044      	beq.n	8002704 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	68a2      	ldr	r2, [r4, #8]
 800267e:	015b      	lsls	r3, r3, #5
 8002680:	429a      	cmp	r2, r3
 8002682:	d104      	bne.n	800268e <HAL_UART_Transmit+0x32>
 8002684:	6923      	ldr	r3, [r4, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 800268a:	4201      	tst	r1, r0
 800268c:	d13a      	bne.n	8002704 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 800268e:	0023      	movs	r3, r4
 8002690:	3370      	adds	r3, #112	; 0x70
 8002692:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002694:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002696:	2a01      	cmp	r2, #1
 8002698:	d034      	beq.n	8002704 <HAL_UART_Transmit+0xa8>
 800269a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269c:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 800269e:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a2:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a4:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80026a6:	f7fe fd93 	bl	80011d0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80026aa:	0023      	movs	r3, r4
 80026ac:	3350      	adds	r3, #80	; 0x50
 80026ae:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80026b0:	3302      	adds	r3, #2
 80026b2:	9303      	str	r3, [sp, #12]
 80026b4:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80026ba:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026bc:	015b      	lsls	r3, r3, #5
 80026be:	429a      	cmp	r2, r3
 80026c0:	d104      	bne.n	80026cc <HAL_UART_Transmit+0x70>
 80026c2:	6923      	ldr	r3, [r4, #16]
 80026c4:	42b3      	cmp	r3, r6
 80026c6:	d101      	bne.n	80026cc <HAL_UART_Transmit+0x70>
 80026c8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80026ca:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80026cc:	0023      	movs	r3, r4
 80026ce:	3352      	adds	r3, #82	; 0x52
 80026d0:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026d2:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80026d4:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80026da:	2a00      	cmp	r2, #0
 80026dc:	d10a      	bne.n	80026f4 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026de:	2140      	movs	r1, #64	; 0x40
 80026e0:	0020      	movs	r0, r4
 80026e2:	f7ff ff73 	bl	80025cc <UART_WaitOnFlagUntilTimeout>
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d10b      	bne.n	8002702 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 80026ea:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80026ec:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80026ee:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80026f0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80026f2:	e007      	b.n	8002704 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	0020      	movs	r0, r4
 80026fa:	f7ff ff67 	bl	80025cc <UART_WaitOnFlagUntilTimeout>
 80026fe:	2800      	cmp	r0, #0
 8002700:	d002      	beq.n	8002708 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8002702:	2003      	movs	r0, #3
}
 8002704:	b007      	add	sp, #28
 8002706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002708:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800270a:	2d00      	cmp	r5, #0
 800270c:	d10b      	bne.n	8002726 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800270e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002710:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002712:	05db      	lsls	r3, r3, #23
 8002714:	0ddb      	lsrs	r3, r3, #23
 8002716:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002718:	9b03      	ldr	r3, [sp, #12]
 800271a:	9a03      	ldr	r2, [sp, #12]
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	3b01      	subs	r3, #1
 8002720:	b29b      	uxth	r3, r3
 8002722:	8013      	strh	r3, [r2, #0]
 8002724:	e7d2      	b.n	80026cc <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002726:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8002728:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800272a:	8513      	strh	r3, [r2, #40]	; 0x28
 800272c:	e7f4      	b.n	8002718 <HAL_UART_Transmit+0xbc>
	...

08002730 <UART_CheckIdleState>:
{
 8002730:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002732:	2600      	movs	r6, #0
{
 8002734:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002736:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002738:	f7fe fd4a 	bl	80011d0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800273c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800273e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	071b      	lsls	r3, r3, #28
 8002744:	d415      	bmi.n	8002772 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	075b      	lsls	r3, r3, #29
 800274c:	d50a      	bpl.n	8002764 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800274e:	2180      	movs	r1, #128	; 0x80
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <UART_CheckIdleState+0x5c>)
 8002752:	2200      	movs	r2, #0
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	03c9      	lsls	r1, r1, #15
 8002758:	002b      	movs	r3, r5
 800275a:	0020      	movs	r0, r4
 800275c:	f7ff ff36 	bl	80025cc <UART_WaitOnFlagUntilTimeout>
 8002760:	2800      	cmp	r0, #0
 8002762:	d111      	bne.n	8002788 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002764:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002766:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002768:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800276a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800276c:	3470      	adds	r4, #112	; 0x70
 800276e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002770:	e00b      	b.n	800278a <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <UART_CheckIdleState+0x5c>)
 8002776:	0032      	movs	r2, r6
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	0389      	lsls	r1, r1, #14
 800277c:	0003      	movs	r3, r0
 800277e:	0020      	movs	r0, r4
 8002780:	f7ff ff24 	bl	80025cc <UART_WaitOnFlagUntilTimeout>
 8002784:	2800      	cmp	r0, #0
 8002786:	d0de      	beq.n	8002746 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002788:	2003      	movs	r0, #3
}
 800278a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800278c:	01ffffff 	.word	0x01ffffff

08002790 <HAL_UART_Init>:
{
 8002790:	b510      	push	{r4, lr}
 8002792:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002794:	d101      	bne.n	800279a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002796:	2001      	movs	r0, #1
}
 8002798:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800279a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80027a0:	0002      	movs	r2, r0
 80027a2:	3270      	adds	r2, #112	; 0x70
 80027a4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80027a6:	f001 f93b 	bl	8003a20 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80027aa:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80027ac:	2101      	movs	r1, #1
 80027ae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027b0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80027b2:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027b4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80027b6:	438b      	bics	r3, r1
 80027b8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027ba:	f7ff fdf9 	bl	80023b0 <UART_SetConfig>
 80027be:	2801      	cmp	r0, #1
 80027c0:	d0e9      	beq.n	8002796 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80027c8:	0020      	movs	r0, r4
 80027ca:	f7ff fe97 	bl	80024fc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	4907      	ldr	r1, [pc, #28]	; (80027f0 <HAL_UART_Init+0x60>)
 80027d2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80027d4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	438a      	bics	r2, r1
 80027e0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80027e2:	2201      	movs	r2, #1
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80027ea:	f7ff ffa1 	bl	8002730 <UART_CheckIdleState>
 80027ee:	e7d3      	b.n	8002798 <HAL_UART_Init+0x8>
 80027f0:	ffffb7ff 	.word	0xffffb7ff

080027f4 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <disk_status+0x18>)
{
 80027f6:	b510      	push	{r4, lr}
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80027f8:	181a      	adds	r2, r3, r0
 80027fa:	0080      	lsls	r0, r0, #2
 80027fc:	181b      	adds	r3, r3, r0
 80027fe:	7a11      	ldrb	r1, [r2, #8]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	0008      	movs	r0, r1
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4798      	blx	r3
  return stat;
}
 8002808:	bd10      	pop	{r4, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	200000c4 	.word	0x200000c4

08002810 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <disk_initialize+0x24>)
{
 8002812:	0002      	movs	r2, r0
  if(disk.is_initialized[pdrv] == 0)
 8002814:	5c19      	ldrb	r1, [r3, r0]
  DSTATUS stat = RES_OK;
 8002816:	2000      	movs	r0, #0
{
 8002818:	b510      	push	{r4, lr}
  if(disk.is_initialized[pdrv] == 0)
 800281a:	4281      	cmp	r1, r0
 800281c:	d108      	bne.n	8002830 <disk_initialize+0x20>
  { 
    disk.is_initialized[pdrv] = 1;
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002822:	1899      	adds	r1, r3, r2
 8002824:	0092      	lsls	r2, r2, #2
 8002826:	189b      	adds	r3, r3, r2
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	7a08      	ldrb	r0, [r1, #8]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4798      	blx	r3
  }
  return stat;
}
 8002830:	bd10      	pop	{r4, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	200000c4 	.word	0x200000c4

08002838 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002838:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800283a:	4c05      	ldr	r4, [pc, #20]	; (8002850 <disk_read+0x18>)
 800283c:	1825      	adds	r5, r4, r0
 800283e:	0080      	lsls	r0, r0, #2
 8002840:	1824      	adds	r4, r4, r0
 8002842:	7a2e      	ldrb	r6, [r5, #8]
 8002844:	6860      	ldr	r0, [r4, #4]
 8002846:	6884      	ldr	r4, [r0, #8]
 8002848:	0030      	movs	r0, r6
 800284a:	47a0      	blx	r4
  return res;
}
 800284c:	bd70      	pop	{r4, r5, r6, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	200000c4 	.word	0x200000c4

08002854 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002854:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002856:	4c05      	ldr	r4, [pc, #20]	; (800286c <disk_write+0x18>)
 8002858:	1825      	adds	r5, r4, r0
 800285a:	0080      	lsls	r0, r0, #2
 800285c:	1824      	adds	r4, r4, r0
 800285e:	7a2e      	ldrb	r6, [r5, #8]
 8002860:	6860      	ldr	r0, [r4, #4]
 8002862:	68c4      	ldr	r4, [r0, #12]
 8002864:	0030      	movs	r0, r6
 8002866:	47a0      	blx	r4
  return res;
}
 8002868:	bd70      	pop	{r4, r5, r6, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	200000c4 	.word	0x200000c4

08002870 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002870:	6802      	ldr	r2, [r0, #0]
 8002872:	1e13      	subs	r3, r2, #0
 8002874:	d103      	bne.n	800287e <get_ldnumber+0xe>
	int vol = -1;
 8002876:	2001      	movs	r0, #1
 8002878:	4240      	negs	r0, r0
 800287a:	e00e      	b.n	800289a <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800287c:	3301      	adds	r3, #1
 800287e:	7819      	ldrb	r1, [r3, #0]
 8002880:	291f      	cmp	r1, #31
 8002882:	d909      	bls.n	8002898 <get_ldnumber+0x28>
 8002884:	293a      	cmp	r1, #58	; 0x3a
 8002886:	d1f9      	bne.n	800287c <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8002888:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800288a:	428b      	cmp	r3, r1
 800288c:	d1f3      	bne.n	8002876 <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800288e:	7812      	ldrb	r2, [r2, #0]
 8002890:	2a30      	cmp	r2, #48	; 0x30
 8002892:	d1f0      	bne.n	8002876 <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 8002894:	3301      	adds	r3, #1
 8002896:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002898:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800289a:	4770      	bx	lr

0800289c <sync_window.part.1>:
		wsect = fs->winsect;	/* Current sector number */
 800289c:	238b      	movs	r3, #139	; 0x8b
FRESULT sync_window (
 800289e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028a0:	0004      	movs	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	58c5      	ldr	r5, [r0, r3]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80028a6:	4e13      	ldr	r6, [pc, #76]	; (80028f4 <sync_window.part.1+0x58>)
 80028a8:	2301      	movs	r3, #1
 80028aa:	5d80      	ldrb	r0, [r0, r6]
 80028ac:	002a      	movs	r2, r5
 80028ae:	0021      	movs	r1, r4
 80028b0:	f7ff ffd0 	bl	8002854 <disk_write>
 80028b4:	9601      	str	r6, [sp, #4]
			res = FR_DISK_ERR;
 80028b6:	2301      	movs	r3, #1
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d10a      	bne.n	80028d2 <sync_window.part.1+0x36>
			fs->wflag = 0;
 80028bc:	2381      	movs	r3, #129	; 0x81
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80028c2:	3617      	adds	r6, #23
 80028c4:	331c      	adds	r3, #28
 80028c6:	58e3      	ldr	r3, [r4, r3]
 80028c8:	59a2      	ldr	r2, [r4, r6]
 80028ca:	1aeb      	subs	r3, r5, r3
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d302      	bcc.n	80028d6 <sync_window.part.1+0x3a>
	FRESULT res = FR_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	0018      	movs	r0, r3
 80028d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <sync_window.part.1+0x5c>)
 80028d8:	5ce7      	ldrb	r7, [r4, r3]
 80028da:	2f01      	cmp	r7, #1
 80028dc:	d9f8      	bls.n	80028d0 <sync_window.part.1+0x34>
					wsect += fs->fsize;
 80028de:	59a3      	ldr	r3, [r4, r6]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80028e0:	0021      	movs	r1, r4
					wsect += fs->fsize;
 80028e2:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	002a      	movs	r2, r5
 80028e8:	5ce0      	ldrb	r0, [r4, r3]
 80028ea:	2301      	movs	r3, #1
 80028ec:	f7ff ffb2 	bl	8002854 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80028f0:	3f01      	subs	r7, #1
 80028f2:	e7f2      	b.n	80028da <sync_window.part.1+0x3e>
 80028f4:	00000201 	.word	0x00000201
 80028f8:	00000203 	.word	0x00000203

080028fc <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80028fc:	2381      	movs	r3, #129	; 0x81
{
 80028fe:	b510      	push	{r4, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	5cc2      	ldrb	r2, [r0, r3]
	FRESULT res = FR_OK;
 8002904:	2300      	movs	r3, #0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002906:	429a      	cmp	r2, r3
 8002908:	d002      	beq.n	8002910 <sync_window+0x14>
 800290a:	f7ff ffc7 	bl	800289c <sync_window.part.1>
 800290e:	0003      	movs	r3, r0
}
 8002910:	0018      	movs	r0, r3
 8002912:	bd10      	pop	{r4, pc}

08002914 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002914:	238b      	movs	r3, #139	; 0x8b
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	58c3      	ldr	r3, [r0, r3]
{
 800291a:	b570      	push	{r4, r5, r6, lr}
 800291c:	0004      	movs	r4, r0
 800291e:	000e      	movs	r6, r1
	FRESULT res = FR_OK;
 8002920:	2500      	movs	r5, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002922:	428b      	cmp	r3, r1
 8002924:	d012      	beq.n	800294c <move_window+0x38>
		res = sync_window(fs);		/* Write-back changes */
 8002926:	f7ff ffe9 	bl	80028fc <sync_window>
 800292a:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
 800292c:	d10e      	bne.n	800294c <move_window+0x38>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <move_window+0x3c>)
 8002930:	0032      	movs	r2, r6
 8002932:	5ce0      	ldrb	r0, [r4, r3]
 8002934:	0021      	movs	r1, r4
 8002936:	2301      	movs	r3, #1
 8002938:	f7ff ff7e 	bl	8002838 <disk_read>
 800293c:	2800      	cmp	r0, #0
 800293e:	d002      	beq.n	8002946 <move_window+0x32>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002940:	2601      	movs	r6, #1
				res = FR_DISK_ERR;
 8002942:	3501      	adds	r5, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002944:	4276      	negs	r6, r6
			fs->winsect = sector;
 8002946:	238b      	movs	r3, #139	; 0x8b
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	50e6      	str	r6, [r4, r3]
}
 800294c:	0028      	movs	r0, r5
 800294e:	bd70      	pop	{r4, r5, r6, pc}
 8002950:	00000201 	.word	0x00000201

08002954 <check_fs>:
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002954:	2381      	movs	r3, #129	; 0x81
 8002956:	2200      	movs	r2, #0
 8002958:	009b      	lsls	r3, r3, #2
{
 800295a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800295c:	54c2      	strb	r2, [r0, r3]
 800295e:	3328      	adds	r3, #40	; 0x28
 8002960:	3a01      	subs	r2, #1
 8002962:	50c2      	str	r2, [r0, r3]
{
 8002964:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8002966:	f7ff ffd5 	bl	8002914 <move_window>
		return 3;
 800296a:	2303      	movs	r3, #3
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800296c:	2800      	cmp	r0, #0
 800296e:	d121      	bne.n	80029b4 <check_fs+0x60>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002970:	22ff      	movs	r2, #255	; 0xff
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <check_fs+0x64>)
 8002974:	0052      	lsls	r2, r2, #1
 8002976:	5ce3      	ldrb	r3, [r4, r3]
 8002978:	5ca2      	ldrb	r2, [r4, r2]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	431a      	orrs	r2, r3
 800297e:	490f      	ldr	r1, [pc, #60]	; (80029bc <check_fs+0x68>)
 8002980:	b212      	sxth	r2, r2
		return 2;
 8002982:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002984:	428a      	cmp	r2, r1
 8002986:	d115      	bne.n	80029b4 <check_fs+0x60>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002988:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800298a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800298c:	0412      	lsls	r2, r2, #16
 800298e:	431a      	orrs	r2, r3
 8002990:	490b      	ldr	r1, [pc, #44]	; (80029c0 <check_fs+0x6c>)
 8002992:	0212      	lsls	r2, r2, #8
 8002994:	0a12      	lsrs	r2, r2, #8
		return 0;
 8002996:	0003      	movs	r3, r0
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002998:	428a      	cmp	r2, r1
 800299a:	d00b      	beq.n	80029b4 <check_fs+0x60>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800299c:	3452      	adds	r4, #82	; 0x52
 800299e:	8863      	ldrh	r3, [r4, #2]
 80029a0:	8820      	ldrh	r0, [r4, #0]
 80029a2:	041b      	lsls	r3, r3, #16
 80029a4:	4303      	orrs	r3, r0
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	4a06      	ldr	r2, [pc, #24]	; (80029c4 <check_fs+0x70>)
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	189b      	adds	r3, r3, r2
 80029ae:	1e58      	subs	r0, r3, #1
 80029b0:	4183      	sbcs	r3, r0
		return 3;
 80029b2:	b2db      	uxtb	r3, r3
		return 0;

	return 1;
}
 80029b4:	0018      	movs	r0, r3
 80029b6:	bd10      	pop	{r4, pc}
 80029b8:	000001ff 	.word	0x000001ff
 80029bc:	ffffaa55 	.word	0xffffaa55
 80029c0:	00544146 	.word	0x00544146
 80029c4:	ffabbeba 	.word	0xffabbeba

080029c8 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80029c8:	2300      	movs	r3, #0
{
 80029ca:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 80029cc:	6003      	str	r3, [r0, #0]
{
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	0007      	movs	r7, r0
	vol = get_ldnumber(path);
 80029d2:	0008      	movs	r0, r1
{
 80029d4:	0016      	movs	r6, r2
	vol = get_ldnumber(path);
 80029d6:	f7ff ff4b 	bl	8002870 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80029da:	230b      	movs	r3, #11
	vol = get_ldnumber(path);
 80029dc:	1e05      	subs	r5, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 80029de:	db17      	blt.n	8002a10 <find_volume+0x48>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80029e0:	4b9d      	ldr	r3, [pc, #628]	; (8002c58 <find_volume+0x290>)
 80029e2:	0082      	lsls	r2, r0, #2
 80029e4:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80029e6:	230c      	movs	r3, #12
 80029e8:	2c00      	cmp	r4, #0
 80029ea:	d011      	beq.n	8002a10 <find_volume+0x48>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */

	if (fs->fs_type) {					/* If the volume has been mounted */
 80029ec:	33f5      	adds	r3, #245	; 0xf5
	*rfs = fs;							/* Return pointer to the file system object */
 80029ee:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80029f0:	33ff      	adds	r3, #255	; 0xff
 80029f2:	5ce3      	ldrb	r3, [r4, r3]
 80029f4:	4f99      	ldr	r7, [pc, #612]	; (8002c5c <find_volume+0x294>)
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <find_volume+0x4e>
		stat = disk_status(fs->drv);
 80029fa:	5de0      	ldrb	r0, [r4, r7]
 80029fc:	f7ff fefa 	bl	80027f4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002a00:	2301      	movs	r3, #1
 8002a02:	4003      	ands	r3, r0
 8002a04:	d107      	bne.n	8002a16 <find_volume+0x4e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8002a06:	2e00      	cmp	r6, #0
 8002a08:	d002      	beq.n	8002a10 <find_volume+0x48>
 8002a0a:	0742      	lsls	r2, r0, #29
 8002a0c:	d500      	bpl.n	8002a10 <find_volume+0x48>
				return FR_WRITE_PROTECTED;
 8002a0e:	230a      	movs	r3, #10
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	b009      	add	sp, #36	; 0x24
 8002a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	2200      	movs	r2, #0
 8002a1a:	009b      	lsls	r3, r3, #2
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002a1c:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8002a1e:	54e2      	strb	r2, [r4, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002a20:	55e0      	strb	r0, [r4, r7]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002a22:	f7ff fef5 	bl	8002810 <disk_initialize>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002a26:	2303      	movs	r3, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8002a28:	07c2      	lsls	r2, r0, #31
 8002a2a:	d4f1      	bmi.n	8002a10 <find_volume+0x48>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8002a2c:	2e00      	cmp	r6, #0
 8002a2e:	d001      	beq.n	8002a34 <find_volume+0x6c>
 8002a30:	0743      	lsls	r3, r0, #29
 8002a32:	d4ec      	bmi.n	8002a0e <find_volume+0x46>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8002a34:	2100      	movs	r1, #0
 8002a36:	0020      	movs	r0, r4
 8002a38:	f7ff ff8c 	bl	8002954 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8002a3c:	2801      	cmp	r0, #1
 8002a3e:	d12d      	bne.n	8002a9c <find_volume+0xd4>
 8002a40:	0023      	movs	r3, r4
 8002a42:	2000      	movs	r0, #0
 8002a44:	33c7      	adds	r3, #199	; 0xc7
 8002a46:	33ff      	adds	r3, #255	; 0xff
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8002a48:	1f1a      	subs	r2, r3, #4
 8002a4a:	7811      	ldrb	r1, [r2, #0]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4291      	cmp	r1, r2
 8002a50:	d009      	beq.n	8002a66 <find_volume+0x9e>
 8002a52:	7859      	ldrb	r1, [r3, #1]
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	0209      	lsls	r1, r1, #8
 8002a58:	4311      	orrs	r1, r2
 8002a5a:	789a      	ldrb	r2, [r3, #2]
 8002a5c:	0412      	lsls	r2, r2, #16
 8002a5e:	4311      	orrs	r1, r2
 8002a60:	78da      	ldrb	r2, [r3, #3]
 8002a62:	0612      	lsls	r2, r2, #24
 8002a64:	430a      	orrs	r2, r1
 8002a66:	a904      	add	r1, sp, #16
 8002a68:	5042      	str	r2, [r0, r1]
 8002a6a:	3004      	adds	r0, #4
 8002a6c:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002a6e:	2810      	cmp	r0, #16
 8002a70:	d1ea      	bne.n	8002a48 <find_volume+0x80>
 8002a72:	2500      	movs	r5, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002a74:	2602      	movs	r6, #2
			bsect = br[i];
 8002a76:	ab04      	add	r3, sp, #16
 8002a78:	595b      	ldr	r3, [r3, r5]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002a7a:	0030      	movs	r0, r6
			bsect = br[i];
 8002a7c:	9300      	str	r3, [sp, #0]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <find_volume+0xc6>
 8002a82:	0019      	movs	r1, r3
 8002a84:	0020      	movs	r0, r4
 8002a86:	f7ff ff65 	bl	8002954 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d00e      	beq.n	8002aac <find_volume+0xe4>
 8002a8e:	3504      	adds	r5, #4
 8002a90:	2d10      	cmp	r5, #16
 8002a92:	d1f0      	bne.n	8002a76 <find_volume+0xae>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002a94:	2301      	movs	r3, #1
 8002a96:	2803      	cmp	r0, #3
 8002a98:	d105      	bne.n	8002aa6 <find_volume+0xde>
 8002a9a:	e7b9      	b.n	8002a10 <find_volume+0x48>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	2803      	cmp	r0, #3
 8002aa0:	d0b6      	beq.n	8002a10 <find_volume+0x48>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d001      	beq.n	8002aaa <find_volume+0xe2>
 8002aa6:	230d      	movs	r3, #13
 8002aa8:	e7b2      	b.n	8002a10 <find_volume+0x48>
	bsect = 0;
 8002aaa:	9000      	str	r0, [sp, #0]
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002aac:	7b22      	ldrb	r2, [r4, #12]
 8002aae:	7ae3      	ldrb	r3, [r4, #11]
 8002ab0:	0212      	lsls	r2, r2, #8
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	b21b      	sxth	r3, r3
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d1f3      	bne.n	8002aa6 <find_volume+0xde>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8002abe:	7de3      	ldrb	r3, [r4, #23]
 8002ac0:	7da7      	ldrb	r7, [r4, #22]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	431f      	orrs	r7, r3
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8002ac6:	d100      	bne.n	8002aca <find_volume+0x102>
 8002ac8:	6a67      	ldr	r7, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8002aca:	2386      	movs	r3, #134	; 0x86
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	50e7      	str	r7, [r4, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8002ad0:	7c23      	ldrb	r3, [r4, #16]
 8002ad2:	4a63      	ldr	r2, [pc, #396]	; (8002c60 <find_volume+0x298>)
 8002ad4:	54a3      	strb	r3, [r4, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8002ad6:	1e5a      	subs	r2, r3, #1
 8002ad8:	2a01      	cmp	r2, #1
 8002ada:	d8e4      	bhi.n	8002aa6 <find_volume+0xde>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8002adc:	7b61      	ldrb	r1, [r4, #13]
 8002ade:	4a61      	ldr	r2, [pc, #388]	; (8002c64 <find_volume+0x29c>)
 8002ae0:	54a1      	strb	r1, [r4, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8002ae2:	2900      	cmp	r1, #0
 8002ae4:	d0df      	beq.n	8002aa6 <find_volume+0xde>
 8002ae6:	1e4a      	subs	r2, r1, #1
 8002ae8:	4211      	tst	r1, r2
 8002aea:	d1dc      	bne.n	8002aa6 <find_volume+0xde>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8002aec:	7ca5      	ldrb	r5, [r4, #18]
 8002aee:	7c62      	ldrb	r2, [r4, #17]
 8002af0:	022d      	lsls	r5, r5, #8
 8002af2:	4315      	orrs	r5, r2
 8002af4:	2282      	movs	r2, #130	; 0x82
 8002af6:	0092      	lsls	r2, r2, #2
 8002af8:	52a5      	strh	r5, [r4, r2]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8002afa:	072a      	lsls	r2, r5, #28
 8002afc:	d1d3      	bne.n	8002aa6 <find_volume+0xde>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8002afe:	7d20      	ldrb	r0, [r4, #20]
 8002b00:	7ce2      	ldrb	r2, [r4, #19]
 8002b02:	0200      	lsls	r0, r0, #8
 8002b04:	4310      	orrs	r0, r2
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8002b06:	d100      	bne.n	8002b0a <find_volume+0x142>
 8002b08:	6a20      	ldr	r0, [r4, #32]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002b0a:	7be6      	ldrb	r6, [r4, #15]
 8002b0c:	7ba2      	ldrb	r2, [r4, #14]
 8002b0e:	0236      	lsls	r6, r6, #8
 8002b10:	4316      	orrs	r6, r2
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8002b12:	d0c8      	beq.n	8002aa6 <find_volume+0xde>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002b14:	437b      	muls	r3, r7
 8002b16:	9303      	str	r3, [sp, #12]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002b18:	9a03      	ldr	r2, [sp, #12]
 8002b1a:	092b      	lsrs	r3, r5, #4
 8002b1c:	199b      	adds	r3, r3, r6
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	9302      	str	r3, [sp, #8]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002b22:	4298      	cmp	r0, r3
 8002b24:	d3bf      	bcc.n	8002aa6 <find_volume+0xde>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002b26:	1ac0      	subs	r0, r0, r3
 8002b28:	f7fd fb0a 	bl	8000140 <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	d0ba      	beq.n	8002aa6 <find_volume+0xde>
	fmt = FS_FAT12;
 8002b30:	2201      	movs	r2, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002b32:	4b4d      	ldr	r3, [pc, #308]	; (8002c68 <find_volume+0x2a0>)
	fmt = FS_FAT12;
 8002b34:	9201      	str	r2, [sp, #4]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002b36:	4298      	cmp	r0, r3
 8002b38:	d905      	bls.n	8002b46 <find_volume+0x17e>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002b3a:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <find_volume+0x2a4>)
 8002b3c:	4283      	cmp	r3, r0
 8002b3e:	419b      	sbcs	r3, r3
 8002b40:	425b      	negs	r3, r3
 8002b42:	3302      	adds	r3, #2
 8002b44:	9301      	str	r3, [sp, #4]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002b46:	2385      	movs	r3, #133	; 0x85
	fs->volbase = bsect;								/* Volume start sector */
 8002b48:	9a00      	ldr	r2, [sp, #0]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	3002      	adds	r0, #2
 8002b4e:	50e0      	str	r0, [r4, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8002b50:	3308      	adds	r3, #8
 8002b52:	50e2      	str	r2, [r4, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002b54:	2388      	movs	r3, #136	; 0x88
 8002b56:	1996      	adds	r6, r2, r6
	fs->database = bsect + sysect;						/* Data start sector */
 8002b58:	4694      	mov	ip, r2
 8002b5a:	228a      	movs	r2, #138	; 0x8a
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	50e6      	str	r6, [r4, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8002b60:	9b02      	ldr	r3, [sp, #8]
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	4463      	add	r3, ip
 8002b66:	50a3      	str	r3, [r4, r2]
	if (fmt == FS_FAT32) {
 8002b68:	9b01      	ldr	r3, [sp, #4]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d15f      	bne.n	8002c2e <find_volume+0x266>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8002b6e:	2d00      	cmp	r5, #0
 8002b70:	d199      	bne.n	8002aa6 <find_volume+0xde>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8002b72:	2389      	movs	r3, #137	; 0x89
 8002b74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	50e2      	str	r2, [r4, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8002b7a:	0080      	lsls	r0, r0, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002b7c:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <find_volume+0x2a8>)
 8002b7e:	18c0      	adds	r0, r0, r3
 8002b80:	0a40      	lsrs	r0, r0, #9
 8002b82:	4287      	cmp	r7, r0
 8002b84:	d38f      	bcc.n	8002aa6 <find_volume+0xde>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002b86:	2684      	movs	r6, #132	; 0x84
 8002b88:	2301      	movs	r3, #1
 8002b8a:	2583      	movs	r5, #131	; 0x83
 8002b8c:	425b      	negs	r3, r3
 8002b8e:	00b6      	lsls	r6, r6, #2
 8002b90:	00ad      	lsls	r5, r5, #2
	fs->fsi_flag = 0x80;
 8002b92:	4f38      	ldr	r7, [pc, #224]	; (8002c74 <find_volume+0x2ac>)
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002b94:	51a3      	str	r3, [r4, r6]
 8002b96:	5163      	str	r3, [r4, r5]
	fs->fsi_flag = 0x80;
 8002b98:	3381      	adds	r3, #129	; 0x81
 8002b9a:	55e3      	strb	r3, [r4, r7]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8002b9c:	9b01      	ldr	r3, [sp, #4]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d12c      	bne.n	8002bfc <find_volume+0x234>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8002ba2:	0023      	movs	r3, r4
 8002ba4:	3331      	adds	r3, #49	; 0x31
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	0212      	lsls	r2, r2, #8
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d123      	bne.n	8002bfc <find_volume+0x234>
		&& move_window(fs, bsect + 1) == FR_OK)
 8002bb4:	9900      	ldr	r1, [sp, #0]
 8002bb6:	0020      	movs	r0, r4
 8002bb8:	3101      	adds	r1, #1
 8002bba:	f7ff feab 	bl	8002914 <move_window>
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d11c      	bne.n	8002bfc <find_volume+0x234>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002bc2:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <find_volume+0x2a8>)
		fs->fsi_flag = 0;
 8002bc4:	55e0      	strb	r0, [r4, r7]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002bc6:	5ce2      	ldrb	r2, [r4, r3]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	5ce3      	ldrb	r3, [r4, r3]
 8002bcc:	0212      	lsls	r2, r2, #8
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <find_volume+0x2b0>)
 8002bd2:	b21b      	sxth	r3, r3
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d111      	bne.n	8002bfc <find_volume+0x234>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8002bd8:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <find_volume+0x2b4>)
 8002bda:	6822      	ldr	r2, [r4, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d10d      	bne.n	8002bfc <find_volume+0x234>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8002be0:	22f2      	movs	r2, #242	; 0xf2
 8002be2:	0052      	lsls	r2, r2, #1
 8002be4:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <find_volume+0x2b8>)
 8002be6:	58a2      	ldr	r2, [r4, r2]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d107      	bne.n	8002bfc <find_volume+0x234>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8002bec:	23f4      	movs	r3, #244	; 0xf4
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	58e3      	ldr	r3, [r4, r3]
 8002bf2:	51a3      	str	r3, [r4, r6]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8002bf4:	23f6      	movs	r3, #246	; 0xf6
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	58e3      	ldr	r3, [r4, r3]
 8002bfa:	5163      	str	r3, [r4, r5]
	fs->fs_type = fmt;	/* FAT sub-type */
 8002bfc:	466a      	mov	r2, sp
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	7912      	ldrb	r2, [r2, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	54e2      	strb	r2, [r4, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <find_volume+0x2bc>)
 8002c08:	8813      	ldrh	r3, [r2, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	8013      	strh	r3, [r2, #0]
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <find_volume+0x2c0>)
 8002c12:	52a3      	strh	r3, [r4, r2]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002c14:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <find_volume+0x2c4>)
 8002c16:	6813      	ldr	r3, [r2, #0]
 8002c18:	429c      	cmp	r4, r3
 8002c1a:	d101      	bne.n	8002c20 <find_volume+0x258>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	68d1      	ldr	r1, [r2, #12]
 8002c22:	2300      	movs	r3, #0
 8002c24:	428c      	cmp	r4, r1
 8002c26:	d000      	beq.n	8002c2a <find_volume+0x262>
 8002c28:	e6f2      	b.n	8002a10 <find_volume+0x48>
 8002c2a:	60d3      	str	r3, [r2, #12]
 8002c2c:	e6f0      	b.n	8002a10 <find_volume+0x48>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002c2e:	2d00      	cmp	r5, #0
 8002c30:	d100      	bne.n	8002c34 <find_volume+0x26c>
 8002c32:	e738      	b.n	8002aa6 <find_volume+0xde>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002c34:	9b03      	ldr	r3, [sp, #12]
 8002c36:	199e      	adds	r6, r3, r6
 8002c38:	2389      	movs	r3, #137	; 0x89
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	50e6      	str	r6, [r4, r3]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002c3e:	9b01      	ldr	r3, [sp, #4]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d101      	bne.n	8002c48 <find_volume+0x280>
 8002c44:	0040      	lsls	r0, r0, #1
 8002c46:	e799      	b.n	8002b7c <find_volume+0x1b4>
 8002c48:	2303      	movs	r3, #3
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4343      	muls	r3, r0
 8002c4e:	4010      	ands	r0, r2
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	1818      	adds	r0, r3, r0
 8002c54:	e792      	b.n	8002b7c <find_volume+0x1b4>
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	200000a4 	.word	0x200000a4
 8002c5c:	00000201 	.word	0x00000201
 8002c60:	00000203 	.word	0x00000203
 8002c64:	00000202 	.word	0x00000202
 8002c68:	00000ff5 	.word	0x00000ff5
 8002c6c:	0000fff5 	.word	0x0000fff5
 8002c70:	000001ff 	.word	0x000001ff
 8002c74:	00000205 	.word	0x00000205
 8002c78:	ffffaa55 	.word	0xffffaa55
 8002c7c:	41615252 	.word	0x41615252
 8002c80:	61417272 	.word	0x61417272
 8002c84:	200000c0 	.word	0x200000c0
 8002c88:	00000206 	.word	0x00000206
 8002c8c:	200000a8 	.word	0x200000a8

08002c90 <get_fat>:
{
 8002c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 8002c92:	2401      	movs	r4, #1
{
 8002c94:	0006      	movs	r6, r0
 8002c96:	000d      	movs	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002c98:	42a1      	cmp	r1, r4
 8002c9a:	d91b      	bls.n	8002cd4 <get_fat+0x44>
 8002c9c:	2385      	movs	r3, #133	; 0x85
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	58c3      	ldr	r3, [r0, r3]
 8002ca2:	4299      	cmp	r1, r3
 8002ca4:	d216      	bcs.n	8002cd4 <get_fat+0x44>
		switch (fs->fs_type) {
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	5cc3      	ldrb	r3, [r0, r3]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d02f      	beq.n	8002d10 <get_fat+0x80>
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d040      	beq.n	8002d36 <get_fat+0xa6>
 8002cb4:	42a3      	cmp	r3, r4
 8002cb6:	d10d      	bne.n	8002cd4 <get_fat+0x44>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cb8:	2388      	movs	r3, #136	; 0x88
			bc = (UINT)clst; bc += bc / 2;
 8002cba:	084f      	lsrs	r7, r1, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	58c3      	ldr	r3, [r0, r3]
			bc = (UINT)clst; bc += bc / 2;
 8002cc0:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cc2:	0a79      	lsrs	r1, r7, #9
 8002cc4:	18c9      	adds	r1, r1, r3
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	f7ff fe24 	bl	8002914 <move_window>
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	d003      	beq.n	8002cd8 <get_fat+0x48>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002cd0:	2401      	movs	r4, #1
 8002cd2:	4264      	negs	r4, r4
}
 8002cd4:	0020      	movs	r0, r4
 8002cd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win.d8[bc++ % SS(fs)];
 8002cd8:	1c7b      	adds	r3, r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cda:	0a59      	lsrs	r1, r3, #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8002cdc:	9301      	str	r3, [sp, #4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cde:	2388      	movs	r3, #136	; 0x88
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	58f3      	ldr	r3, [r6, r3]
			wc = fs->win.d8[bc++ % SS(fs)];
 8002ce4:	05ff      	lsls	r7, r7, #23
 8002ce6:	0dff      	lsrs	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002ce8:	18c9      	adds	r1, r1, r3
 8002cea:	0030      	movs	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 8002cec:	5df7      	ldrb	r7, [r6, r7]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cee:	f7ff fe11 	bl	8002914 <move_window>
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d1ec      	bne.n	8002cd0 <get_fat+0x40>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002cf6:	9b01      	ldr	r3, [sp, #4]
 8002cf8:	05db      	lsls	r3, r3, #23
 8002cfa:	0ddb      	lsrs	r3, r3, #23
 8002cfc:	5cf3      	ldrb	r3, [r6, r3]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	431f      	orrs	r7, r3
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002d02:	4225      	tst	r5, r4
 8002d04:	d001      	beq.n	8002d0a <get_fat+0x7a>
 8002d06:	093c      	lsrs	r4, r7, #4
 8002d08:	e7e4      	b.n	8002cd4 <get_fat+0x44>
 8002d0a:	053f      	lsls	r7, r7, #20
 8002d0c:	0d3c      	lsrs	r4, r7, #20
 8002d0e:	e7e1      	b.n	8002cd4 <get_fat+0x44>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002d10:	2288      	movs	r2, #136	; 0x88
 8002d12:	0092      	lsls	r2, r2, #2
 8002d14:	0a0b      	lsrs	r3, r1, #8
 8002d16:	5881      	ldr	r1, [r0, r2]
 8002d18:	1859      	adds	r1, r3, r1
 8002d1a:	f7ff fdfb 	bl	8002914 <move_window>
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d1d6      	bne.n	8002cd0 <get_fat+0x40>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002d22:	23ff      	movs	r3, #255	; 0xff
 8002d24:	006d      	lsls	r5, r5, #1
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	401d      	ands	r5, r3
			val = LD_WORD(p);
 8002d2a:	1973      	adds	r3, r6, r5
 8002d2c:	785c      	ldrb	r4, [r3, #1]
 8002d2e:	5d73      	ldrb	r3, [r6, r5]
 8002d30:	0224      	lsls	r4, r4, #8
 8002d32:	431c      	orrs	r4, r3
 8002d34:	e7ce      	b.n	8002cd4 <get_fat+0x44>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002d36:	2288      	movs	r2, #136	; 0x88
 8002d38:	0092      	lsls	r2, r2, #2
 8002d3a:	09cb      	lsrs	r3, r1, #7
 8002d3c:	5881      	ldr	r1, [r0, r2]
 8002d3e:	1859      	adds	r1, r3, r1
 8002d40:	f7ff fde8 	bl	8002914 <move_window>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d1c3      	bne.n	8002cd0 <get_fat+0x40>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002d48:	23fe      	movs	r3, #254	; 0xfe
 8002d4a:	00ad      	lsls	r5, r5, #2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	401d      	ands	r5, r3
 8002d50:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8002d52:	78dc      	ldrb	r4, [r3, #3]
 8002d54:	789a      	ldrb	r2, [r3, #2]
 8002d56:	0624      	lsls	r4, r4, #24
 8002d58:	0412      	lsls	r2, r2, #16
 8002d5a:	4314      	orrs	r4, r2
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	5d72      	ldrb	r2, [r6, r5]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	4314      	orrs	r4, r2
 8002d64:	431c      	orrs	r4, r3
 8002d66:	0124      	lsls	r4, r4, #4
 8002d68:	0924      	lsrs	r4, r4, #4
 8002d6a:	e7b3      	b.n	8002cd4 <get_fat+0x44>

08002d6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002d6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002d6e:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8002d70:	a803      	add	r0, sp, #12
{
 8002d72:	0014      	movs	r4, r2
 8002d74:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8002d76:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8002d78:	f7ff fd7a 	bl	8002870 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002d7c:	220b      	movs	r2, #11
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	db24      	blt.n	8002dcc <f_mount+0x60>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002d82:	4d14      	ldr	r5, [pc, #80]	; (8002dd4 <f_mount+0x68>)
 8002d84:	0080      	lsls	r0, r0, #2
 8002d86:	5943      	ldr	r3, [r0, r5]

	if (cfs) {
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00d      	beq.n	8002da8 <f_mount+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002d8c:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <f_mount+0x6c>)
 8002d8e:	6811      	ldr	r1, [r2, #0]
 8002d90:	428b      	cmp	r3, r1
 8002d92:	d101      	bne.n	8002d98 <f_mount+0x2c>
 8002d94:	2100      	movs	r1, #0
 8002d96:	6011      	str	r1, [r2, #0]
 8002d98:	68d6      	ldr	r6, [r2, #12]
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	42b3      	cmp	r3, r6
 8002d9e:	d100      	bne.n	8002da2 <f_mount+0x36>
 8002da0:	60d1      	str	r1, [r2, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	0092      	lsls	r2, r2, #2
 8002da6:	5499      	strb	r1, [r3, r2]
	}

	if (fs) {
 8002da8:	9b01      	ldr	r3, [sp, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	2100      	movs	r1, #0
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	5499      	strb	r1, [r3, r2]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002db6:	502b      	str	r3, [r5, r0]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002db8:	1e1a      	subs	r2, r3, #0
 8002dba:	d007      	beq.n	8002dcc <f_mount+0x60>
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2c01      	cmp	r4, #1
 8002dc0:	d104      	bne.n	8002dcc <f_mount+0x60>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8002dc2:	4669      	mov	r1, sp
 8002dc4:	a801      	add	r0, sp, #4
 8002dc6:	f7ff fdff 	bl	80029c8 <find_volume>
 8002dca:	0002      	movs	r2, r0
	LEAVE_FF(fs, res);
}
 8002dcc:	0010      	movs	r0, r2
 8002dce:	b004      	add	sp, #16
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	200000a4 	.word	0x200000a4
 8002dd8:	200000a8 	.word	0x200000a8

08002ddc <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8002ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dde:	0014      	movs	r4, r2
 8002de0:	b085      	sub	sp, #20
 8002de2:	9003      	str	r0, [sp, #12]
 8002de4:	9102      	str	r1, [sp, #8]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	a903      	add	r1, sp, #12
 8002dea:	0020      	movs	r0, r4
 8002dec:	f7ff fdec 	bl	80029c8 <find_volume>
 8002df0:	1e05      	subs	r5, r0, #0
	fs = *fatfs;
	if (res == FR_OK) {
 8002df2:	d10b      	bne.n	8002e0c <f_getfree+0x30>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8002df4:	2384      	movs	r3, #132	; 0x84
	fs = *fatfs;
 8002df6:	6824      	ldr	r4, [r4, #0]
		if (fs->free_clust <= fs->n_fatent - 2) {
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	58e2      	ldr	r2, [r4, r3]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	58e1      	ldr	r1, [r4, r3]
 8002e00:	9100      	str	r1, [sp, #0]
 8002e02:	3902      	subs	r1, #2
 8002e04:	428a      	cmp	r2, r1
 8002e06:	d804      	bhi.n	8002e12 <f_getfree+0x36>
			*nclst = fs->free_clust;
 8002e08:	9b02      	ldr	r3, [sp, #8]
 8002e0a:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
			*nclst = n;
		}
	}
	LEAVE_FF(fs, res);
}
 8002e0c:	0028      	movs	r0, r5
 8002e0e:	b005      	add	sp, #20
 8002e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			fat = fs->fs_type;
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	0092      	lsls	r2, r2, #2
 8002e16:	5ca2      	ldrb	r2, [r4, r2]
 8002e18:	9201      	str	r2, [sp, #4]
			if (fat == FS_FAT12) {
 8002e1a:	2a01      	cmp	r2, #1
 8002e1c:	d11e      	bne.n	8002e5c <f_getfree+0x80>
 8002e1e:	2602      	movs	r6, #2
 8002e20:	0007      	movs	r7, r0
				} while (++clst < fs->n_fatent);
 8002e22:	9301      	str	r3, [sp, #4]
					stat = get_fat(fs, clst);
 8002e24:	0031      	movs	r1, r6
 8002e26:	0020      	movs	r0, r4
 8002e28:	f7ff ff32 	bl	8002c90 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8002e2c:	1c43      	adds	r3, r0, #1
 8002e2e:	d049      	beq.n	8002ec4 <f_getfree+0xe8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8002e30:	2801      	cmp	r0, #1
 8002e32:	d049      	beq.n	8002ec8 <f_getfree+0xec>
					if (stat == 0) n++;
 8002e34:	4243      	negs	r3, r0
 8002e36:	4158      	adcs	r0, r3
				} while (++clst < fs->n_fatent);
 8002e38:	9b01      	ldr	r3, [sp, #4]
 8002e3a:	3601      	adds	r6, #1
 8002e3c:	58e3      	ldr	r3, [r4, r3]
					if (stat == 0) n++;
 8002e3e:	183f      	adds	r7, r7, r0
				} while (++clst < fs->n_fatent);
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	429e      	cmp	r6, r3
 8002e44:	d3ee      	bcc.n	8002e24 <f_getfree+0x48>
			fs->free_clust = n;
 8002e46:	2384      	movs	r3, #132	; 0x84
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	50e7      	str	r7, [r4, r3]
			fs->fsi_flag |= 1;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	4a20      	ldr	r2, [pc, #128]	; (8002ed0 <f_getfree+0xf4>)
 8002e50:	5ca1      	ldrb	r1, [r4, r2]
 8002e52:	430b      	orrs	r3, r1
 8002e54:	54a3      	strb	r3, [r4, r2]
			*nclst = n;
 8002e56:	9b02      	ldr	r3, [sp, #8]
 8002e58:	601f      	str	r7, [r3, #0]
 8002e5a:	e7d7      	b.n	8002e0c <f_getfree+0x30>
				sect = fs->fatbase;
 8002e5c:	2388      	movs	r3, #136	; 0x88
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	58e1      	ldr	r1, [r4, r3]
			n = 0;
 8002e62:	0007      	movs	r7, r0
				i = 0; p = 0;
 8002e64:	0003      	movs	r3, r0
					if (!i) {
 8002e66:	2800      	cmp	r0, #0
 8002e68:	d109      	bne.n	8002e7e <f_getfree+0xa2>
						res = move_window(fs, sect++);
 8002e6a:	0020      	movs	r0, r4
 8002e6c:	1c4e      	adds	r6, r1, #1
 8002e6e:	f7ff fd51 	bl	8002914 <move_window>
						if (res != FR_OK) break;
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d12a      	bne.n	8002ecc <f_getfree+0xf0>
						i = SS(fs);
 8002e76:	2080      	movs	r0, #128	; 0x80
						p = fs->win.d8;
 8002e78:	0023      	movs	r3, r4
						res = move_window(fs, sect++);
 8002e7a:	0031      	movs	r1, r6
						i = SS(fs);
 8002e7c:	0080      	lsls	r0, r0, #2
					if (fat == FS_FAT16) {
 8002e7e:	9a01      	ldr	r2, [sp, #4]
 8002e80:	2a02      	cmp	r2, #2
 8002e82:	d10e      	bne.n	8002ea2 <f_getfree+0xc6>
						if (LD_WORD(p) == 0) n++;
 8002e84:	785e      	ldrb	r6, [r3, #1]
 8002e86:	781a      	ldrb	r2, [r3, #0]
 8002e88:	0236      	lsls	r6, r6, #8
 8002e8a:	4332      	orrs	r2, r6
 8002e8c:	4256      	negs	r6, r2
 8002e8e:	4172      	adcs	r2, r6
						p += 2; i -= 2;
 8002e90:	3302      	adds	r3, #2
						if (LD_WORD(p) == 0) n++;
 8002e92:	18bf      	adds	r7, r7, r2
						p += 2; i -= 2;
 8002e94:	3802      	subs	r0, #2
				} while (--clst);
 8002e96:	9a00      	ldr	r2, [sp, #0]
 8002e98:	3a01      	subs	r2, #1
 8002e9a:	9200      	str	r2, [sp, #0]
 8002e9c:	2a00      	cmp	r2, #0
 8002e9e:	d1e2      	bne.n	8002e66 <f_getfree+0x8a>
 8002ea0:	e7d1      	b.n	8002e46 <f_getfree+0x6a>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8002ea2:	785e      	ldrb	r6, [r3, #1]
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	0236      	lsls	r6, r6, #8
 8002ea8:	4316      	orrs	r6, r2
 8002eaa:	789a      	ldrb	r2, [r3, #2]
						p += 4; i -= 4;
 8002eac:	3804      	subs	r0, #4
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8002eae:	0412      	lsls	r2, r2, #16
 8002eb0:	4316      	orrs	r6, r2
 8002eb2:	78da      	ldrb	r2, [r3, #3]
						p += 4; i -= 4;
 8002eb4:	3304      	adds	r3, #4
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8002eb6:	0612      	lsls	r2, r2, #24
 8002eb8:	4332      	orrs	r2, r6
 8002eba:	0112      	lsls	r2, r2, #4
 8002ebc:	4256      	negs	r6, r2
 8002ebe:	4172      	adcs	r2, r6
 8002ec0:	18bf      	adds	r7, r7, r2
 8002ec2:	e7e8      	b.n	8002e96 <f_getfree+0xba>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8002ec4:	2501      	movs	r5, #1
 8002ec6:	e7be      	b.n	8002e46 <f_getfree+0x6a>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8002ec8:	2502      	movs	r5, #2
 8002eca:	e7bc      	b.n	8002e46 <f_getfree+0x6a>
						res = move_window(fs, sect++);
 8002ecc:	0005      	movs	r5, r0
 8002ece:	e7ba      	b.n	8002e46 <f_getfree+0x6a>
 8002ed0:	00000205 	.word	0x00000205

08002ed4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002ed4:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
 8002ed6:	2401      	movs	r4, #1
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <FATFS_LinkDriverEx+0x40>)
 8002eda:	7a5d      	ldrb	r5, [r3, #9]
 8002edc:	42a5      	cmp	r5, r4
 8002ede:	d816      	bhi.n	8002f0e <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002ee0:	2400      	movs	r4, #0
 8002ee2:	7a5d      	ldrb	r5, [r3, #9]
 8002ee4:	b2ed      	uxtb	r5, r5
 8002ee6:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8002ee8:	7a5d      	ldrb	r5, [r3, #9]
 8002eea:	00ad      	lsls	r5, r5, #2
 8002eec:	195d      	adds	r5, r3, r5
 8002eee:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8002ef0:	7a58      	ldrb	r0, [r3, #9]
 8002ef2:	1818      	adds	r0, r3, r0
 8002ef4:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8002ef6:	7a5a      	ldrb	r2, [r3, #9]
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	1c50      	adds	r0, r2, #1
 8002efc:	b2c0      	uxtb	r0, r0
 8002efe:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8002f00:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8002f02:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8002f04:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8002f06:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 8002f08:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8002f0a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8002f0c:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 8002f0e:	0020      	movs	r0, r4
 8002f10:	bd30      	pop	{r4, r5, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	200000c4 	.word	0x200000c4

08002f18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8002f18:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f7ff ffda 	bl	8002ed4 <FATFS_LinkDriverEx>
}
 8002f20:	bd10      	pop	{r4, pc}
	...

08002f24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002f24:	b510      	push	{r4, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002f26:	4903      	ldr	r1, [pc, #12]	; (8002f34 <MX_FATFS_Init+0x10>)
 8002f28:	4803      	ldr	r0, [pc, #12]	; (8002f38 <MX_FATFS_Init+0x14>)
 8002f2a:	f7ff fff5 	bl	8002f18 <FATFS_LinkDriver>
 8002f2e:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <MX_FATFS_Init+0x18>)
 8002f30:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8002f32:	bd10      	pop	{r4, pc}
 8002f34:	200000e4 	.word	0x200000e4
 8002f38:	20000010 	.word	0x20000010
 8002f3c:	200000e8 	.word	0x200000e8

08002f40 <SPI_TxByte>:
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
}

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8002f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f42:	466b      	mov	r3, sp
 8002f44:	1ddd      	adds	r5, r3, #7
 8002f46:	7028      	strb	r0, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002f48:	4c06      	ldr	r4, [pc, #24]	; (8002f64 <SPI_TxByte+0x24>)
 8002f4a:	0020      	movs	r0, r4
 8002f4c:	f7ff fa2c 	bl	80023a8 <HAL_SPI_GetState>
 8002f50:	0002      	movs	r2, r0
 8002f52:	2801      	cmp	r0, #1
 8002f54:	d1f8      	bne.n	8002f48 <SPI_TxByte+0x8>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002f56:	23fa      	movs	r3, #250	; 0xfa
 8002f58:	0029      	movs	r1, r5
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	0020      	movs	r0, r4
 8002f5e:	f7ff f821 	bl	8001fa4 <HAL_SPI_Transmit>
}
 8002f62:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8002f64:	20000c10 	.word	0x20000c10

08002f68 <SELECT>:
{
 8002f68:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2140      	movs	r1, #64	; 0x40
 8002f6e:	4802      	ldr	r0, [pc, #8]	; (8002f78 <SELECT+0x10>)
 8002f70:	f7fe fbde 	bl	8001730 <HAL_GPIO_WritePin>
}
 8002f74:	bd10      	pop	{r4, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	48000400 	.word	0x48000400

08002f7c <DESELECT>:
{
 8002f7c:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002f7e:	2201      	movs	r2, #1
 8002f80:	2140      	movs	r1, #64	; 0x40
 8002f82:	4802      	ldr	r0, [pc, #8]	; (8002f8c <DESELECT+0x10>)
 8002f84:	f7fe fbd4 	bl	8001730 <HAL_GPIO_WritePin>
}
 8002f88:	bd10      	pop	{r4, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	48000400 	.word	0x48000400

08002f90 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8002f90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t dummy, data;
  dummy = 0xFF;
 8002f92:	260e      	movs	r6, #14
 8002f94:	23ff      	movs	r3, #255	; 0xff
 8002f96:	446e      	add	r6, sp
  data = 0;
 8002f98:	240f      	movs	r4, #15
  dummy = 0xFF;
 8002f9a:	7033      	strb	r3, [r6, #0]
  data = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	446c      	add	r4, sp
 8002fa0:	7023      	strb	r3, [r4, #0]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002fa2:	4d09      	ldr	r5, [pc, #36]	; (8002fc8 <SPI_RxByte+0x38>)
 8002fa4:	0028      	movs	r0, r5
 8002fa6:	f7ff f9ff 	bl	80023a8 <HAL_SPI_GetState>
 8002faa:	0003      	movs	r3, r0
 8002fac:	2801      	cmp	r0, #1
 8002fae:	d1f8      	bne.n	8002fa2 <SPI_RxByte+0x12>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002fb0:	22fa      	movs	r2, #250	; 0xfa
 8002fb2:	0092      	lsls	r2, r2, #2
 8002fb4:	9200      	str	r2, [sp, #0]
 8002fb6:	0031      	movs	r1, r6
 8002fb8:	0022      	movs	r2, r4
 8002fba:	0028      	movs	r0, r5
 8002fbc:	f7ff f8c2 	bl	8002144 <HAL_SPI_TransmitReceive>
  
  return data;
 8002fc0:	7820      	ldrb	r0, [r4, #0]
}
 8002fc2:	b004      	add	sp, #16
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	20000c10 	.word	0x20000c10

08002fcc <SD_PowerOn>:
  return res;
}

/*Power on*/
static void SD_PowerOn(void) 
{
 8002fcc:	b513      	push	{r0, r1, r4, lr}
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
  

  DESELECT();
 8002fce:	f7ff ffd5 	bl	8002f7c <DESELECT>
 8002fd2:	240a      	movs	r4, #10
  
  for(int i = 0; i < 10; i++)
  {
    SPI_TxByte(0xFF);
 8002fd4:	20ff      	movs	r0, #255	; 0xff
 8002fd6:	3c01      	subs	r4, #1
 8002fd8:	f7ff ffb2 	bl	8002f40 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002fdc:	2c00      	cmp	r4, #0
 8002fde:	d1f9      	bne.n	8002fd4 <SD_PowerOn+0x8>
  }
  
  /* SPI Chips Select */
  SELECT();
 8002fe0:	f7ff ffc2 	bl	8002f68 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8002fe4:	466a      	mov	r2, sp
 8002fe6:	2340      	movs	r3, #64	; 0x40
 8002fe8:	7013      	strb	r3, [r2, #0]
  cmd_arg[1] = 0;
  cmd_arg[2] = 0;
  cmd_arg[3] = 0;
  cmd_arg[4] = 0;
  cmd_arg[5] = 0x95;
 8002fea:	2395      	movs	r3, #149	; 0x95
  cmd_arg[1] = 0;
 8002fec:	7054      	strb	r4, [r2, #1]
  cmd_arg[2] = 0;
 8002fee:	7094      	strb	r4, [r2, #2]
  cmd_arg[3] = 0;
 8002ff0:	70d4      	strb	r4, [r2, #3]
  cmd_arg[4] = 0;
 8002ff2:	7114      	strb	r4, [r2, #4]
  cmd_arg[5] = 0x95;
 8002ff4:	7153      	strb	r3, [r2, #5]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
  {
    SPI_TxByte(cmd_arg[i]);
 8002ff6:	466b      	mov	r3, sp
 8002ff8:	5d18      	ldrb	r0, [r3, r4]
  for (int i = 0; i < 6; i++)
 8002ffa:	3401      	adds	r4, #1
    SPI_TxByte(cmd_arg[i]);
 8002ffc:	f7ff ffa0 	bl	8002f40 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8003000:	2c06      	cmp	r4, #6
 8003002:	d1f8      	bne.n	8002ff6 <SD_PowerOn+0x2a>
 8003004:	2480      	movs	r4, #128	; 0x80
 8003006:	01a4      	lsls	r4, r4, #6
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8003008:	f7ff ffc2 	bl	8002f90 <SPI_RxByte>
 800300c:	2801      	cmp	r0, #1
 800300e:	d002      	beq.n	8003016 <SD_PowerOn+0x4a>
 8003010:	3c01      	subs	r4, #1
 8003012:	2c00      	cmp	r4, #0
 8003014:	d1f8      	bne.n	8003008 <SD_PowerOn+0x3c>
  {
    Count--;
  }
  
  DESELECT();
 8003016:	f7ff ffb1 	bl	8002f7c <DESELECT>
  SPI_TxByte(0XFF);
 800301a:	20ff      	movs	r0, #255	; 0xff
 800301c:	f7ff ff90 	bl	8002f40 <SPI_TxByte>
  
  PowerFlag = 1;
 8003020:	2201      	movs	r2, #1
 8003022:	4b01      	ldr	r3, [pc, #4]	; (8003028 <SD_PowerOn+0x5c>)
 8003024:	701a      	strb	r2, [r3, #0]
}
 8003026:	bd13      	pop	{r0, r1, r4, pc}
 8003028:	200000d1 	.word	0x200000d1

0800302c <SD_ReadyWait>:
  Timer2 = 50;
 800302c:	2332      	movs	r3, #50	; 0x32
{
 800302e:	b510      	push	{r4, lr}
  Timer2 = 50;
 8003030:	4c05      	ldr	r4, [pc, #20]	; (8003048 <SD_ReadyWait+0x1c>)
 8003032:	7023      	strb	r3, [r4, #0]
  SPI_RxByte();
 8003034:	f7ff ffac 	bl	8002f90 <SPI_RxByte>
    res = SPI_RxByte();
 8003038:	f7ff ffaa 	bl	8002f90 <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 800303c:	28ff      	cmp	r0, #255	; 0xff
 800303e:	d002      	beq.n	8003046 <SD_ReadyWait+0x1a>
 8003040:	7823      	ldrb	r3, [r4, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f8      	bne.n	8003038 <SD_ReadyWait+0xc>
}
 8003046:	bd10      	pop	{r4, pc}
 8003048:	20000f50 	.word	0x20000f50

0800304c <SD_TxDataBlock>:
}

/* ë�°ì�´í„° ì „ì†¡ íŒ¨í‚· */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	0005      	movs	r5, r0
 8003050:	000e      	movs	r6, r1
  uint8_t resp, wc;
  uint8_t i = 0;
    
  /* SDì¹´ë“œ ì¤€ë¹„ ëŒ€ê¸° */
  if (SD_ReadyWait() != 0xFF)
 8003052:	f7ff ffeb 	bl	800302c <SD_ReadyWait>
 8003056:	0003      	movs	r3, r0
    return FALSE;
 8003058:	2000      	movs	r0, #0
  if (SD_ReadyWait() != 0xFF)
 800305a:	2bff      	cmp	r3, #255	; 0xff
 800305c:	d12c      	bne.n	80030b8 <SD_TxDataBlock+0x6c>
  
  /* í† í�° ì „ì†¡ */
  SPI_TxByte(token);      
 800305e:	0030      	movs	r0, r6
 8003060:	f7ff ff6e 	bl	8002f40 <SPI_TxByte>
  
  /* ë�°ì�´í„° í† í�°ì�¸ ê²½ìš° */
  if (token != 0xFD) 
 8003064:	2efd      	cmp	r6, #253	; 0xfd
 8003066:	d021      	beq.n	80030ac <SD_TxDataBlock+0x60>
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	002c      	movs	r4, r5
 800306e:	18ed      	adds	r5, r5, r3
    wc = 0;
    
    /* 512 ë°”ì�´íŠ¸ ë�°ì�´í„° ì „ì†¡ */
    do 
    { 
      SPI_TxByte(*buff++);
 8003070:	7820      	ldrb	r0, [r4, #0]
 8003072:	f7ff ff65 	bl	8002f40 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8003076:	7860      	ldrb	r0, [r4, #1]
 8003078:	3402      	adds	r4, #2
 800307a:	f7ff ff61 	bl	8002f40 <SPI_TxByte>
    } while (--wc);
 800307e:	42ac      	cmp	r4, r5
 8003080:	d1f6      	bne.n	8003070 <SD_TxDataBlock+0x24>
    
    SPI_RxByte();       /* CRC ë¬´ì‹œ */
 8003082:	f7ff ff85 	bl	8002f90 <SPI_RxByte>
    SPI_RxByte();
 8003086:	2541      	movs	r5, #65	; 0x41
 8003088:	f7ff ff82 	bl	8002f90 <SPI_RxByte>
    while (i <= 64) 
    {			
      resp = SPI_RxByte();
      
      /* ì—�ëŸ¬ ì�‘ë‹µ ì²˜ë¦¬ */
      if ((resp & 0x1F) == 0x05) 
 800308c:	261f      	movs	r6, #31
      resp = SPI_RxByte();
 800308e:	f7ff ff7f 	bl	8002f90 <SPI_RxByte>
      if ((resp & 0x1F) == 0x05) 
 8003092:	0003      	movs	r3, r0
      resp = SPI_RxByte();
 8003094:	0004      	movs	r4, r0
      if ((resp & 0x1F) == 0x05) 
 8003096:	4033      	ands	r3, r6
 8003098:	2b05      	cmp	r3, #5
 800309a:	d003      	beq.n	80030a4 <SD_TxDataBlock+0x58>
 800309c:	3d01      	subs	r5, #1
 800309e:	b2ed      	uxtb	r5, r5
    while (i <= 64) 
 80030a0:	2d00      	cmp	r5, #0
 80030a2:	d1f4      	bne.n	800308e <SD_TxDataBlock+0x42>
      
      i++;
    }
    
    /* SPI ìˆ˜ì‹  ë²„í�¼ Clear */
    while (SPI_RxByte() == 0);
 80030a4:	f7ff ff74 	bl	8002f90 <SPI_RxByte>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d0fb      	beq.n	80030a4 <SD_TxDataBlock+0x58>
  }
  
  if ((resp & 0x1F) == 0x05)
 80030ac:	201f      	movs	r0, #31
 80030ae:	4004      	ands	r4, r0
 80030b0:	3c05      	subs	r4, #5
 80030b2:	4260      	negs	r0, r4
 80030b4:	4160      	adcs	r0, r4
    return FALSE;
 80030b6:	b2c0      	uxtb	r0, r0
    return TRUE;
  else
    return FALSE;
}
 80030b8:	bd70      	pop	{r4, r5, r6, pc}

080030ba <SD_SendCmd>:
#endif /* _READONLY */

/* CMD íŒ¨í‚· ì „ì†¡ */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	0005      	movs	r5, r0
 80030be:	000c      	movs	r4, r1
  uint8_t crc, res;
  
  /* SDì¹´ë“œ ëŒ€ê¸° */
  if (SD_ReadyWait() != 0xFF)
 80030c0:	f7ff ffb4 	bl	800302c <SD_ReadyWait>
 80030c4:	0003      	movs	r3, r0
    return 0xFF;
 80030c6:	20ff      	movs	r0, #255	; 0xff
  if (SD_ReadyWait() != 0xFF)
 80030c8:	4283      	cmp	r3, r0
 80030ca:	d126      	bne.n	800311a <SD_SendCmd+0x60>
  
  /* ëª…ë ¹ íŒ¨í‚· ì „ì†¡ */
  SPI_TxByte(cmd); 			/* Command */
 80030cc:	0028      	movs	r0, r5
 80030ce:	f7ff ff37 	bl	8002f40 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80030d2:	0e20      	lsrs	r0, r4, #24
 80030d4:	f7ff ff34 	bl	8002f40 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80030d8:	0c20      	lsrs	r0, r4, #16
 80030da:	b2c0      	uxtb	r0, r0
 80030dc:	f7ff ff30 	bl	8002f40 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80030e0:	0a20      	lsrs	r0, r4, #8
 80030e2:	b2c0      	uxtb	r0, r0
 80030e4:	f7ff ff2c 	bl	8002f40 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80030e8:	b2e0      	uxtb	r0, r4
 80030ea:	f7ff ff29 	bl	8002f40 <SPI_TxByte>
  
  /* ëª…ë ¹ë³„ CRC ì¤€ë¹„ */
  crc = 0;  
  if (cmd == CMD0)
    crc = 0x95; /* CRC for CMD0(0) */
 80030ee:	2095      	movs	r0, #149	; 0x95
  if (cmd == CMD0)
 80030f0:	2d40      	cmp	r5, #64	; 0x40
 80030f2:	d003      	beq.n	80030fc <SD_SendCmd+0x42>
  crc = 0;  
 80030f4:	2000      	movs	r0, #0
  
  if (cmd == CMD8)
 80030f6:	2d48      	cmp	r5, #72	; 0x48
 80030f8:	d100      	bne.n	80030fc <SD_SendCmd+0x42>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80030fa:	3087      	adds	r0, #135	; 0x87
  
  /* CRC ì „ì†¡ */
  SPI_TxByte(crc);
 80030fc:	f7ff ff20 	bl	8002f40 <SPI_TxByte>
  
  /* CMD12 Stop Reading ëª…ë ¹ì�¸ ê²½ìš°ì—�ëŠ” ì�‘ë‹µ ë°”ì�´íŠ¸ í•˜ë‚˜ë¥¼ ë²„ë¦°ë‹¤ */
  if (cmd == CMD12)
 8003100:	2d4c      	cmp	r5, #76	; 0x4c
 8003102:	d101      	bne.n	8003108 <SD_SendCmd+0x4e>
    SPI_RxByte();
 8003104:	f7ff ff44 	bl	8002f90 <SPI_RxByte>
  crc = 0;  
 8003108:	240a      	movs	r4, #10
  
  /* 10íšŒ ë‚´ì—� ì •ìƒ� ë�°ì�´í„°ë¥¼ ìˆ˜ì‹ í•œë‹¤. */
  uint8_t n = 10; 
  do
  {
    res = SPI_RxByte();
 800310a:	f7ff ff41 	bl	8002f90 <SPI_RxByte>
  } while ((res & 0x80) && --n);
 800310e:	0603      	lsls	r3, r0, #24
 8003110:	d503      	bpl.n	800311a <SD_SendCmd+0x60>
 8003112:	3c01      	subs	r4, #1
 8003114:	b2e4      	uxtb	r4, r4
 8003116:	2c00      	cmp	r4, #0
 8003118:	d1f7      	bne.n	800310a <SD_SendCmd+0x50>
  
  return res;
}
 800311a:	bd70      	pop	{r4, r5, r6, pc}

0800311c <SD_RxDataBlock>:
  Timer1 = 10;
 800311c:	230a      	movs	r3, #10
{
 800311e:	b570      	push	{r4, r5, r6, lr}
 8003120:	0004      	movs	r4, r0
 8003122:	000d      	movs	r5, r1
  Timer1 = 10;
 8003124:	4e0f      	ldr	r6, [pc, #60]	; (8003164 <SD_RxDataBlock+0x48>)
 8003126:	7033      	strb	r3, [r6, #0]
    token = SPI_RxByte();
 8003128:	f7ff ff32 	bl	8002f90 <SPI_RxByte>
 800312c:	0003      	movs	r3, r0
  } while((token == 0xFF) && Timer1);
 800312e:	28ff      	cmp	r0, #255	; 0xff
 8003130:	d104      	bne.n	800313c <SD_RxDataBlock+0x20>
 8003132:	7830      	ldrb	r0, [r6, #0]
 8003134:	b2c0      	uxtb	r0, r0
 8003136:	2800      	cmp	r0, #0
 8003138:	d1f6      	bne.n	8003128 <SD_RxDataBlock+0xc>
}
 800313a:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 800313c:	2000      	movs	r0, #0
  if(token != 0xFE)
 800313e:	2bfe      	cmp	r3, #254	; 0xfe
 8003140:	d1fb      	bne.n	800313a <SD_RxDataBlock+0x1e>
 8003142:	0026      	movs	r6, r4
  *buff = SPI_RxByte();
 8003144:	f7ff ff24 	bl	8002f90 <SPI_RxByte>
 8003148:	7030      	strb	r0, [r6, #0]
 800314a:	f7ff ff21 	bl	8002f90 <SPI_RxByte>
 800314e:	7070      	strb	r0, [r6, #1]
 8003150:	3602      	adds	r6, #2
  } while(btr -= 2);
 8003152:	1b73      	subs	r3, r6, r5
 8003154:	42a3      	cmp	r3, r4
 8003156:	d1f5      	bne.n	8003144 <SD_RxDataBlock+0x28>
  SPI_RxByte(); /* CRC ë¬´ì‹œ */
 8003158:	f7ff ff1a 	bl	8002f90 <SPI_RxByte>
  SPI_RxByte();
 800315c:	f7ff ff18 	bl	8002f90 <SPI_RxByte>
 8003160:	2001      	movs	r0, #1
 8003162:	e7ea      	b.n	800313a <SD_RxDataBlock+0x1e>
 8003164:	20000f51 	.word	0x20000f51

08003168 <SD_disk_initialize>:
  user_diskio.c íŒŒì�¼ì—�ì„œ ì‚¬ìš©ë�œë‹¤.
-----------------------------------------------------------------------*/

/* SDì¹´ë“œ ì´ˆê¸°í™” */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t n, type, ocr[4];
  
  /* í•œì¢…ë¥˜ì�˜ ë“œë�¼ì�´ë¸Œë§Œ ì§€ì›� */
  if(drv)
    return STA_NOINIT;  
 800316a:	2301      	movs	r3, #1
  if(drv)
 800316c:	2800      	cmp	r0, #0
 800316e:	d106      	bne.n	800317e <SD_disk_initialize+0x16>
  
  /* SDì¹´ë“œ ë¯¸ì‚½ìž… */
  if(Stat & STA_NODISK)
 8003170:	2602      	movs	r6, #2
 8003172:	4d46      	ldr	r5, [pc, #280]	; (800328c <SD_disk_initialize+0x124>)
 8003174:	782c      	ldrb	r4, [r5, #0]
 8003176:	4034      	ands	r4, r6
 8003178:	d003      	beq.n	8003182 <SD_disk_initialize+0x1a>
  {
    /* Initialization failed */
    SD_PowerOff();
  }
  
  return Stat;
 800317a:	782b      	ldrb	r3, [r5, #0]
 800317c:	b2db      	uxtb	r3, r3
}
 800317e:	0018      	movs	r0, r3
 8003180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  SD_PowerOn();         
 8003182:	f7ff ff23 	bl	8002fcc <SD_PowerOn>
  SELECT();             
 8003186:	f7ff feef 	bl	8002f68 <SELECT>
  if (SD_SendCmd(CMD0, 0) == 1) 
 800318a:	0021      	movs	r1, r4
 800318c:	2040      	movs	r0, #64	; 0x40
 800318e:	f7ff ff94 	bl	80030ba <SD_SendCmd>
 8003192:	2801      	cmp	r0, #1
 8003194:	d16d      	bne.n	8003272 <SD_disk_initialize+0x10a>
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8003196:	21d5      	movs	r1, #213	; 0xd5
    Timer1 = 100;
 8003198:	2364      	movs	r3, #100	; 0x64
 800319a:	4f3d      	ldr	r7, [pc, #244]	; (8003290 <SD_disk_initialize+0x128>)
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800319c:	0049      	lsls	r1, r1, #1
 800319e:	3047      	adds	r0, #71	; 0x47
    Timer1 = 100;
 80031a0:	703b      	strb	r3, [r7, #0]
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80031a2:	f7ff ff8a 	bl	80030ba <SD_SendCmd>
 80031a6:	2801      	cmp	r0, #1
 80031a8:	d140      	bne.n	800322c <SD_disk_initialize+0xc4>
        ocr[n] = SPI_RxByte();
 80031aa:	f7ff fef1 	bl	8002f90 <SPI_RxByte>
 80031ae:	ae01      	add	r6, sp, #4
 80031b0:	55a0      	strb	r0, [r4, r6]
 80031b2:	3401      	adds	r4, #1
      for (n = 0; n < 4; n++)
 80031b4:	2c04      	cmp	r4, #4
 80031b6:	d1f8      	bne.n	80031aa <SD_disk_initialize+0x42>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80031b8:	78b3      	ldrb	r3, [r6, #2]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d159      	bne.n	8003272 <SD_disk_initialize+0x10a>
 80031be:	78f3      	ldrb	r3, [r6, #3]
 80031c0:	2baa      	cmp	r3, #170	; 0xaa
 80031c2:	d156      	bne.n	8003272 <SD_disk_initialize+0x10a>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80031c4:	2480      	movs	r4, #128	; 0x80
 80031c6:	05e4      	lsls	r4, r4, #23
 80031c8:	2100      	movs	r1, #0
 80031ca:	2077      	movs	r0, #119	; 0x77
 80031cc:	f7ff ff75 	bl	80030ba <SD_SendCmd>
 80031d0:	2801      	cmp	r0, #1
 80031d2:	d924      	bls.n	800321e <SD_disk_initialize+0xb6>
        } while (Timer1);
 80031d4:	783b      	ldrb	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f6      	bne.n	80031c8 <SD_disk_initialize+0x60>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80031da:	783b      	ldrb	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d048      	beq.n	8003272 <SD_disk_initialize+0x10a>
 80031e0:	2100      	movs	r1, #0
 80031e2:	207a      	movs	r0, #122	; 0x7a
 80031e4:	f7ff ff69 	bl	80030ba <SD_SendCmd>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d142      	bne.n	8003272 <SD_disk_initialize+0x10a>
 80031ec:	0004      	movs	r4, r0
            ocr[n] = SPI_RxByte();
 80031ee:	f7ff fecf 	bl	8002f90 <SPI_RxByte>
 80031f2:	5530      	strb	r0, [r6, r4]
 80031f4:	3401      	adds	r4, #1
          for (n = 0; n < 4; n++)
 80031f6:	2c04      	cmp	r4, #4
 80031f8:	d1f9      	bne.n	80031ee <SD_disk_initialize+0x86>
          type = (ocr[0] & 0x40) ? 6 : 2;
 80031fa:	7833      	ldrb	r3, [r6, #0]
 80031fc:	2606      	movs	r6, #6
 80031fe:	065b      	lsls	r3, r3, #25
 8003200:	d400      	bmi.n	8003204 <SD_disk_initialize+0x9c>
 8003202:	3e04      	subs	r6, #4
  CardType = type;
 8003204:	4b23      	ldr	r3, [pc, #140]	; (8003294 <SD_disk_initialize+0x12c>)
 8003206:	701e      	strb	r6, [r3, #0]
  DESELECT();
 8003208:	f7ff feb8 	bl	8002f7c <DESELECT>
  SPI_RxByte(); /* Idle ìƒ�íƒœ ì „í™˜ (Release DO) */
 800320c:	f7ff fec0 	bl	8002f90 <SPI_RxByte>
  if (type) 
 8003210:	2e00      	cmp	r6, #0
 8003212:	d037      	beq.n	8003284 <SD_disk_initialize+0x11c>
    Stat &= ~STA_NOINIT; 
 8003214:	2201      	movs	r2, #1
 8003216:	782b      	ldrb	r3, [r5, #0]
 8003218:	4393      	bics	r3, r2
 800321a:	702b      	strb	r3, [r5, #0]
 800321c:	e7ad      	b.n	800317a <SD_disk_initialize+0x12>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800321e:	0021      	movs	r1, r4
 8003220:	2069      	movs	r0, #105	; 0x69
 8003222:	f7ff ff4a 	bl	80030ba <SD_SendCmd>
 8003226:	2800      	cmp	r0, #0
 8003228:	d1d4      	bne.n	80031d4 <SD_disk_initialize+0x6c>
 800322a:	e7d6      	b.n	80031da <SD_disk_initialize+0x72>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800322c:	0021      	movs	r1, r4
 800322e:	2077      	movs	r0, #119	; 0x77
 8003230:	f7ff ff43 	bl	80030ba <SD_SendCmd>
 8003234:	2801      	cmp	r0, #1
 8003236:	d805      	bhi.n	8003244 <SD_disk_initialize+0xdc>
 8003238:	0021      	movs	r1, r4
 800323a:	2069      	movs	r0, #105	; 0x69
 800323c:	f7ff ff3d 	bl	80030ba <SD_SendCmd>
 8003240:	2801      	cmp	r0, #1
 8003242:	d900      	bls.n	8003246 <SD_disk_initialize+0xde>
 8003244:	2601      	movs	r6, #1
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8003246:	2100      	movs	r1, #0
          if (SD_SendCmd(CMD1, 0) == 0)
 8003248:	2041      	movs	r0, #65	; 0x41
        if (type == 2) 
 800324a:	2e02      	cmp	r6, #2
 800324c:	d115      	bne.n	800327a <SD_disk_initialize+0x112>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800324e:	2077      	movs	r0, #119	; 0x77
 8003250:	f7ff ff33 	bl	80030ba <SD_SendCmd>
 8003254:	2801      	cmp	r0, #1
 8003256:	d90e      	bls.n	8003276 <SD_disk_initialize+0x10e>
      } while (Timer1);
 8003258:	783b      	ldrb	r3, [r7, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f3      	bne.n	8003246 <SD_disk_initialize+0xde>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800325e:	783b      	ldrb	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d006      	beq.n	8003272 <SD_disk_initialize+0x10a>
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	2050      	movs	r0, #80	; 0x50
 8003268:	0089      	lsls	r1, r1, #2
 800326a:	f7ff ff26 	bl	80030ba <SD_SendCmd>
 800326e:	2800      	cmp	r0, #0
 8003270:	d0c8      	beq.n	8003204 <SD_disk_initialize+0x9c>
        type = 0;
 8003272:	2600      	movs	r6, #0
 8003274:	e7c6      	b.n	8003204 <SD_disk_initialize+0x9c>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8003276:	2100      	movs	r1, #0
 8003278:	2069      	movs	r0, #105	; 0x69
 800327a:	f7ff ff1e 	bl	80030ba <SD_SendCmd>
 800327e:	2800      	cmp	r0, #0
 8003280:	d1ea      	bne.n	8003258 <SD_disk_initialize+0xf0>
 8003282:	e7ec      	b.n	800325e <SD_disk_initialize+0xf6>
  PowerFlag = 0;
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <SD_disk_initialize+0x130>)
 8003286:	701e      	strb	r6, [r3, #0]
 8003288:	e777      	b.n	800317a <SD_disk_initialize+0x12>
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	20000008 	.word	0x20000008
 8003290:	20000f51 	.word	0x20000f51
 8003294:	200000d0 	.word	0x200000d0
 8003298:	200000d1 	.word	0x200000d1

0800329c <SD_disk_status>:

/* ë””ìŠ¤í�¬ ìƒ�íƒœ í™•ì�¸ */
DSTATUS SD_disk_status(BYTE drv) 
{
  if (drv)
    return STA_NOINIT; 
 800329c:	2301      	movs	r3, #1
  if (drv)
 800329e:	2800      	cmp	r0, #0
 80032a0:	d102      	bne.n	80032a8 <SD_disk_status+0xc>
  
  return Stat;
 80032a2:	4b02      	ldr	r3, [pc, #8]	; (80032ac <SD_disk_status+0x10>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	b2db      	uxtb	r3, r3
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	4770      	bx	lr
 80032ac:	20000008 	.word	0x20000008

080032b0 <SD_disk_read>:

/* ì„¹í„° ì�½ê¸° */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	0007      	movs	r7, r0
 80032b4:	000d      	movs	r5, r1
 80032b6:	0016      	movs	r6, r2
 80032b8:	001c      	movs	r4, r3
  if (pdrv || !count)
    return RES_PARERR;
 80032ba:	2004      	movs	r0, #4
  if (pdrv || !count)
 80032bc:	2f00      	cmp	r7, #0
 80032be:	d123      	bne.n	8003308 <SD_disk_read+0x58>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d021      	beq.n	8003308 <SD_disk_read+0x58>
  
  if (Stat & STA_NOINIT)
 80032c4:	4b1d      	ldr	r3, [pc, #116]	; (800333c <SD_disk_read+0x8c>)
    return RES_NOTRDY;
 80032c6:	3801      	subs	r0, #1
  if (Stat & STA_NOINIT)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	07db      	lsls	r3, r3, #31
 80032cc:	d41c      	bmi.n	8003308 <SD_disk_read+0x58>
  
  if (!(CardType & 4))
 80032ce:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <SD_disk_read+0x90>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	075b      	lsls	r3, r3, #29
 80032d4:	d400      	bmi.n	80032d8 <SD_disk_read+0x28>
    sector *= 512;      /* ì§€ì • sectorë¥¼ Byte addressing ë‹¨ìœ„ë¡œ ë³€ê²½ */
 80032d6:	0256      	lsls	r6, r2, #9
  
  SELECT();
 80032d8:	f7ff fe46 	bl	8002f68 <SELECT>
  
  if (count == 1) 
  { 
    /* ì‹±ê¸€ ë¸”ë¡� ì�½ê¸° */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80032dc:	0031      	movs	r1, r6
  if (count == 1) 
 80032de:	2c01      	cmp	r4, #1
 80032e0:	d113      	bne.n	800330a <SD_disk_read+0x5a>
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80032e2:	2051      	movs	r0, #81	; 0x51
 80032e4:	f7ff fee9 	bl	80030ba <SD_SendCmd>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d106      	bne.n	80032fa <SD_disk_read+0x4a>
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	0028      	movs	r0, r5
 80032f0:	0089      	lsls	r1, r1, #2
 80032f2:	f7ff ff13 	bl	800311c <SD_RxDataBlock>
 80032f6:	4244      	negs	r4, r0
 80032f8:	4144      	adcs	r4, r0
      /* STOP_TRANSMISSION, ëª¨ë“  ë¸”ëŸ­ì�„ ë‹¤ ì�½ì�€ í›„, ì „ì†¡ ì¤‘ì§€ ìš”ì²­ */
      SD_SendCmd(CMD12, 0); 
    }
  }
  
  DESELECT();
 80032fa:	f7ff fe3f 	bl	8002f7c <DESELECT>
  SPI_RxByte(); /* Idle ìƒ�íƒœ(Release DO) */
 80032fe:	f7ff fe47 	bl	8002f90 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8003302:	1e60      	subs	r0, r4, #1
 8003304:	4184      	sbcs	r4, r0
 8003306:	b2e0      	uxtb	r0, r4
}
 8003308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (SD_SendCmd(CMD18, sector) == 0) 
 800330a:	2052      	movs	r0, #82	; 0x52
 800330c:	f7ff fed5 	bl	80030ba <SD_SendCmd>
 8003310:	2800      	cmp	r0, #0
 8003312:	d1f2      	bne.n	80032fa <SD_disk_read+0x4a>
        if (!SD_RxDataBlock(buff, 512))
 8003314:	2680      	movs	r6, #128	; 0x80
 8003316:	00b6      	lsls	r6, r6, #2
 8003318:	0031      	movs	r1, r6
 800331a:	0028      	movs	r0, r5
 800331c:	f7ff fefe 	bl	800311c <SD_RxDataBlock>
 8003320:	2800      	cmp	r0, #0
 8003322:	d005      	beq.n	8003330 <SD_disk_read+0x80>
        buff += 512;
 8003324:	2380      	movs	r3, #128	; 0x80
      } while (--count);
 8003326:	3c01      	subs	r4, #1
        buff += 512;
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	18ed      	adds	r5, r5, r3
      } while (--count);
 800332c:	2c00      	cmp	r4, #0
 800332e:	d1f3      	bne.n	8003318 <SD_disk_read+0x68>
      SD_SendCmd(CMD12, 0); 
 8003330:	2100      	movs	r1, #0
 8003332:	204c      	movs	r0, #76	; 0x4c
 8003334:	f7ff fec1 	bl	80030ba <SD_SendCmd>
 8003338:	e7df      	b.n	80032fa <SD_disk_read+0x4a>
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	20000008 	.word	0x20000008
 8003340:	200000d0 	.word	0x200000d0

08003344 <SD_disk_write>:

/* ì„¹í„° ì“°ê¸° */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8003344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003346:	0007      	movs	r7, r0
 8003348:	000d      	movs	r5, r1
 800334a:	0016      	movs	r6, r2
 800334c:	001c      	movs	r4, r3
  if (pdrv || !count)
    return RES_PARERR;
 800334e:	2004      	movs	r0, #4
  if (pdrv || !count)
 8003350:	2f00      	cmp	r7, #0
 8003352:	d127      	bne.n	80033a4 <SD_disk_write+0x60>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d025      	beq.n	80033a4 <SD_disk_write+0x60>
  
  if (Stat & STA_NOINIT)
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <SD_disk_write+0xac>)
    return RES_NOTRDY;
 800335a:	3801      	subs	r0, #1
  if (Stat & STA_NOINIT)
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	07d2      	lsls	r2, r2, #31
 8003360:	d420      	bmi.n	80033a4 <SD_disk_write+0x60>
  
  if (Stat & STA_PROTECT)
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	2304      	movs	r3, #4
    return RES_WRPRT;
 8003366:	3801      	subs	r0, #1
  if (Stat & STA_PROTECT)
 8003368:	421a      	tst	r2, r3
 800336a:	d11b      	bne.n	80033a4 <SD_disk_write+0x60>
  
  if (!(CardType & 4))
 800336c:	4f21      	ldr	r7, [pc, #132]	; (80033f4 <SD_disk_write+0xb0>)
 800336e:	783a      	ldrb	r2, [r7, #0]
 8003370:	421a      	tst	r2, r3
 8003372:	d100      	bne.n	8003376 <SD_disk_write+0x32>
    sector *= 512; /* ì§€ì • sectorë¥¼ Byte addressing ë‹¨ìœ„ë¡œ ë³€ê²½ */
 8003374:	0276      	lsls	r6, r6, #9
  
  SELECT();
 8003376:	f7ff fdf7 	bl	8002f68 <SELECT>
  
  if (count == 1) 
 800337a:	2c01      	cmp	r4, #1
 800337c:	d113      	bne.n	80033a6 <SD_disk_write+0x62>
  { 
    /* ì‹±ê¸€ ë¸”ë¡� ì“°ê¸° */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800337e:	0031      	movs	r1, r6
 8003380:	2058      	movs	r0, #88	; 0x58
 8003382:	f7ff fe9a 	bl	80030ba <SD_SendCmd>
 8003386:	2800      	cmp	r0, #0
 8003388:	d130      	bne.n	80033ec <SD_disk_write+0xa8>
 800338a:	21fe      	movs	r1, #254	; 0xfe
 800338c:	0028      	movs	r0, r5
 800338e:	f7ff fe5d 	bl	800304c <SD_TxDataBlock>
 8003392:	4244      	negs	r4, r0
 8003394:	4144      	adcs	r4, r0
        count = 1;
      }
    }
  }
  
  DESELECT();
 8003396:	f7ff fdf1 	bl	8002f7c <DESELECT>
  SPI_RxByte();
 800339a:	f7ff fdf9 	bl	8002f90 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800339e:	1e60      	subs	r0, r4, #1
 80033a0:	4184      	sbcs	r4, r0
 80033a2:	b2e0      	uxtb	r0, r4
}
 80033a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (CardType & 2) 
 80033a6:	783b      	ldrb	r3, [r7, #0]
 80033a8:	079b      	lsls	r3, r3, #30
 80033aa:	d507      	bpl.n	80033bc <SD_disk_write+0x78>
      SD_SendCmd(CMD55, 0);
 80033ac:	2100      	movs	r1, #0
 80033ae:	2077      	movs	r0, #119	; 0x77
 80033b0:	f7ff fe83 	bl	80030ba <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80033b4:	0021      	movs	r1, r4
 80033b6:	2057      	movs	r0, #87	; 0x57
 80033b8:	f7ff fe7f 	bl	80030ba <SD_SendCmd>
    if (SD_SendCmd(CMD25, sector) == 0) 
 80033bc:	0031      	movs	r1, r6
 80033be:	2059      	movs	r0, #89	; 0x59
 80033c0:	f7ff fe7b 	bl	80030ba <SD_SendCmd>
 80033c4:	2800      	cmp	r0, #0
 80033c6:	d1e6      	bne.n	8003396 <SD_disk_write+0x52>
        if(!SD_TxDataBlock(buff, 0xFC))
 80033c8:	21fc      	movs	r1, #252	; 0xfc
 80033ca:	0028      	movs	r0, r5
 80033cc:	f7ff fe3e 	bl	800304c <SD_TxDataBlock>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d005      	beq.n	80033e0 <SD_disk_write+0x9c>
        buff += 512;
 80033d4:	2380      	movs	r3, #128	; 0x80
      } while (--count);
 80033d6:	3c01      	subs	r4, #1
        buff += 512;
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	18ed      	adds	r5, r5, r3
      } while (--count);
 80033dc:	2c00      	cmp	r4, #0
 80033de:	d1f3      	bne.n	80033c8 <SD_disk_write+0x84>
      if(!SD_TxDataBlock(0, 0xFD))
 80033e0:	21fd      	movs	r1, #253	; 0xfd
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7ff fe32 	bl	800304c <SD_TxDataBlock>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d1d4      	bne.n	8003396 <SD_disk_write+0x52>
        count = 1;
 80033ec:	2401      	movs	r4, #1
 80033ee:	e7d2      	b.n	8003396 <SD_disk_write+0x52>
 80033f0:	20000008 	.word	0x20000008
 80033f4:	200000d0 	.word	0x200000d0

080033f8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* ê¸°íƒ€ í•¨ìˆ˜ */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	0006      	movs	r6, r0
 80033fc:	b085      	sub	sp, #20
 80033fe:	000f      	movs	r7, r1
 8003400:	0015      	movs	r5, r2
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;
  
  if (drv)
    return RES_PARERR;
 8003402:	2404      	movs	r4, #4
  if (drv)
 8003404:	2800      	cmp	r0, #0
 8003406:	d108      	bne.n	800341a <SD_disk_ioctl+0x22>
  
  res = RES_ERROR;
  
  if (ctrl == CTRL_POWER) 
 8003408:	2905      	cmp	r1, #5
 800340a:	d118      	bne.n	800343e <SD_disk_ioctl+0x46>
  {
    switch (*ptr) 
 800340c:	7813      	ldrb	r3, [r2, #0]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d00d      	beq.n	800342e <SD_disk_ioctl+0x36>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d004      	beq.n	8003420 <SD_disk_ioctl+0x28>
 8003416:	2b02      	cmp	r3, #2
 8003418:	d00d      	beq.n	8003436 <SD_disk_ioctl+0x3e>
    DESELECT();
    SPI_RxByte();
  }
  
  return res;
}
 800341a:	0020      	movs	r0, r4
 800341c:	b005      	add	sp, #20
 800341e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return PowerFlag;
 8003420:	4a46      	ldr	r2, [pc, #280]	; (800353c <SD_disk_ioctl+0x144>)
      res = RES_OK;
 8003422:	001c      	movs	r4, r3
      if (SD_CheckPower())
 8003424:	7811      	ldrb	r1, [r2, #0]
 8003426:	2900      	cmp	r1, #0
 8003428:	d0f7      	beq.n	800341a <SD_disk_ioctl+0x22>
  PowerFlag = 0;
 800342a:	7013      	strb	r3, [r2, #0]
 800342c:	e7f5      	b.n	800341a <SD_disk_ioctl+0x22>
      SD_PowerOn();             /* Power On */
 800342e:	f7ff fdcd 	bl	8002fcc <SD_PowerOn>
      res = RES_OK;             /* Power Check */
 8003432:	0034      	movs	r4, r6
      break;
 8003434:	e7f1      	b.n	800341a <SD_disk_ioctl+0x22>
  return PowerFlag;
 8003436:	4b41      	ldr	r3, [pc, #260]	; (800353c <SD_disk_ioctl+0x144>)
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	7053      	strb	r3, [r2, #1]
 800343c:	e7f9      	b.n	8003432 <SD_disk_ioctl+0x3a>
    if (Stat & STA_NOINIT)
 800343e:	4b40      	ldr	r3, [pc, #256]	; (8003540 <SD_disk_ioctl+0x148>)
      return RES_NOTRDY;
 8003440:	2403      	movs	r4, #3
    if (Stat & STA_NOINIT)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	07db      	lsls	r3, r3, #31
 8003446:	d4e8      	bmi.n	800341a <SD_disk_ioctl+0x22>
    SELECT();
 8003448:	f7ff fd8e 	bl	8002f68 <SELECT>
    switch (ctrl) 
 800344c:	2f0d      	cmp	r7, #13
 800344e:	d86b      	bhi.n	8003528 <SD_disk_ioctl+0x130>
 8003450:	0038      	movs	r0, r7
 8003452:	f7fc fe6b 	bl	800012c <__gnu_thumb1_case_uqi>
 8003456:	074b      	.short	0x074b
 8003458:	69696946 	.word	0x69696946
 800345c:	69696969 	.word	0x69696969
 8003460:	63605369 	.word	0x63605369
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8003464:	2100      	movs	r1, #0
 8003466:	2049      	movs	r0, #73	; 0x49
 8003468:	f7ff fe27 	bl	80030ba <SD_SendCmd>
 800346c:	1e04      	subs	r4, r0, #0
 800346e:	d005      	beq.n	800347c <SD_disk_ioctl+0x84>
  res = RES_ERROR;
 8003470:	2401      	movs	r4, #1
    DESELECT();
 8003472:	f7ff fd83 	bl	8002f7c <DESELECT>
    SPI_RxByte();
 8003476:	f7ff fd8b 	bl	8002f90 <SPI_RxByte>
 800347a:	e7ce      	b.n	800341a <SD_disk_ioctl+0x22>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 800347c:	2110      	movs	r1, #16
 800347e:	4668      	mov	r0, sp
 8003480:	f7ff fe4c 	bl	800311c <SD_RxDataBlock>
 8003484:	2800      	cmp	r0, #0
 8003486:	d0f3      	beq.n	8003470 <SD_disk_ioctl+0x78>
        if ((csd[0] >> 6) == 1) 
 8003488:	466b      	mov	r3, sp
 800348a:	7819      	ldrb	r1, [r3, #0]
 800348c:	7a5a      	ldrb	r2, [r3, #9]
 800348e:	0989      	lsrs	r1, r1, #6
 8003490:	7a1b      	ldrb	r3, [r3, #8]
 8003492:	2901      	cmp	r1, #1
 8003494:	d106      	bne.n	80034a4 <SD_disk_ioctl+0xac>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003496:	3201      	adds	r2, #1
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	18d3      	adds	r3, r2, r3
          *(DWORD*) buff = (DWORD) csize << 10;
 800349c:	b29b      	uxth	r3, r3
 800349e:	029b      	lsls	r3, r3, #10
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80034a0:	602b      	str	r3, [r5, #0]
 80034a2:	e7e6      	b.n	8003472 <SD_disk_ioctl+0x7a>
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80034a4:	4669      	mov	r1, sp
 80034a6:	79c9      	ldrb	r1, [r1, #7]
 80034a8:	099b      	lsrs	r3, r3, #6
 80034aa:	0089      	lsls	r1, r1, #2
 80034ac:	185b      	adds	r3, r3, r1
 80034ae:	4669      	mov	r1, sp
 80034b0:	20c0      	movs	r0, #192	; 0xc0
 80034b2:	7989      	ldrb	r1, [r1, #6]
 80034b4:	0100      	lsls	r0, r0, #4
 80034b6:	0289      	lsls	r1, r1, #10
 80034b8:	4001      	ands	r1, r0
 80034ba:	3301      	adds	r3, #1
 80034bc:	185b      	adds	r3, r3, r1
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80034be:	4669      	mov	r1, sp
 80034c0:	200f      	movs	r0, #15
 80034c2:	7949      	ldrb	r1, [r1, #5]
 80034c4:	0052      	lsls	r2, r2, #1
 80034c6:	4001      	ands	r1, r0
 80034c8:	4668      	mov	r0, sp
 80034ca:	7a80      	ldrb	r0, [r0, #10]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80034cc:	b29b      	uxth	r3, r3
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80034ce:	09c0      	lsrs	r0, r0, #7
 80034d0:	1809      	adds	r1, r1, r0
 80034d2:	2006      	movs	r0, #6
 80034d4:	3102      	adds	r1, #2
 80034d6:	4002      	ands	r2, r0
 80034d8:	188a      	adds	r2, r1, r2
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	3a09      	subs	r2, #9
 80034de:	4093      	lsls	r3, r2
 80034e0:	e7de      	b.n	80034a0 <SD_disk_ioctl+0xa8>
      *(WORD*) buff = 512;
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	802b      	strh	r3, [r5, #0]
      res = RES_OK;
 80034e8:	2400      	movs	r4, #0
      break;
 80034ea:	e7c2      	b.n	8003472 <SD_disk_ioctl+0x7a>
      if (SD_ReadyWait() == 0xFF)
 80034ec:	f7ff fd9e 	bl	800302c <SD_ReadyWait>
 80034f0:	38ff      	subs	r0, #255	; 0xff
 80034f2:	0004      	movs	r4, r0
 80034f4:	1e60      	subs	r0, r4, #1
 80034f6:	4184      	sbcs	r4, r0
  res = RES_ERROR;
 80034f8:	b2e4      	uxtb	r4, r4
 80034fa:	e7ba      	b.n	8003472 <SD_disk_ioctl+0x7a>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80034fc:	2100      	movs	r1, #0
 80034fe:	2049      	movs	r0, #73	; 0x49
 8003500:	f7ff fddb 	bl	80030ba <SD_SendCmd>
 8003504:	2800      	cmp	r0, #0
 8003506:	d1b3      	bne.n	8003470 <SD_disk_ioctl+0x78>
 8003508:	2110      	movs	r1, #16
 800350a:	0028      	movs	r0, r5
 800350c:	f7ff fe06 	bl	800311c <SD_RxDataBlock>
 8003510:	4244      	negs	r4, r0
 8003512:	4144      	adcs	r4, r0
 8003514:	e7f0      	b.n	80034f8 <SD_disk_ioctl+0x100>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003516:	2100      	movs	r1, #0
 8003518:	204a      	movs	r0, #74	; 0x4a
 800351a:	e7f1      	b.n	8003500 <SD_disk_ioctl+0x108>
      if (SD_SendCmd(CMD58, 0) == 0) 
 800351c:	2100      	movs	r1, #0
 800351e:	207a      	movs	r0, #122	; 0x7a
 8003520:	f7ff fdcb 	bl	80030ba <SD_SendCmd>
 8003524:	2800      	cmp	r0, #0
 8003526:	d001      	beq.n	800352c <SD_disk_ioctl+0x134>
      res = RES_PARERR;
 8003528:	2404      	movs	r4, #4
 800352a:	e7a2      	b.n	8003472 <SD_disk_ioctl+0x7a>
 800352c:	1d2c      	adds	r4, r5, #4
          *ptr++ = SPI_RxByte();
 800352e:	f7ff fd2f 	bl	8002f90 <SPI_RxByte>
 8003532:	7028      	strb	r0, [r5, #0]
 8003534:	3501      	adds	r5, #1
        for (n = 0; n < 4; n++)
 8003536:	42a5      	cmp	r5, r4
 8003538:	d1f9      	bne.n	800352e <SD_disk_ioctl+0x136>
 800353a:	e7f5      	b.n	8003528 <SD_disk_ioctl+0x130>
 800353c:	200000d1 	.word	0x200000d1
 8003540:	20000008 	.word	0x20000008

08003544 <send_uart>:
uint32_t total, free_space;


/* to send the data to the uart */
void send_uart (char *string)
{
 8003544:	b510      	push	{r4, lr}
 8003546:	0004      	movs	r4, r0
	uint8_t len = strlen (string);
 8003548:	f7fc fdde 	bl	8000108 <strlen>
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);  // transmit in blocking mode
 800354c:	23fa      	movs	r3, #250	; 0xfa
 800354e:	b2c2      	uxtb	r2, r0
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	0021      	movs	r1, r4
 8003554:	4801      	ldr	r0, [pc, #4]	; (800355c <send_uart+0x18>)
 8003556:	f7ff f881 	bl	800265c <HAL_UART_Transmit>
}
 800355a:	bd10      	pop	{r4, pc}
 800355c:	20000784 	.word	0x20000784

08003560 <bufclear>:
	return i;
}

void bufclear (void)  // clear buffer
{
	for (int i=0; i<1024; i++)
 8003560:	2300      	movs	r3, #0
 8003562:	2280      	movs	r2, #128	; 0x80
	{
		buffer[i] = '\0';
 8003564:	0018      	movs	r0, r3
{
 8003566:	b510      	push	{r4, lr}
		buffer[i] = '\0';
 8003568:	4c03      	ldr	r4, [pc, #12]	; (8003578 <bufclear+0x18>)
	for (int i=0; i<1024; i++)
 800356a:	00d2      	lsls	r2, r2, #3
		buffer[i] = '\0';
 800356c:	1919      	adds	r1, r3, r4
	for (int i=0; i<1024; i++)
 800356e:	3301      	adds	r3, #1
		buffer[i] = '\0';
 8003570:	7008      	strb	r0, [r1, #0]
	for (int i=0; i<1024; i++)
 8003572:	4293      	cmp	r3, r2
 8003574:	d1fa      	bne.n	800356c <bufclear+0xc>
	}
}
 8003576:	bd10      	pop	{r4, pc}
 8003578:	20000804 	.word	0x20000804

0800357c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800357c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800357e:	2510      	movs	r5, #16
{
 8003580:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003582:	2230      	movs	r2, #48	; 0x30
 8003584:	2100      	movs	r1, #0
 8003586:	a80a      	add	r0, sp, #40	; 0x28
 8003588:	f000 fb43 	bl	8003c12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800358c:	002a      	movs	r2, r5
 800358e:	2100      	movs	r1, #0
 8003590:	a801      	add	r0, sp, #4
 8003592:	f000 fb3e 	bl	8003c12 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003596:	2214      	movs	r2, #20
 8003598:	2100      	movs	r1, #0
 800359a:	a805      	add	r0, sp, #20
 800359c:	f000 fb39 	bl	8003c12 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80035a0:	2311      	movs	r3, #17
 80035a2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	025b      	lsls	r3, r3, #9
 80035a8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80035aa:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035ac:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80035ae:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80035b0:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035b2:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035b4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035b6:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80035b8:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035ba:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80035bc:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035be:	f7fe f8bd 	bl	800173c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035c2:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035c4:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035c6:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035c8:	0021      	movs	r1, r4
 80035ca:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035cc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035ce:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035d0:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035d2:	f7fe fae7 	bl	8001ba4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035d6:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035d8:	9405      	str	r4, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80035da:	9507      	str	r5, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035dc:	f7fe fb76 	bl	8001ccc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80035e0:	b017      	add	sp, #92	; 0x5c
 80035e2:	bd30      	pop	{r4, r5, pc}

080035e4 <main>:
{
 80035e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035e6:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80035e8:	f7fd fdd6 	bl	8001198 <HAL_Init>
  SystemClock_Config();
 80035ec:	f7ff ffc6 	bl	800357c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	2214      	movs	r2, #20
 80035f2:	2100      	movs	r1, #0
 80035f4:	a805      	add	r0, sp, #20
 80035f6:	f000 fb0c 	bl	8003c12 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035fa:	2180      	movs	r1, #128	; 0x80
 80035fc:	4d93      	ldr	r5, [pc, #588]	; (800384c <main+0x268>)
 80035fe:	03c9      	lsls	r1, r1, #15
 8003600:	696a      	ldr	r2, [r5, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 8003602:	27c0      	movs	r7, #192	; 0xc0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003604:	430a      	orrs	r2, r1
 8003606:	616a      	str	r2, [r5, #20]
 8003608:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 800360a:	00bf      	lsls	r7, r7, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800360c:	400b      	ands	r3, r1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800360e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003614:	696a      	ldr	r2, [r5, #20]
 8003616:	0309      	lsls	r1, r1, #12
 8003618:	430a      	orrs	r2, r1
 800361a:	616a      	str	r2, [r5, #20]
 800361c:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 800361e:	488c      	ldr	r0, [pc, #560]	; (8003850 <main+0x26c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003620:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003622:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003624:	9302      	str	r3, [sp, #8]
 8003626:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003628:	696a      	ldr	r2, [r5, #20]
 800362a:	0289      	lsls	r1, r1, #10
 800362c:	430a      	orrs	r2, r1
 800362e:	616a      	str	r2, [r5, #20]
 8003630:	696b      	ldr	r3, [r5, #20]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003632:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003634:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003636:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003638:	9303      	str	r3, [sp, #12]
 800363a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800363c:	696a      	ldr	r2, [r5, #20]
 800363e:	02c9      	lsls	r1, r1, #11
 8003640:	430a      	orrs	r2, r1
 8003642:	616a      	str	r2, [r5, #20]
 8003644:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 8003646:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003648:	400b      	ands	r3, r1
 800364a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 800364c:	0039      	movs	r1, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800364e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 8003650:	f7fe f86e 	bl	8001730 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003654:	2200      	movs	r2, #0
 8003656:	2140      	movs	r1, #64	; 0x40
 8003658:	487e      	ldr	r0, [pc, #504]	; (8003854 <main+0x270>)
 800365a:	f7fe f869 	bl	8001730 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800365e:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8003660:	2601      	movs	r6, #1
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003662:	a905      	add	r1, sp, #20
 8003664:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8003666:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003668:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800366c:	f7fd ffb0 	bl	80015d0 <HAL_GPIO_Init>
  /*Configure GPIO pins : LD4_BLUE_LED_Pin LD3_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003670:	a905      	add	r1, sp, #20
 8003672:	4877      	ldr	r0, [pc, #476]	; (8003850 <main+0x26c>)
  GPIO_InitStruct.Pin = LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin;
 8003674:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003676:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800367c:	f7fd ffa8 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003680:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	a905      	add	r1, sp, #20
 8003684:	4873      	ldr	r0, [pc, #460]	; (8003854 <main+0x270>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003686:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003688:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368e:	f7fd ff9f 	bl	80015d0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003692:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003694:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003696:	4333      	orrs	r3, r6
 8003698:	616b      	str	r3, [r5, #20]
 800369a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800369c:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800369e:	4033      	ands	r3, r6
 80036a0:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036a2:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036a4:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036a6:	f7fd fec1 	bl	800142c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80036aa:	2009      	movs	r0, #9
 80036ac:	f7fd feee 	bl	800148c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80036b0:	220c      	movs	r2, #12
 80036b2:	0021      	movs	r1, r4
 80036b4:	a805      	add	r0, sp, #20
 80036b6:	f000 faac 	bl	8003c12 <memset>
  hadc.Instance = ADC1;
 80036ba:	4d67      	ldr	r5, [pc, #412]	; (8003858 <main+0x274>)
 80036bc:	4b67      	ldr	r3, [pc, #412]	; (800385c <main+0x278>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036be:	2704      	movs	r7, #4
  hadc.Instance = ADC1;
 80036c0:	602b      	str	r3, [r5, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036c2:	23c2      	movs	r3, #194	; 0xc2
 80036c4:	33ff      	adds	r3, #255	; 0xff
 80036c6:	61eb      	str	r3, [r5, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80036c8:	0028      	movs	r0, r5
  hadc.Init.DMAContinuousRequests = DISABLE;
 80036ca:	1d6b      	adds	r3, r5, #5
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80036cc:	612e      	str	r6, [r5, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036ce:	616f      	str	r7, [r5, #20]
  hadc.Init.ContinuousConvMode = ENABLE;
 80036d0:	76ae      	strb	r6, [r5, #26]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80036d2:	77dc      	strb	r4, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036d4:	62ae      	str	r6, [r5, #40]	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80036d6:	606c      	str	r4, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80036d8:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036da:	60ec      	str	r4, [r5, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80036dc:	762c      	strb	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80036de:	766c      	strb	r4, [r5, #25]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80036e0:	76ec      	strb	r4, [r5, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036e2:	622c      	str	r4, [r5, #32]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80036e4:	f7fd fd7a 	bl	80011dc <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	015b      	lsls	r3, r3, #5
 80036ec:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80036ee:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80036f0:	a905      	add	r1, sp, #20
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80036f2:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80036f4:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80036f6:	9605      	str	r6, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80036f8:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80036fa:	f7fd fe17 	bl	800132c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 80036fe:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003700:	a905      	add	r1, sp, #20
 8003702:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_2;
 8003704:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003706:	f7fd fe11 	bl	800132c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 800370a:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800370c:	a905      	add	r1, sp, #20
 800370e:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_3;
 8003710:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003712:	f7fd fe0b 	bl	800132c <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003716:	a905      	add	r1, sp, #20
 8003718:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 800371a:	9705      	str	r7, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800371c:	f7fd fe06 	bl	800132c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;
 8003720:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003722:	a905      	add	r1, sp, #20
 8003724:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8003726:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003728:	f7fd fe00 	bl	800132c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 800372c:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800372e:	a905      	add	r1, sp, #20
 8003730:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_6;
 8003732:	9305      	str	r3, [sp, #20]
  sConfig.Channel = ADC_CHANNEL_7;
 8003734:	3606      	adds	r6, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003736:	f7fd fdf9 	bl	800132c <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800373a:	a905      	add	r1, sp, #20
 800373c:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_7;
 800373e:	9605      	str	r6, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003740:	f7fd fdf4 	bl	800132c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 8003744:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003746:	a905      	add	r1, sp, #20
 8003748:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_8;
 800374a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800374c:	f7fd fdee 	bl	800132c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_9;
 8003750:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003752:	a905      	add	r1, sp, #20
 8003754:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 8003756:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003758:	f7fd fde8 	bl	800132c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_10;
 800375c:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800375e:	a905      	add	r1, sp, #20
 8003760:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_10;
 8003762:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003764:	f7fd fde2 	bl	800132c <HAL_ADC_ConfigChannel>
  huart1.Instance = USART1;
 8003768:	483d      	ldr	r0, [pc, #244]	; (8003860 <main+0x27c>)
 800376a:	4b3e      	ldr	r3, [pc, #248]	; (8003864 <main+0x280>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800376c:	6084      	str	r4, [r0, #8]
  huart1.Instance = USART1;
 800376e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003770:	23e1      	movs	r3, #225	; 0xe1
 8003772:	025b      	lsls	r3, r3, #9
 8003774:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003776:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003778:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800377a:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800377c:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800377e:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003780:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003782:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003784:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003786:	f7ff f803 	bl	8002790 <HAL_UART_Init>
  hspi1.Instance = SPI1;
 800378a:	4837      	ldr	r0, [pc, #220]	; (8003868 <main+0x284>)
 800378c:	4b37      	ldr	r3, [pc, #220]	; (800386c <main+0x288>)
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800378e:	6044      	str	r4, [r0, #4]
  hspi1.Instance = SPI1;
 8003790:	6003      	str	r3, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003792:	23e0      	movs	r3, #224	; 0xe0
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	6183      	str	r3, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800379e:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037a0:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037a2:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037a4:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037a6:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a8:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80037aa:	62c6      	str	r6, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037ac:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80037ae:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037b0:	f7fe fb9a 	bl	8001ee8 <HAL_SPI_Init>
  MX_FATFS_Init();
 80037b4:	f7ff fbb6 	bl	8002f24 <MX_FATFS_Init>
      fresult = f_mount(&fs, "", 0);
 80037b8:	4f2d      	ldr	r7, [pc, #180]	; (8003870 <main+0x28c>)
 80037ba:	0022      	movs	r2, r4
 80037bc:	0039      	movs	r1, r7
 80037be:	482d      	ldr	r0, [pc, #180]	; (8003874 <main+0x290>)
 80037c0:	f7ff fad4 	bl	8002d6c <f_mount>
 80037c4:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <main+0x294>)
 80037c6:	7018      	strb	r0, [r3, #0]
      if (fresult != FR_OK) send_uart ("error in mounting SD CARD...\n");
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d03d      	beq.n	8003848 <main+0x264>
 80037cc:	482b      	ldr	r0, [pc, #172]	; (800387c <main+0x298>)
      else send_uart("SD CARD mounted successfully...\n");
 80037ce:	f7ff feb9 	bl	8003544 <send_uart>
          f_getfree("", &fre_clust, &pfs);
 80037d2:	4d2b      	ldr	r5, [pc, #172]	; (8003880 <main+0x29c>)
 80037d4:	4e2b      	ldr	r6, [pc, #172]	; (8003884 <main+0x2a0>)
 80037d6:	002a      	movs	r2, r5
 80037d8:	0031      	movs	r1, r6
 80037da:	0038      	movs	r0, r7
 80037dc:	f7ff fafe 	bl	8002ddc <f_getfree>
          total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80037e0:	2385      	movs	r3, #133	; 0x85
 80037e2:	682a      	ldr	r2, [r5, #0]
 80037e4:	4f28      	ldr	r7, [pc, #160]	; (8003888 <main+0x2a4>)
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	58d3      	ldr	r3, [r2, r3]
 80037ea:	5dd0      	ldrb	r0, [r2, r7]
 80037ec:	3b02      	subs	r3, #2
 80037ee:	4358      	muls	r0, r3
 80037f0:	f7fd fb1a 	bl	8000e28 <__aeabi_ui2d>
 80037f4:	2200      	movs	r2, #0
 80037f6:	4b25      	ldr	r3, [pc, #148]	; (800388c <main+0x2a8>)
 80037f8:	f7fc fd4c 	bl	8000294 <__aeabi_dmul>
 80037fc:	f7fc fd2c 	bl	8000258 <__aeabi_d2uiz>
 8003800:	4b23      	ldr	r3, [pc, #140]	; (8003890 <main+0x2ac>)
          sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8003802:	4c24      	ldr	r4, [pc, #144]	; (8003894 <main+0x2b0>)
          total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8003804:	0002      	movs	r2, r0
 8003806:	6018      	str	r0, [r3, #0]
          sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8003808:	4923      	ldr	r1, [pc, #140]	; (8003898 <main+0x2b4>)
 800380a:	0020      	movs	r0, r4
 800380c:	f000 fa0a 	bl	8003c24 <siprintf>
          send_uart(buffer);
 8003810:	0020      	movs	r0, r4
 8003812:	f7ff fe97 	bl	8003544 <send_uart>
          bufclear();
 8003816:	f7ff fea3 	bl	8003560 <bufclear>
          free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800381a:	682b      	ldr	r3, [r5, #0]
 800381c:	6830      	ldr	r0, [r6, #0]
 800381e:	5ddb      	ldrb	r3, [r3, r7]
 8003820:	4358      	muls	r0, r3
 8003822:	f7fd fb01 	bl	8000e28 <__aeabi_ui2d>
 8003826:	2200      	movs	r2, #0
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <main+0x2a8>)
 800382a:	f7fc fd33 	bl	8000294 <__aeabi_dmul>
 800382e:	f7fc fd13 	bl	8000258 <__aeabi_d2uiz>
 8003832:	4b1a      	ldr	r3, [pc, #104]	; (800389c <main+0x2b8>)
 8003834:	0002      	movs	r2, r0
 8003836:	6018      	str	r0, [r3, #0]
          sprintf (buffer, "SD CARD Free Space: \t%lu\n",free_space);
 8003838:	4919      	ldr	r1, [pc, #100]	; (80038a0 <main+0x2bc>)
 800383a:	0020      	movs	r0, r4
 800383c:	f000 f9f2 	bl	8003c24 <siprintf>
          send_uart(buffer);
 8003840:	0020      	movs	r0, r4
 8003842:	f7ff fe7f 	bl	8003544 <send_uart>
 8003846:	e7fe      	b.n	8003846 <main+0x262>
      else send_uart("SD CARD mounted successfully...\n");
 8003848:	4816      	ldr	r0, [pc, #88]	; (80038a4 <main+0x2c0>)
 800384a:	e7c0      	b.n	80037ce <main+0x1ea>
 800384c:	40021000 	.word	0x40021000
 8003850:	48000800 	.word	0x48000800
 8003854:	48000400 	.word	0x48000400
 8003858:	20000cbc 	.word	0x20000cbc
 800385c:	40012400 	.word	0x40012400
 8003860:	20000784 	.word	0x20000784
 8003864:	40013800 	.word	0x40013800
 8003868:	20000c10 	.word	0x20000c10
 800386c:	40013000 	.word	0x40013000
 8003870:	080044ed 	.word	0x080044ed
 8003874:	2000054c 	.word	0x2000054c
 8003878:	20000c0c 	.word	0x20000c0c
 800387c:	080044d0 	.word	0x080044d0
 8003880:	20000c08 	.word	0x20000c08
 8003884:	20000548 	.word	0x20000548
 8003888:	00000202 	.word	0x00000202
 800388c:	3fe00000 	.word	0x3fe00000
 8003890:	20000c74 	.word	0x20000c74
 8003894:	20000804 	.word	0x20000804
 8003898:	0800450f 	.word	0x0800450f
 800389c:	20000780 	.word	0x20000780
 80038a0:	08004529 	.word	0x08004529
 80038a4:	080044ee 	.word	0x080044ee

080038a8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ac:	2001      	movs	r0, #1
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <HAL_MspInit+0x2c>)
{
 80038b0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b2:	6999      	ldr	r1, [r3, #24]
 80038b4:	4301      	orrs	r1, r0
 80038b6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038b8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038be:	4002      	ands	r2, r0
 80038c0:	9200      	str	r2, [sp, #0]
 80038c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	61da      	str	r2, [r3, #28]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	400b      	ands	r3, r1
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038d2:	b002      	add	sp, #8
 80038d4:	4770      	bx	lr
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	40021000 	.word	0x40021000

080038dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038de:	0005      	movs	r5, r0
 80038e0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e2:	2214      	movs	r2, #20
 80038e4:	2100      	movs	r1, #0
 80038e6:	a805      	add	r0, sp, #20
 80038e8:	f000 f993 	bl	8003c12 <memset>
  if(hadc->Instance==ADC1)
 80038ec:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <HAL_ADC_MspInit+0xc8>)
 80038ee:	682a      	ldr	r2, [r5, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d154      	bne.n	800399e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038f4:	2680      	movs	r6, #128	; 0x80
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f6:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038f8:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <HAL_ADC_MspInit+0xcc>)
 80038fa:	00b6      	lsls	r6, r6, #2
 80038fc:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038fe:	0300      	lsls	r0, r0, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003900:	4332      	orrs	r2, r6
 8003902:	619a      	str	r2, [r3, #24]
 8003904:	699a      	ldr	r2, [r3, #24]
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003906:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003908:	4032      	ands	r2, r6
 800390a:	9201      	str	r2, [sp, #4]
 800390c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800390e:	6959      	ldr	r1, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	2700      	movs	r7, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003912:	4301      	orrs	r1, r0
 8003914:	6159      	str	r1, [r3, #20]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800391c:	9202      	str	r2, [sp, #8]
 800391e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003920:	6959      	ldr	r1, [r3, #20]
 8003922:	0280      	lsls	r0, r0, #10
 8003924:	4301      	orrs	r1, r0
 8003926:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003928:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392a:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392c:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392e:	4002      	ands	r2, r0
 8003930:	9203      	str	r2, [sp, #12]
 8003932:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003934:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003936:	481d      	ldr	r0, [pc, #116]	; (80039ac <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003938:	430a      	orrs	r2, r1
 800393a:	615a      	str	r2, [r3, #20]
 800393c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800393e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003940:	400b      	ands	r3, r1
 8003942:	9304      	str	r3, [sp, #16]
 8003944:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003946:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003948:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800394a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394c:	f7fd fe40 	bl	80015d0 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003950:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8003952:	23fe      	movs	r3, #254	; 0xfe
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003954:	a905      	add	r1, sp, #20
 8003956:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8003958:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800395a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395e:	f7fd fe37 	bl	80015d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003962:	4813      	ldr	r0, [pc, #76]	; (80039b0 <HAL_ADC_MspInit+0xd4>)
 8003964:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003966:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003968:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396c:	f7fd fe30 	bl	80015d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003970:	4c10      	ldr	r4, [pc, #64]	; (80039b4 <HAL_ADC_MspInit+0xd8>)
 8003972:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <HAL_ADC_MspInit+0xdc>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003974:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 8003976:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003982:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003984:	6067      	str	r7, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003986:	60a7      	str	r7, [r4, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003988:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800398a:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800398c:	61e7      	str	r7, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800398e:	f7fd fda3 	bl	80014d8 <HAL_DMA_Init>
 8003992:	42b8      	cmp	r0, r7
 8003994:	d001      	beq.n	800399a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8003996:	f7ff ff87 	bl	80038a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800399a:	632c      	str	r4, [r5, #48]	; 0x30
 800399c:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800399e:	b00b      	add	sp, #44	; 0x2c
 80039a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	40012400 	.word	0x40012400
 80039a8:	40021000 	.word	0x40021000
 80039ac:	48000800 	.word	0x48000800
 80039b0:	48000400 	.word	0x48000400
 80039b4:	20000c78 	.word	0x20000c78
 80039b8:	40020008 	.word	0x40020008

080039bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039bc:	b510      	push	{r4, lr}
 80039be:	0004      	movs	r4, r0
 80039c0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c2:	2214      	movs	r2, #20
 80039c4:	2100      	movs	r1, #0
 80039c6:	a803      	add	r0, sp, #12
 80039c8:	f000 f923 	bl	8003c12 <memset>
  if(hspi->Instance==SPI1)
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_SPI_MspInit+0x58>)
 80039ce:	6822      	ldr	r2, [r4, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d11c      	bne.n	8003a0e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039d4:	2080      	movs	r0, #128	; 0x80
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_SPI_MspInit+0x5c>)
 80039d8:	0140      	lsls	r0, r0, #5
 80039da:	6999      	ldr	r1, [r3, #24]
 80039dc:	4301      	orrs	r1, r0
 80039de:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039e2:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e4:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039e6:	4002      	ands	r2, r0
 80039e8:	9201      	str	r2, [sp, #4]
 80039ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ec:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ee:	480b      	ldr	r0, [pc, #44]	; (8003a1c <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f0:	430a      	orrs	r2, r1
 80039f2:	615a      	str	r2, [r3, #20]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	400b      	ands	r3, r1
 80039f8:	9302      	str	r3, [sp, #8]
 80039fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80039fc:	2338      	movs	r3, #56	; 0x38
 80039fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	3b36      	subs	r3, #54	; 0x36
 8003a02:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a04:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a06:	3301      	adds	r3, #1
 8003a08:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0a:	f7fd fde1 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003a0e:	b008      	add	sp, #32
 8003a10:	bd10      	pop	{r4, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	40013000 	.word	0x40013000
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	48000400 	.word	0x48000400

08003a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a20:	b510      	push	{r4, lr}
 8003a22:	0004      	movs	r4, r0
 8003a24:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a26:	2214      	movs	r2, #20
 8003a28:	2100      	movs	r1, #0
 8003a2a:	a803      	add	r0, sp, #12
 8003a2c:	f000 f8f1 	bl	8003c12 <memset>
  if(huart->Instance==USART1)
 8003a30:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <HAL_UART_MspInit+0x60>)
 8003a32:	6822      	ldr	r2, [r4, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d120      	bne.n	8003a7a <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a38:	2080      	movs	r0, #128	; 0x80
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_UART_MspInit+0x64>)
 8003a3c:	01c0      	lsls	r0, r0, #7
 8003a3e:	6999      	ldr	r1, [r3, #24]
 8003a40:	4301      	orrs	r1, r0
 8003a42:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a44:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a46:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a48:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a4a:	4002      	ands	r2, r0
 8003a4c:	9201      	str	r2, [sp, #4]
 8003a4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a50:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a52:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a54:	430a      	orrs	r2, r1
 8003a56:	615a      	str	r2, [r3, #20]
 8003a58:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5c:	400b      	ands	r3, r1
 8003a5e:	9302      	str	r3, [sp, #8]
 8003a60:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a62:	23c0      	movs	r3, #192	; 0xc0
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a70:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003a72:	3b02      	subs	r3, #2
 8003a74:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a76:	f7fd fdab 	bl	80015d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a7a:	b008      	add	sp, #32
 8003a7c:	bd10      	pop	{r4, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	40013800 	.word	0x40013800
 8003a84:	40021000 	.word	0x40021000

08003a88 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 8003a88:	4a08      	ldr	r2, [pc, #32]	; (8003aac <SDTimer_Handler+0x24>)
 8003a8a:	7813      	ldrb	r3, [r2, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <SDTimer_Handler+0x10>
    Timer1--;
 8003a90:	7813      	ldrb	r3, [r2, #0]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 8003a98:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <SDTimer_Handler+0x28>)
 8003a9a:	7813      	ldrb	r3, [r2, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <SDTimer_Handler+0x20>
    Timer2--;
 8003aa0:	7813      	ldrb	r3, [r2, #0]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	7013      	strb	r3, [r2, #0]
}
 8003aa8:	4770      	bx	lr
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	20000f51 	.word	0x20000f51
 8003ab0:	20000f50 	.word	0x20000f50

08003ab4 <NMI_Handler>:
 8003ab4:	4770      	bx	lr

08003ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ab6:	e7fe      	b.n	8003ab6 <HardFault_Handler>

08003ab8 <SVC_Handler>:
 8003ab8:	4770      	bx	lr

08003aba <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aba:	4770      	bx	lr

08003abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003abc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8003abe:	4a07      	ldr	r2, [pc, #28]	; (8003adc <SysTick_Handler+0x20>)
 8003ac0:	7813      	ldrb	r3, [r2, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	7013      	strb	r3, [r2, #0]
    if(FatFsCnt >= 10)
 8003ac8:	7813      	ldrb	r3, [r2, #0]
 8003aca:	2b09      	cmp	r3, #9
 8003acc:	d903      	bls.n	8003ad6 <SysTick_Handler+0x1a>
    {
	  FatFsCnt = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	7013      	strb	r3, [r2, #0]
	  SDTimer_Handler();
 8003ad2:	f7ff ffd9 	bl	8003a88 <SDTimer_Handler>
    }


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad6:	f7fd fb6f 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ada:	bd10      	pop	{r4, pc}
 8003adc:	200000d2 	.word	0x200000d2

08003ae0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ae0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003ae2:	4802      	ldr	r0, [pc, #8]	; (8003aec <DMA1_Channel1_IRQHandler+0xc>)
 8003ae4:	f7fd fd2a 	bl	800153c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ae8:	bd10      	pop	{r4, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	20000c78 	.word	0x20000c78

08003af0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <_sbrk+0x2c>)
{
 8003af2:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8003af4:	6819      	ldr	r1, [r3, #0]
{
 8003af6:	0002      	movs	r2, r0
	if (heap_end == 0)
 8003af8:	2900      	cmp	r1, #0
 8003afa:	d101      	bne.n	8003b00 <_sbrk+0x10>
		heap_end = &end;
 8003afc:	4908      	ldr	r1, [pc, #32]	; (8003b20 <_sbrk+0x30>)
 8003afe:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003b00:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003b02:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003b04:	1882      	adds	r2, r0, r2
 8003b06:	428a      	cmp	r2, r1
 8003b08:	d906      	bls.n	8003b18 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003b0a:	f000 f84f 	bl	8003bac <__errno>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003b12:	2001      	movs	r0, #1
 8003b14:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003b16:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8003b18:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8003b1a:	e7fc      	b.n	8003b16 <_sbrk+0x26>
 8003b1c:	200000d4 	.word	0x200000d4
 8003b20:	20000f58 	.word	0x20000f58

08003b24 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003b24:	4770      	bx	lr

08003b26 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003b26:	b510      	push	{r4, lr}
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8003b28:	f7ff fb1e 	bl	8003168 <SD_disk_initialize>
 8003b2c:	b2c0      	uxtb	r0, r0
  /* USER CODE END INIT */
}
 8003b2e:	bd10      	pop	{r4, pc}

08003b30 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003b30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8003b32:	f7ff fbb3 	bl	800329c <SD_disk_status>
 8003b36:	b2c0      	uxtb	r0, r0
  /* USER CODE END STATUS */
}
 8003b38:	bd10      	pop	{r4, pc}

08003b3a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003b3a:	b510      	push	{r4, lr}
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003b3c:	f7ff fbb8 	bl	80032b0 <SD_disk_read>
 8003b40:	b2c0      	uxtb	r0, r0
  /* USER CODE END READ */
}
 8003b42:	bd10      	pop	{r4, pc}

08003b44 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8003b44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003b46:	f7ff fbfd 	bl	8003344 <SD_disk_write>
 8003b4a:	b2c0      	uxtb	r0, r0
  /* USER CODE END WRITE */
}
 8003b4c:	bd10      	pop	{r4, pc}

08003b4e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003b4e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003b50:	f7ff fc52 	bl	80033f8 <SD_disk_ioctl>
 8003b54:	b2c0      	uxtb	r0, r0
  /* USER CODE END IOCTL */
}
 8003b56:	bd10      	pop	{r4, pc}

08003b58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b58:	480d      	ldr	r0, [pc, #52]	; (8003b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b5c:	480d      	ldr	r0, [pc, #52]	; (8003b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b5e:	490e      	ldr	r1, [pc, #56]	; (8003b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b60:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <LoopForever+0xe>)
  movs r3, #0
 8003b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b64:	e002      	b.n	8003b6c <LoopCopyDataInit>

08003b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b6a:	3304      	adds	r3, #4

08003b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b70:	d3f9      	bcc.n	8003b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b74:	4c0b      	ldr	r4, [pc, #44]	; (8003ba4 <LoopForever+0x16>)
  movs r3, #0
 8003b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b78:	e001      	b.n	8003b7e <LoopFillZerobss>

08003b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b7c:	3204      	adds	r2, #4

08003b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b80:	d3fb      	bcc.n	8003b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b82:	f7ff ffcf 	bl	8003b24 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003b86:	f000 f817 	bl	8003bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b8a:	f7ff fd2b 	bl	80035e4 <main>

08003b8e <LoopForever>:

LoopForever:
    b LoopForever
 8003b8e:	e7fe      	b.n	8003b8e <LoopForever>
  ldr   r0, =_estack
 8003b90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b98:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003b9c:	08004598 	.word	0x08004598
  ldr r2, =_sbss
 8003ba0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003ba4:	20000f58 	.word	0x20000f58

08003ba8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ba8:	e7fe      	b.n	8003ba8 <ADC1_COMP_IRQHandler>
	...

08003bac <__errno>:
 8003bac:	4b01      	ldr	r3, [pc, #4]	; (8003bb4 <__errno+0x8>)
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	4770      	bx	lr
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	20000024 	.word	0x20000024

08003bb8 <__libc_init_array>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	2600      	movs	r6, #0
 8003bbc:	4d0c      	ldr	r5, [pc, #48]	; (8003bf0 <__libc_init_array+0x38>)
 8003bbe:	4c0d      	ldr	r4, [pc, #52]	; (8003bf4 <__libc_init_array+0x3c>)
 8003bc0:	1b64      	subs	r4, r4, r5
 8003bc2:	10a4      	asrs	r4, r4, #2
 8003bc4:	42a6      	cmp	r6, r4
 8003bc6:	d109      	bne.n	8003bdc <__libc_init_array+0x24>
 8003bc8:	2600      	movs	r6, #0
 8003bca:	f000 fc43 	bl	8004454 <_init>
 8003bce:	4d0a      	ldr	r5, [pc, #40]	; (8003bf8 <__libc_init_array+0x40>)
 8003bd0:	4c0a      	ldr	r4, [pc, #40]	; (8003bfc <__libc_init_array+0x44>)
 8003bd2:	1b64      	subs	r4, r4, r5
 8003bd4:	10a4      	asrs	r4, r4, #2
 8003bd6:	42a6      	cmp	r6, r4
 8003bd8:	d105      	bne.n	8003be6 <__libc_init_array+0x2e>
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	00b3      	lsls	r3, r6, #2
 8003bde:	58eb      	ldr	r3, [r5, r3]
 8003be0:	4798      	blx	r3
 8003be2:	3601      	adds	r6, #1
 8003be4:	e7ee      	b.n	8003bc4 <__libc_init_array+0xc>
 8003be6:	00b3      	lsls	r3, r6, #2
 8003be8:	58eb      	ldr	r3, [r5, r3]
 8003bea:	4798      	blx	r3
 8003bec:	3601      	adds	r6, #1
 8003bee:	e7f2      	b.n	8003bd6 <__libc_init_array+0x1e>
 8003bf0:	08004590 	.word	0x08004590
 8003bf4:	08004590 	.word	0x08004590
 8003bf8:	08004590 	.word	0x08004590
 8003bfc:	08004594 	.word	0x08004594

08003c00 <memcpy>:
 8003c00:	2300      	movs	r3, #0
 8003c02:	b510      	push	{r4, lr}
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d100      	bne.n	8003c0a <memcpy+0xa>
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	5ccc      	ldrb	r4, [r1, r3]
 8003c0c:	54c4      	strb	r4, [r0, r3]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	e7f8      	b.n	8003c04 <memcpy+0x4>

08003c12 <memset>:
 8003c12:	0003      	movs	r3, r0
 8003c14:	1882      	adds	r2, r0, r2
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d100      	bne.n	8003c1c <memset+0xa>
 8003c1a:	4770      	bx	lr
 8003c1c:	7019      	strb	r1, [r3, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	e7f9      	b.n	8003c16 <memset+0x4>
	...

08003c24 <siprintf>:
 8003c24:	b40e      	push	{r1, r2, r3}
 8003c26:	b510      	push	{r4, lr}
 8003c28:	b09d      	sub	sp, #116	; 0x74
 8003c2a:	a902      	add	r1, sp, #8
 8003c2c:	9002      	str	r0, [sp, #8]
 8003c2e:	6108      	str	r0, [r1, #16]
 8003c30:	480b      	ldr	r0, [pc, #44]	; (8003c60 <siprintf+0x3c>)
 8003c32:	2482      	movs	r4, #130	; 0x82
 8003c34:	6088      	str	r0, [r1, #8]
 8003c36:	6148      	str	r0, [r1, #20]
 8003c38:	2001      	movs	r0, #1
 8003c3a:	4240      	negs	r0, r0
 8003c3c:	ab1f      	add	r3, sp, #124	; 0x7c
 8003c3e:	81c8      	strh	r0, [r1, #14]
 8003c40:	4808      	ldr	r0, [pc, #32]	; (8003c64 <siprintf+0x40>)
 8003c42:	cb04      	ldmia	r3!, {r2}
 8003c44:	00a4      	lsls	r4, r4, #2
 8003c46:	6800      	ldr	r0, [r0, #0]
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	818c      	strh	r4, [r1, #12]
 8003c4c:	f000 f86e 	bl	8003d2c <_svfiprintf_r>
 8003c50:	2300      	movs	r3, #0
 8003c52:	9a02      	ldr	r2, [sp, #8]
 8003c54:	7013      	strb	r3, [r2, #0]
 8003c56:	b01d      	add	sp, #116	; 0x74
 8003c58:	bc10      	pop	{r4}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	b003      	add	sp, #12
 8003c5e:	4718      	bx	r3
 8003c60:	7fffffff 	.word	0x7fffffff
 8003c64:	20000024 	.word	0x20000024

08003c68 <__ssputs_r>:
 8003c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6a:	688e      	ldr	r6, [r1, #8]
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	0007      	movs	r7, r0
 8003c70:	000c      	movs	r4, r1
 8003c72:	9203      	str	r2, [sp, #12]
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	429e      	cmp	r6, r3
 8003c78:	d839      	bhi.n	8003cee <__ssputs_r+0x86>
 8003c7a:	2390      	movs	r3, #144	; 0x90
 8003c7c:	898a      	ldrh	r2, [r1, #12]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	421a      	tst	r2, r3
 8003c82:	d034      	beq.n	8003cee <__ssputs_r+0x86>
 8003c84:	2503      	movs	r5, #3
 8003c86:	6909      	ldr	r1, [r1, #16]
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	1a5b      	subs	r3, r3, r1
 8003c8c:	9302      	str	r3, [sp, #8]
 8003c8e:	6963      	ldr	r3, [r4, #20]
 8003c90:	9802      	ldr	r0, [sp, #8]
 8003c92:	435d      	muls	r5, r3
 8003c94:	0feb      	lsrs	r3, r5, #31
 8003c96:	195d      	adds	r5, r3, r5
 8003c98:	9b01      	ldr	r3, [sp, #4]
 8003c9a:	106d      	asrs	r5, r5, #1
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	181b      	adds	r3, r3, r0
 8003ca0:	42ab      	cmp	r3, r5
 8003ca2:	d900      	bls.n	8003ca6 <__ssputs_r+0x3e>
 8003ca4:	001d      	movs	r5, r3
 8003ca6:	0553      	lsls	r3, r2, #21
 8003ca8:	d532      	bpl.n	8003d10 <__ssputs_r+0xa8>
 8003caa:	0029      	movs	r1, r5
 8003cac:	0038      	movs	r0, r7
 8003cae:	f000 fb31 	bl	8004314 <_malloc_r>
 8003cb2:	1e06      	subs	r6, r0, #0
 8003cb4:	d109      	bne.n	8003cca <__ssputs_r+0x62>
 8003cb6:	230c      	movs	r3, #12
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	2340      	movs	r3, #64	; 0x40
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	89a2      	ldrh	r2, [r4, #12]
 8003cc0:	4240      	negs	r0, r0
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	81a3      	strh	r3, [r4, #12]
 8003cc6:	b005      	add	sp, #20
 8003cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cca:	9a02      	ldr	r2, [sp, #8]
 8003ccc:	6921      	ldr	r1, [r4, #16]
 8003cce:	f7ff ff97 	bl	8003c00 <memcpy>
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <__ssputs_r+0xc0>)
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	81a3      	strh	r3, [r4, #12]
 8003cde:	9b02      	ldr	r3, [sp, #8]
 8003ce0:	6126      	str	r6, [r4, #16]
 8003ce2:	18f6      	adds	r6, r6, r3
 8003ce4:	6026      	str	r6, [r4, #0]
 8003ce6:	6165      	str	r5, [r4, #20]
 8003ce8:	9e01      	ldr	r6, [sp, #4]
 8003cea:	1aed      	subs	r5, r5, r3
 8003cec:	60a5      	str	r5, [r4, #8]
 8003cee:	9b01      	ldr	r3, [sp, #4]
 8003cf0:	42b3      	cmp	r3, r6
 8003cf2:	d200      	bcs.n	8003cf6 <__ssputs_r+0x8e>
 8003cf4:	001e      	movs	r6, r3
 8003cf6:	0032      	movs	r2, r6
 8003cf8:	9903      	ldr	r1, [sp, #12]
 8003cfa:	6820      	ldr	r0, [r4, #0]
 8003cfc:	f000 faad 	bl	800425a <memmove>
 8003d00:	68a3      	ldr	r3, [r4, #8]
 8003d02:	2000      	movs	r0, #0
 8003d04:	1b9b      	subs	r3, r3, r6
 8003d06:	60a3      	str	r3, [r4, #8]
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	199e      	adds	r6, r3, r6
 8003d0c:	6026      	str	r6, [r4, #0]
 8003d0e:	e7da      	b.n	8003cc6 <__ssputs_r+0x5e>
 8003d10:	002a      	movs	r2, r5
 8003d12:	0038      	movs	r0, r7
 8003d14:	f000 fb5c 	bl	80043d0 <_realloc_r>
 8003d18:	1e06      	subs	r6, r0, #0
 8003d1a:	d1e0      	bne.n	8003cde <__ssputs_r+0x76>
 8003d1c:	6921      	ldr	r1, [r4, #16]
 8003d1e:	0038      	movs	r0, r7
 8003d20:	f000 faae 	bl	8004280 <_free_r>
 8003d24:	e7c7      	b.n	8003cb6 <__ssputs_r+0x4e>
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	fffffb7f 	.word	0xfffffb7f

08003d2c <_svfiprintf_r>:
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	b09f      	sub	sp, #124	; 0x7c
 8003d30:	9002      	str	r0, [sp, #8]
 8003d32:	9305      	str	r3, [sp, #20]
 8003d34:	898b      	ldrh	r3, [r1, #12]
 8003d36:	000f      	movs	r7, r1
 8003d38:	0016      	movs	r6, r2
 8003d3a:	061b      	lsls	r3, r3, #24
 8003d3c:	d511      	bpl.n	8003d62 <_svfiprintf_r+0x36>
 8003d3e:	690b      	ldr	r3, [r1, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10e      	bne.n	8003d62 <_svfiprintf_r+0x36>
 8003d44:	2140      	movs	r1, #64	; 0x40
 8003d46:	f000 fae5 	bl	8004314 <_malloc_r>
 8003d4a:	6038      	str	r0, [r7, #0]
 8003d4c:	6138      	str	r0, [r7, #16]
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d105      	bne.n	8003d5e <_svfiprintf_r+0x32>
 8003d52:	230c      	movs	r3, #12
 8003d54:	9a02      	ldr	r2, [sp, #8]
 8003d56:	3801      	subs	r0, #1
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	b01f      	add	sp, #124	; 0x7c
 8003d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d5e:	2340      	movs	r3, #64	; 0x40
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	2300      	movs	r3, #0
 8003d64:	ad06      	add	r5, sp, #24
 8003d66:	616b      	str	r3, [r5, #20]
 8003d68:	3320      	adds	r3, #32
 8003d6a:	766b      	strb	r3, [r5, #25]
 8003d6c:	3310      	adds	r3, #16
 8003d6e:	76ab      	strb	r3, [r5, #26]
 8003d70:	0034      	movs	r4, r6
 8003d72:	7823      	ldrb	r3, [r4, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d147      	bne.n	8003e08 <_svfiprintf_r+0xdc>
 8003d78:	1ba3      	subs	r3, r4, r6
 8003d7a:	9304      	str	r3, [sp, #16]
 8003d7c:	d00d      	beq.n	8003d9a <_svfiprintf_r+0x6e>
 8003d7e:	1ba3      	subs	r3, r4, r6
 8003d80:	0032      	movs	r2, r6
 8003d82:	0039      	movs	r1, r7
 8003d84:	9802      	ldr	r0, [sp, #8]
 8003d86:	f7ff ff6f 	bl	8003c68 <__ssputs_r>
 8003d8a:	1c43      	adds	r3, r0, #1
 8003d8c:	d100      	bne.n	8003d90 <_svfiprintf_r+0x64>
 8003d8e:	e0b5      	b.n	8003efc <_svfiprintf_r+0x1d0>
 8003d90:	696a      	ldr	r2, [r5, #20]
 8003d92:	9b04      	ldr	r3, [sp, #16]
 8003d94:	4694      	mov	ip, r2
 8003d96:	4463      	add	r3, ip
 8003d98:	616b      	str	r3, [r5, #20]
 8003d9a:	7823      	ldrb	r3, [r4, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d100      	bne.n	8003da2 <_svfiprintf_r+0x76>
 8003da0:	e0ac      	b.n	8003efc <_svfiprintf_r+0x1d0>
 8003da2:	2201      	movs	r2, #1
 8003da4:	2300      	movs	r3, #0
 8003da6:	4252      	negs	r2, r2
 8003da8:	606a      	str	r2, [r5, #4]
 8003daa:	a902      	add	r1, sp, #8
 8003dac:	3254      	adds	r2, #84	; 0x54
 8003dae:	1852      	adds	r2, r2, r1
 8003db0:	3401      	adds	r4, #1
 8003db2:	602b      	str	r3, [r5, #0]
 8003db4:	60eb      	str	r3, [r5, #12]
 8003db6:	60ab      	str	r3, [r5, #8]
 8003db8:	7013      	strb	r3, [r2, #0]
 8003dba:	65ab      	str	r3, [r5, #88]	; 0x58
 8003dbc:	4e58      	ldr	r6, [pc, #352]	; (8003f20 <_svfiprintf_r+0x1f4>)
 8003dbe:	2205      	movs	r2, #5
 8003dc0:	7821      	ldrb	r1, [r4, #0]
 8003dc2:	0030      	movs	r0, r6
 8003dc4:	f000 fa3e 	bl	8004244 <memchr>
 8003dc8:	1c62      	adds	r2, r4, #1
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	d120      	bne.n	8003e10 <_svfiprintf_r+0xe4>
 8003dce:	6829      	ldr	r1, [r5, #0]
 8003dd0:	06cb      	lsls	r3, r1, #27
 8003dd2:	d504      	bpl.n	8003dde <_svfiprintf_r+0xb2>
 8003dd4:	2353      	movs	r3, #83	; 0x53
 8003dd6:	ae02      	add	r6, sp, #8
 8003dd8:	3020      	adds	r0, #32
 8003dda:	199b      	adds	r3, r3, r6
 8003ddc:	7018      	strb	r0, [r3, #0]
 8003dde:	070b      	lsls	r3, r1, #28
 8003de0:	d504      	bpl.n	8003dec <_svfiprintf_r+0xc0>
 8003de2:	2353      	movs	r3, #83	; 0x53
 8003de4:	202b      	movs	r0, #43	; 0x2b
 8003de6:	ae02      	add	r6, sp, #8
 8003de8:	199b      	adds	r3, r3, r6
 8003dea:	7018      	strb	r0, [r3, #0]
 8003dec:	7823      	ldrb	r3, [r4, #0]
 8003dee:	2b2a      	cmp	r3, #42	; 0x2a
 8003df0:	d016      	beq.n	8003e20 <_svfiprintf_r+0xf4>
 8003df2:	2000      	movs	r0, #0
 8003df4:	210a      	movs	r1, #10
 8003df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003df8:	7822      	ldrb	r2, [r4, #0]
 8003dfa:	3a30      	subs	r2, #48	; 0x30
 8003dfc:	2a09      	cmp	r2, #9
 8003dfe:	d955      	bls.n	8003eac <_svfiprintf_r+0x180>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d015      	beq.n	8003e30 <_svfiprintf_r+0x104>
 8003e04:	9309      	str	r3, [sp, #36]	; 0x24
 8003e06:	e013      	b.n	8003e30 <_svfiprintf_r+0x104>
 8003e08:	2b25      	cmp	r3, #37	; 0x25
 8003e0a:	d0b5      	beq.n	8003d78 <_svfiprintf_r+0x4c>
 8003e0c:	3401      	adds	r4, #1
 8003e0e:	e7b0      	b.n	8003d72 <_svfiprintf_r+0x46>
 8003e10:	2301      	movs	r3, #1
 8003e12:	1b80      	subs	r0, r0, r6
 8003e14:	4083      	lsls	r3, r0
 8003e16:	6829      	ldr	r1, [r5, #0]
 8003e18:	0014      	movs	r4, r2
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	602b      	str	r3, [r5, #0]
 8003e1e:	e7cd      	b.n	8003dbc <_svfiprintf_r+0x90>
 8003e20:	9b05      	ldr	r3, [sp, #20]
 8003e22:	1d18      	adds	r0, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	9005      	str	r0, [sp, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	db39      	blt.n	8003ea0 <_svfiprintf_r+0x174>
 8003e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2e:	0014      	movs	r4, r2
 8003e30:	7823      	ldrb	r3, [r4, #0]
 8003e32:	2b2e      	cmp	r3, #46	; 0x2e
 8003e34:	d10b      	bne.n	8003e4e <_svfiprintf_r+0x122>
 8003e36:	7863      	ldrb	r3, [r4, #1]
 8003e38:	1c62      	adds	r2, r4, #1
 8003e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3c:	d13e      	bne.n	8003ebc <_svfiprintf_r+0x190>
 8003e3e:	9b05      	ldr	r3, [sp, #20]
 8003e40:	3402      	adds	r4, #2
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	9205      	str	r2, [sp, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	db34      	blt.n	8003eb6 <_svfiprintf_r+0x18a>
 8003e4c:	9307      	str	r3, [sp, #28]
 8003e4e:	4e35      	ldr	r6, [pc, #212]	; (8003f24 <_svfiprintf_r+0x1f8>)
 8003e50:	7821      	ldrb	r1, [r4, #0]
 8003e52:	2203      	movs	r2, #3
 8003e54:	0030      	movs	r0, r6
 8003e56:	f000 f9f5 	bl	8004244 <memchr>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d006      	beq.n	8003e6c <_svfiprintf_r+0x140>
 8003e5e:	2340      	movs	r3, #64	; 0x40
 8003e60:	1b80      	subs	r0, r0, r6
 8003e62:	4083      	lsls	r3, r0
 8003e64:	682a      	ldr	r2, [r5, #0]
 8003e66:	3401      	adds	r4, #1
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	602b      	str	r3, [r5, #0]
 8003e6c:	7821      	ldrb	r1, [r4, #0]
 8003e6e:	2206      	movs	r2, #6
 8003e70:	482d      	ldr	r0, [pc, #180]	; (8003f28 <_svfiprintf_r+0x1fc>)
 8003e72:	1c66      	adds	r6, r4, #1
 8003e74:	7629      	strb	r1, [r5, #24]
 8003e76:	f000 f9e5 	bl	8004244 <memchr>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d046      	beq.n	8003f0c <_svfiprintf_r+0x1e0>
 8003e7e:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <_svfiprintf_r+0x200>)
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d12f      	bne.n	8003ee4 <_svfiprintf_r+0x1b8>
 8003e84:	6829      	ldr	r1, [r5, #0]
 8003e86:	9b05      	ldr	r3, [sp, #20]
 8003e88:	2207      	movs	r2, #7
 8003e8a:	05c9      	lsls	r1, r1, #23
 8003e8c:	d528      	bpl.n	8003ee0 <_svfiprintf_r+0x1b4>
 8003e8e:	189b      	adds	r3, r3, r2
 8003e90:	4393      	bics	r3, r2
 8003e92:	3308      	adds	r3, #8
 8003e94:	9305      	str	r3, [sp, #20]
 8003e96:	696b      	ldr	r3, [r5, #20]
 8003e98:	9a03      	ldr	r2, [sp, #12]
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	616b      	str	r3, [r5, #20]
 8003e9e:	e767      	b.n	8003d70 <_svfiprintf_r+0x44>
 8003ea0:	425b      	negs	r3, r3
 8003ea2:	60eb      	str	r3, [r5, #12]
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	602b      	str	r3, [r5, #0]
 8003eaa:	e7c0      	b.n	8003e2e <_svfiprintf_r+0x102>
 8003eac:	434b      	muls	r3, r1
 8003eae:	3401      	adds	r4, #1
 8003eb0:	189b      	adds	r3, r3, r2
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	e7a0      	b.n	8003df8 <_svfiprintf_r+0xcc>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	425b      	negs	r3, r3
 8003eba:	e7c7      	b.n	8003e4c <_svfiprintf_r+0x120>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	0014      	movs	r4, r2
 8003ec0:	200a      	movs	r0, #10
 8003ec2:	001a      	movs	r2, r3
 8003ec4:	606b      	str	r3, [r5, #4]
 8003ec6:	7821      	ldrb	r1, [r4, #0]
 8003ec8:	3930      	subs	r1, #48	; 0x30
 8003eca:	2909      	cmp	r1, #9
 8003ecc:	d903      	bls.n	8003ed6 <_svfiprintf_r+0x1aa>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0bd      	beq.n	8003e4e <_svfiprintf_r+0x122>
 8003ed2:	9207      	str	r2, [sp, #28]
 8003ed4:	e7bb      	b.n	8003e4e <_svfiprintf_r+0x122>
 8003ed6:	4342      	muls	r2, r0
 8003ed8:	3401      	adds	r4, #1
 8003eda:	1852      	adds	r2, r2, r1
 8003edc:	2301      	movs	r3, #1
 8003ede:	e7f2      	b.n	8003ec6 <_svfiprintf_r+0x19a>
 8003ee0:	3307      	adds	r3, #7
 8003ee2:	e7d5      	b.n	8003e90 <_svfiprintf_r+0x164>
 8003ee4:	ab05      	add	r3, sp, #20
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	003a      	movs	r2, r7
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <_svfiprintf_r+0x204>)
 8003eec:	0029      	movs	r1, r5
 8003eee:	9802      	ldr	r0, [sp, #8]
 8003ef0:	e000      	b.n	8003ef4 <_svfiprintf_r+0x1c8>
 8003ef2:	bf00      	nop
 8003ef4:	9003      	str	r0, [sp, #12]
 8003ef6:	9b03      	ldr	r3, [sp, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	d1cc      	bne.n	8003e96 <_svfiprintf_r+0x16a>
 8003efc:	89bb      	ldrh	r3, [r7, #12]
 8003efe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003f00:	065b      	lsls	r3, r3, #25
 8003f02:	d400      	bmi.n	8003f06 <_svfiprintf_r+0x1da>
 8003f04:	e729      	b.n	8003d5a <_svfiprintf_r+0x2e>
 8003f06:	2001      	movs	r0, #1
 8003f08:	4240      	negs	r0, r0
 8003f0a:	e726      	b.n	8003d5a <_svfiprintf_r+0x2e>
 8003f0c:	ab05      	add	r3, sp, #20
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	003a      	movs	r2, r7
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <_svfiprintf_r+0x204>)
 8003f14:	0029      	movs	r1, r5
 8003f16:	9802      	ldr	r0, [sp, #8]
 8003f18:	f000 f87a 	bl	8004010 <_printf_i>
 8003f1c:	e7ea      	b.n	8003ef4 <_svfiprintf_r+0x1c8>
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	0800455b 	.word	0x0800455b
 8003f24:	08004561 	.word	0x08004561
 8003f28:	08004565 	.word	0x08004565
 8003f2c:	00000000 	.word	0x00000000
 8003f30:	08003c69 	.word	0x08003c69

08003f34 <_printf_common>:
 8003f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f36:	0015      	movs	r5, r2
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	688a      	ldr	r2, [r1, #8]
 8003f3c:	690b      	ldr	r3, [r1, #16]
 8003f3e:	9000      	str	r0, [sp, #0]
 8003f40:	000c      	movs	r4, r1
 8003f42:	4293      	cmp	r3, r2
 8003f44:	da00      	bge.n	8003f48 <_printf_common+0x14>
 8003f46:	0013      	movs	r3, r2
 8003f48:	0022      	movs	r2, r4
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	3243      	adds	r2, #67	; 0x43
 8003f4e:	7812      	ldrb	r2, [r2, #0]
 8003f50:	2a00      	cmp	r2, #0
 8003f52:	d001      	beq.n	8003f58 <_printf_common+0x24>
 8003f54:	3301      	adds	r3, #1
 8003f56:	602b      	str	r3, [r5, #0]
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	069b      	lsls	r3, r3, #26
 8003f5c:	d502      	bpl.n	8003f64 <_printf_common+0x30>
 8003f5e:	682b      	ldr	r3, [r5, #0]
 8003f60:	3302      	adds	r3, #2
 8003f62:	602b      	str	r3, [r5, #0]
 8003f64:	2706      	movs	r7, #6
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	401f      	ands	r7, r3
 8003f6a:	d027      	beq.n	8003fbc <_printf_common+0x88>
 8003f6c:	0023      	movs	r3, r4
 8003f6e:	3343      	adds	r3, #67	; 0x43
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	1e5a      	subs	r2, r3, #1
 8003f74:	4193      	sbcs	r3, r2
 8003f76:	6822      	ldr	r2, [r4, #0]
 8003f78:	0692      	lsls	r2, r2, #26
 8003f7a:	d430      	bmi.n	8003fde <_printf_common+0xaa>
 8003f7c:	0022      	movs	r2, r4
 8003f7e:	9901      	ldr	r1, [sp, #4]
 8003f80:	3243      	adds	r2, #67	; 0x43
 8003f82:	9800      	ldr	r0, [sp, #0]
 8003f84:	9e08      	ldr	r6, [sp, #32]
 8003f86:	47b0      	blx	r6
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d025      	beq.n	8003fd8 <_printf_common+0xa4>
 8003f8c:	2306      	movs	r3, #6
 8003f8e:	6820      	ldr	r0, [r4, #0]
 8003f90:	682a      	ldr	r2, [r5, #0]
 8003f92:	68e1      	ldr	r1, [r4, #12]
 8003f94:	4003      	ands	r3, r0
 8003f96:	2500      	movs	r5, #0
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d103      	bne.n	8003fa4 <_printf_common+0x70>
 8003f9c:	1a8d      	subs	r5, r1, r2
 8003f9e:	43eb      	mvns	r3, r5
 8003fa0:	17db      	asrs	r3, r3, #31
 8003fa2:	401d      	ands	r5, r3
 8003fa4:	68a3      	ldr	r3, [r4, #8]
 8003fa6:	6922      	ldr	r2, [r4, #16]
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	dd01      	ble.n	8003fb0 <_printf_common+0x7c>
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	18ed      	adds	r5, r5, r3
 8003fb0:	2700      	movs	r7, #0
 8003fb2:	42bd      	cmp	r5, r7
 8003fb4:	d120      	bne.n	8003ff8 <_printf_common+0xc4>
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	e010      	b.n	8003fdc <_printf_common+0xa8>
 8003fba:	3701      	adds	r7, #1
 8003fbc:	68e3      	ldr	r3, [r4, #12]
 8003fbe:	682a      	ldr	r2, [r5, #0]
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	429f      	cmp	r7, r3
 8003fc4:	dad2      	bge.n	8003f6c <_printf_common+0x38>
 8003fc6:	0022      	movs	r2, r4
 8003fc8:	2301      	movs	r3, #1
 8003fca:	3219      	adds	r2, #25
 8003fcc:	9901      	ldr	r1, [sp, #4]
 8003fce:	9800      	ldr	r0, [sp, #0]
 8003fd0:	9e08      	ldr	r6, [sp, #32]
 8003fd2:	47b0      	blx	r6
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d1f0      	bne.n	8003fba <_printf_common+0x86>
 8003fd8:	2001      	movs	r0, #1
 8003fda:	4240      	negs	r0, r0
 8003fdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fde:	2030      	movs	r0, #48	; 0x30
 8003fe0:	18e1      	adds	r1, r4, r3
 8003fe2:	3143      	adds	r1, #67	; 0x43
 8003fe4:	7008      	strb	r0, [r1, #0]
 8003fe6:	0021      	movs	r1, r4
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	3145      	adds	r1, #69	; 0x45
 8003fec:	7809      	ldrb	r1, [r1, #0]
 8003fee:	18a2      	adds	r2, r4, r2
 8003ff0:	3243      	adds	r2, #67	; 0x43
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	7011      	strb	r1, [r2, #0]
 8003ff6:	e7c1      	b.n	8003f7c <_printf_common+0x48>
 8003ff8:	0022      	movs	r2, r4
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	321a      	adds	r2, #26
 8003ffe:	9901      	ldr	r1, [sp, #4]
 8004000:	9800      	ldr	r0, [sp, #0]
 8004002:	9e08      	ldr	r6, [sp, #32]
 8004004:	47b0      	blx	r6
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	d0e6      	beq.n	8003fd8 <_printf_common+0xa4>
 800400a:	3701      	adds	r7, #1
 800400c:	e7d1      	b.n	8003fb2 <_printf_common+0x7e>
	...

08004010 <_printf_i>:
 8004010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004012:	b08b      	sub	sp, #44	; 0x2c
 8004014:	9206      	str	r2, [sp, #24]
 8004016:	000a      	movs	r2, r1
 8004018:	3243      	adds	r2, #67	; 0x43
 800401a:	9307      	str	r3, [sp, #28]
 800401c:	9005      	str	r0, [sp, #20]
 800401e:	9204      	str	r2, [sp, #16]
 8004020:	7e0a      	ldrb	r2, [r1, #24]
 8004022:	000c      	movs	r4, r1
 8004024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004026:	2a6e      	cmp	r2, #110	; 0x6e
 8004028:	d100      	bne.n	800402c <_printf_i+0x1c>
 800402a:	e08f      	b.n	800414c <_printf_i+0x13c>
 800402c:	d817      	bhi.n	800405e <_printf_i+0x4e>
 800402e:	2a63      	cmp	r2, #99	; 0x63
 8004030:	d02c      	beq.n	800408c <_printf_i+0x7c>
 8004032:	d808      	bhi.n	8004046 <_printf_i+0x36>
 8004034:	2a00      	cmp	r2, #0
 8004036:	d100      	bne.n	800403a <_printf_i+0x2a>
 8004038:	e099      	b.n	800416e <_printf_i+0x15e>
 800403a:	2a58      	cmp	r2, #88	; 0x58
 800403c:	d054      	beq.n	80040e8 <_printf_i+0xd8>
 800403e:	0026      	movs	r6, r4
 8004040:	3642      	adds	r6, #66	; 0x42
 8004042:	7032      	strb	r2, [r6, #0]
 8004044:	e029      	b.n	800409a <_printf_i+0x8a>
 8004046:	2a64      	cmp	r2, #100	; 0x64
 8004048:	d001      	beq.n	800404e <_printf_i+0x3e>
 800404a:	2a69      	cmp	r2, #105	; 0x69
 800404c:	d1f7      	bne.n	800403e <_printf_i+0x2e>
 800404e:	6821      	ldr	r1, [r4, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	0608      	lsls	r0, r1, #24
 8004054:	d523      	bpl.n	800409e <_printf_i+0x8e>
 8004056:	1d11      	adds	r1, r2, #4
 8004058:	6019      	str	r1, [r3, #0]
 800405a:	6815      	ldr	r5, [r2, #0]
 800405c:	e025      	b.n	80040aa <_printf_i+0x9a>
 800405e:	2a73      	cmp	r2, #115	; 0x73
 8004060:	d100      	bne.n	8004064 <_printf_i+0x54>
 8004062:	e088      	b.n	8004176 <_printf_i+0x166>
 8004064:	d808      	bhi.n	8004078 <_printf_i+0x68>
 8004066:	2a6f      	cmp	r2, #111	; 0x6f
 8004068:	d029      	beq.n	80040be <_printf_i+0xae>
 800406a:	2a70      	cmp	r2, #112	; 0x70
 800406c:	d1e7      	bne.n	800403e <_printf_i+0x2e>
 800406e:	2220      	movs	r2, #32
 8004070:	6809      	ldr	r1, [r1, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	6022      	str	r2, [r4, #0]
 8004076:	e003      	b.n	8004080 <_printf_i+0x70>
 8004078:	2a75      	cmp	r2, #117	; 0x75
 800407a:	d020      	beq.n	80040be <_printf_i+0xae>
 800407c:	2a78      	cmp	r2, #120	; 0x78
 800407e:	d1de      	bne.n	800403e <_printf_i+0x2e>
 8004080:	0022      	movs	r2, r4
 8004082:	2178      	movs	r1, #120	; 0x78
 8004084:	3245      	adds	r2, #69	; 0x45
 8004086:	7011      	strb	r1, [r2, #0]
 8004088:	4a6c      	ldr	r2, [pc, #432]	; (800423c <_printf_i+0x22c>)
 800408a:	e030      	b.n	80040ee <_printf_i+0xde>
 800408c:	000e      	movs	r6, r1
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	3642      	adds	r6, #66	; 0x42
 8004092:	1d11      	adds	r1, r2, #4
 8004094:	6019      	str	r1, [r3, #0]
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	7033      	strb	r3, [r6, #0]
 800409a:	2301      	movs	r3, #1
 800409c:	e079      	b.n	8004192 <_printf_i+0x182>
 800409e:	0649      	lsls	r1, r1, #25
 80040a0:	d5d9      	bpl.n	8004056 <_printf_i+0x46>
 80040a2:	1d11      	adds	r1, r2, #4
 80040a4:	6019      	str	r1, [r3, #0]
 80040a6:	2300      	movs	r3, #0
 80040a8:	5ed5      	ldrsh	r5, [r2, r3]
 80040aa:	2d00      	cmp	r5, #0
 80040ac:	da03      	bge.n	80040b6 <_printf_i+0xa6>
 80040ae:	232d      	movs	r3, #45	; 0x2d
 80040b0:	9a04      	ldr	r2, [sp, #16]
 80040b2:	426d      	negs	r5, r5
 80040b4:	7013      	strb	r3, [r2, #0]
 80040b6:	4b62      	ldr	r3, [pc, #392]	; (8004240 <_printf_i+0x230>)
 80040b8:	270a      	movs	r7, #10
 80040ba:	9303      	str	r3, [sp, #12]
 80040bc:	e02f      	b.n	800411e <_printf_i+0x10e>
 80040be:	6820      	ldr	r0, [r4, #0]
 80040c0:	6819      	ldr	r1, [r3, #0]
 80040c2:	0605      	lsls	r5, r0, #24
 80040c4:	d503      	bpl.n	80040ce <_printf_i+0xbe>
 80040c6:	1d08      	adds	r0, r1, #4
 80040c8:	6018      	str	r0, [r3, #0]
 80040ca:	680d      	ldr	r5, [r1, #0]
 80040cc:	e005      	b.n	80040da <_printf_i+0xca>
 80040ce:	0640      	lsls	r0, r0, #25
 80040d0:	d5f9      	bpl.n	80040c6 <_printf_i+0xb6>
 80040d2:	680d      	ldr	r5, [r1, #0]
 80040d4:	1d08      	adds	r0, r1, #4
 80040d6:	6018      	str	r0, [r3, #0]
 80040d8:	b2ad      	uxth	r5, r5
 80040da:	4b59      	ldr	r3, [pc, #356]	; (8004240 <_printf_i+0x230>)
 80040dc:	2708      	movs	r7, #8
 80040de:	9303      	str	r3, [sp, #12]
 80040e0:	2a6f      	cmp	r2, #111	; 0x6f
 80040e2:	d018      	beq.n	8004116 <_printf_i+0x106>
 80040e4:	270a      	movs	r7, #10
 80040e6:	e016      	b.n	8004116 <_printf_i+0x106>
 80040e8:	3145      	adds	r1, #69	; 0x45
 80040ea:	700a      	strb	r2, [r1, #0]
 80040ec:	4a54      	ldr	r2, [pc, #336]	; (8004240 <_printf_i+0x230>)
 80040ee:	9203      	str	r2, [sp, #12]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	6821      	ldr	r1, [r4, #0]
 80040f4:	1d10      	adds	r0, r2, #4
 80040f6:	6018      	str	r0, [r3, #0]
 80040f8:	6815      	ldr	r5, [r2, #0]
 80040fa:	0608      	lsls	r0, r1, #24
 80040fc:	d522      	bpl.n	8004144 <_printf_i+0x134>
 80040fe:	07cb      	lsls	r3, r1, #31
 8004100:	d502      	bpl.n	8004108 <_printf_i+0xf8>
 8004102:	2320      	movs	r3, #32
 8004104:	4319      	orrs	r1, r3
 8004106:	6021      	str	r1, [r4, #0]
 8004108:	2710      	movs	r7, #16
 800410a:	2d00      	cmp	r5, #0
 800410c:	d103      	bne.n	8004116 <_printf_i+0x106>
 800410e:	2320      	movs	r3, #32
 8004110:	6822      	ldr	r2, [r4, #0]
 8004112:	439a      	bics	r2, r3
 8004114:	6022      	str	r2, [r4, #0]
 8004116:	0023      	movs	r3, r4
 8004118:	2200      	movs	r2, #0
 800411a:	3343      	adds	r3, #67	; 0x43
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	6863      	ldr	r3, [r4, #4]
 8004120:	60a3      	str	r3, [r4, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	db5c      	blt.n	80041e0 <_printf_i+0x1d0>
 8004126:	2204      	movs	r2, #4
 8004128:	6821      	ldr	r1, [r4, #0]
 800412a:	4391      	bics	r1, r2
 800412c:	6021      	str	r1, [r4, #0]
 800412e:	2d00      	cmp	r5, #0
 8004130:	d158      	bne.n	80041e4 <_printf_i+0x1d4>
 8004132:	9e04      	ldr	r6, [sp, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d064      	beq.n	8004202 <_printf_i+0x1f2>
 8004138:	0026      	movs	r6, r4
 800413a:	9b03      	ldr	r3, [sp, #12]
 800413c:	3642      	adds	r6, #66	; 0x42
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	7033      	strb	r3, [r6, #0]
 8004142:	e05e      	b.n	8004202 <_printf_i+0x1f2>
 8004144:	0648      	lsls	r0, r1, #25
 8004146:	d5da      	bpl.n	80040fe <_printf_i+0xee>
 8004148:	b2ad      	uxth	r5, r5
 800414a:	e7d8      	b.n	80040fe <_printf_i+0xee>
 800414c:	6809      	ldr	r1, [r1, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	0608      	lsls	r0, r1, #24
 8004152:	d505      	bpl.n	8004160 <_printf_i+0x150>
 8004154:	1d11      	adds	r1, r2, #4
 8004156:	6019      	str	r1, [r3, #0]
 8004158:	6813      	ldr	r3, [r2, #0]
 800415a:	6962      	ldr	r2, [r4, #20]
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e006      	b.n	800416e <_printf_i+0x15e>
 8004160:	0649      	lsls	r1, r1, #25
 8004162:	d5f7      	bpl.n	8004154 <_printf_i+0x144>
 8004164:	1d11      	adds	r1, r2, #4
 8004166:	6019      	str	r1, [r3, #0]
 8004168:	6813      	ldr	r3, [r2, #0]
 800416a:	8aa2      	ldrh	r2, [r4, #20]
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	2300      	movs	r3, #0
 8004170:	9e04      	ldr	r6, [sp, #16]
 8004172:	6123      	str	r3, [r4, #16]
 8004174:	e054      	b.n	8004220 <_printf_i+0x210>
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	1d11      	adds	r1, r2, #4
 800417a:	6019      	str	r1, [r3, #0]
 800417c:	6816      	ldr	r6, [r2, #0]
 800417e:	2100      	movs	r1, #0
 8004180:	6862      	ldr	r2, [r4, #4]
 8004182:	0030      	movs	r0, r6
 8004184:	f000 f85e 	bl	8004244 <memchr>
 8004188:	2800      	cmp	r0, #0
 800418a:	d001      	beq.n	8004190 <_printf_i+0x180>
 800418c:	1b80      	subs	r0, r0, r6
 800418e:	6060      	str	r0, [r4, #4]
 8004190:	6863      	ldr	r3, [r4, #4]
 8004192:	6123      	str	r3, [r4, #16]
 8004194:	2300      	movs	r3, #0
 8004196:	9a04      	ldr	r2, [sp, #16]
 8004198:	7013      	strb	r3, [r2, #0]
 800419a:	e041      	b.n	8004220 <_printf_i+0x210>
 800419c:	6923      	ldr	r3, [r4, #16]
 800419e:	0032      	movs	r2, r6
 80041a0:	9906      	ldr	r1, [sp, #24]
 80041a2:	9805      	ldr	r0, [sp, #20]
 80041a4:	9d07      	ldr	r5, [sp, #28]
 80041a6:	47a8      	blx	r5
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d043      	beq.n	8004234 <_printf_i+0x224>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	2500      	movs	r5, #0
 80041b0:	079b      	lsls	r3, r3, #30
 80041b2:	d40f      	bmi.n	80041d4 <_printf_i+0x1c4>
 80041b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b6:	68e0      	ldr	r0, [r4, #12]
 80041b8:	4298      	cmp	r0, r3
 80041ba:	da3d      	bge.n	8004238 <_printf_i+0x228>
 80041bc:	0018      	movs	r0, r3
 80041be:	e03b      	b.n	8004238 <_printf_i+0x228>
 80041c0:	0022      	movs	r2, r4
 80041c2:	2301      	movs	r3, #1
 80041c4:	3219      	adds	r2, #25
 80041c6:	9906      	ldr	r1, [sp, #24]
 80041c8:	9805      	ldr	r0, [sp, #20]
 80041ca:	9e07      	ldr	r6, [sp, #28]
 80041cc:	47b0      	blx	r6
 80041ce:	1c43      	adds	r3, r0, #1
 80041d0:	d030      	beq.n	8004234 <_printf_i+0x224>
 80041d2:	3501      	adds	r5, #1
 80041d4:	68e3      	ldr	r3, [r4, #12]
 80041d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	429d      	cmp	r5, r3
 80041dc:	dbf0      	blt.n	80041c0 <_printf_i+0x1b0>
 80041de:	e7e9      	b.n	80041b4 <_printf_i+0x1a4>
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	d0a9      	beq.n	8004138 <_printf_i+0x128>
 80041e4:	9e04      	ldr	r6, [sp, #16]
 80041e6:	0028      	movs	r0, r5
 80041e8:	0039      	movs	r1, r7
 80041ea:	f7fc f82f 	bl	800024c <__aeabi_uidivmod>
 80041ee:	9b03      	ldr	r3, [sp, #12]
 80041f0:	3e01      	subs	r6, #1
 80041f2:	5c5b      	ldrb	r3, [r3, r1]
 80041f4:	0028      	movs	r0, r5
 80041f6:	7033      	strb	r3, [r6, #0]
 80041f8:	0039      	movs	r1, r7
 80041fa:	f7fb ffa1 	bl	8000140 <__udivsi3>
 80041fe:	1e05      	subs	r5, r0, #0
 8004200:	d1f1      	bne.n	80041e6 <_printf_i+0x1d6>
 8004202:	2f08      	cmp	r7, #8
 8004204:	d109      	bne.n	800421a <_printf_i+0x20a>
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	07db      	lsls	r3, r3, #31
 800420a:	d506      	bpl.n	800421a <_printf_i+0x20a>
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	6922      	ldr	r2, [r4, #16]
 8004210:	4293      	cmp	r3, r2
 8004212:	dc02      	bgt.n	800421a <_printf_i+0x20a>
 8004214:	2330      	movs	r3, #48	; 0x30
 8004216:	3e01      	subs	r6, #1
 8004218:	7033      	strb	r3, [r6, #0]
 800421a:	9b04      	ldr	r3, [sp, #16]
 800421c:	1b9b      	subs	r3, r3, r6
 800421e:	6123      	str	r3, [r4, #16]
 8004220:	9b07      	ldr	r3, [sp, #28]
 8004222:	aa09      	add	r2, sp, #36	; 0x24
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	0021      	movs	r1, r4
 8004228:	9b06      	ldr	r3, [sp, #24]
 800422a:	9805      	ldr	r0, [sp, #20]
 800422c:	f7ff fe82 	bl	8003f34 <_printf_common>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d1b3      	bne.n	800419c <_printf_i+0x18c>
 8004234:	2001      	movs	r0, #1
 8004236:	4240      	negs	r0, r0
 8004238:	b00b      	add	sp, #44	; 0x2c
 800423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423c:	0800457d 	.word	0x0800457d
 8004240:	0800456c 	.word	0x0800456c

08004244 <memchr>:
 8004244:	b2c9      	uxtb	r1, r1
 8004246:	1882      	adds	r2, r0, r2
 8004248:	4290      	cmp	r0, r2
 800424a:	d101      	bne.n	8004250 <memchr+0xc>
 800424c:	2000      	movs	r0, #0
 800424e:	4770      	bx	lr
 8004250:	7803      	ldrb	r3, [r0, #0]
 8004252:	428b      	cmp	r3, r1
 8004254:	d0fb      	beq.n	800424e <memchr+0xa>
 8004256:	3001      	adds	r0, #1
 8004258:	e7f6      	b.n	8004248 <memchr+0x4>

0800425a <memmove>:
 800425a:	b510      	push	{r4, lr}
 800425c:	4288      	cmp	r0, r1
 800425e:	d902      	bls.n	8004266 <memmove+0xc>
 8004260:	188b      	adds	r3, r1, r2
 8004262:	4298      	cmp	r0, r3
 8004264:	d308      	bcc.n	8004278 <memmove+0x1e>
 8004266:	2300      	movs	r3, #0
 8004268:	429a      	cmp	r2, r3
 800426a:	d007      	beq.n	800427c <memmove+0x22>
 800426c:	5ccc      	ldrb	r4, [r1, r3]
 800426e:	54c4      	strb	r4, [r0, r3]
 8004270:	3301      	adds	r3, #1
 8004272:	e7f9      	b.n	8004268 <memmove+0xe>
 8004274:	5c8b      	ldrb	r3, [r1, r2]
 8004276:	5483      	strb	r3, [r0, r2]
 8004278:	3a01      	subs	r2, #1
 800427a:	d2fb      	bcs.n	8004274 <memmove+0x1a>
 800427c:	bd10      	pop	{r4, pc}
	...

08004280 <_free_r>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	0005      	movs	r5, r0
 8004284:	2900      	cmp	r1, #0
 8004286:	d010      	beq.n	80042aa <_free_r+0x2a>
 8004288:	1f0c      	subs	r4, r1, #4
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	da00      	bge.n	8004292 <_free_r+0x12>
 8004290:	18e4      	adds	r4, r4, r3
 8004292:	0028      	movs	r0, r5
 8004294:	f000 f8d4 	bl	8004440 <__malloc_lock>
 8004298:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <_free_r+0x90>)
 800429a:	6813      	ldr	r3, [r2, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <_free_r+0x2c>
 80042a0:	6063      	str	r3, [r4, #4]
 80042a2:	6014      	str	r4, [r2, #0]
 80042a4:	0028      	movs	r0, r5
 80042a6:	f000 f8cc 	bl	8004442 <__malloc_unlock>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	42a3      	cmp	r3, r4
 80042ae:	d909      	bls.n	80042c4 <_free_r+0x44>
 80042b0:	6821      	ldr	r1, [r4, #0]
 80042b2:	1860      	adds	r0, r4, r1
 80042b4:	4283      	cmp	r3, r0
 80042b6:	d1f3      	bne.n	80042a0 <_free_r+0x20>
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	1841      	adds	r1, r0, r1
 80042be:	6021      	str	r1, [r4, #0]
 80042c0:	e7ee      	b.n	80042a0 <_free_r+0x20>
 80042c2:	0013      	movs	r3, r2
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	2a00      	cmp	r2, #0
 80042c8:	d001      	beq.n	80042ce <_free_r+0x4e>
 80042ca:	42a2      	cmp	r2, r4
 80042cc:	d9f9      	bls.n	80042c2 <_free_r+0x42>
 80042ce:	6819      	ldr	r1, [r3, #0]
 80042d0:	1858      	adds	r0, r3, r1
 80042d2:	42a0      	cmp	r0, r4
 80042d4:	d10b      	bne.n	80042ee <_free_r+0x6e>
 80042d6:	6820      	ldr	r0, [r4, #0]
 80042d8:	1809      	adds	r1, r1, r0
 80042da:	1858      	adds	r0, r3, r1
 80042dc:	6019      	str	r1, [r3, #0]
 80042de:	4282      	cmp	r2, r0
 80042e0:	d1e0      	bne.n	80042a4 <_free_r+0x24>
 80042e2:	6810      	ldr	r0, [r2, #0]
 80042e4:	6852      	ldr	r2, [r2, #4]
 80042e6:	1841      	adds	r1, r0, r1
 80042e8:	6019      	str	r1, [r3, #0]
 80042ea:	605a      	str	r2, [r3, #4]
 80042ec:	e7da      	b.n	80042a4 <_free_r+0x24>
 80042ee:	42a0      	cmp	r0, r4
 80042f0:	d902      	bls.n	80042f8 <_free_r+0x78>
 80042f2:	230c      	movs	r3, #12
 80042f4:	602b      	str	r3, [r5, #0]
 80042f6:	e7d5      	b.n	80042a4 <_free_r+0x24>
 80042f8:	6821      	ldr	r1, [r4, #0]
 80042fa:	1860      	adds	r0, r4, r1
 80042fc:	4282      	cmp	r2, r0
 80042fe:	d103      	bne.n	8004308 <_free_r+0x88>
 8004300:	6810      	ldr	r0, [r2, #0]
 8004302:	6852      	ldr	r2, [r2, #4]
 8004304:	1841      	adds	r1, r0, r1
 8004306:	6021      	str	r1, [r4, #0]
 8004308:	6062      	str	r2, [r4, #4]
 800430a:	605c      	str	r4, [r3, #4]
 800430c:	e7ca      	b.n	80042a4 <_free_r+0x24>
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	200000d8 	.word	0x200000d8

08004314 <_malloc_r>:
 8004314:	2303      	movs	r3, #3
 8004316:	b570      	push	{r4, r5, r6, lr}
 8004318:	1ccd      	adds	r5, r1, #3
 800431a:	439d      	bics	r5, r3
 800431c:	3508      	adds	r5, #8
 800431e:	0006      	movs	r6, r0
 8004320:	2d0c      	cmp	r5, #12
 8004322:	d21e      	bcs.n	8004362 <_malloc_r+0x4e>
 8004324:	250c      	movs	r5, #12
 8004326:	42a9      	cmp	r1, r5
 8004328:	d81d      	bhi.n	8004366 <_malloc_r+0x52>
 800432a:	0030      	movs	r0, r6
 800432c:	f000 f888 	bl	8004440 <__malloc_lock>
 8004330:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <_malloc_r+0xb4>)
 8004332:	6814      	ldr	r4, [r2, #0]
 8004334:	0021      	movs	r1, r4
 8004336:	2900      	cmp	r1, #0
 8004338:	d119      	bne.n	800436e <_malloc_r+0x5a>
 800433a:	4c24      	ldr	r4, [pc, #144]	; (80043cc <_malloc_r+0xb8>)
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <_malloc_r+0x36>
 8004342:	0030      	movs	r0, r6
 8004344:	f000 f86a 	bl	800441c <_sbrk_r>
 8004348:	6020      	str	r0, [r4, #0]
 800434a:	0029      	movs	r1, r5
 800434c:	0030      	movs	r0, r6
 800434e:	f000 f865 	bl	800441c <_sbrk_r>
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	d12c      	bne.n	80043b0 <_malloc_r+0x9c>
 8004356:	230c      	movs	r3, #12
 8004358:	0030      	movs	r0, r6
 800435a:	6033      	str	r3, [r6, #0]
 800435c:	f000 f871 	bl	8004442 <__malloc_unlock>
 8004360:	e003      	b.n	800436a <_malloc_r+0x56>
 8004362:	2d00      	cmp	r5, #0
 8004364:	dadf      	bge.n	8004326 <_malloc_r+0x12>
 8004366:	230c      	movs	r3, #12
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	2000      	movs	r0, #0
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	680b      	ldr	r3, [r1, #0]
 8004370:	1b5b      	subs	r3, r3, r5
 8004372:	d41a      	bmi.n	80043aa <_malloc_r+0x96>
 8004374:	2b0b      	cmp	r3, #11
 8004376:	d903      	bls.n	8004380 <_malloc_r+0x6c>
 8004378:	600b      	str	r3, [r1, #0]
 800437a:	18cc      	adds	r4, r1, r3
 800437c:	6025      	str	r5, [r4, #0]
 800437e:	e003      	b.n	8004388 <_malloc_r+0x74>
 8004380:	428c      	cmp	r4, r1
 8004382:	d10e      	bne.n	80043a2 <_malloc_r+0x8e>
 8004384:	6863      	ldr	r3, [r4, #4]
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	0030      	movs	r0, r6
 800438a:	f000 f85a 	bl	8004442 <__malloc_unlock>
 800438e:	0020      	movs	r0, r4
 8004390:	2207      	movs	r2, #7
 8004392:	300b      	adds	r0, #11
 8004394:	1d23      	adds	r3, r4, #4
 8004396:	4390      	bics	r0, r2
 8004398:	1ac3      	subs	r3, r0, r3
 800439a:	d0e7      	beq.n	800436c <_malloc_r+0x58>
 800439c:	425a      	negs	r2, r3
 800439e:	50e2      	str	r2, [r4, r3]
 80043a0:	e7e4      	b.n	800436c <_malloc_r+0x58>
 80043a2:	684b      	ldr	r3, [r1, #4]
 80043a4:	6063      	str	r3, [r4, #4]
 80043a6:	000c      	movs	r4, r1
 80043a8:	e7ee      	b.n	8004388 <_malloc_r+0x74>
 80043aa:	000c      	movs	r4, r1
 80043ac:	6849      	ldr	r1, [r1, #4]
 80043ae:	e7c2      	b.n	8004336 <_malloc_r+0x22>
 80043b0:	2303      	movs	r3, #3
 80043b2:	1cc4      	adds	r4, r0, #3
 80043b4:	439c      	bics	r4, r3
 80043b6:	42a0      	cmp	r0, r4
 80043b8:	d0e0      	beq.n	800437c <_malloc_r+0x68>
 80043ba:	1a21      	subs	r1, r4, r0
 80043bc:	0030      	movs	r0, r6
 80043be:	f000 f82d 	bl	800441c <_sbrk_r>
 80043c2:	1c43      	adds	r3, r0, #1
 80043c4:	d1da      	bne.n	800437c <_malloc_r+0x68>
 80043c6:	e7c6      	b.n	8004356 <_malloc_r+0x42>
 80043c8:	200000d8 	.word	0x200000d8
 80043cc:	200000dc 	.word	0x200000dc

080043d0 <_realloc_r>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	0007      	movs	r7, r0
 80043d4:	000d      	movs	r5, r1
 80043d6:	0016      	movs	r6, r2
 80043d8:	2900      	cmp	r1, #0
 80043da:	d105      	bne.n	80043e8 <_realloc_r+0x18>
 80043dc:	0011      	movs	r1, r2
 80043de:	f7ff ff99 	bl	8004314 <_malloc_r>
 80043e2:	0004      	movs	r4, r0
 80043e4:	0020      	movs	r0, r4
 80043e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043e8:	2a00      	cmp	r2, #0
 80043ea:	d103      	bne.n	80043f4 <_realloc_r+0x24>
 80043ec:	f7ff ff48 	bl	8004280 <_free_r>
 80043f0:	0034      	movs	r4, r6
 80043f2:	e7f7      	b.n	80043e4 <_realloc_r+0x14>
 80043f4:	f000 f826 	bl	8004444 <_malloc_usable_size_r>
 80043f8:	002c      	movs	r4, r5
 80043fa:	4286      	cmp	r6, r0
 80043fc:	d9f2      	bls.n	80043e4 <_realloc_r+0x14>
 80043fe:	0031      	movs	r1, r6
 8004400:	0038      	movs	r0, r7
 8004402:	f7ff ff87 	bl	8004314 <_malloc_r>
 8004406:	1e04      	subs	r4, r0, #0
 8004408:	d0ec      	beq.n	80043e4 <_realloc_r+0x14>
 800440a:	0029      	movs	r1, r5
 800440c:	0032      	movs	r2, r6
 800440e:	f7ff fbf7 	bl	8003c00 <memcpy>
 8004412:	0029      	movs	r1, r5
 8004414:	0038      	movs	r0, r7
 8004416:	f7ff ff33 	bl	8004280 <_free_r>
 800441a:	e7e3      	b.n	80043e4 <_realloc_r+0x14>

0800441c <_sbrk_r>:
 800441c:	2300      	movs	r3, #0
 800441e:	b570      	push	{r4, r5, r6, lr}
 8004420:	4c06      	ldr	r4, [pc, #24]	; (800443c <_sbrk_r+0x20>)
 8004422:	0005      	movs	r5, r0
 8004424:	0008      	movs	r0, r1
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	f7ff fb62 	bl	8003af0 <_sbrk>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d103      	bne.n	8004438 <_sbrk_r+0x1c>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d000      	beq.n	8004438 <_sbrk_r+0x1c>
 8004436:	602b      	str	r3, [r5, #0]
 8004438:	bd70      	pop	{r4, r5, r6, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	20000f54 	.word	0x20000f54

08004440 <__malloc_lock>:
 8004440:	4770      	bx	lr

08004442 <__malloc_unlock>:
 8004442:	4770      	bx	lr

08004444 <_malloc_usable_size_r>:
 8004444:	1f0b      	subs	r3, r1, #4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	1f18      	subs	r0, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	da01      	bge.n	8004452 <_malloc_usable_size_r+0xe>
 800444e:	580b      	ldr	r3, [r1, r0]
 8004450:	18c0      	adds	r0, r0, r3
 8004452:	4770      	bx	lr

08004454 <_init>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445a:	bc08      	pop	{r3}
 800445c:	469e      	mov	lr, r3
 800445e:	4770      	bx	lr

08004460 <_fini>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004466:	bc08      	pop	{r3}
 8004468:	469e      	mov	lr, r3
 800446a:	4770      	bx	lr
