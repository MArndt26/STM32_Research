
10ADC_withLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000261c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080026dc  080026dc  000126dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027cc  080027cc  000127cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  080027d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001230  20000088  0800285c  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200012b8  0800285c  000212b8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d95b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026da  00000000  00000000  0002da0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a12  00000000  00000000  000300e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000930  00000000  00000000  00035af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cc0  00000000  00000000  00036428  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000054a0  00000000  00000000  000370e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003240  00000000  00000000  0003c588  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f7c8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cd0  00000000  00000000  0003f844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026c4 	.word	0x080026c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	080026c4 	.word	0x080026c4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800025c:	20fa      	movs	r0, #250	; 0xfa
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <HAL_InitTick+0x3c>)
 8000260:	0080      	lsls	r0, r0, #2
 8000262:	7819      	ldrb	r1, [r3, #0]
 8000264:	f7ff ff6c 	bl	8000140 <__udivsi3>
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <HAL_InitTick+0x40>)
 800026a:	0001      	movs	r1, r0
 800026c:	6818      	ldr	r0, [r3, #0]
 800026e:	f7ff ff67 	bl	8000140 <__udivsi3>
 8000272:	f000 fb3f 	bl	80008f4 <HAL_SYSTICK_Config>
 8000276:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000278:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800027a:	2c00      	cmp	r4, #0
 800027c:	d109      	bne.n	8000292 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	2d03      	cmp	r5, #3
 8000280:	d807      	bhi.n	8000292 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	3802      	subs	r0, #2
 8000284:	0022      	movs	r2, r4
 8000286:	0029      	movs	r1, r5
 8000288:	f000 faf8 	bl	800087c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800028c:	0020      	movs	r0, r4
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <HAL_InitTick+0x44>)
 8000290:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	20000000 	.word	0x20000000
 8000298:	20000008 	.word	0x20000008
 800029c:	20000004 	.word	0x20000004

080002a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a0:	2310      	movs	r3, #16
 80002a2:	4a06      	ldr	r2, [pc, #24]	; (80002bc <HAL_Init+0x1c>)
{
 80002a4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80002a8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002aa:	430b      	orrs	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ae:	f7ff ffd3 	bl	8000258 <HAL_InitTick>
  HAL_MspInit();
 80002b2:	f001 fc4f 	bl	8001b54 <HAL_MspInit>
}
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	40022000 	.word	0x40022000

080002c0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x10>)
 80002c2:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <HAL_IncTick+0x14>)
 80002c4:	6811      	ldr	r1, [r2, #0]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	185b      	adds	r3, r3, r1
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	200000bc 	.word	0x200000bc
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002d8:	4b01      	ldr	r3, [pc, #4]	; (80002e0 <HAL_GetTick+0x8>)
 80002da:	6818      	ldr	r0, [r3, #0]
}
 80002dc:	4770      	bx	lr
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	200000bc 	.word	0x200000bc

080002e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002e8:	f7ff fff6 	bl	80002d8 <HAL_GetTick>
 80002ec:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ee:	1c63      	adds	r3, r4, #1
 80002f0:	d002      	beq.n	80002f8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <HAL_Delay+0x20>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002f8:	f7ff ffee 	bl	80002d8 <HAL_GetTick>
 80002fc:	1b40      	subs	r0, r0, r5
 80002fe:	4284      	cmp	r4, r0
 8000300:	d8fa      	bhi.n	80002f8 <HAL_Delay+0x14>
  {
  }
}
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	20000000 	.word	0x20000000

08000308 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000308:	2103      	movs	r1, #3
 800030a:	6803      	ldr	r3, [r0, #0]
{
 800030c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800030e:	689a      	ldr	r2, [r3, #8]
{
 8000310:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000312:	400a      	ands	r2, r1
 8000314:	2a01      	cmp	r2, #1
 8000316:	d001      	beq.n	800031c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000318:	2000      	movs	r0, #0
}
 800031a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800031c:	6819      	ldr	r1, [r3, #0]
 800031e:	4211      	tst	r1, r2
 8000320:	d102      	bne.n	8000328 <ADC_Disable+0x20>
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	0412      	lsls	r2, r2, #16
 8000326:	d5f7      	bpl.n	8000318 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000328:	2205      	movs	r2, #5
 800032a:	689d      	ldr	r5, [r3, #8]
 800032c:	4015      	ands	r5, r2
 800032e:	2d01      	cmp	r5, #1
 8000330:	d11a      	bne.n	8000368 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 8000332:	2202      	movs	r2, #2
 8000334:	6899      	ldr	r1, [r3, #8]
 8000336:	430a      	orrs	r2, r1
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	2203      	movs	r2, #3
 800033c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800033e:	f7ff ffcb 	bl	80002d8 <HAL_GetTick>
 8000342:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000344:	6823      	ldr	r3, [r4, #0]
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	422b      	tst	r3, r5
 800034a:	d0e5      	beq.n	8000318 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800034c:	f7ff ffc4 	bl	80002d8 <HAL_GetTick>
 8000350:	1b80      	subs	r0, r0, r6
 8000352:	2802      	cmp	r0, #2
 8000354:	d9f6      	bls.n	8000344 <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000356:	2310      	movs	r3, #16
 8000358:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 800035a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800035c:	4313      	orrs	r3, r2
 800035e:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000360:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000362:	431d      	orrs	r5, r3
 8000364:	63e5      	str	r5, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000366:	e7d8      	b.n	800031a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000368:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800036a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800036c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800036e:	4313      	orrs	r3, r2
 8000370:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000372:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000374:	4303      	orrs	r3, r0
 8000376:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000378:	e7cf      	b.n	800031a <ADC_Disable+0x12>
	...

0800037c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800037c:	2300      	movs	r3, #0
{
 800037e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000380:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8000382:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000384:	6803      	ldr	r3, [r0, #0]
{
 8000386:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000388:	689a      	ldr	r2, [r3, #8]
 800038a:	400a      	ands	r2, r1
 800038c:	2a01      	cmp	r2, #1
 800038e:	d107      	bne.n	80003a0 <ADC_Enable+0x24>
 8000390:	6819      	ldr	r1, [r3, #0]
 8000392:	4211      	tst	r1, r2
 8000394:	d001      	beq.n	800039a <ADC_Enable+0x1e>
  return HAL_OK;
 8000396:	2000      	movs	r0, #0
}
 8000398:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800039a:	68da      	ldr	r2, [r3, #12]
 800039c:	0412      	lsls	r2, r2, #16
 800039e:	d4fa      	bmi.n	8000396 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80003a0:	6899      	ldr	r1, [r3, #8]
 80003a2:	4a19      	ldr	r2, [pc, #100]	; (8000408 <ADC_Enable+0x8c>)
 80003a4:	4211      	tst	r1, r2
 80003a6:	d008      	beq.n	80003ba <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003a8:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003aa:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80003ae:	4313      	orrs	r3, r2
 80003b0:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80003b4:	4303      	orrs	r3, r0
 80003b6:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80003b8:	e7ee      	b.n	8000398 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80003ba:	2201      	movs	r2, #1
 80003bc:	6899      	ldr	r1, [r3, #8]
 80003be:	430a      	orrs	r2, r1
 80003c0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <ADC_Enable+0x90>)
 80003c4:	4912      	ldr	r1, [pc, #72]	; (8000410 <ADC_Enable+0x94>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f7ff feba 	bl	8000140 <__udivsi3>
 80003cc:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80003ce:	9b01      	ldr	r3, [sp, #4]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d115      	bne.n	8000400 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 80003d4:	f7ff ff80 	bl	80002d8 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003d8:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80003da:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003dc:	6823      	ldr	r3, [r4, #0]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	422b      	tst	r3, r5
 80003e2:	d1d8      	bne.n	8000396 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003e4:	f7ff ff78 	bl	80002d8 <HAL_GetTick>
 80003e8:	1b80      	subs	r0, r0, r6
 80003ea:	2802      	cmp	r0, #2
 80003ec:	d9f6      	bls.n	80003dc <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ee:	2310      	movs	r3, #16
 80003f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 80003f2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003f4:	4313      	orrs	r3, r2
 80003f6:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80003fa:	432b      	orrs	r3, r5
 80003fc:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80003fe:	e7cb      	b.n	8000398 <ADC_Enable+0x1c>
      wait_loop_index--;
 8000400:	9b01      	ldr	r3, [sp, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	e7e2      	b.n	80003ce <ADC_Enable+0x52>
 8000408:	80000017 	.word	0x80000017
 800040c:	20000008 	.word	0x20000008
 8000410:	000f4240 	.word	0x000f4240

08000414 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000414:	2204      	movs	r2, #4
 8000416:	6803      	ldr	r3, [r0, #0]
{
 8000418:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800041a:	6899      	ldr	r1, [r3, #8]
{
 800041c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800041e:	4211      	tst	r1, r2
 8000420:	d101      	bne.n	8000426 <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000422:	2000      	movs	r0, #0
}
 8000424:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000426:	6899      	ldr	r1, [r3, #8]
 8000428:	4211      	tst	r1, r2
 800042a:	d006      	beq.n	800043a <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800042c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800042e:	0792      	lsls	r2, r2, #30
 8000430:	d403      	bmi.n	800043a <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000432:	2210      	movs	r2, #16
 8000434:	6899      	ldr	r1, [r3, #8]
 8000436:	430a      	orrs	r2, r1
 8000438:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800043a:	f7ff ff4d 	bl	80002d8 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800043e:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8000440:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000442:	6823      	ldr	r3, [r4, #0]
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	422b      	tst	r3, r5
 8000448:	d0eb      	beq.n	8000422 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800044a:	f7ff ff45 	bl	80002d8 <HAL_GetTick>
 800044e:	1b80      	subs	r0, r0, r6
 8000450:	2802      	cmp	r0, #2
 8000452:	d9f6      	bls.n	8000442 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000454:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000456:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000458:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800045a:	4313      	orrs	r3, r2
 800045c:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800045e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000460:	4303      	orrs	r3, r0
 8000462:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000464:	e7de      	b.n	8000424 <ADC_ConversionStop+0x10>
	...

08000468 <HAL_ADC_Init>:
{
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800046c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800046e:	2c00      	cmp	r4, #0
 8000470:	d073      	beq.n	800055a <HAL_ADC_Init+0xf2>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000474:	2b00      	cmp	r3, #0
 8000476:	d106      	bne.n	8000486 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000478:	0022      	movs	r2, r4
 800047a:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 800047c:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 800047e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000480:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000482:	f001 fb7f 	bl	8001b84 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000488:	06db      	lsls	r3, r3, #27
 800048a:	d500      	bpl.n	800048e <HAL_ADC_Init+0x26>
 800048c:	e07a      	b.n	8000584 <HAL_ADC_Init+0x11c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800048e:	2204      	movs	r2, #4
 8000490:	6823      	ldr	r3, [r4, #0]
 8000492:	6898      	ldr	r0, [r3, #8]
 8000494:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000496:	d000      	beq.n	800049a <HAL_ADC_Init+0x32>
 8000498:	e074      	b.n	8000584 <HAL_ADC_Init+0x11c>
    ADC_STATE_CLR_SET(hadc->State,
 800049a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800049c:	4943      	ldr	r1, [pc, #268]	; (80005ac <HAL_ADC_Init+0x144>)
 800049e:	4011      	ands	r1, r2
 80004a0:	2202      	movs	r2, #2
 80004a2:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80004a4:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80004a6:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	400a      	ands	r2, r1
 80004ac:	2a01      	cmp	r2, #1
 80004ae:	d000      	beq.n	80004b2 <HAL_ADC_Init+0x4a>
 80004b0:	e06e      	b.n	8000590 <HAL_ADC_Init+0x128>
 80004b2:	6819      	ldr	r1, [r3, #0]
 80004b4:	4211      	tst	r1, r2
 80004b6:	d102      	bne.n	80004be <HAL_ADC_Init+0x56>
 80004b8:	68da      	ldr	r2, [r3, #12]
 80004ba:	0412      	lsls	r2, r2, #16
 80004bc:	d568      	bpl.n	8000590 <HAL_ADC_Init+0x128>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	493b      	ldr	r1, [pc, #236]	; (80005b0 <HAL_ADC_Init+0x148>)
 80004c2:	400a      	ands	r2, r1
 80004c4:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80004c6:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80004c8:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80004ca:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80004cc:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80004ce:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80004d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80004d2:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80004d4:	3a01      	subs	r2, #1
 80004d6:	1e56      	subs	r6, r2, #1
 80004d8:	41b2      	sbcs	r2, r6
 80004da:	0316      	lsls	r6, r2, #12
 80004dc:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80004de:	034f      	lsls	r7, r1, #13
 80004e0:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80004e2:	6922      	ldr	r2, [r4, #16]
 80004e4:	432f      	orrs	r7, r5
 80004e6:	2a02      	cmp	r2, #2
 80004e8:	d100      	bne.n	80004ec <HAL_ADC_Init+0x84>
 80004ea:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80004ec:	1d62      	adds	r2, r4, #5
 80004ee:	7fd2      	ldrb	r2, [r2, #31]
 80004f0:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80004f2:	433a      	orrs	r2, r7
 80004f4:	4332      	orrs	r2, r6
 80004f6:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004f8:	7ee0      	ldrb	r0, [r4, #27]
 80004fa:	2801      	cmp	r0, #1
 80004fc:	d104      	bne.n	8000508 <HAL_ADC_Init+0xa0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004fe:	2900      	cmp	r1, #0
 8000500:	d12c      	bne.n	800055c <HAL_ADC_Init+0xf4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000508:	20c2      	movs	r0, #194	; 0xc2
 800050a:	69e1      	ldr	r1, [r4, #28]
 800050c:	30ff      	adds	r0, #255	; 0xff
 800050e:	4281      	cmp	r1, r0
 8000510:	d002      	beq.n	8000518 <HAL_ADC_Init+0xb0>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000512:	6a20      	ldr	r0, [r4, #32]
 8000514:	4301      	orrs	r1, r0
 8000516:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000518:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800051a:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800051c:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800051e:	4311      	orrs	r1, r2
 8000520:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000522:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000524:	4281      	cmp	r1, r0
 8000526:	d002      	beq.n	800052e <HAL_ADC_Init+0xc6>
 8000528:	1e48      	subs	r0, r1, #1
 800052a:	2806      	cmp	r0, #6
 800052c:	d807      	bhi.n	800053e <HAL_ADC_Init+0xd6>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800052e:	2507      	movs	r5, #7
 8000530:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000532:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000534:	43a8      	bics	r0, r5
 8000536:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000538:	6958      	ldr	r0, [r3, #20]
 800053a:	4301      	orrs	r1, r0
 800053c:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	491c      	ldr	r1, [pc, #112]	; (80005b4 <HAL_ADC_Init+0x14c>)
 8000542:	400b      	ands	r3, r1
 8000544:	429a      	cmp	r2, r3
 8000546:	d111      	bne.n	800056c <HAL_ADC_Init+0x104>
      ADC_CLEAR_ERRORCODE(hadc);
 8000548:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800054a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800054c:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800054e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000550:	4393      	bics	r3, r2
 8000552:	001a      	movs	r2, r3
 8000554:	2301      	movs	r3, #1
 8000556:	4313      	orrs	r3, r2
 8000558:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800055a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800055c:	2120      	movs	r1, #32
 800055e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000560:	4329      	orrs	r1, r5
 8000562:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000564:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000566:	4308      	orrs	r0, r1
 8000568:	63e0      	str	r0, [r4, #60]	; 0x3c
 800056a:	e7cd      	b.n	8000508 <HAL_ADC_Init+0xa0>
      ADC_STATE_CLR_SET(hadc->State,
 800056c:	2212      	movs	r2, #18
 800056e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000570:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000572:	4393      	bics	r3, r2
 8000574:	001a      	movs	r2, r3
 8000576:	2310      	movs	r3, #16
 8000578:	4313      	orrs	r3, r2
 800057a:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800057c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800057e:	4303      	orrs	r3, r0
 8000580:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000582:	e7ea      	b.n	800055a <HAL_ADC_Init+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000584:	2310      	movs	r3, #16
 8000586:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000588:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800058a:	4313      	orrs	r3, r2
 800058c:	63a3      	str	r3, [r4, #56]	; 0x38
 800058e:	e7e4      	b.n	800055a <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000590:	2118      	movs	r1, #24
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	438a      	bics	r2, r1
 8000596:	68a1      	ldr	r1, [r4, #8]
 8000598:	430a      	orrs	r2, r1
 800059a:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800059c:	6919      	ldr	r1, [r3, #16]
 800059e:	6862      	ldr	r2, [r4, #4]
 80005a0:	0089      	lsls	r1, r1, #2
 80005a2:	0889      	lsrs	r1, r1, #2
 80005a4:	4311      	orrs	r1, r2
 80005a6:	6119      	str	r1, [r3, #16]
 80005a8:	e789      	b.n	80004be <HAL_ADC_Init+0x56>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	fffffefd 	.word	0xfffffefd
 80005b0:	fffe0219 	.word	0xfffe0219
 80005b4:	833fffe7 	.word	0x833fffe7

080005b8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005b8:	6803      	ldr	r3, [r0, #0]
{
 80005ba:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005bc:	689b      	ldr	r3, [r3, #8]
{
 80005be:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80005c0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005c2:	075b      	lsls	r3, r3, #29
 80005c4:	d41a      	bmi.n	80005fc <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80005c6:	0025      	movs	r5, r4
 80005c8:	3534      	adds	r5, #52	; 0x34
 80005ca:	782b      	ldrb	r3, [r5, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d015      	beq.n	80005fc <HAL_ADC_Start+0x44>
 80005d0:	2301      	movs	r3, #1
 80005d2:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80005d4:	7e63      	ldrb	r3, [r4, #25]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d111      	bne.n	80005fe <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80005da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80005de:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80005e0:	401a      	ands	r2, r3
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005e8:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80005ea:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005ec:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80005ee:	63e0      	str	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 80005f0:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005f2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80005f4:	6899      	ldr	r1, [r3, #8]
 80005f6:	3a18      	subs	r2, #24
 80005f8:	430a      	orrs	r2, r1
 80005fa:	609a      	str	r2, [r3, #8]
}
 80005fc:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80005fe:	0020      	movs	r0, r4
 8000600:	f7ff febc 	bl	800037c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000604:	2800      	cmp	r0, #0
 8000606:	d1f9      	bne.n	80005fc <HAL_ADC_Start+0x44>
 8000608:	e7e7      	b.n	80005da <HAL_ADC_Start+0x22>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	fffff0fe 	.word	0xfffff0fe

08000610 <HAL_ADC_Stop>:
{ 
 8000610:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8000612:	0006      	movs	r6, r0
 8000614:	3634      	adds	r6, #52	; 0x34
 8000616:	7833      	ldrb	r3, [r6, #0]
{ 
 8000618:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800061a:	2002      	movs	r0, #2
 800061c:	2b01      	cmp	r3, #1
 800061e:	d012      	beq.n	8000646 <HAL_ADC_Stop+0x36>
 8000620:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000622:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8000624:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000626:	f7ff fef5 	bl	8000414 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800062a:	2800      	cmp	r0, #0
 800062c:	d109      	bne.n	8000642 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800062e:	0020      	movs	r0, r4
 8000630:	f7ff fe6a 	bl	8000308 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000634:	2800      	cmp	r0, #0
 8000636:	d104      	bne.n	8000642 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8000638:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800063a:	4a03      	ldr	r2, [pc, #12]	; (8000648 <HAL_ADC_Stop+0x38>)
 800063c:	4013      	ands	r3, r2
 800063e:	431d      	orrs	r5, r3
 8000640:	63a5      	str	r5, [r4, #56]	; 0x38
  __HAL_UNLOCK(hadc);
 8000642:	2300      	movs	r3, #0
 8000644:	7033      	strb	r3, [r6, #0]
}
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	fffffefe 	.word	0xfffffefe

0800064c <HAL_ADC_Start_DMA>:
{
 800064c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800064e:	6803      	ldr	r3, [r0, #0]
{
 8000650:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000652:	689b      	ldr	r3, [r3, #8]
{
 8000654:	000f      	movs	r7, r1
 8000656:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8000658:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800065a:	075b      	lsls	r3, r3, #29
 800065c:	d430      	bmi.n	80006c0 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 800065e:	0026      	movs	r6, r4
 8000660:	3634      	adds	r6, #52	; 0x34
 8000662:	7833      	ldrb	r3, [r6, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d02b      	beq.n	80006c0 <HAL_ADC_Start_DMA+0x74>
 8000668:	2301      	movs	r3, #1
 800066a:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800066c:	7e63      	ldrb	r3, [r4, #25]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d127      	bne.n	80006c2 <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8000672:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000676:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000678:	401a      	ands	r2, r3
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4313      	orrs	r3, r2
 8000680:	63a3      	str	r3, [r4, #56]	; 0x38
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000682:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000686:	63e5      	str	r5, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8000688:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800068a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800068e:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000690:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_ADC_Start_DMA+0x90>)
 8000694:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000696:	231c      	movs	r3, #28
 8000698:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800069a:	684a      	ldr	r2, [r1, #4]
 800069c:	3b0c      	subs	r3, #12
 800069e:	4313      	orrs	r3, r2
 80006a0:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80006a2:	2301      	movs	r3, #1
 80006a4:	68ca      	ldr	r2, [r1, #12]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80006aa:	003a      	movs	r2, r7
 80006ac:	3140      	adds	r1, #64	; 0x40
 80006ae:	9b01      	ldr	r3, [sp, #4]
 80006b0:	f000 f96c 	bl	800098c <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80006b4:	2304      	movs	r3, #4
 80006b6:	0028      	movs	r0, r5
 80006b8:	6822      	ldr	r2, [r4, #0]
 80006ba:	6891      	ldr	r1, [r2, #8]
 80006bc:	430b      	orrs	r3, r1
 80006be:	6093      	str	r3, [r2, #8]
}
 80006c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80006c2:	0020      	movs	r0, r4
 80006c4:	f7ff fe5a 	bl	800037c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80006c8:	2800      	cmp	r0, #0
 80006ca:	d1f9      	bne.n	80006c0 <HAL_ADC_Start_DMA+0x74>
 80006cc:	e7d1      	b.n	8000672 <HAL_ADC_Start_DMA+0x26>
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	fffff0fe 	.word	0xfffff0fe
 80006d4:	080006e5 	.word	0x080006e5
 80006d8:	08000757 	.word	0x08000757
 80006dc:	08000763 	.word	0x08000763

080006e0 <HAL_ADC_ConvCpltCallback>:
 80006e0:	4770      	bx	lr
	...

080006e4 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80006e4:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80006e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80006e8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80006ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006ec:	4211      	tst	r1, r2
 80006ee:	d12a      	bne.n	8000746 <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80006f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006f2:	32b1      	adds	r2, #177	; 0xb1
 80006f4:	32ff      	adds	r2, #255	; 0xff
 80006f6:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006f8:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80006fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	0109      	lsls	r1, r1, #4
 8000700:	68d0      	ldr	r0, [r2, #12]
 8000702:	4208      	tst	r0, r1
 8000704:	d112      	bne.n	800072c <ADC_DMAConvCplt+0x48>
 8000706:	7e99      	ldrb	r1, [r3, #26]
 8000708:	2900      	cmp	r1, #0
 800070a:	d10f      	bne.n	800072c <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800070c:	6811      	ldr	r1, [r2, #0]
 800070e:	0709      	lsls	r1, r1, #28
 8000710:	d50c      	bpl.n	800072c <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000712:	6891      	ldr	r1, [r2, #8]
 8000714:	0749      	lsls	r1, r1, #29
 8000716:	d40d      	bmi.n	8000734 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000718:	200c      	movs	r0, #12
 800071a:	6851      	ldr	r1, [r2, #4]
 800071c:	4381      	bics	r1, r0
 800071e:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000722:	490b      	ldr	r1, [pc, #44]	; (8000750 <ADC_DMAConvCplt+0x6c>)
 8000724:	4011      	ands	r1, r2
 8000726:	2201      	movs	r2, #1
 8000728:	430a      	orrs	r2, r1
 800072a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800072c:	0018      	movs	r0, r3
 800072e:	f7ff ffd7 	bl	80006e0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8000732:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000734:	2220      	movs	r2, #32
 8000736:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000738:	430a      	orrs	r2, r1
 800073a:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800073c:	2201      	movs	r2, #1
 800073e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000740:	430a      	orrs	r2, r1
 8000742:	63da      	str	r2, [r3, #60]	; 0x3c
 8000744:	e7f2      	b.n	800072c <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4798      	blx	r3
}
 800074c:	e7f1      	b.n	8000732 <ADC_DMAConvCplt+0x4e>
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	fffffefe 	.word	0xfffffefe

08000754 <HAL_ADC_ConvHalfCpltCallback>:
 8000754:	4770      	bx	lr

08000756 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000756:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000758:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800075a:	f7ff fffb 	bl	8000754 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800075e:	bd10      	pop	{r4, pc}

08000760 <HAL_ADC_ErrorCallback>:
}
 8000760:	4770      	bx	lr

08000762 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000762:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000764:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000766:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000768:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800076a:	4313      	orrs	r3, r2
 800076c:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800076e:	2304      	movs	r3, #4
 8000770:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000772:	4313      	orrs	r3, r2
 8000774:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8000776:	f7ff fff3 	bl	8000760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800077a:	bd10      	pop	{r4, pc}

0800077c <HAL_ADC_ConfigChannel>:
{
 800077c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 800077e:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8000780:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000782:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000784:	3434      	adds	r4, #52	; 0x34
 8000786:	7823      	ldrb	r3, [r4, #0]
{
 8000788:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800078a:	2002      	movs	r0, #2
 800078c:	2b01      	cmp	r3, #1
 800078e:	d02b      	beq.n	80007e8 <HAL_ADC_ConfigChannel+0x6c>
 8000790:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000792:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000794:	6aee      	ldr	r6, [r5, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000796:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8000798:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800079a:	0740      	lsls	r0, r0, #29
 800079c:	d45a      	bmi.n	8000854 <HAL_ADC_ConfigChannel+0xd8>
    if (sConfig->Rank != ADC_RANK_NONE)
 800079e:	4830      	ldr	r0, [pc, #192]	; (8000860 <HAL_ADC_ConfigChannel+0xe4>)
 80007a0:	684f      	ldr	r7, [r1, #4]
 80007a2:	680d      	ldr	r5, [r1, #0]
 80007a4:	4287      	cmp	r7, r0
 80007a6:	d03f      	beq.n	8000828 <HAL_ADC_ConfigChannel+0xac>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007a8:	40ab      	lsls	r3, r5
 80007aa:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007ac:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007ae:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007b0:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007b2:	4338      	orrs	r0, r7
 80007b4:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007b6:	429e      	cmp	r6, r3
 80007b8:	d00f      	beq.n	80007da <HAL_ADC_ConfigChannel+0x5e>
 80007ba:	3e01      	subs	r6, #1
 80007bc:	2e06      	cmp	r6, #6
 80007be:	d90c      	bls.n	80007da <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80007c0:	688b      	ldr	r3, [r1, #8]
 80007c2:	2107      	movs	r1, #7
 80007c4:	6950      	ldr	r0, [r2, #20]
 80007c6:	4008      	ands	r0, r1
 80007c8:	4283      	cmp	r3, r0
 80007ca:	d006      	beq.n	80007da <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80007cc:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80007ce:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80007d0:	4388      	bics	r0, r1
 80007d2:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80007d4:	6950      	ldr	r0, [r2, #20]
 80007d6:	4303      	orrs	r3, r0
 80007d8:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80007da:	002b      	movs	r3, r5
 80007dc:	3b10      	subs	r3, #16
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d903      	bls.n	80007ea <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007e2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80007e4:	2300      	movs	r3, #0
 80007e6:	7023      	strb	r3, [r4, #0]
}
 80007e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007ea:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <HAL_ADC_ConfigChannel+0xe8>)
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	6811      	ldr	r1, [r2, #0]
 80007f0:	2d10      	cmp	r5, #16
 80007f2:	d015      	beq.n	8000820 <HAL_ADC_ConfigChannel+0xa4>
 80007f4:	2d11      	cmp	r5, #17
 80007f6:	d015      	beq.n	8000824 <HAL_ADC_ConfigChannel+0xa8>
 80007f8:	045b      	lsls	r3, r3, #17
 80007fa:	430b      	orrs	r3, r1
 80007fc:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007fe:	2d10      	cmp	r5, #16
 8000800:	d1ef      	bne.n	80007e2 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_ADC_ConfigChannel+0xec>)
 8000804:	4919      	ldr	r1, [pc, #100]	; (800086c <HAL_ADC_ConfigChannel+0xf0>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	f7ff fc9a 	bl	8000140 <__udivsi3>
 800080c:	230a      	movs	r3, #10
 800080e:	4358      	muls	r0, r3
 8000810:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000812:	9b01      	ldr	r3, [sp, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0e4      	beq.n	80007e2 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000818:	9b01      	ldr	r3, [sp, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	e7f8      	b.n	8000812 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000820:	041b      	lsls	r3, r3, #16
 8000822:	e7ea      	b.n	80007fa <HAL_ADC_ConfigChannel+0x7e>
 8000824:	03db      	lsls	r3, r3, #15
 8000826:	e7e8      	b.n	80007fa <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000828:	40ab      	lsls	r3, r5
 800082a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800082c:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800082e:	002b      	movs	r3, r5
 8000830:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000832:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000834:	2b02      	cmp	r3, #2
 8000836:	d8d4      	bhi.n	80007e2 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_ADC_ConfigChannel+0xe8>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	2d10      	cmp	r5, #16
 800083e:	d005      	beq.n	800084c <HAL_ADC_ConfigChannel+0xd0>
 8000840:	2d11      	cmp	r5, #17
 8000842:	d005      	beq.n	8000850 <HAL_ADC_ConfigChannel+0xd4>
 8000844:	490a      	ldr	r1, [pc, #40]	; (8000870 <HAL_ADC_ConfigChannel+0xf4>)
 8000846:	400a      	ands	r2, r1
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e7ca      	b.n	80007e2 <HAL_ADC_ConfigChannel+0x66>
 800084c:	4909      	ldr	r1, [pc, #36]	; (8000874 <HAL_ADC_ConfigChannel+0xf8>)
 800084e:	e7fa      	b.n	8000846 <HAL_ADC_ConfigChannel+0xca>
 8000850:	4909      	ldr	r1, [pc, #36]	; (8000878 <HAL_ADC_ConfigChannel+0xfc>)
 8000852:	e7f8      	b.n	8000846 <HAL_ADC_ConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000854:	2220      	movs	r2, #32
 8000856:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000858:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800085a:	430a      	orrs	r2, r1
 800085c:	63aa      	str	r2, [r5, #56]	; 0x38
 800085e:	e7c1      	b.n	80007e4 <HAL_ADC_ConfigChannel+0x68>
 8000860:	00001001 	.word	0x00001001
 8000864:	40012708 	.word	0x40012708
 8000868:	20000008 	.word	0x20000008
 800086c:	000f4240 	.word	0x000f4240
 8000870:	feffffff 	.word	0xfeffffff
 8000874:	ff7fffff 	.word	0xff7fffff
 8000878:	ffbfffff 	.word	0xffbfffff

0800087c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000880:	2800      	cmp	r0, #0
 8000882:	db12      	blt.n	80008aa <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000884:	0883      	lsrs	r3, r0, #2
 8000886:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <HAL_NVIC_SetPriority+0x58>)
 8000888:	2403      	movs	r4, #3
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	189b      	adds	r3, r3, r2
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	4020      	ands	r0, r4
 8000892:	40a0      	lsls	r0, r4
 8000894:	0014      	movs	r4, r2
 8000896:	25c0      	movs	r5, #192	; 0xc0
 8000898:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800089a:	4011      	ands	r1, r2
 800089c:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089e:	00ad      	lsls	r5, r5, #2
 80008a0:	595e      	ldr	r6, [r3, r5]
 80008a2:	43a6      	bics	r6, r4
 80008a4:	4331      	orrs	r1, r6
 80008a6:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008aa:	2403      	movs	r4, #3
 80008ac:	230f      	movs	r3, #15
 80008ae:	b2c0      	uxtb	r0, r0
 80008b0:	4003      	ands	r3, r0
 80008b2:	4020      	ands	r0, r4
 80008b4:	40a0      	lsls	r0, r4
 80008b6:	34fc      	adds	r4, #252	; 0xfc
 80008b8:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ba:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008bc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008be:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	3b08      	subs	r3, #8
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <HAL_NVIC_SetPriority+0x5c>)
 80008c4:	089b      	lsrs	r3, r3, #2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	189b      	adds	r3, r3, r2
 80008ca:	69da      	ldr	r2, [r3, #28]
 80008cc:	43aa      	bics	r2, r5
 80008ce:	4311      	orrs	r1, r2
 80008d0:	61d9      	str	r1, [r3, #28]
 80008d2:	e7e9      	b.n	80008a8 <HAL_NVIC_SetPriority+0x2c>
 80008d4:	e000e100 	.word	0xe000e100
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008dc:	2800      	cmp	r0, #0
 80008de:	db05      	blt.n	80008ec <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e0:	231f      	movs	r3, #31
 80008e2:	4018      	ands	r0, r3
 80008e4:	3b1e      	subs	r3, #30
 80008e6:	4083      	lsls	r3, r0
 80008e8:	4a01      	ldr	r2, [pc, #4]	; (80008f0 <HAL_NVIC_EnableIRQ+0x14>)
 80008ea:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008ec:	4770      	bx	lr
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f4:	4a09      	ldr	r2, [pc, #36]	; (800091c <HAL_SYSTICK_Config+0x28>)
 80008f6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d80d      	bhi.n	800091a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008fe:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000904:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000906:	6a03      	ldr	r3, [r0, #32]
 8000908:	0609      	lsls	r1, r1, #24
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	430b      	orrs	r3, r1
 8000910:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000912:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000914:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000916:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000918:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800091a:	4770      	bx	lr
 800091c:	00ffffff 	.word	0x00ffffff
 8000920:	e000e010 	.word	0xe000e010
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 800092c:	2001      	movs	r0, #1
  if(NULL == hdma)
 800092e:	2c00      	cmp	r4, #0
 8000930:	d024      	beq.n	800097c <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000932:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000934:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000936:	1ca5      	adds	r5, r4, #2
 8000938:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 800093a:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800093e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000940:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000942:	6863      	ldr	r3, [r4, #4]
 8000944:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000946:	68e1      	ldr	r1, [r4, #12]
 8000948:	430b      	orrs	r3, r1
 800094a:	6921      	ldr	r1, [r4, #16]
 800094c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800094e:	6961      	ldr	r1, [r4, #20]
 8000950:	430b      	orrs	r3, r1
 8000952:	69a1      	ldr	r1, [r4, #24]
 8000954:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000956:	69e1      	ldr	r1, [r4, #28]
 8000958:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800095a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800095c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_DMA_Init+0x5c>)
 8000960:	2114      	movs	r1, #20
 8000962:	18c0      	adds	r0, r0, r3
 8000964:	f7ff fbec 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800096a:	0080      	lsls	r0, r0, #2
 800096c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800096e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000970:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000972:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000974:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000976:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8000978:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 800097a:	77e0      	strb	r0, [r4, #31]
}  
 800097c:	bd70      	pop	{r4, r5, r6, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	ffffc00f 	.word	0xffffc00f
 8000984:	bffdfff8 	.word	0xbffdfff8
 8000988:	40020000 	.word	0x40020000

0800098c <HAL_DMA_Start_IT>:
{
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800098e:	1c46      	adds	r6, r0, #1
 8000990:	7ff5      	ldrb	r5, [r6, #31]
 8000992:	2402      	movs	r4, #2
 8000994:	2d01      	cmp	r5, #1
 8000996:	d026      	beq.n	80009e6 <HAL_DMA_Start_IT+0x5a>
 8000998:	2501      	movs	r5, #1
 800099a:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800099c:	1905      	adds	r5, r0, r4
 800099e:	46ac      	mov	ip, r5
 80009a0:	7fed      	ldrb	r5, [r5, #31]
 80009a2:	2700      	movs	r7, #0
 80009a4:	b2ed      	uxtb	r5, r5
 80009a6:	2d01      	cmp	r5, #1
 80009a8:	d129      	bne.n	80009fe <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80009aa:	4666      	mov	r6, ip
 80009ac:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009ae:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009b0:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009b2:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80009b4:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009b6:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80009b8:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009ba:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80009bc:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80009be:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80009c0:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80009c2:	6843      	ldr	r3, [r0, #4]
 80009c4:	6805      	ldr	r5, [r0, #0]
 80009c6:	2b10      	cmp	r3, #16
 80009c8:	d10f      	bne.n	80009ea <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 80009ca:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80009cc:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80009ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009d0:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d00c      	beq.n	80009f0 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009d6:	230e      	movs	r3, #14
 80009d8:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80009da:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80009dc:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 80009de:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80009e0:	682a      	ldr	r2, [r5, #0]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	602b      	str	r3, [r5, #0]
} 
 80009e6:	0020      	movs	r0, r4
 80009e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 80009ea:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80009ec:	60e2      	str	r2, [r4, #12]
 80009ee:	e7ee      	b.n	80009ce <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80009f0:	230a      	movs	r3, #10
 80009f2:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80009f4:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80009f6:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80009f8:	6823      	ldr	r3, [r4, #0]
 80009fa:	4393      	bics	r3, r2
 80009fc:	e7ed      	b.n	80009da <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 80009fe:	77f7      	strb	r7, [r6, #31]
 8000a00:	e7f1      	b.n	80009e6 <HAL_DMA_Start_IT+0x5a>

08000a02 <HAL_DMA_IRQHandler>:
{
 8000a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a04:	2704      	movs	r7, #4
 8000a06:	003e      	movs	r6, r7
 8000a08:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a0a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a0c:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a0e:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000a10:	6803      	ldr	r3, [r0, #0]
 8000a12:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a14:	422e      	tst	r6, r5
 8000a16:	d00d      	beq.n	8000a34 <HAL_DMA_IRQHandler+0x32>
 8000a18:	423c      	tst	r4, r7
 8000a1a:	d00b      	beq.n	8000a34 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a1c:	6819      	ldr	r1, [r3, #0]
 8000a1e:	0689      	lsls	r1, r1, #26
 8000a20:	d402      	bmi.n	8000a28 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a22:	6819      	ldr	r1, [r3, #0]
 8000a24:	43b9      	bics	r1, r7
 8000a26:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000a28:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000a2a:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d019      	beq.n	8000a64 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8000a30:	4798      	blx	r3
}  
 8000a32:	e017      	b.n	8000a64 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000a34:	2702      	movs	r7, #2
 8000a36:	003e      	movs	r6, r7
 8000a38:	408e      	lsls	r6, r1
 8000a3a:	422e      	tst	r6, r5
 8000a3c:	d013      	beq.n	8000a66 <HAL_DMA_IRQHandler+0x64>
 8000a3e:	423c      	tst	r4, r7
 8000a40:	d011      	beq.n	8000a66 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a42:	6819      	ldr	r1, [r3, #0]
 8000a44:	0689      	lsls	r1, r1, #26
 8000a46:	d406      	bmi.n	8000a56 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000a48:	240a      	movs	r4, #10
 8000a4a:	6819      	ldr	r1, [r3, #0]
 8000a4c:	43a1      	bics	r1, r4
 8000a4e:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000a50:	2101      	movs	r1, #1
 8000a52:	19c3      	adds	r3, r0, r7
 8000a54:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000a56:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	1c43      	adds	r3, r0, #1
 8000a5c:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8000a5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d1e5      	bne.n	8000a30 <HAL_DMA_IRQHandler+0x2e>
}  
 8000a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000a66:	2608      	movs	r6, #8
 8000a68:	0037      	movs	r7, r6
 8000a6a:	408f      	lsls	r7, r1
 8000a6c:	423d      	tst	r5, r7
 8000a6e:	d0f9      	beq.n	8000a64 <HAL_DMA_IRQHandler+0x62>
 8000a70:	4234      	tst	r4, r6
 8000a72:	d0f7      	beq.n	8000a64 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a74:	250e      	movs	r5, #14
 8000a76:	681c      	ldr	r4, [r3, #0]
 8000a78:	43ac      	bics	r4, r5
 8000a7a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	001c      	movs	r4, r3
 8000a80:	408c      	lsls	r4, r1
 8000a82:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8000a84:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000a86:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000a88:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	18c3      	adds	r3, r0, r3
 8000a8e:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8000a90:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a92:	e7e5      	b.n	8000a60 <HAL_DMA_IRQHandler+0x5e>

08000a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a94:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a96:	680b      	ldr	r3, [r1, #0]
{ 
 8000a98:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8000a9c:	2300      	movs	r3, #0
{ 
 8000a9e:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa0:	9a02      	ldr	r2, [sp, #8]
 8000aa2:	40da      	lsrs	r2, r3
 8000aa4:	d101      	bne.n	8000aaa <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 8000aa6:	b007      	add	sp, #28
 8000aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	409a      	lsls	r2, r3
 8000aae:	9203      	str	r2, [sp, #12]
 8000ab0:	9903      	ldr	r1, [sp, #12]
 8000ab2:	9a02      	ldr	r2, [sp, #8]
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8000ab8:	d100      	bne.n	8000abc <HAL_GPIO_Init+0x28>
 8000aba:	e08c      	b.n	8000bd6 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000abc:	9a01      	ldr	r2, [sp, #4]
 8000abe:	2110      	movs	r1, #16
 8000ac0:	6852      	ldr	r2, [r2, #4]
 8000ac2:	0016      	movs	r6, r2
 8000ac4:	438e      	bics	r6, r1
 8000ac6:	2e02      	cmp	r6, #2
 8000ac8:	d10e      	bne.n	8000ae8 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aca:	2507      	movs	r5, #7
 8000acc:	401d      	ands	r5, r3
 8000ace:	00ad      	lsls	r5, r5, #2
 8000ad0:	3901      	subs	r1, #1
 8000ad2:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8000ad4:	08dc      	lsrs	r4, r3, #3
 8000ad6:	00a4      	lsls	r4, r4, #2
 8000ad8:	1904      	adds	r4, r0, r4
 8000ada:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000adc:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ade:	9901      	ldr	r1, [sp, #4]
 8000ae0:	6909      	ldr	r1, [r1, #16]
 8000ae2:	40a9      	lsls	r1, r5
 8000ae4:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000ae6:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ae8:	2403      	movs	r4, #3
 8000aea:	005f      	lsls	r7, r3, #1
 8000aec:	40bc      	lsls	r4, r7
 8000aee:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000af0:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af2:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000af4:	4025      	ands	r5, r4
 8000af6:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000af8:	2503      	movs	r5, #3
 8000afa:	4015      	ands	r5, r2
 8000afc:	40bd      	lsls	r5, r7
 8000afe:	4661      	mov	r1, ip
 8000b00:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000b02:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b04:	2e01      	cmp	r6, #1
 8000b06:	d80f      	bhi.n	8000b28 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b08:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8000b0a:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b0c:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b0e:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b10:	40bd      	lsls	r5, r7
 8000b12:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000b14:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b16:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b18:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b1a:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b1c:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b1e:	2101      	movs	r1, #1
 8000b20:	400d      	ands	r5, r1
 8000b22:	409d      	lsls	r5, r3
 8000b24:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000b26:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b28:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b2a:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b2c:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b2e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b30:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b32:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b34:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b36:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000b38:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3a:	420a      	tst	r2, r1
 8000b3c:	d04b      	beq.n	8000bd6 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4c26      	ldr	r4, [pc, #152]	; (8000bdc <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b42:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b44:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b46:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b48:	430d      	orrs	r5, r1
 8000b4a:	61a5      	str	r5, [r4, #24]
 8000b4c:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b4e:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b50:	400c      	ands	r4, r1
 8000b52:	9405      	str	r4, [sp, #20]
 8000b54:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b56:	240f      	movs	r4, #15
 8000b58:	4921      	ldr	r1, [pc, #132]	; (8000be0 <HAL_GPIO_Init+0x14c>)
 8000b5a:	00ad      	lsls	r5, r5, #2
 8000b5c:	00b6      	lsls	r6, r6, #2
 8000b5e:	186d      	adds	r5, r5, r1
 8000b60:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b62:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b64:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b66:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b68:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b6a:	2400      	movs	r4, #0
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	d00c      	beq.n	8000b8a <HAL_GPIO_Init+0xf6>
 8000b70:	491c      	ldr	r1, [pc, #112]	; (8000be4 <HAL_GPIO_Init+0x150>)
 8000b72:	3401      	adds	r4, #1
 8000b74:	4288      	cmp	r0, r1
 8000b76:	d008      	beq.n	8000b8a <HAL_GPIO_Init+0xf6>
 8000b78:	491b      	ldr	r1, [pc, #108]	; (8000be8 <HAL_GPIO_Init+0x154>)
 8000b7a:	3401      	adds	r4, #1
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	d004      	beq.n	8000b8a <HAL_GPIO_Init+0xf6>
 8000b80:	491a      	ldr	r1, [pc, #104]	; (8000bec <HAL_GPIO_Init+0x158>)
 8000b82:	3403      	adds	r4, #3
 8000b84:	4288      	cmp	r0, r1
 8000b86:	d100      	bne.n	8000b8a <HAL_GPIO_Init+0xf6>
 8000b88:	3c02      	subs	r4, #2
 8000b8a:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8000b8c:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b8e:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8000b90:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b92:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000b94:	4c16      	ldr	r4, [pc, #88]	; (8000bf0 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8000b96:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000b98:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8000b9a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b9c:	03d1      	lsls	r1, r2, #15
 8000b9e:	d401      	bmi.n	8000ba4 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8000ba0:	003e      	movs	r6, r7
 8000ba2:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000ba4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000ba6:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8000ba8:	9e00      	ldr	r6, [sp, #0]
 8000baa:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bac:	0391      	lsls	r1, r2, #14
 8000bae:	d401      	bmi.n	8000bb4 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8000bb0:	003e      	movs	r6, r7
 8000bb2:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000bb4:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000bb6:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8000bb8:	9e00      	ldr	r6, [sp, #0]
 8000bba:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bbc:	02d1      	lsls	r1, r2, #11
 8000bbe:	d401      	bmi.n	8000bc4 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8000bc0:	003e      	movs	r6, r7
 8000bc2:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000bc4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000bc6:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8000bc8:	9f00      	ldr	r7, [sp, #0]
 8000bca:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bcc:	0292      	lsls	r2, r2, #10
 8000bce:	d401      	bmi.n	8000bd4 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8000bd0:	402e      	ands	r6, r5
 8000bd2:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000bd4:	60e7      	str	r7, [r4, #12]
    position++;
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	e762      	b.n	8000aa0 <HAL_GPIO_Init+0xc>
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010000 	.word	0x40010000
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000800 	.word	0x48000800
 8000bec:	48000c00 	.word	0x48000c00
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bf4:	6900      	ldr	r0, [r0, #16]
 8000bf6:	4008      	ands	r0, r1
 8000bf8:	1e41      	subs	r1, r0, #1
 8000bfa:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000bfc:	b2c0      	uxtb	r0, r0
  }
 8000bfe:	4770      	bx	lr

08000c00 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c00:	2a00      	cmp	r2, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c04:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c06:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c08:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000c0a:	e7fc      	b.n	8000c06 <HAL_GPIO_WritePin+0x6>

08000c0c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000c0c:	6943      	ldr	r3, [r0, #20]
 8000c0e:	4219      	tst	r1, r3
 8000c10:	d000      	beq.n	8000c14 <HAL_GPIO_TogglePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c12:	0409      	lsls	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c14:	6181      	str	r1, [r0, #24]
  }
}
 8000c16:	4770      	bx	lr

08000c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	0004      	movs	r4, r0
 8000c1c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d102      	bne.n	8000c28 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000c22:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000c24:	b005      	add	sp, #20
 8000c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c28:	6803      	ldr	r3, [r0, #0]
 8000c2a:	07db      	lsls	r3, r3, #31
 8000c2c:	d42e      	bmi.n	8000c8c <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	079b      	lsls	r3, r3, #30
 8000c32:	d47e      	bmi.n	8000d32 <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	071b      	lsls	r3, r3, #28
 8000c38:	d500      	bpl.n	8000c3c <HAL_RCC_OscConfig+0x24>
 8000c3a:	e0ba      	b.n	8000db2 <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	075b      	lsls	r3, r3, #29
 8000c40:	d500      	bpl.n	8000c44 <HAL_RCC_OscConfig+0x2c>
 8000c42:	e0dd      	b.n	8000e00 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	06db      	lsls	r3, r3, #27
 8000c48:	d51a      	bpl.n	8000c80 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c4a:	6962      	ldr	r2, [r4, #20]
 8000c4c:	4db4      	ldr	r5, [pc, #720]	; (8000f20 <HAL_RCC_OscConfig+0x308>)
 8000c4e:	2304      	movs	r3, #4
 8000c50:	2a01      	cmp	r2, #1
 8000c52:	d000      	beq.n	8000c56 <HAL_RCC_OscConfig+0x3e>
 8000c54:	e149      	b.n	8000eea <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c56:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c58:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000c5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c60:	431a      	orrs	r2, r3
 8000c62:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c64:	f7ff fb38 	bl	80002d8 <HAL_GetTick>
 8000c68:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c6c:	4233      	tst	r3, r6
 8000c6e:	d100      	bne.n	8000c72 <HAL_RCC_OscConfig+0x5a>
 8000c70:	e134      	b.n	8000edc <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c72:	21f8      	movs	r1, #248	; 0xf8
 8000c74:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c76:	69a3      	ldr	r3, [r4, #24]
 8000c78:	438a      	bics	r2, r1
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c80:	6a23      	ldr	r3, [r4, #32]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d000      	beq.n	8000c88 <HAL_RCC_OscConfig+0x70>
 8000c86:	e157      	b.n	8000f38 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8000c88:	2000      	movs	r0, #0
 8000c8a:	e7cb      	b.n	8000c24 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c8c:	210c      	movs	r1, #12
 8000c8e:	4da4      	ldr	r5, [pc, #656]	; (8000f20 <HAL_RCC_OscConfig+0x308>)
 8000c90:	686a      	ldr	r2, [r5, #4]
 8000c92:	400a      	ands	r2, r1
 8000c94:	2a04      	cmp	r2, #4
 8000c96:	d006      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c98:	686b      	ldr	r3, [r5, #4]
 8000c9a:	400b      	ands	r3, r1
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d109      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x9c>
 8000ca0:	686b      	ldr	r3, [r5, #4]
 8000ca2:	03db      	lsls	r3, r3, #15
 8000ca4:	d506      	bpl.n	8000cb4 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca6:	682b      	ldr	r3, [r5, #0]
 8000ca8:	039b      	lsls	r3, r3, #14
 8000caa:	d5c0      	bpl.n	8000c2e <HAL_RCC_OscConfig+0x16>
 8000cac:	6863      	ldr	r3, [r4, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1bd      	bne.n	8000c2e <HAL_RCC_OscConfig+0x16>
 8000cb2:	e7b6      	b.n	8000c22 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb4:	6863      	ldr	r3, [r4, #4]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d113      	bne.n	8000ce2 <HAL_RCC_OscConfig+0xca>
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	682a      	ldr	r2, [r5, #0]
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fb08 	bl	80002d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000cca:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ccc:	02b6      	lsls	r6, r6, #10
 8000cce:	682b      	ldr	r3, [r5, #0]
 8000cd0:	4233      	tst	r3, r6
 8000cd2:	d1ac      	bne.n	8000c2e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd4:	f7ff fb00 	bl	80002d8 <HAL_GetTick>
 8000cd8:	1bc0      	subs	r0, r0, r7
 8000cda:	2864      	cmp	r0, #100	; 0x64
 8000cdc:	d9f7      	bls.n	8000cce <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8000cde:	2003      	movs	r0, #3
 8000ce0:	e7a0      	b.n	8000c24 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d115      	bne.n	8000d12 <HAL_RCC_OscConfig+0xfa>
 8000ce6:	682b      	ldr	r3, [r5, #0]
 8000ce8:	4a8e      	ldr	r2, [pc, #568]	; (8000f24 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cea:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cec:	4013      	ands	r3, r2
 8000cee:	602b      	str	r3, [r5, #0]
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	4a8d      	ldr	r2, [pc, #564]	; (8000f28 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf4:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cfa:	f7ff faed 	bl	80002d8 <HAL_GetTick>
 8000cfe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d00:	682b      	ldr	r3, [r5, #0]
 8000d02:	4233      	tst	r3, r6
 8000d04:	d093      	beq.n	8000c2e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d06:	f7ff fae7 	bl	80002d8 <HAL_GetTick>
 8000d0a:	1bc0      	subs	r0, r0, r7
 8000d0c:	2864      	cmp	r0, #100	; 0x64
 8000d0e:	d9f7      	bls.n	8000d00 <HAL_RCC_OscConfig+0xe8>
 8000d10:	e7e5      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d12:	2b05      	cmp	r3, #5
 8000d14:	d105      	bne.n	8000d22 <HAL_RCC_OscConfig+0x10a>
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	682a      	ldr	r2, [r5, #0]
 8000d1a:	02db      	lsls	r3, r3, #11
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	602b      	str	r3, [r5, #0]
 8000d20:	e7cb      	b.n	8000cba <HAL_RCC_OscConfig+0xa2>
 8000d22:	682b      	ldr	r3, [r5, #0]
 8000d24:	4a7f      	ldr	r2, [pc, #508]	; (8000f24 <HAL_RCC_OscConfig+0x30c>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	602b      	str	r3, [r5, #0]
 8000d2a:	682b      	ldr	r3, [r5, #0]
 8000d2c:	4a7e      	ldr	r2, [pc, #504]	; (8000f28 <HAL_RCC_OscConfig+0x310>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	e7c7      	b.n	8000cc2 <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d32:	220c      	movs	r2, #12
 8000d34:	4d7a      	ldr	r5, [pc, #488]	; (8000f20 <HAL_RCC_OscConfig+0x308>)
 8000d36:	686b      	ldr	r3, [r5, #4]
 8000d38:	4213      	tst	r3, r2
 8000d3a:	d006      	beq.n	8000d4a <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d3c:	686b      	ldr	r3, [r5, #4]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	2b08      	cmp	r3, #8
 8000d42:	d111      	bne.n	8000d68 <HAL_RCC_OscConfig+0x150>
 8000d44:	686b      	ldr	r3, [r5, #4]
 8000d46:	03db      	lsls	r3, r3, #15
 8000d48:	d40e      	bmi.n	8000d68 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4a:	682b      	ldr	r3, [r5, #0]
 8000d4c:	079b      	lsls	r3, r3, #30
 8000d4e:	d503      	bpl.n	8000d58 <HAL_RCC_OscConfig+0x140>
 8000d50:	68e3      	ldr	r3, [r4, #12]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d000      	beq.n	8000d58 <HAL_RCC_OscConfig+0x140>
 8000d56:	e764      	b.n	8000c22 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d58:	21f8      	movs	r1, #248	; 0xf8
 8000d5a:	682a      	ldr	r2, [r5, #0]
 8000d5c:	6923      	ldr	r3, [r4, #16]
 8000d5e:	438a      	bics	r2, r1
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	602b      	str	r3, [r5, #0]
 8000d66:	e765      	b.n	8000c34 <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d68:	68e2      	ldr	r2, [r4, #12]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d00f      	beq.n	8000d90 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8000d70:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d72:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000d74:	4313      	orrs	r3, r2
 8000d76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d78:	f7ff faae 	bl	80002d8 <HAL_GetTick>
 8000d7c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7e:	682b      	ldr	r3, [r5, #0]
 8000d80:	4233      	tst	r3, r6
 8000d82:	d1e9      	bne.n	8000d58 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d84:	f7ff faa8 	bl	80002d8 <HAL_GetTick>
 8000d88:	1bc0      	subs	r0, r0, r7
 8000d8a:	2802      	cmp	r0, #2
 8000d8c:	d9f7      	bls.n	8000d7e <HAL_RCC_OscConfig+0x166>
 8000d8e:	e7a6      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8000d90:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d92:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000d94:	439a      	bics	r2, r3
 8000d96:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000d98:	f7ff fa9e 	bl	80002d8 <HAL_GetTick>
 8000d9c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9e:	682b      	ldr	r3, [r5, #0]
 8000da0:	4233      	tst	r3, r6
 8000da2:	d100      	bne.n	8000da6 <HAL_RCC_OscConfig+0x18e>
 8000da4:	e746      	b.n	8000c34 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da6:	f7ff fa97 	bl	80002d8 <HAL_GetTick>
 8000daa:	1bc0      	subs	r0, r0, r7
 8000dac:	2802      	cmp	r0, #2
 8000dae:	d9f6      	bls.n	8000d9e <HAL_RCC_OscConfig+0x186>
 8000db0:	e795      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000db2:	69e2      	ldr	r2, [r4, #28]
 8000db4:	2301      	movs	r3, #1
 8000db6:	4d5a      	ldr	r5, [pc, #360]	; (8000f20 <HAL_RCC_OscConfig+0x308>)
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d010      	beq.n	8000dde <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8000dbc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dbe:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000dc4:	f7ff fa88 	bl	80002d8 <HAL_GetTick>
 8000dc8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000dcc:	4233      	tst	r3, r6
 8000dce:	d000      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x1ba>
 8000dd0:	e734      	b.n	8000c3c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd2:	f7ff fa81 	bl	80002d8 <HAL_GetTick>
 8000dd6:	1bc0      	subs	r0, r0, r7
 8000dd8:	2802      	cmp	r0, #2
 8000dda:	d9f6      	bls.n	8000dca <HAL_RCC_OscConfig+0x1b2>
 8000ddc:	e77f      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8000dde:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000de2:	439a      	bics	r2, r3
 8000de4:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000de6:	f7ff fa77 	bl	80002d8 <HAL_GetTick>
 8000dea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000dee:	4233      	tst	r3, r6
 8000df0:	d100      	bne.n	8000df4 <HAL_RCC_OscConfig+0x1dc>
 8000df2:	e723      	b.n	8000c3c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000df4:	f7ff fa70 	bl	80002d8 <HAL_GetTick>
 8000df8:	1bc0      	subs	r0, r0, r7
 8000dfa:	2802      	cmp	r0, #2
 8000dfc:	d9f6      	bls.n	8000dec <HAL_RCC_OscConfig+0x1d4>
 8000dfe:	e76e      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e00:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e02:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e04:	4d46      	ldr	r5, [pc, #280]	; (8000f20 <HAL_RCC_OscConfig+0x308>)
 8000e06:	0552      	lsls	r2, r2, #21
 8000e08:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000e0a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e0c:	4213      	tst	r3, r2
 8000e0e:	d108      	bne.n	8000e22 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	69eb      	ldr	r3, [r5, #28]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61eb      	str	r3, [r5, #28]
 8000e16:	69eb      	ldr	r3, [r5, #28]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	9303      	str	r3, [sp, #12]
 8000e1c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e22:	2780      	movs	r7, #128	; 0x80
 8000e24:	4e41      	ldr	r6, [pc, #260]	; (8000f2c <HAL_RCC_OscConfig+0x314>)
 8000e26:	007f      	lsls	r7, r7, #1
 8000e28:	6833      	ldr	r3, [r6, #0]
 8000e2a:	423b      	tst	r3, r7
 8000e2c:	d006      	beq.n	8000e3c <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2e:	68a3      	ldr	r3, [r4, #8]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d113      	bne.n	8000e5c <HAL_RCC_OscConfig+0x244>
 8000e34:	6a2a      	ldr	r2, [r5, #32]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	622b      	str	r3, [r5, #32]
 8000e3a:	e030      	b.n	8000e9e <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e3c:	6833      	ldr	r3, [r6, #0]
 8000e3e:	433b      	orrs	r3, r7
 8000e40:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e42:	f7ff fa49 	bl	80002d8 <HAL_GetTick>
 8000e46:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e48:	6833      	ldr	r3, [r6, #0]
 8000e4a:	423b      	tst	r3, r7
 8000e4c:	d1ef      	bne.n	8000e2e <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e4e:	f7ff fa43 	bl	80002d8 <HAL_GetTick>
 8000e52:	9b01      	ldr	r3, [sp, #4]
 8000e54:	1ac0      	subs	r0, r0, r3
 8000e56:	2864      	cmp	r0, #100	; 0x64
 8000e58:	d9f6      	bls.n	8000e48 <HAL_RCC_OscConfig+0x230>
 8000e5a:	e740      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
 8000e5c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d114      	bne.n	8000e8c <HAL_RCC_OscConfig+0x274>
 8000e62:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e64:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e66:	4393      	bics	r3, r2
 8000e68:	622b      	str	r3, [r5, #32]
 8000e6a:	6a2b      	ldr	r3, [r5, #32]
 8000e6c:	3203      	adds	r2, #3
 8000e6e:	4393      	bics	r3, r2
 8000e70:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000e72:	f7ff fa31 	bl	80002d8 <HAL_GetTick>
 8000e76:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e78:	6a2b      	ldr	r3, [r5, #32]
 8000e7a:	423b      	tst	r3, r7
 8000e7c:	d025      	beq.n	8000eca <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fa2b 	bl	80002d8 <HAL_GetTick>
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <HAL_RCC_OscConfig+0x318>)
 8000e84:	1b80      	subs	r0, r0, r6
 8000e86:	4298      	cmp	r0, r3
 8000e88:	d9f6      	bls.n	8000e78 <HAL_RCC_OscConfig+0x260>
 8000e8a:	e728      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d10b      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x290>
 8000e90:	6a29      	ldr	r1, [r5, #32]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	430b      	orrs	r3, r1
 8000e96:	622b      	str	r3, [r5, #32]
 8000e98:	6a2b      	ldr	r3, [r5, #32]
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fa1b 	bl	80002d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000ea4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea6:	e00d      	b.n	8000ec4 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea8:	6a2b      	ldr	r3, [r5, #32]
 8000eaa:	4393      	bics	r3, r2
 8000eac:	2204      	movs	r2, #4
 8000eae:	622b      	str	r3, [r5, #32]
 8000eb0:	6a2b      	ldr	r3, [r5, #32]
 8000eb2:	4393      	bics	r3, r2
 8000eb4:	e7c0      	b.n	8000e38 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb6:	f7ff fa0f 	bl	80002d8 <HAL_GetTick>
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_RCC_OscConfig+0x318>)
 8000ebc:	1b80      	subs	r0, r0, r6
 8000ebe:	4298      	cmp	r0, r3
 8000ec0:	d900      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x2ac>
 8000ec2:	e70c      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec4:	6a2b      	ldr	r3, [r5, #32]
 8000ec6:	423b      	tst	r3, r7
 8000ec8:	d0f5      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 8000eca:	9b00      	ldr	r3, [sp, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d000      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x2ba>
 8000ed0:	e6b8      	b.n	8000c44 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed2:	69eb      	ldr	r3, [r5, #28]
 8000ed4:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <HAL_RCC_OscConfig+0x31c>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61eb      	str	r3, [r5, #28]
 8000eda:	e6b3      	b.n	8000c44 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000edc:	f7ff f9fc 	bl	80002d8 <HAL_GetTick>
 8000ee0:	1bc0      	subs	r0, r0, r7
 8000ee2:	2802      	cmp	r0, #2
 8000ee4:	d800      	bhi.n	8000ee8 <HAL_RCC_OscConfig+0x2d0>
 8000ee6:	e6c0      	b.n	8000c6a <HAL_RCC_OscConfig+0x52>
 8000ee8:	e6f9      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000eea:	3205      	adds	r2, #5
 8000eec:	d103      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000eee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000ef0:	439a      	bics	r2, r3
 8000ef2:	636a      	str	r2, [r5, #52]	; 0x34
 8000ef4:	e6bd      	b.n	8000c72 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ef6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ef8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000efa:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000efc:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000efe:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000f00:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f02:	4393      	bics	r3, r2
 8000f04:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000f06:	f7ff f9e7 	bl	80002d8 <HAL_GetTick>
 8000f0a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f0c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f0e:	4233      	tst	r3, r6
 8000f10:	d100      	bne.n	8000f14 <HAL_RCC_OscConfig+0x2fc>
 8000f12:	e6b5      	b.n	8000c80 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f14:	f7ff f9e0 	bl	80002d8 <HAL_GetTick>
 8000f18:	1bc0      	subs	r0, r0, r7
 8000f1a:	2802      	cmp	r0, #2
 8000f1c:	d9f6      	bls.n	8000f0c <HAL_RCC_OscConfig+0x2f4>
 8000f1e:	e6de      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
 8000f20:	40021000 	.word	0x40021000
 8000f24:	fffeffff 	.word	0xfffeffff
 8000f28:	fffbffff 	.word	0xfffbffff
 8000f2c:	40007000 	.word	0x40007000
 8000f30:	00001388 	.word	0x00001388
 8000f34:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f38:	200c      	movs	r0, #12
 8000f3a:	4a35      	ldr	r2, [pc, #212]	; (8001010 <HAL_RCC_OscConfig+0x3f8>)
 8000f3c:	6851      	ldr	r1, [r2, #4]
 8000f3e:	0015      	movs	r5, r2
 8000f40:	4001      	ands	r1, r0
 8000f42:	2908      	cmp	r1, #8
 8000f44:	d047      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x3be>
 8000f46:	4a33      	ldr	r2, [pc, #204]	; (8001014 <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d132      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 8000f4c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f4e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000f50:	4013      	ands	r3, r2
 8000f52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f54:	f7ff f9c0 	bl	80002d8 <HAL_GetTick>
 8000f58:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f5a:	04b6      	lsls	r6, r6, #18
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	4233      	tst	r3, r6
 8000f60:	d121      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f62:	220f      	movs	r2, #15
 8000f64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f66:	4393      	bics	r3, r2
 8000f68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000f6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f72:	686a      	ldr	r2, [r5, #4]
 8000f74:	430b      	orrs	r3, r1
 8000f76:	4928      	ldr	r1, [pc, #160]	; (8001018 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f78:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	682a      	ldr	r2, [r5, #0]
 8000f84:	045b      	lsls	r3, r3, #17
 8000f86:	4313      	orrs	r3, r2
 8000f88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f8a:	f7ff f9a5 	bl	80002d8 <HAL_GetTick>
 8000f8e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f90:	04a4      	lsls	r4, r4, #18
 8000f92:	682b      	ldr	r3, [r5, #0]
 8000f94:	4223      	tst	r3, r4
 8000f96:	d000      	beq.n	8000f9a <HAL_RCC_OscConfig+0x382>
 8000f98:	e676      	b.n	8000c88 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f9a:	f7ff f99d 	bl	80002d8 <HAL_GetTick>
 8000f9e:	1b80      	subs	r0, r0, r6
 8000fa0:	2802      	cmp	r0, #2
 8000fa2:	d9f6      	bls.n	8000f92 <HAL_RCC_OscConfig+0x37a>
 8000fa4:	e69b      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa6:	f7ff f997 	bl	80002d8 <HAL_GetTick>
 8000faa:	1bc0      	subs	r0, r0, r7
 8000fac:	2802      	cmp	r0, #2
 8000fae:	d9d5      	bls.n	8000f5c <HAL_RCC_OscConfig+0x344>
 8000fb0:	e695      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 8000fb2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb4:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fba:	f7ff f98d 	bl	80002d8 <HAL_GetTick>
 8000fbe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc0:	04a4      	lsls	r4, r4, #18
 8000fc2:	682b      	ldr	r3, [r5, #0]
 8000fc4:	4223      	tst	r3, r4
 8000fc6:	d100      	bne.n	8000fca <HAL_RCC_OscConfig+0x3b2>
 8000fc8:	e65e      	b.n	8000c88 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fca:	f7ff f985 	bl	80002d8 <HAL_GetTick>
 8000fce:	1b80      	subs	r0, r0, r6
 8000fd0:	2802      	cmp	r0, #2
 8000fd2:	d9f6      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x3aa>
 8000fd4:	e683      	b.n	8000cde <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 8000fd6:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d100      	bne.n	8000fde <HAL_RCC_OscConfig+0x3c6>
 8000fdc:	e622      	b.n	8000c24 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fde:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8000fe0:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000fe4:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8000fe6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe8:	4019      	ands	r1, r3
        return HAL_ERROR;
 8000fea:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fec:	42a9      	cmp	r1, r5
 8000fee:	d000      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x3da>
 8000ff0:	e618      	b.n	8000c24 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ff6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000ff8:	428a      	cmp	r2, r1
 8000ffa:	d000      	beq.n	8000ffe <HAL_RCC_OscConfig+0x3e6>
 8000ffc:	e612      	b.n	8000c24 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000ffe:	20f0      	movs	r0, #240	; 0xf0
 8001000:	0380      	lsls	r0, r0, #14
 8001002:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001004:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001006:	1a1b      	subs	r3, r3, r0
 8001008:	1e58      	subs	r0, r3, #1
 800100a:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 800100c:	b2d8      	uxtb	r0, r3
 800100e:	e609      	b.n	8000c24 <HAL_RCC_OscConfig+0xc>
 8001010:	40021000 	.word	0x40021000
 8001014:	feffffff 	.word	0xfeffffff
 8001018:	ffc2ffff 	.word	0xffc2ffff

0800101c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800101c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800101e:	4c14      	ldr	r4, [pc, #80]	; (8001070 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8001020:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001022:	2210      	movs	r2, #16
 8001024:	0021      	movs	r1, r4
 8001026:	4668      	mov	r0, sp
 8001028:	f000 ff22 	bl	8001e70 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800102c:	0021      	movs	r1, r4
 800102e:	ad04      	add	r5, sp, #16
 8001030:	2210      	movs	r2, #16
 8001032:	3110      	adds	r1, #16
 8001034:	0028      	movs	r0, r5
 8001036:	f000 ff1b 	bl	8001e70 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800103a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800103c:	4e0d      	ldr	r6, [pc, #52]	; (8001074 <HAL_RCC_GetSysClockFreq+0x58>)
 800103e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001040:	401a      	ands	r2, r3
 8001042:	2a08      	cmp	r2, #8
 8001044:	d111      	bne.n	800106a <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001046:	200f      	movs	r0, #15
 8001048:	466a      	mov	r2, sp
 800104a:	0c99      	lsrs	r1, r3, #18
 800104c:	4001      	ands	r1, r0
 800104e:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001050:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001052:	4002      	ands	r2, r0
 8001054:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001056:	03db      	lsls	r3, r3, #15
 8001058:	d505      	bpl.n	8001066 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <HAL_RCC_GetSysClockFreq+0x5c>)
 800105c:	f7ff f870 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001060:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001062:	b008      	add	sp, #32
 8001064:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_RCC_GetSysClockFreq+0x60>)
 8001068:	e7fa      	b.n	8001060 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 800106c:	e7f9      	b.n	8001062 <HAL_RCC_GetSysClockFreq+0x46>
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	080026dc 	.word	0x080026dc
 8001074:	40021000 	.word	0x40021000
 8001078:	007a1200 	.word	0x007a1200
 800107c:	003d0900 	.word	0x003d0900

08001080 <HAL_RCC_ClockConfig>:
{
 8001080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001082:	0005      	movs	r5, r0
 8001084:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001086:	2800      	cmp	r0, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800108a:	2001      	movs	r0, #1
}
 800108c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800108e:	2201      	movs	r2, #1
 8001090:	4c37      	ldr	r4, [pc, #220]	; (8001170 <HAL_RCC_ClockConfig+0xf0>)
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	4013      	ands	r3, r2
 8001096:	428b      	cmp	r3, r1
 8001098:	d31c      	bcc.n	80010d4 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800109a:	6829      	ldr	r1, [r5, #0]
 800109c:	078b      	lsls	r3, r1, #30
 800109e:	d422      	bmi.n	80010e6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010a0:	07cb      	lsls	r3, r1, #31
 80010a2:	d42f      	bmi.n	8001104 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010a4:	2301      	movs	r3, #1
 80010a6:	6822      	ldr	r2, [r4, #0]
 80010a8:	401a      	ands	r2, r3
 80010aa:	4297      	cmp	r7, r2
 80010ac:	d351      	bcc.n	8001152 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ae:	682b      	ldr	r3, [r5, #0]
 80010b0:	4c30      	ldr	r4, [pc, #192]	; (8001174 <HAL_RCC_ClockConfig+0xf4>)
 80010b2:	075b      	lsls	r3, r3, #29
 80010b4:	d454      	bmi.n	8001160 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80010b6:	f7ff ffb1 	bl	800101c <HAL_RCC_GetSysClockFreq>
 80010ba:	6863      	ldr	r3, [r4, #4]
 80010bc:	4a2e      	ldr	r2, [pc, #184]	; (8001178 <HAL_RCC_ClockConfig+0xf8>)
 80010be:	061b      	lsls	r3, r3, #24
 80010c0:	0f1b      	lsrs	r3, r3, #28
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	40d8      	lsrs	r0, r3
 80010c6:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_RCC_ClockConfig+0xfc>)
 80010c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff f8c4 	bl	8000258 <HAL_InitTick>
  return HAL_OK;
 80010d0:	2000      	movs	r0, #0
 80010d2:	e7db      	b.n	800108c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	4393      	bics	r3, r2
 80010d8:	430b      	orrs	r3, r1
 80010da:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	4013      	ands	r3, r2
 80010e0:	4299      	cmp	r1, r3
 80010e2:	d1d2      	bne.n	800108a <HAL_RCC_ClockConfig+0xa>
 80010e4:	e7d9      	b.n	800109a <HAL_RCC_ClockConfig+0x1a>
 80010e6:	4a23      	ldr	r2, [pc, #140]	; (8001174 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e8:	074b      	lsls	r3, r1, #29
 80010ea:	d504      	bpl.n	80010f6 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80010ec:	23e0      	movs	r3, #224	; 0xe0
 80010ee:	6850      	ldr	r0, [r2, #4]
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4303      	orrs	r3, r0
 80010f4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f6:	20f0      	movs	r0, #240	; 0xf0
 80010f8:	6853      	ldr	r3, [r2, #4]
 80010fa:	4383      	bics	r3, r0
 80010fc:	68a8      	ldr	r0, [r5, #8]
 80010fe:	4303      	orrs	r3, r0
 8001100:	6053      	str	r3, [r2, #4]
 8001102:	e7cd      	b.n	80010a0 <HAL_RCC_ClockConfig+0x20>
 8001104:	4e1b      	ldr	r6, [pc, #108]	; (8001174 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001106:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001108:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110a:	2a01      	cmp	r2, #1
 800110c:	d119      	bne.n	8001142 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	039b      	lsls	r3, r3, #14
 8001110:	d5bb      	bpl.n	800108a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001112:	2103      	movs	r1, #3
 8001114:	6873      	ldr	r3, [r6, #4]
 8001116:	438b      	bics	r3, r1
 8001118:	4313      	orrs	r3, r2
 800111a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800111c:	f7ff f8dc 	bl	80002d8 <HAL_GetTick>
 8001120:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001122:	230c      	movs	r3, #12
 8001124:	6872      	ldr	r2, [r6, #4]
 8001126:	401a      	ands	r2, r3
 8001128:	686b      	ldr	r3, [r5, #4]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	429a      	cmp	r2, r3
 800112e:	d0b9      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001130:	f7ff f8d2 	bl	80002d8 <HAL_GetTick>
 8001134:	9b01      	ldr	r3, [sp, #4]
 8001136:	1ac0      	subs	r0, r0, r3
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_RCC_ClockConfig+0x100>)
 800113a:	4298      	cmp	r0, r3
 800113c:	d9f1      	bls.n	8001122 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800113e:	2003      	movs	r0, #3
 8001140:	e7a4      	b.n	800108c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001142:	2a02      	cmp	r2, #2
 8001144:	d102      	bne.n	800114c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001146:	019b      	lsls	r3, r3, #6
 8001148:	d4e3      	bmi.n	8001112 <HAL_RCC_ClockConfig+0x92>
 800114a:	e79e      	b.n	800108a <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114c:	079b      	lsls	r3, r3, #30
 800114e:	d4e0      	bmi.n	8001112 <HAL_RCC_ClockConfig+0x92>
 8001150:	e79b      	b.n	800108a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	6822      	ldr	r2, [r4, #0]
 8001154:	439a      	bics	r2, r3
 8001156:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001158:	6822      	ldr	r2, [r4, #0]
 800115a:	421a      	tst	r2, r3
 800115c:	d195      	bne.n	800108a <HAL_RCC_ClockConfig+0xa>
 800115e:	e7a6      	b.n	80010ae <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001160:	6863      	ldr	r3, [r4, #4]
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_RCC_ClockConfig+0x104>)
 8001164:	4013      	ands	r3, r2
 8001166:	68ea      	ldr	r2, [r5, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	6063      	str	r3, [r4, #4]
 800116c:	e7a3      	b.n	80010b6 <HAL_RCC_ClockConfig+0x36>
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	40022000 	.word	0x40022000
 8001174:	40021000 	.word	0x40021000
 8001178:	0800277f 	.word	0x0800277f
 800117c:	20000008 	.word	0x20000008
 8001180:	00001388 	.word	0x00001388
 8001184:	fffff8ff 	.word	0xfffff8ff

08001188 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <HAL_RCC_GetPCLK1Freq+0x14>)
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	055b      	lsls	r3, r3, #21
 8001190:	0f5b      	lsrs	r3, r3, #29
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001196:	6810      	ldr	r0, [r2, #0]
 8001198:	40d8      	lsrs	r0, r3
}    
 800119a:	4770      	bx	lr
 800119c:	40021000 	.word	0x40021000
 80011a0:	0800278f 	.word	0x0800278f
 80011a4:	20000008 	.word	0x20000008

080011a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011a8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011aa:	6803      	ldr	r3, [r0, #0]
{
 80011ac:	b085      	sub	sp, #20
 80011ae:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011b0:	03db      	lsls	r3, r3, #15
 80011b2:	d528      	bpl.n	8001206 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80011b6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b8:	4c3b      	ldr	r4, [pc, #236]	; (80012a8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80011ba:	0552      	lsls	r2, r2, #21
 80011bc:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80011be:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c0:	4213      	tst	r3, r2
 80011c2:	d108      	bne.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	69e3      	ldr	r3, [r4, #28]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61e3      	str	r3, [r4, #28]
 80011ca:	69e3      	ldr	r3, [r4, #28]
 80011cc:	4013      	ands	r3, r2
 80011ce:	9303      	str	r3, [sp, #12]
 80011d0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80011d2:	2301      	movs	r3, #1
 80011d4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d6:	2780      	movs	r7, #128	; 0x80
 80011d8:	4e34      	ldr	r6, [pc, #208]	; (80012ac <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80011da:	007f      	lsls	r7, r7, #1
 80011dc:	6833      	ldr	r3, [r6, #0]
 80011de:	423b      	tst	r3, r7
 80011e0:	d02f      	beq.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011e2:	22c0      	movs	r2, #192	; 0xc0
 80011e4:	6a23      	ldr	r3, [r4, #32]
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4013      	ands	r3, r2
 80011ea:	4e31      	ldr	r6, [pc, #196]	; (80012b0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011ec:	d13b      	bne.n	8001266 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011ee:	6a23      	ldr	r3, [r4, #32]
 80011f0:	401e      	ands	r6, r3
 80011f2:	686b      	ldr	r3, [r5, #4]
 80011f4:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011f6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011f8:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d103      	bne.n	8001206 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fe:	69e3      	ldr	r3, [r4, #28]
 8001200:	4a2c      	ldr	r2, [pc, #176]	; (80012b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001202:	4013      	ands	r3, r2
 8001204:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001206:	682a      	ldr	r2, [r5, #0]
 8001208:	07d3      	lsls	r3, r2, #31
 800120a:	d506      	bpl.n	800121a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800120c:	2003      	movs	r0, #3
 800120e:	4926      	ldr	r1, [pc, #152]	; (80012a8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001210:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001212:	4383      	bics	r3, r0
 8001214:	68a8      	ldr	r0, [r5, #8]
 8001216:	4303      	orrs	r3, r0
 8001218:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800121a:	0693      	lsls	r3, r2, #26
 800121c:	d506      	bpl.n	800122c <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800121e:	2010      	movs	r0, #16
 8001220:	4921      	ldr	r1, [pc, #132]	; (80012a8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001222:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001224:	4383      	bics	r3, r0
 8001226:	68e8      	ldr	r0, [r5, #12]
 8001228:	4303      	orrs	r3, r0
 800122a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800122c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800122e:	0553      	lsls	r3, r2, #21
 8001230:	d517      	bpl.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001236:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001238:	438b      	bics	r3, r1
 800123a:	6929      	ldr	r1, [r5, #16]
 800123c:	430b      	orrs	r3, r1
 800123e:	6313      	str	r3, [r2, #48]	; 0x30
 8001240:	e00f      	b.n	8001262 <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001242:	6833      	ldr	r3, [r6, #0]
 8001244:	433b      	orrs	r3, r7
 8001246:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001248:	f7ff f846 	bl	80002d8 <HAL_GetTick>
 800124c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124e:	6833      	ldr	r3, [r6, #0]
 8001250:	423b      	tst	r3, r7
 8001252:	d1c6      	bne.n	80011e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001254:	f7ff f840 	bl	80002d8 <HAL_GetTick>
 8001258:	9b01      	ldr	r3, [sp, #4]
 800125a:	1ac0      	subs	r0, r0, r3
 800125c:	2864      	cmp	r0, #100	; 0x64
 800125e:	d9f6      	bls.n	800124e <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 8001260:	2003      	movs	r0, #3
}
 8001262:	b005      	add	sp, #20
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001266:	6869      	ldr	r1, [r5, #4]
 8001268:	400a      	ands	r2, r1
 800126a:	4293      	cmp	r3, r2
 800126c:	d0bf      	beq.n	80011ee <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 800126e:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001270:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001272:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001274:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001276:	025b      	lsls	r3, r3, #9
 8001278:	4303      	orrs	r3, r0
 800127a:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800127c:	6a23      	ldr	r3, [r4, #32]
 800127e:	480e      	ldr	r0, [pc, #56]	; (80012b8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001280:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001282:	4003      	ands	r3, r0
 8001284:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001286:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001288:	07d3      	lsls	r3, r2, #31
 800128a:	d5b0      	bpl.n	80011ee <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800128c:	f7ff f824 	bl	80002d8 <HAL_GetTick>
 8001290:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001292:	2202      	movs	r2, #2
 8001294:	6a23      	ldr	r3, [r4, #32]
 8001296:	4213      	tst	r3, r2
 8001298:	d1a9      	bne.n	80011ee <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7ff f81d 	bl	80002d8 <HAL_GetTick>
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80012a0:	1bc0      	subs	r0, r0, r7
 80012a2:	4298      	cmp	r0, r3
 80012a4:	d9f5      	bls.n	8001292 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80012a6:	e7db      	b.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40007000 	.word	0x40007000
 80012b0:	fffffcff 	.word	0xfffffcff
 80012b4:	efffffff 	.word	0xefffffff
 80012b8:	fffeffff 	.word	0xfffeffff
 80012bc:	00001388 	.word	0x00001388

080012c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c2:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 80012c4:	2001      	movs	r0, #1
  if (hspi == NULL)
 80012c6:	2c00      	cmp	r4, #0
 80012c8:	d04b      	beq.n	8001362 <HAL_SPI_Init+0xa2>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ca:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80012cc:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ce:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80012d0:	355d      	adds	r5, #93	; 0x5d
 80012d2:	782b      	ldrb	r3, [r5, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80012da:	0022      	movs	r2, r4
 80012dc:	325c      	adds	r2, #92	; 0x5c
 80012de:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80012e0:	0020      	movs	r0, r4
 80012e2:	f000 fcbf 	bl	8001c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80012e6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80012e8:	2240      	movs	r2, #64	; 0x40
 80012ea:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80012ec:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80012ee:	680b      	ldr	r3, [r1, #0]
 80012f0:	2000      	movs	r0, #0
 80012f2:	4393      	bics	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
 80012f6:	23e0      	movs	r3, #224	; 0xe0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80012f8:	68e2      	ldr	r2, [r4, #12]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d931      	bls.n	8001364 <HAL_SPI_Init+0xa4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001300:	26f0      	movs	r6, #240	; 0xf0
 8001302:	0136      	lsls	r6, r6, #4
 8001304:	42b2      	cmp	r2, r6
 8001306:	d133      	bne.n	8001370 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001308:	0006      	movs	r6, r0
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800130a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800130c:	2800      	cmp	r0, #0
 800130e:	d103      	bne.n	8001318 <HAL_SPI_Init+0x58>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001310:	429a      	cmp	r2, r3
 8001312:	d92f      	bls.n	8001374 <HAL_SPI_Init+0xb4>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001314:	2302      	movs	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001316:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001318:	68a7      	ldr	r7, [r4, #8]
 800131a:	6863      	ldr	r3, [r4, #4]
 800131c:	69a0      	ldr	r0, [r4, #24]
 800131e:	433b      	orrs	r3, r7
 8001320:	6927      	ldr	r7, [r4, #16]
 8001322:	433b      	orrs	r3, r7
 8001324:	6967      	ldr	r7, [r4, #20]
 8001326:	433b      	orrs	r3, r7
 8001328:	69e7      	ldr	r7, [r4, #28]
 800132a:	433b      	orrs	r3, r7
 800132c:	6a27      	ldr	r7, [r4, #32]
 800132e:	433b      	orrs	r3, r7
 8001330:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001332:	433b      	orrs	r3, r7
 8001334:	2780      	movs	r7, #128	; 0x80
 8001336:	00bf      	lsls	r7, r7, #2
 8001338:	4007      	ands	r7, r0
 800133a:	433b      	orrs	r3, r7
 800133c:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800133e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001340:	0c00      	lsrs	r0, r0, #16
 8001342:	431a      	orrs	r2, r3
 8001344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001346:	431a      	orrs	r2, r3
 8001348:	2304      	movs	r3, #4
 800134a:	4018      	ands	r0, r3
 800134c:	4310      	orrs	r0, r2
 800134e:	4306      	orrs	r6, r0
 8001350:	604e      	str	r6, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001352:	69cb      	ldr	r3, [r1, #28]
 8001354:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_SPI_Init+0xb8>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001356:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001358:	4013      	ands	r3, r2
 800135a:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800135c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800135e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001360:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8001362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001364:	2680      	movs	r6, #128	; 0x80
 8001366:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001368:	429a      	cmp	r2, r3
 800136a:	d0ce      	beq.n	800130a <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136c:	62a0      	str	r0, [r4, #40]	; 0x28
 800136e:	e7cc      	b.n	800130a <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001370:	0006      	movs	r6, r0
 8001372:	e7fb      	b.n	800136c <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001374:	2301      	movs	r3, #1
 8001376:	e7ce      	b.n	8001316 <HAL_SPI_Init+0x56>
 8001378:	fffff7ff 	.word	0xfffff7ff

0800137c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800137c:	b570      	push	{r4, r5, r6, lr}
 800137e:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001380:	6925      	ldr	r5, [r4, #16]
 8001382:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001384:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001386:	432b      	orrs	r3, r5
 8001388:	6965      	ldr	r5, [r4, #20]
 800138a:	69c1      	ldr	r1, [r0, #28]
 800138c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800138e:	6810      	ldr	r0, [r2, #0]
 8001390:	4d43      	ldr	r5, [pc, #268]	; (80014a0 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001392:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001394:	4028      	ands	r0, r5
 8001396:	4303      	orrs	r3, r0
 8001398:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800139a:	6853      	ldr	r3, [r2, #4]
 800139c:	4841      	ldr	r0, [pc, #260]	; (80014a4 <UART_SetConfig+0x128>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800139e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013a0:	4003      	ands	r3, r0
 80013a2:	68e0      	ldr	r0, [r4, #12]
 80013a4:	4303      	orrs	r3, r0
 80013a6:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80013a8:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80013aa:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80013ac:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80013ae:	4d3e      	ldr	r5, [pc, #248]	; (80014a8 <UART_SetConfig+0x12c>)
 80013b0:	4028      	ands	r0, r5
 80013b2:	4303      	orrs	r3, r0
 80013b4:	6093      	str	r3, [r2, #8]
 80013b6:	2380      	movs	r3, #128	; 0x80


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013b8:	483c      	ldr	r0, [pc, #240]	; (80014ac <UART_SetConfig+0x130>)
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	4282      	cmp	r2, r0
 80013be:	d110      	bne.n	80013e2 <UART_SetConfig+0x66>
 80013c0:	2003      	movs	r0, #3
 80013c2:	4a3b      	ldr	r2, [pc, #236]	; (80014b0 <UART_SetConfig+0x134>)
 80013c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013c6:	4002      	ands	r2, r0
 80013c8:	483a      	ldr	r0, [pc, #232]	; (80014b4 <UART_SetConfig+0x138>)
 80013ca:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013cc:	4299      	cmp	r1, r3
 80013ce:	d013      	beq.n	80013f8 <UART_SetConfig+0x7c>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80013d0:	2808      	cmp	r0, #8
 80013d2:	d828      	bhi.n	8001426 <UART_SetConfig+0xaa>
 80013d4:	f7fe feaa 	bl	800012c <__gnu_thumb1_case_uqi>
 80013d8:	27462741 	.word	0x27462741
 80013dc:	27272757 	.word	0x27272757
 80013e0:	5a          	.byte	0x5a
 80013e1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013e2:	4835      	ldr	r0, [pc, #212]	; (80014b8 <UART_SetConfig+0x13c>)
 80013e4:	4282      	cmp	r2, r0
 80013e6:	d156      	bne.n	8001496 <UART_SetConfig+0x11a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013e8:	4299      	cmp	r1, r3
 80013ea:	d136      	bne.n	800145a <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK1Freq();
 80013ec:	f7ff fecc 	bl	8001188 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80013f0:	6863      	ldr	r3, [r4, #4]
 80013f2:	0040      	lsls	r0, r0, #1
 80013f4:	085b      	lsrs	r3, r3, #1
 80013f6:	e00b      	b.n	8001410 <UART_SetConfig+0x94>
    switch (clocksource)
 80013f8:	2808      	cmp	r0, #8
 80013fa:	d81e      	bhi.n	800143a <UART_SetConfig+0xbe>
 80013fc:	f7fe fe8c 	bl	8000118 <__gnu_thumb1_case_sqi>
 8001400:	1d051df6 	.word	0x1d051df6
 8001404:	1d1d1d15 	.word	0x1d1d1d15
 8001408:	18          	.byte	0x18
 8001409:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800140a:	6863      	ldr	r3, [r4, #4]
 800140c:	0858      	lsrs	r0, r3, #1
 800140e:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <UART_SetConfig+0x140>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001410:	18c0      	adds	r0, r0, r3
 8001412:	6861      	ldr	r1, [r4, #4]
 8001414:	f7fe fe94 	bl	8000140 <__udivsi3>
 8001418:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800141a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800141c:	001a      	movs	r2, r3
 800141e:	4928      	ldr	r1, [pc, #160]	; (80014c0 <UART_SetConfig+0x144>)
 8001420:	3a10      	subs	r2, #16
 8001422:	428a      	cmp	r2, r1
 8001424:	d90c      	bls.n	8001440 <UART_SetConfig+0xc4>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8001426:	2001      	movs	r0, #1
 8001428:	e013      	b.n	8001452 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 800142a:	f7ff fdf7 	bl	800101c <HAL_RCC_GetSysClockFreq>
 800142e:	e7df      	b.n	80013f0 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001430:	6863      	ldr	r3, [r4, #4]
 8001432:	0858      	lsrs	r0, r3, #1
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	025b      	lsls	r3, r3, #9
 8001438:	e7ea      	b.n	8001410 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 800143a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800143c:	2300      	movs	r3, #0
 800143e:	e7ed      	b.n	800141c <UART_SetConfig+0xa0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001440:	220f      	movs	r2, #15
 8001442:	0019      	movs	r1, r3
 8001444:	4391      	bics	r1, r2
 8001446:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001448:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 800144a:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800144c:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800144e:	4313      	orrs	r3, r2
 8001450:	60cb      	str	r3, [r1, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001452:	2300      	movs	r3, #0
 8001454:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001456:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001458:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800145a:	f7ff fe95 	bl	8001188 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800145e:	6863      	ldr	r3, [r4, #4]
 8001460:	085b      	lsrs	r3, r3, #1
 8001462:	e002      	b.n	800146a <UART_SetConfig+0xee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001464:	6863      	ldr	r3, [r4, #4]
 8001466:	0858      	lsrs	r0, r3, #1
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <UART_SetConfig+0x148>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800146a:	18c0      	adds	r0, r0, r3
 800146c:	6861      	ldr	r1, [r4, #4]
 800146e:	f7fe fe67 	bl	8000140 <__udivsi3>
 8001472:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001474:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001476:	001a      	movs	r2, r3
 8001478:	4911      	ldr	r1, [pc, #68]	; (80014c0 <UART_SetConfig+0x144>)
 800147a:	3a10      	subs	r2, #16
 800147c:	428a      	cmp	r2, r1
 800147e:	d8d2      	bhi.n	8001426 <UART_SetConfig+0xaa>
      huart->Instance->BRR = usartdiv;
 8001480:	6822      	ldr	r2, [r4, #0]
 8001482:	60d3      	str	r3, [r2, #12]
 8001484:	e7e5      	b.n	8001452 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 8001486:	f7ff fdc9 	bl	800101c <HAL_RCC_GetSysClockFreq>
 800148a:	e7e8      	b.n	800145e <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800148c:	6863      	ldr	r3, [r4, #4]
 800148e:	0858      	lsrs	r0, r3, #1
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	e7e9      	b.n	800146a <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001496:	4299      	cmp	r1, r3
 8001498:	d0cf      	beq.n	800143a <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 800149a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800149c:	2300      	movs	r3, #0
 800149e:	e7ea      	b.n	8001476 <UART_SetConfig+0xfa>
 80014a0:	ffff69f3 	.word	0xffff69f3
 80014a4:	ffffcfff 	.word	0xffffcfff
 80014a8:	fffff4ff 	.word	0xfffff4ff
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	080026fc 	.word	0x080026fc
 80014b8:	40004400 	.word	0x40004400
 80014bc:	00f42400 	.word	0x00f42400
 80014c0:	0000ffef 	.word	0x0000ffef
 80014c4:	007a1200 	.word	0x007a1200

080014c8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80014c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80014ca:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80014cc:	07da      	lsls	r2, r3, #31
 80014ce:	d506      	bpl.n	80014de <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80014d0:	6801      	ldr	r1, [r0, #0]
 80014d2:	4c28      	ldr	r4, [pc, #160]	; (8001574 <UART_AdvFeatureConfig+0xac>)
 80014d4:	684a      	ldr	r2, [r1, #4]
 80014d6:	4022      	ands	r2, r4
 80014d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80014da:	4322      	orrs	r2, r4
 80014dc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80014de:	079a      	lsls	r2, r3, #30
 80014e0:	d506      	bpl.n	80014f0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80014e2:	6801      	ldr	r1, [r0, #0]
 80014e4:	4c24      	ldr	r4, [pc, #144]	; (8001578 <UART_AdvFeatureConfig+0xb0>)
 80014e6:	684a      	ldr	r2, [r1, #4]
 80014e8:	4022      	ands	r2, r4
 80014ea:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80014ec:	4322      	orrs	r2, r4
 80014ee:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80014f0:	075a      	lsls	r2, r3, #29
 80014f2:	d506      	bpl.n	8001502 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80014f4:	6801      	ldr	r1, [r0, #0]
 80014f6:	4c21      	ldr	r4, [pc, #132]	; (800157c <UART_AdvFeatureConfig+0xb4>)
 80014f8:	684a      	ldr	r2, [r1, #4]
 80014fa:	4022      	ands	r2, r4
 80014fc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80014fe:	4322      	orrs	r2, r4
 8001500:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001502:	071a      	lsls	r2, r3, #28
 8001504:	d506      	bpl.n	8001514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001506:	6801      	ldr	r1, [r0, #0]
 8001508:	4c1d      	ldr	r4, [pc, #116]	; (8001580 <UART_AdvFeatureConfig+0xb8>)
 800150a:	684a      	ldr	r2, [r1, #4]
 800150c:	4022      	ands	r2, r4
 800150e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001510:	4322      	orrs	r2, r4
 8001512:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001514:	06da      	lsls	r2, r3, #27
 8001516:	d506      	bpl.n	8001526 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001518:	6801      	ldr	r1, [r0, #0]
 800151a:	4c1a      	ldr	r4, [pc, #104]	; (8001584 <UART_AdvFeatureConfig+0xbc>)
 800151c:	688a      	ldr	r2, [r1, #8]
 800151e:	4022      	ands	r2, r4
 8001520:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001522:	4322      	orrs	r2, r4
 8001524:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001526:	069a      	lsls	r2, r3, #26
 8001528:	d506      	bpl.n	8001538 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800152a:	6801      	ldr	r1, [r0, #0]
 800152c:	4c16      	ldr	r4, [pc, #88]	; (8001588 <UART_AdvFeatureConfig+0xc0>)
 800152e:	688a      	ldr	r2, [r1, #8]
 8001530:	4022      	ands	r2, r4
 8001532:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001534:	4322      	orrs	r2, r4
 8001536:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001538:	065a      	lsls	r2, r3, #25
 800153a:	d510      	bpl.n	800155e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800153c:	6801      	ldr	r1, [r0, #0]
 800153e:	4d13      	ldr	r5, [pc, #76]	; (800158c <UART_AdvFeatureConfig+0xc4>)
 8001540:	684a      	ldr	r2, [r1, #4]
 8001542:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001544:	402a      	ands	r2, r5
 8001546:	4322      	orrs	r2, r4
 8001548:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	0352      	lsls	r2, r2, #13
 800154e:	4294      	cmp	r4, r2
 8001550:	d105      	bne.n	800155e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001552:	684a      	ldr	r2, [r1, #4]
 8001554:	4c0e      	ldr	r4, [pc, #56]	; (8001590 <UART_AdvFeatureConfig+0xc8>)
 8001556:	4022      	ands	r2, r4
 8001558:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800155a:	4322      	orrs	r2, r4
 800155c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800155e:	061b      	lsls	r3, r3, #24
 8001560:	d506      	bpl.n	8001570 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001562:	6802      	ldr	r2, [r0, #0]
 8001564:	490b      	ldr	r1, [pc, #44]	; (8001594 <UART_AdvFeatureConfig+0xcc>)
 8001566:	6853      	ldr	r3, [r2, #4]
 8001568:	400b      	ands	r3, r1
 800156a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800156c:	430b      	orrs	r3, r1
 800156e:	6053      	str	r3, [r2, #4]
  }
}
 8001570:	bd30      	pop	{r4, r5, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	fffdffff 	.word	0xfffdffff
 8001578:	fffeffff 	.word	0xfffeffff
 800157c:	fffbffff 	.word	0xfffbffff
 8001580:	ffff7fff 	.word	0xffff7fff
 8001584:	ffffefff 	.word	0xffffefff
 8001588:	ffffdfff 	.word	0xffffdfff
 800158c:	ffefffff 	.word	0xffefffff
 8001590:	ff9fffff 	.word	0xff9fffff
 8001594:	fff7ffff 	.word	0xfff7ffff

08001598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800159a:	2780      	movs	r7, #128	; 0x80
{
 800159c:	0004      	movs	r4, r0
 800159e:	000e      	movs	r6, r1
 80015a0:	0015      	movs	r5, r2
 80015a2:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80015a4:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015a6:	6822      	ldr	r2, [r4, #0]
 80015a8:	69d3      	ldr	r3, [r2, #28]
 80015aa:	4033      	ands	r3, r6
 80015ac:	1b9b      	subs	r3, r3, r6
 80015ae:	4259      	negs	r1, r3
 80015b0:	414b      	adcs	r3, r1
 80015b2:	42ab      	cmp	r3, r5
 80015b4:	d001      	beq.n	80015ba <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80015b6:	2000      	movs	r0, #0
 80015b8:	e01c      	b.n	80015f4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80015ba:	9b08      	ldr	r3, [sp, #32]
 80015bc:	3301      	adds	r3, #1
 80015be:	d0f3      	beq.n	80015a8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015c0:	f7fe fe8a 	bl	80002d8 <HAL_GetTick>
 80015c4:	9b01      	ldr	r3, [sp, #4]
 80015c6:	9a08      	ldr	r2, [sp, #32]
 80015c8:	1ac0      	subs	r0, r0, r3
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	4282      	cmp	r2, r0
 80015ce:	d301      	bcc.n	80015d4 <UART_WaitOnFlagUntilTimeout+0x3c>
 80015d0:	2a00      	cmp	r2, #0
 80015d2:	d110      	bne.n	80015f6 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4913      	ldr	r1, [pc, #76]	; (8001624 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80015d8:	400a      	ands	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	31a3      	adds	r1, #163	; 0xa3
 80015e0:	31ff      	adds	r1, #255	; 0xff
 80015e2:	438a      	bics	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80015e6:	2320      	movs	r3, #32
 80015e8:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80015ea:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80015ec:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80015ee:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80015f0:	3470      	adds	r4, #112	; 0x70
 80015f2:	7023      	strb	r3, [r4, #0]
}
 80015f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80015f6:	2104      	movs	r1, #4
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	420a      	tst	r2, r1
 80015fc:	d0d3      	beq.n	80015a6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80015fe:	69da      	ldr	r2, [r3, #28]
 8001600:	423a      	tst	r2, r7
 8001602:	d0d0      	beq.n	80015a6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001604:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4906      	ldr	r1, [pc, #24]	; (8001624 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800160a:	400a      	ands	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	31a3      	adds	r1, #163	; 0xa3
 8001612:	31ff      	adds	r1, #255	; 0xff
 8001614:	438a      	bics	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001618:	2320      	movs	r3, #32
 800161a:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800161c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800161e:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001620:	e7e4      	b.n	80015ec <UART_WaitOnFlagUntilTimeout+0x54>
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	fffffe5f 	.word	0xfffffe5f

08001628 <HAL_UART_Transmit>:
{
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	b087      	sub	sp, #28
 800162c:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800162e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001630:	0004      	movs	r4, r0
 8001632:	000d      	movs	r5, r1
 8001634:	0017      	movs	r7, r2
    return HAL_BUSY;
 8001636:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001638:	2b20      	cmp	r3, #32
 800163a:	d149      	bne.n	80016d0 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 800163c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800163e:	2900      	cmp	r1, #0
 8001640:	d046      	beq.n	80016d0 <HAL_UART_Transmit+0xa8>
 8001642:	2a00      	cmp	r2, #0
 8001644:	d044      	beq.n	80016d0 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	68a2      	ldr	r2, [r4, #8]
 800164a:	015b      	lsls	r3, r3, #5
 800164c:	429a      	cmp	r2, r3
 800164e:	d104      	bne.n	800165a <HAL_UART_Transmit+0x32>
 8001650:	6923      	ldr	r3, [r4, #16]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001656:	4201      	tst	r1, r0
 8001658:	d13a      	bne.n	80016d0 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 800165a:	0023      	movs	r3, r4
 800165c:	3370      	adds	r3, #112	; 0x70
 800165e:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001660:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001662:	2a01      	cmp	r2, #1
 8001664:	d034      	beq.n	80016d0 <HAL_UART_Transmit+0xa8>
 8001666:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001668:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 800166a:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800166c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800166e:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001670:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001672:	f7fe fe31 	bl	80002d8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001676:	0023      	movs	r3, r4
 8001678:	3350      	adds	r3, #80	; 0x50
 800167a:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 800167c:	3302      	adds	r3, #2
 800167e:	9303      	str	r3, [sp, #12]
 8001680:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001686:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001688:	015b      	lsls	r3, r3, #5
 800168a:	429a      	cmp	r2, r3
 800168c:	d104      	bne.n	8001698 <HAL_UART_Transmit+0x70>
 800168e:	6923      	ldr	r3, [r4, #16]
 8001690:	42b3      	cmp	r3, r6
 8001692:	d101      	bne.n	8001698 <HAL_UART_Transmit+0x70>
 8001694:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8001696:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8001698:	0023      	movs	r3, r4
 800169a:	3352      	adds	r3, #82	; 0x52
 800169c:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800169e:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80016a0:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80016a6:	2a00      	cmp	r2, #0
 80016a8:	d10a      	bne.n	80016c0 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016aa:	2140      	movs	r1, #64	; 0x40
 80016ac:	0020      	movs	r0, r4
 80016ae:	f7ff ff73 	bl	8001598 <UART_WaitOnFlagUntilTimeout>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	d10b      	bne.n	80016ce <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 80016b6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80016b8:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80016ba:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80016bc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80016be:	e007      	b.n	80016d0 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016c0:	2200      	movs	r2, #0
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	0020      	movs	r0, r4
 80016c6:	f7ff ff67 	bl	8001598 <UART_WaitOnFlagUntilTimeout>
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d002      	beq.n	80016d4 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80016ce:	2003      	movs	r0, #3
}
 80016d0:	b007      	add	sp, #28
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80016d6:	2d00      	cmp	r5, #0
 80016d8:	d10b      	bne.n	80016f2 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016da:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80016dc:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016de:	05db      	lsls	r3, r3, #23
 80016e0:	0ddb      	lsrs	r3, r3, #23
 80016e2:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80016e4:	9b03      	ldr	r3, [sp, #12]
 80016e6:	9a03      	ldr	r2, [sp, #12]
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	8013      	strh	r3, [r2, #0]
 80016f0:	e7d2      	b.n	8001698 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80016f2:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80016f4:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80016f6:	8513      	strh	r3, [r2, #40]	; 0x28
 80016f8:	e7f4      	b.n	80016e4 <HAL_UART_Transmit+0xbc>
	...

080016fc <UART_CheckIdleState>:
{
 80016fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016fe:	2600      	movs	r6, #0
{
 8001700:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001702:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001704:	f7fe fde8 	bl	80002d8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001708:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800170a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	071b      	lsls	r3, r3, #28
 8001710:	d415      	bmi.n	800173e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	075b      	lsls	r3, r3, #29
 8001718:	d50a      	bpl.n	8001730 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <UART_CheckIdleState+0x5c>)
 800171e:	2200      	movs	r2, #0
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	03c9      	lsls	r1, r1, #15
 8001724:	002b      	movs	r3, r5
 8001726:	0020      	movs	r0, r4
 8001728:	f7ff ff36 	bl	8001598 <UART_WaitOnFlagUntilTimeout>
 800172c:	2800      	cmp	r0, #0
 800172e:	d111      	bne.n	8001754 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001730:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001732:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001734:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001736:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001738:	3470      	adds	r4, #112	; 0x70
 800173a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800173c:	e00b      	b.n	8001756 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <UART_CheckIdleState+0x5c>)
 8001742:	0032      	movs	r2, r6
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	0389      	lsls	r1, r1, #14
 8001748:	0003      	movs	r3, r0
 800174a:	0020      	movs	r0, r4
 800174c:	f7ff ff24 	bl	8001598 <UART_WaitOnFlagUntilTimeout>
 8001750:	2800      	cmp	r0, #0
 8001752:	d0de      	beq.n	8001712 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001754:	2003      	movs	r0, #3
}
 8001756:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001758:	01ffffff 	.word	0x01ffffff

0800175c <HAL_UART_Init>:
{
 800175c:	b510      	push	{r4, lr}
 800175e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001760:	d101      	bne.n	8001766 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001762:	2001      	movs	r0, #1
}
 8001764:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001766:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800176c:	0002      	movs	r2, r0
 800176e:	3270      	adds	r2, #112	; 0x70
 8001770:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001772:	f000 faa9 	bl	8001cc8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001776:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001778:	2101      	movs	r1, #1
 800177a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800177c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800177e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001780:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001782:	438b      	bics	r3, r1
 8001784:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001786:	f7ff fdf9 	bl	800137c <UART_SetConfig>
 800178a:	2801      	cmp	r0, #1
 800178c:	d0e9      	beq.n	8001762 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800178e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001794:	0020      	movs	r0, r4
 8001796:	f7ff fe97 	bl	80014c8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	4907      	ldr	r1, [pc, #28]	; (80017bc <HAL_UART_Init+0x60>)
 800179e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80017a0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017a2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017a4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	438a      	bics	r2, r1
 80017ac:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80017ae:	2201      	movs	r2, #1
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80017b6:	f7ff ffa1 	bl	80016fc <UART_CheckIdleState>
 80017ba:	e7d3      	b.n	8001764 <HAL_UART_Init+0x8>
 80017bc:	ffffb7ff 	.word	0xffffb7ff

080017c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80017c0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
 80017c2:	2401      	movs	r4, #1
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <FATFS_LinkDriverEx+0x40>)
 80017c6:	7a5d      	ldrb	r5, [r3, #9]
 80017c8:	42a5      	cmp	r5, r4
 80017ca:	d816      	bhi.n	80017fa <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 80017cc:	2400      	movs	r4, #0
 80017ce:	7a5d      	ldrb	r5, [r3, #9]
 80017d0:	b2ed      	uxtb	r5, r5
 80017d2:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 80017d4:	7a5d      	ldrb	r5, [r3, #9]
 80017d6:	00ad      	lsls	r5, r5, #2
 80017d8:	195d      	adds	r5, r3, r5
 80017da:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 80017dc:	7a58      	ldrb	r0, [r3, #9]
 80017de:	1818      	adds	r0, r3, r0
 80017e0:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80017e2:	7a5a      	ldrb	r2, [r3, #9]
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	1c50      	adds	r0, r2, #1
 80017e8:	b2c0      	uxtb	r0, r0
 80017ea:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 80017ec:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 80017ee:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 80017f0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80017f2:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 80017f4:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 80017f6:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80017f8:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 80017fa:	0020      	movs	r0, r4
 80017fc:	bd30      	pop	{r4, r5, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	200000a4 	.word	0x200000a4

08001804 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8001804:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	f7ff ffda 	bl	80017c0 <FATFS_LinkDriverEx>
}
 800180c:	bd10      	pop	{r4, pc}
	...

08001810 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8001810:	b510      	push	{r4, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8001812:	4903      	ldr	r1, [pc, #12]	; (8001820 <MX_FATFS_Init+0x10>)
 8001814:	4803      	ldr	r0, [pc, #12]	; (8001824 <MX_FATFS_Init+0x14>)
 8001816:	f7ff fff5 	bl	8001804 <FATFS_LinkDriver>
 800181a:	4b03      	ldr	r3, [pc, #12]	; (8001828 <MX_FATFS_Init+0x18>)
 800181c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800181e:	bd10      	pop	{r4, pc}
 8001820:	200000c0 	.word	0x200000c0
 8001824:	20000010 	.word	0x20000010
 8001828:	200000c4 	.word	0x200000c4

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182e:	2510      	movs	r5, #16
{
 8001830:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	2230      	movs	r2, #48	; 0x30
 8001834:	2100      	movs	r1, #0
 8001836:	a80a      	add	r0, sp, #40	; 0x28
 8001838:	f000 fb23 	bl	8001e82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183c:	002a      	movs	r2, r5
 800183e:	2100      	movs	r1, #0
 8001840:	a801      	add	r0, sp, #4
 8001842:	f000 fb1e 	bl	8001e82 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001846:	2214      	movs	r2, #20
 8001848:	2100      	movs	r1, #0
 800184a:	a805      	add	r0, sp, #20
 800184c:	f000 fb19 	bl	8001e82 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001850:	2311      	movs	r3, #17
 8001852:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800185a:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800185c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800185e:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001860:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001862:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001864:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001866:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001868:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800186a:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800186c:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186e:	f7ff f9d3 	bl	8000c18 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001872:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001874:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001876:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001878:	0021      	movs	r1, r4
 800187a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187e:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001880:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001882:	f7ff fbfd 	bl	8001080 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001886:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001888:	9405      	str	r4, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800188a:	9507      	str	r5, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188c:	f7ff fc8c 	bl	80011a8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001890:	b017      	add	sp, #92	; 0x5c
 8001892:	bd30      	pop	{r4, r5, pc}

08001894 <main>:
{
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8001898:	f7fe fd02 	bl	80002a0 <HAL_Init>
  SystemClock_Config();
 800189c:	f7ff ffc6 	bl	800182c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	2214      	movs	r2, #20
 80018a2:	2100      	movs	r1, #0
 80018a4:	a80d      	add	r0, sp, #52	; 0x34
 80018a6:	f000 faec 	bl	8001e82 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	4d9b      	ldr	r5, [pc, #620]	; (8001b1c <main+0x288>)
 80018ae:	03c9      	lsls	r1, r1, #15
 80018b0:	696a      	ldr	r2, [r5, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80018b2:	27c4      	movs	r7, #196	; 0xc4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b4:	430a      	orrs	r2, r1
 80018b6:	616a      	str	r2, [r5, #20]
 80018b8:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80018ba:	00bf      	lsls	r7, r7, #2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018bc:	400b      	ands	r3, r1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018be:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c0:	9309      	str	r3, [sp, #36]	; 0x24
 80018c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	696a      	ldr	r2, [r5, #20]
 80018c6:	0309      	lsls	r1, r1, #12
 80018c8:	430a      	orrs	r2, r1
 80018ca:	616a      	str	r2, [r5, #20]
 80018cc:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80018ce:	4894      	ldr	r0, [pc, #592]	; (8001b20 <main+0x28c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d0:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d4:	930a      	str	r3, [sp, #40]	; 0x28
 80018d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	696a      	ldr	r2, [r5, #20]
 80018da:	0289      	lsls	r1, r1, #10
 80018dc:	430a      	orrs	r2, r1
 80018de:	616a      	str	r2, [r5, #20]
 80018e0:	696b      	ldr	r3, [r5, #20]

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80018ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ec:	696a      	ldr	r2, [r5, #20]
 80018ee:	02c9      	lsls	r1, r1, #11
 80018f0:	430a      	orrs	r2, r1
 80018f2:	616a      	str	r2, [r5, #20]
 80018f4:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f8:	400b      	ands	r3, r1
 80018fa:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80018fc:	0039      	movs	r1, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 8001900:	f7ff f97e 	bl	8000c00 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001904:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001906:	2601      	movs	r6, #1
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001908:	a90d      	add	r1, sp, #52	; 0x34
 800190a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800190c:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001912:	f7ff f8bf 	bl	8000a94 <HAL_GPIO_Init>
  /*Configure GPIO pins : PC4 LD4_BLUE_LED_Pin LD3_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001916:	a90d      	add	r1, sp, #52	; 0x34
 8001918:	4881      	ldr	r0, [pc, #516]	; (8001b20 <main+0x28c>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin;
 800191a:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001922:	f7ff f8b7 	bl	8000a94 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001926:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001928:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800192a:	4333      	orrs	r3, r6
 800192c:	616b      	str	r3, [r5, #20]
 800192e:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001930:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001932:	4033      	ands	r3, r6
 8001934:	9308      	str	r3, [sp, #32]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001936:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001938:	9b08      	ldr	r3, [sp, #32]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800193a:	f7fe ff9f 	bl	800087c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800193e:	2009      	movs	r0, #9
 8001940:	f7fe ffcc 	bl	80008dc <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001944:	220c      	movs	r2, #12
 8001946:	0021      	movs	r1, r4
 8001948:	a80d      	add	r0, sp, #52	; 0x34
 800194a:	f000 fa9a 	bl	8001e82 <memset>
  hadc.Instance = ADC1;
 800194e:	4d75      	ldr	r5, [pc, #468]	; (8001b24 <main+0x290>)
 8001950:	4b75      	ldr	r3, [pc, #468]	; (8001b28 <main+0x294>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001952:	2704      	movs	r7, #4
  hadc.Instance = ADC1;
 8001954:	602b      	str	r3, [r5, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001956:	23c2      	movs	r3, #194	; 0xc2
 8001958:	33ff      	adds	r3, #255	; 0xff
 800195a:	61eb      	str	r3, [r5, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800195c:	0028      	movs	r0, r5
  hadc.Init.DMAContinuousRequests = DISABLE;
 800195e:	1d6b      	adds	r3, r5, #5
 8001960:	77dc      	strb	r4, [r3, #31]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001962:	606c      	str	r4, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001964:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001966:	60ec      	str	r4, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001968:	612e      	str	r6, [r5, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800196a:	616f      	str	r7, [r5, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800196c:	762c      	strb	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800196e:	766c      	strb	r4, [r5, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001970:	76ae      	strb	r6, [r5, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001972:	76ec      	strb	r4, [r5, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001974:	622c      	str	r4, [r5, #32]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001976:	62ae      	str	r6, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001978:	f7fe fd76 	bl	8000468 <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	015b      	lsls	r3, r3, #5
 8001980:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001982:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001984:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001986:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001988:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 800198a:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800198c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800198e:	f7fe fef5 	bl	800077c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 8001992:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001994:	a90d      	add	r1, sp, #52	; 0x34
 8001996:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_2;
 8001998:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800199a:	f7fe feef 	bl	800077c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 800199e:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019a0:	a90d      	add	r1, sp, #52	; 0x34
 80019a2:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_3;
 80019a4:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019a6:	f7fe fee9 	bl	800077c <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019aa:	a90d      	add	r1, sp, #52	; 0x34
 80019ac:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_4;
 80019ae:	970d      	str	r7, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019b0:	f7fe fee4 	bl	800077c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;
 80019b4:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019b6:	a90d      	add	r1, sp, #52	; 0x34
 80019b8:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 80019ba:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019bc:	f7fe fede 	bl	800077c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 80019c0:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019c2:	a90d      	add	r1, sp, #52	; 0x34
 80019c4:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_6;
 80019c6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019c8:	f7fe fed8 	bl	800077c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;
 80019cc:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019ce:	a90d      	add	r1, sp, #52	; 0x34
 80019d0:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_7;
 80019d2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019d4:	f7fe fed2 	bl	800077c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 80019d8:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019da:	a90d      	add	r1, sp, #52	; 0x34
 80019dc:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_8;
 80019de:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019e0:	f7fe fecc 	bl	800077c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_9;
 80019e4:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019e6:	a90d      	add	r1, sp, #52	; 0x34
 80019e8:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 80019ea:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Channel = ADC_CHANNEL_10;
 80019ec:	3706      	adds	r7, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019ee:	f7fe fec5 	bl	800077c <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019f2:	a90d      	add	r1, sp, #52	; 0x34
 80019f4:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_10;
 80019f6:	970d      	str	r7, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80019f8:	f7fe fec0 	bl	800077c <HAL_ADC_ConfigChannel>
  huart1.Instance = USART1;
 80019fc:	4e4b      	ldr	r6, [pc, #300]	; (8001b2c <main+0x298>)
 80019fe:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <main+0x29c>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a00:	0030      	movs	r0, r6
  huart1.Instance = USART1;
 8001a02:	6033      	str	r3, [r6, #0]
  huart1.Init.BaudRate = 115200;
 8001a04:	23e1      	movs	r3, #225	; 0xe1
 8001a06:	025b      	lsls	r3, r3, #9
 8001a08:	6073      	str	r3, [r6, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a0a:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0c:	60b4      	str	r4, [r6, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a0e:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a10:	6134      	str	r4, [r6, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a12:	6173      	str	r3, [r6, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a14:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a16:	61f4      	str	r4, [r6, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a18:	6234      	str	r4, [r6, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a1a:	6274      	str	r4, [r6, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a1c:	f7ff fe9e 	bl	800175c <HAL_UART_Init>
  hspi1.Instance = SPI1;
 8001a20:	4844      	ldr	r0, [pc, #272]	; (8001b34 <main+0x2a0>)
 8001a22:	4b45      	ldr	r3, [pc, #276]	; (8001b38 <main+0x2a4>)
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001a24:	6044      	str	r4, [r0, #4]
  hspi1.Instance = SPI1;
 8001a26:	6003      	str	r3, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a28:	23e0      	movs	r3, #224	; 0xe0
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001a34:	3bfa      	subs	r3, #250	; 0xfa
 8001a36:	3bff      	subs	r3, #255	; 0xff
 8001a38:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3a:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a3e:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a40:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a42:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a44:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a46:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a48:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a4a:	f7ff fc39 	bl	80012c0 <HAL_SPI_Init>
  MX_FATFS_Init();
 8001a4e:	f7ff fedf 	bl	8001810 <MX_FATFS_Init>
	HAL_UART_Transmit(&huart1, msg, strlen(msg), 10);
 8001a52:	003b      	movs	r3, r7
 8001a54:	2222      	movs	r2, #34	; 0x22
 8001a56:	4939      	ldr	r1, [pc, #228]	; (8001b3c <main+0x2a8>)
 8001a58:	0030      	movs	r0, r6
 8001a5a:	f7ff fde5 	bl	8001628 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, msg, strlen(msg), 10);
 8001a5e:	003b      	movs	r3, r7
 8001a60:	2233      	movs	r2, #51	; 0x33
 8001a62:	4937      	ldr	r1, [pc, #220]	; (8001b40 <main+0x2ac>)
 8001a64:	0030      	movs	r0, r6
 8001a66:	f7ff fddf 	bl	8001628 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, LD4_BLUE_LED_Pin);
 8001a6a:	3401      	adds	r4, #1
 8001a6c:	34ff      	adds	r4, #255	; 0xff
 8001a6e:	0021      	movs	r1, r4
 8001a70:	482b      	ldr	r0, [pc, #172]	; (8001b20 <main+0x28c>)
 8001a72:	f7ff f8cb 	bl	8000c0c <HAL_GPIO_TogglePin>
		if (HAL_GPIO_ReadPin(GPIOA, USER_BUTTON_Pin) == GPIO_PIN_SET) {
 8001a76:	2090      	movs	r0, #144	; 0x90
 8001a78:	2101      	movs	r1, #1
 8001a7a:	05c0      	lsls	r0, r0, #23
 8001a7c:	f7ff f8ba 	bl	8000bf4 <HAL_GPIO_ReadPin>
 8001a80:	2801      	cmp	r0, #1
 8001a82:	d146      	bne.n	8001b12 <main+0x27e>
				HAL_GPIO_TogglePin(GPIOC, LD3_GREEN_LED_Pin);
 8001a84:	2780      	movs	r7, #128	; 0x80
 8001a86:	2406      	movs	r4, #6
 8001a88:	00bf      	lsls	r7, r7, #2
 8001a8a:	0039      	movs	r1, r7
 8001a8c:	4824      	ldr	r0, [pc, #144]	; (8001b20 <main+0x28c>)
 8001a8e:	f7ff f8bd 	bl	8000c0c <HAL_GPIO_TogglePin>
 8001a92:	3c01      	subs	r4, #1
				HAL_Delay(100);  //1000ms delay
 8001a94:	2064      	movs	r0, #100	; 0x64
 8001a96:	f7fe fc25 	bl	80002e4 <HAL_Delay>
			for (int i = 0; i < 6; i++) {
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d1f5      	bne.n	8001a8a <main+0x1f6>
	HAL_ADC_Start_DMA(&hadc, value, 10);  //start the adc in dma mode
 8001a9e:	4c29      	ldr	r4, [pc, #164]	; (8001b44 <main+0x2b0>)
 8001aa0:	220a      	movs	r2, #10
 8001aa2:	0021      	movs	r1, r4
 8001aa4:	0028      	movs	r0, r5
 8001aa6:	f7fe fdd1 	bl	800064c <HAL_ADC_Start_DMA>
	char *str = malloc(sizeof(uint32_t) * 10 + sizeof(char) * 9);
 8001aaa:	2031      	movs	r0, #49	; 0x31
 8001aac:	f000 f9d6 	bl	8001e5c <malloc>
 8001ab0:	0007      	movs	r7, r0
	sprintf(str, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d", value[0], value[1], value[2], value[3], value[4], value[5], value[6], value[7], value[8], value[9]);
 8001ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ab4:	4924      	ldr	r1, [pc, #144]	; (8001b48 <main+0x2b4>)
 8001ab6:	9307      	str	r3, [sp, #28]
 8001ab8:	6a23      	ldr	r3, [r4, #32]
 8001aba:	0038      	movs	r0, r7
 8001abc:	9306      	str	r3, [sp, #24]
 8001abe:	69e3      	ldr	r3, [r4, #28]
 8001ac0:	9305      	str	r3, [sp, #20]
 8001ac2:	69a3      	ldr	r3, [r4, #24]
 8001ac4:	9304      	str	r3, [sp, #16]
 8001ac6:	6963      	ldr	r3, [r4, #20]
 8001ac8:	9303      	str	r3, [sp, #12]
 8001aca:	6923      	ldr	r3, [r4, #16]
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	68e3      	ldr	r3, [r4, #12]
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	68a3      	ldr	r3, [r4, #8]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	6863      	ldr	r3, [r4, #4]
 8001ad8:	6822      	ldr	r2, [r4, #0]
 8001ada:	f000 fa95 	bl	8002008 <siprintf>
	HAL_UART_Transmit(&huart1, str, strlen(str), 10);
 8001ade:	0038      	movs	r0, r7
 8001ae0:	f7fe fb12 	bl	8000108 <strlen>
 8001ae4:	0039      	movs	r1, r7
 8001ae6:	b282      	uxth	r2, r0
 8001ae8:	230a      	movs	r3, #10
 8001aea:	0030      	movs	r0, r6
 8001aec:	f7ff fd9c 	bl	8001628 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\r\n", 2, 10);
 8001af0:	230a      	movs	r3, #10
 8001af2:	2202      	movs	r2, #2
 8001af4:	4915      	ldr	r1, [pc, #84]	; (8001b4c <main+0x2b8>)
 8001af6:	0030      	movs	r0, r6
 8001af8:	f7ff fd96 	bl	8001628 <HAL_UART_Transmit>
	HAL_ADC_Stop(&hadc);
 8001afc:	0028      	movs	r0, r5
 8001afe:	f7fe fd87 	bl	8000610 <HAL_ADC_Stop>
	HAL_ADC_Start(&hadc);
 8001b02:	0028      	movs	r0, r5
 8001b04:	f7fe fd58 	bl	80005b8 <HAL_ADC_Start>
	HAL_Delay(1000);  //1000ms delay
 8001b08:	20fa      	movs	r0, #250	; 0xfa
 8001b0a:	0080      	lsls	r0, r0, #2
 8001b0c:	f7fe fbea 	bl	80002e4 <HAL_Delay>
 8001b10:	e7cf      	b.n	8001ab2 <main+0x21e>
		HAL_Delay(100);
 8001b12:	2064      	movs	r0, #100	; 0x64
 8001b14:	f7fe fbe6 	bl	80002e4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LD4_BLUE_LED_Pin);
 8001b18:	e7a9      	b.n	8001a6e <main+0x1da>
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48000800 	.word	0x48000800
 8001b24:	2000124c 	.word	0x2000124c
 8001b28:	40012400 	.word	0x40012400
 8001b2c:	20001124 	.word	0x20001124
 8001b30:	40013800 	.word	0x40013800
 8001b34:	200011a4 	.word	0x200011a4
 8001b38:	40013000 	.word	0x40013000
 8001b3c:	08002700 	.word	0x08002700
 8001b40:	08002723 	.word	0x08002723
 8001b44:	2000128c 	.word	0x2000128c
 8001b48:	08002757 	.word	0x08002757
 8001b4c:	08002754 	.word	0x08002754

08001b50 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b54:	2001      	movs	r0, #1
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_MspInit+0x2c>)
{
 8001b58:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	6999      	ldr	r1, [r3, #24]
 8001b5c:	4301      	orrs	r1, r0
 8001b5e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b60:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b64:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4002      	ands	r2, r0
 8001b68:	9200      	str	r2, [sp, #0]
 8001b6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	69da      	ldr	r2, [r3, #28]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	61da      	str	r2, [r3, #28]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	400b      	ands	r3, r1
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7a:	b002      	add	sp, #8
 8001b7c:	4770      	bx	lr
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	40021000 	.word	0x40021000

08001b84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	0005      	movs	r5, r0
 8001b88:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	2214      	movs	r2, #20
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	a805      	add	r0, sp, #20
 8001b90:	f000 f977 	bl	8001e82 <memset>
  if(hadc->Instance==ADC1)
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_ADC_MspInit+0xc8>)
 8001b96:	682a      	ldr	r2, [r5, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d154      	bne.n	8001c46 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b9c:	2680      	movs	r6, #128	; 0x80
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_ADC_MspInit+0xcc>)
 8001ba2:	00b6      	lsls	r6, r6, #2
 8001ba4:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	0300      	lsls	r0, r0, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ba8:	4332      	orrs	r2, r6
 8001baa:	619a      	str	r2, [r3, #24]
 8001bac:	699a      	ldr	r2, [r3, #24]
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bae:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bb0:	4032      	ands	r2, r6
 8001bb2:	9201      	str	r2, [sp, #4]
 8001bb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	6959      	ldr	r1, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2700      	movs	r7, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	4301      	orrs	r1, r0
 8001bbc:	6159      	str	r1, [r3, #20]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc4:	9202      	str	r2, [sp, #8]
 8001bc6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc8:	6959      	ldr	r1, [r3, #20]
 8001bca:	0280      	lsls	r0, r0, #10
 8001bcc:	4301      	orrs	r1, r0
 8001bce:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd4:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	4002      	ands	r2, r0
 8001bd8:	9203      	str	r2, [sp, #12]
 8001bda:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bde:	481d      	ldr	r0, [pc, #116]	; (8001c54 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	430a      	orrs	r2, r1
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be6:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	400b      	ands	r3, r1
 8001bea:	9304      	str	r3, [sp, #16]
 8001bec:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bee:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bf2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf4:	f7fe ff4e 	bl	8000a94 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001bfa:	23fe      	movs	r3, #254	; 0xfe
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	a905      	add	r1, sp, #20
 8001bfe:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001c00:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c02:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f7fe ff45 	bl	8000a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	4813      	ldr	r0, [pc, #76]	; (8001c58 <HAL_ADC_MspInit+0xd4>)
 8001c0c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c0e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c10:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	f7fe ff3e 	bl	8000a94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001c18:	4c10      	ldr	r4, [pc, #64]	; (8001c5c <HAL_ADC_MspInit+0xd8>)
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_ADC_MspInit+0xdc>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001c1c:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 8001c1e:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001c2a:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c2c:	6067      	str	r7, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2e:	60a7      	str	r7, [r4, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c30:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001c32:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001c34:	61e7      	str	r7, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001c36:	f7fe fe77 	bl	8000928 <HAL_DMA_Init>
 8001c3a:	42b8      	cmp	r0, r7
 8001c3c:	d001      	beq.n	8001c42 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001c3e:	f7ff ff87 	bl	8001b50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001c42:	632c      	str	r4, [r5, #48]	; 0x30
 8001c44:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c46:	b00b      	add	sp, #44	; 0x2c
 8001c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40012400 	.word	0x40012400
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000400 	.word	0x48000400
 8001c5c:	20001208 	.word	0x20001208
 8001c60:	40020008 	.word	0x40020008

08001c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c64:	b510      	push	{r4, lr}
 8001c66:	0004      	movs	r4, r0
 8001c68:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6a:	2214      	movs	r2, #20
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	a803      	add	r0, sp, #12
 8001c70:	f000 f907 	bl	8001e82 <memset>
  if(hspi->Instance==SPI1)
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_SPI_MspInit+0x58>)
 8001c76:	6822      	ldr	r2, [r4, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d11c      	bne.n	8001cb6 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7c:	2080      	movs	r0, #128	; 0x80
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_SPI_MspInit+0x5c>)
 8001c80:	0140      	lsls	r0, r0, #5
 8001c82:	6999      	ldr	r1, [r3, #24]
 8001c84:	4301      	orrs	r1, r0
 8001c86:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c88:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c8a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8c:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c8e:	4002      	ands	r2, r0
 8001c90:	9201      	str	r2, [sp, #4]
 8001c92:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c94:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ca4:	2338      	movs	r3, #56	; 0x38
 8001ca6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	3b36      	subs	r3, #54	; 0x36
 8001caa:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cac:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cae:	3301      	adds	r3, #1
 8001cb0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f7fe feef 	bl	8000a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cb6:	b008      	add	sp, #32
 8001cb8:	bd10      	pop	{r4, pc}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	40013000 	.word	0x40013000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	48000400 	.word	0x48000400

08001cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc8:	b510      	push	{r4, lr}
 8001cca:	0004      	movs	r4, r0
 8001ccc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	2214      	movs	r2, #20
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	a803      	add	r0, sp, #12
 8001cd4:	f000 f8d5 	bl	8001e82 <memset>
  if(huart->Instance==USART1)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_UART_MspInit+0x60>)
 8001cda:	6822      	ldr	r2, [r4, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d120      	bne.n	8001d22 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce0:	2080      	movs	r0, #128	; 0x80
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_UART_MspInit+0x64>)
 8001ce4:	01c0      	lsls	r0, r0, #7
 8001ce6:	6999      	ldr	r1, [r3, #24]
 8001ce8:	4301      	orrs	r1, r0
 8001cea:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cee:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf2:	4002      	ands	r2, r0
 8001cf4:	9201      	str	r2, [sp, #4]
 8001cf6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	615a      	str	r2, [r3, #20]
 8001d00:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	400b      	ands	r3, r1
 8001d06:	9302      	str	r3, [sp, #8]
 8001d08:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d14:	3301      	adds	r3, #1
 8001d16:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001d1a:	3b02      	subs	r3, #2
 8001d1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f7fe feb9 	bl	8000a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d22:	b008      	add	sp, #32
 8001d24:	bd10      	pop	{r4, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40021000 	.word	0x40021000

08001d30 <NMI_Handler>:
 8001d30:	4770      	bx	lr

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	e7fe      	b.n	8001d32 <HardFault_Handler>

08001d34 <SVC_Handler>:
 8001d34:	4770      	bx	lr

08001d36 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d36:	4770      	bx	lr

08001d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d3a:	f7fe fac1 	bl	80002c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3e:	bd10      	pop	{r4, pc}

08001d40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001d42:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Channel1_IRQHandler+0xc>)
 8001d44:	f7fe fe5d 	bl	8000a02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d48:	bd10      	pop	{r4, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	20001208 	.word	0x20001208

08001d50 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <_sbrk+0x2c>)
{
 8001d52:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8001d54:	6819      	ldr	r1, [r3, #0]
{
 8001d56:	0002      	movs	r2, r0
	if (heap_end == 0)
 8001d58:	2900      	cmp	r1, #0
 8001d5a:	d101      	bne.n	8001d60 <_sbrk+0x10>
		heap_end = &end;
 8001d5c:	4908      	ldr	r1, [pc, #32]	; (8001d80 <_sbrk+0x30>)
 8001d5e:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001d60:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001d62:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001d64:	1882      	adds	r2, r0, r2
 8001d66:	428a      	cmp	r2, r1
 8001d68:	d906      	bls.n	8001d78 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001d6a:	f000 f84d 	bl	8001e08 <__errno>
 8001d6e:	230c      	movs	r3, #12
 8001d70:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001d72:	2001      	movs	r0, #1
 8001d74:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001d76:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8001d78:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001d7a:	e7fc      	b.n	8001d76 <_sbrk+0x26>
 8001d7c:	200000b0 	.word	0x200000b0
 8001d80:	200012b8 	.word	0x200012b8

08001d84 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d84:	4770      	bx	lr
	...

08001d88 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4b02      	ldr	r3, [pc, #8]	; (8001d94 <USER_status+0xc>)
 8001d8c:	701a      	strb	r2, [r3, #0]
    return Stat;
 8001d8e:	7818      	ldrb	r0, [r3, #0]
 8001d90:	b2c0      	uxtb	r0, r0
  /* USER CODE END STATUS */
}
 8001d92:	4770      	bx	lr
 8001d94:	2000000c 	.word	0x2000000c

08001d98 <USER_write>:
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 8001d98:	2000      	movs	r0, #0
 8001d9a:	4770      	bx	lr

08001d9c <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	4770      	bx	lr

08001da0 <USER_read>:
 8001da0:	2000      	movs	r0, #0
 8001da2:	4770      	bx	lr

08001da4 <USER_initialize>:
 8001da4:	2201      	movs	r2, #1
 8001da6:	4b02      	ldr	r3, [pc, #8]	; (8001db0 <USER_initialize+0xc>)
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	7818      	ldrb	r0, [r3, #0]
 8001dac:	b2c0      	uxtb	r0, r0
 8001dae:	4770      	bx	lr
 8001db0:	2000000c 	.word	0x2000000c

08001db4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001db6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db8:	480d      	ldr	r0, [pc, #52]	; (8001df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dba:	490e      	ldr	r1, [pc, #56]	; (8001df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <LoopForever+0xe>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd0:	4c0b      	ldr	r4, [pc, #44]	; (8001e00 <LoopForever+0x16>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001dde:	f7ff ffd1 	bl	8001d84 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001de2:	f000 f817 	bl	8001e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de6:	f7ff fd55 	bl	8001894 <main>

08001dea <LoopForever>:

LoopForever:
    b LoopForever
 8001dea:	e7fe      	b.n	8001dea <LoopForever>
  ldr   r0, =_estack
 8001dec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001df8:	080027d4 	.word	0x080027d4
  ldr r2, =_sbss
 8001dfc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001e00:	200012b8 	.word	0x200012b8

08001e04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC1_COMP_IRQHandler>
	...

08001e08 <__errno>:
 8001e08:	4b01      	ldr	r3, [pc, #4]	; (8001e10 <__errno+0x8>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	4770      	bx	lr
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	20000024 	.word	0x20000024

08001e14 <__libc_init_array>:
 8001e14:	b570      	push	{r4, r5, r6, lr}
 8001e16:	2600      	movs	r6, #0
 8001e18:	4d0c      	ldr	r5, [pc, #48]	; (8001e4c <__libc_init_array+0x38>)
 8001e1a:	4c0d      	ldr	r4, [pc, #52]	; (8001e50 <__libc_init_array+0x3c>)
 8001e1c:	1b64      	subs	r4, r4, r5
 8001e1e:	10a4      	asrs	r4, r4, #2
 8001e20:	42a6      	cmp	r6, r4
 8001e22:	d109      	bne.n	8001e38 <__libc_init_array+0x24>
 8001e24:	2600      	movs	r6, #0
 8001e26:	f000 fc4d 	bl	80026c4 <_init>
 8001e2a:	4d0a      	ldr	r5, [pc, #40]	; (8001e54 <__libc_init_array+0x40>)
 8001e2c:	4c0a      	ldr	r4, [pc, #40]	; (8001e58 <__libc_init_array+0x44>)
 8001e2e:	1b64      	subs	r4, r4, r5
 8001e30:	10a4      	asrs	r4, r4, #2
 8001e32:	42a6      	cmp	r6, r4
 8001e34:	d105      	bne.n	8001e42 <__libc_init_array+0x2e>
 8001e36:	bd70      	pop	{r4, r5, r6, pc}
 8001e38:	00b3      	lsls	r3, r6, #2
 8001e3a:	58eb      	ldr	r3, [r5, r3]
 8001e3c:	4798      	blx	r3
 8001e3e:	3601      	adds	r6, #1
 8001e40:	e7ee      	b.n	8001e20 <__libc_init_array+0xc>
 8001e42:	00b3      	lsls	r3, r6, #2
 8001e44:	58eb      	ldr	r3, [r5, r3]
 8001e46:	4798      	blx	r3
 8001e48:	3601      	adds	r6, #1
 8001e4a:	e7f2      	b.n	8001e32 <__libc_init_array+0x1e>
 8001e4c:	080027cc 	.word	0x080027cc
 8001e50:	080027cc 	.word	0x080027cc
 8001e54:	080027cc 	.word	0x080027cc
 8001e58:	080027d0 	.word	0x080027d0

08001e5c <malloc>:
 8001e5c:	b510      	push	{r4, lr}
 8001e5e:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <malloc+0x10>)
 8001e60:	0001      	movs	r1, r0
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	f000 f860 	bl	8001f28 <_malloc_r>
 8001e68:	bd10      	pop	{r4, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	20000024 	.word	0x20000024

08001e70 <memcpy>:
 8001e70:	2300      	movs	r3, #0
 8001e72:	b510      	push	{r4, lr}
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d100      	bne.n	8001e7a <memcpy+0xa>
 8001e78:	bd10      	pop	{r4, pc}
 8001e7a:	5ccc      	ldrb	r4, [r1, r3]
 8001e7c:	54c4      	strb	r4, [r0, r3]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	e7f8      	b.n	8001e74 <memcpy+0x4>

08001e82 <memset>:
 8001e82:	0003      	movs	r3, r0
 8001e84:	1882      	adds	r2, r0, r2
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d100      	bne.n	8001e8c <memset+0xa>
 8001e8a:	4770      	bx	lr
 8001e8c:	7019      	strb	r1, [r3, #0]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	e7f9      	b.n	8001e86 <memset+0x4>
	...

08001e94 <_free_r>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	0005      	movs	r5, r0
 8001e98:	2900      	cmp	r1, #0
 8001e9a:	d010      	beq.n	8001ebe <_free_r+0x2a>
 8001e9c:	1f0c      	subs	r4, r1, #4
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	da00      	bge.n	8001ea6 <_free_r+0x12>
 8001ea4:	18e4      	adds	r4, r4, r3
 8001ea6:	0028      	movs	r0, r5
 8001ea8:	f000 f8d0 	bl	800204c <__malloc_lock>
 8001eac:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <_free_r+0x90>)
 8001eae:	6813      	ldr	r3, [r2, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <_free_r+0x2c>
 8001eb4:	6063      	str	r3, [r4, #4]
 8001eb6:	6014      	str	r4, [r2, #0]
 8001eb8:	0028      	movs	r0, r5
 8001eba:	f000 f8c8 	bl	800204e <__malloc_unlock>
 8001ebe:	bd70      	pop	{r4, r5, r6, pc}
 8001ec0:	42a3      	cmp	r3, r4
 8001ec2:	d909      	bls.n	8001ed8 <_free_r+0x44>
 8001ec4:	6821      	ldr	r1, [r4, #0]
 8001ec6:	1860      	adds	r0, r4, r1
 8001ec8:	4283      	cmp	r3, r0
 8001eca:	d1f3      	bne.n	8001eb4 <_free_r+0x20>
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	1841      	adds	r1, r0, r1
 8001ed2:	6021      	str	r1, [r4, #0]
 8001ed4:	e7ee      	b.n	8001eb4 <_free_r+0x20>
 8001ed6:	0013      	movs	r3, r2
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d001      	beq.n	8001ee2 <_free_r+0x4e>
 8001ede:	42a2      	cmp	r2, r4
 8001ee0:	d9f9      	bls.n	8001ed6 <_free_r+0x42>
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	1858      	adds	r0, r3, r1
 8001ee6:	42a0      	cmp	r0, r4
 8001ee8:	d10b      	bne.n	8001f02 <_free_r+0x6e>
 8001eea:	6820      	ldr	r0, [r4, #0]
 8001eec:	1809      	adds	r1, r1, r0
 8001eee:	1858      	adds	r0, r3, r1
 8001ef0:	6019      	str	r1, [r3, #0]
 8001ef2:	4282      	cmp	r2, r0
 8001ef4:	d1e0      	bne.n	8001eb8 <_free_r+0x24>
 8001ef6:	6810      	ldr	r0, [r2, #0]
 8001ef8:	6852      	ldr	r2, [r2, #4]
 8001efa:	1841      	adds	r1, r0, r1
 8001efc:	6019      	str	r1, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	e7da      	b.n	8001eb8 <_free_r+0x24>
 8001f02:	42a0      	cmp	r0, r4
 8001f04:	d902      	bls.n	8001f0c <_free_r+0x78>
 8001f06:	230c      	movs	r3, #12
 8001f08:	602b      	str	r3, [r5, #0]
 8001f0a:	e7d5      	b.n	8001eb8 <_free_r+0x24>
 8001f0c:	6821      	ldr	r1, [r4, #0]
 8001f0e:	1860      	adds	r0, r4, r1
 8001f10:	4282      	cmp	r2, r0
 8001f12:	d103      	bne.n	8001f1c <_free_r+0x88>
 8001f14:	6810      	ldr	r0, [r2, #0]
 8001f16:	6852      	ldr	r2, [r2, #4]
 8001f18:	1841      	adds	r1, r0, r1
 8001f1a:	6021      	str	r1, [r4, #0]
 8001f1c:	6062      	str	r2, [r4, #4]
 8001f1e:	605c      	str	r4, [r3, #4]
 8001f20:	e7ca      	b.n	8001eb8 <_free_r+0x24>
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	200000b4 	.word	0x200000b4

08001f28 <_malloc_r>:
 8001f28:	2303      	movs	r3, #3
 8001f2a:	b570      	push	{r4, r5, r6, lr}
 8001f2c:	1ccd      	adds	r5, r1, #3
 8001f2e:	439d      	bics	r5, r3
 8001f30:	3508      	adds	r5, #8
 8001f32:	0006      	movs	r6, r0
 8001f34:	2d0c      	cmp	r5, #12
 8001f36:	d21e      	bcs.n	8001f76 <_malloc_r+0x4e>
 8001f38:	250c      	movs	r5, #12
 8001f3a:	42a9      	cmp	r1, r5
 8001f3c:	d81d      	bhi.n	8001f7a <_malloc_r+0x52>
 8001f3e:	0030      	movs	r0, r6
 8001f40:	f000 f884 	bl	800204c <__malloc_lock>
 8001f44:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <_malloc_r+0xb4>)
 8001f46:	6814      	ldr	r4, [r2, #0]
 8001f48:	0021      	movs	r1, r4
 8001f4a:	2900      	cmp	r1, #0
 8001f4c:	d119      	bne.n	8001f82 <_malloc_r+0x5a>
 8001f4e:	4c24      	ldr	r4, [pc, #144]	; (8001fe0 <_malloc_r+0xb8>)
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <_malloc_r+0x36>
 8001f56:	0030      	movs	r0, r6
 8001f58:	f000 f844 	bl	8001fe4 <_sbrk_r>
 8001f5c:	6020      	str	r0, [r4, #0]
 8001f5e:	0029      	movs	r1, r5
 8001f60:	0030      	movs	r0, r6
 8001f62:	f000 f83f 	bl	8001fe4 <_sbrk_r>
 8001f66:	1c43      	adds	r3, r0, #1
 8001f68:	d12c      	bne.n	8001fc4 <_malloc_r+0x9c>
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	0030      	movs	r0, r6
 8001f6e:	6033      	str	r3, [r6, #0]
 8001f70:	f000 f86d 	bl	800204e <__malloc_unlock>
 8001f74:	e003      	b.n	8001f7e <_malloc_r+0x56>
 8001f76:	2d00      	cmp	r5, #0
 8001f78:	dadf      	bge.n	8001f3a <_malloc_r+0x12>
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	6033      	str	r3, [r6, #0]
 8001f7e:	2000      	movs	r0, #0
 8001f80:	bd70      	pop	{r4, r5, r6, pc}
 8001f82:	680b      	ldr	r3, [r1, #0]
 8001f84:	1b5b      	subs	r3, r3, r5
 8001f86:	d41a      	bmi.n	8001fbe <_malloc_r+0x96>
 8001f88:	2b0b      	cmp	r3, #11
 8001f8a:	d903      	bls.n	8001f94 <_malloc_r+0x6c>
 8001f8c:	600b      	str	r3, [r1, #0]
 8001f8e:	18cc      	adds	r4, r1, r3
 8001f90:	6025      	str	r5, [r4, #0]
 8001f92:	e003      	b.n	8001f9c <_malloc_r+0x74>
 8001f94:	428c      	cmp	r4, r1
 8001f96:	d10e      	bne.n	8001fb6 <_malloc_r+0x8e>
 8001f98:	6863      	ldr	r3, [r4, #4]
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	0030      	movs	r0, r6
 8001f9e:	f000 f856 	bl	800204e <__malloc_unlock>
 8001fa2:	0020      	movs	r0, r4
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	300b      	adds	r0, #11
 8001fa8:	1d23      	adds	r3, r4, #4
 8001faa:	4390      	bics	r0, r2
 8001fac:	1ac3      	subs	r3, r0, r3
 8001fae:	d0e7      	beq.n	8001f80 <_malloc_r+0x58>
 8001fb0:	425a      	negs	r2, r3
 8001fb2:	50e2      	str	r2, [r4, r3]
 8001fb4:	e7e4      	b.n	8001f80 <_malloc_r+0x58>
 8001fb6:	684b      	ldr	r3, [r1, #4]
 8001fb8:	6063      	str	r3, [r4, #4]
 8001fba:	000c      	movs	r4, r1
 8001fbc:	e7ee      	b.n	8001f9c <_malloc_r+0x74>
 8001fbe:	000c      	movs	r4, r1
 8001fc0:	6849      	ldr	r1, [r1, #4]
 8001fc2:	e7c2      	b.n	8001f4a <_malloc_r+0x22>
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	1cc4      	adds	r4, r0, #3
 8001fc8:	439c      	bics	r4, r3
 8001fca:	42a0      	cmp	r0, r4
 8001fcc:	d0e0      	beq.n	8001f90 <_malloc_r+0x68>
 8001fce:	1a21      	subs	r1, r4, r0
 8001fd0:	0030      	movs	r0, r6
 8001fd2:	f000 f807 	bl	8001fe4 <_sbrk_r>
 8001fd6:	1c43      	adds	r3, r0, #1
 8001fd8:	d1da      	bne.n	8001f90 <_malloc_r+0x68>
 8001fda:	e7c6      	b.n	8001f6a <_malloc_r+0x42>
 8001fdc:	200000b4 	.word	0x200000b4
 8001fe0:	200000b8 	.word	0x200000b8

08001fe4 <_sbrk_r>:
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	b570      	push	{r4, r5, r6, lr}
 8001fe8:	4c06      	ldr	r4, [pc, #24]	; (8002004 <_sbrk_r+0x20>)
 8001fea:	0005      	movs	r5, r0
 8001fec:	0008      	movs	r0, r1
 8001fee:	6023      	str	r3, [r4, #0]
 8001ff0:	f7ff feae 	bl	8001d50 <_sbrk>
 8001ff4:	1c43      	adds	r3, r0, #1
 8001ff6:	d103      	bne.n	8002000 <_sbrk_r+0x1c>
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d000      	beq.n	8002000 <_sbrk_r+0x1c>
 8001ffe:	602b      	str	r3, [r5, #0]
 8002000:	bd70      	pop	{r4, r5, r6, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	200012b4 	.word	0x200012b4

08002008 <siprintf>:
 8002008:	b40e      	push	{r1, r2, r3}
 800200a:	b510      	push	{r4, lr}
 800200c:	b09d      	sub	sp, #116	; 0x74
 800200e:	a902      	add	r1, sp, #8
 8002010:	9002      	str	r0, [sp, #8]
 8002012:	6108      	str	r0, [r1, #16]
 8002014:	480b      	ldr	r0, [pc, #44]	; (8002044 <siprintf+0x3c>)
 8002016:	2482      	movs	r4, #130	; 0x82
 8002018:	6088      	str	r0, [r1, #8]
 800201a:	6148      	str	r0, [r1, #20]
 800201c:	2001      	movs	r0, #1
 800201e:	4240      	negs	r0, r0
 8002020:	ab1f      	add	r3, sp, #124	; 0x7c
 8002022:	81c8      	strh	r0, [r1, #14]
 8002024:	4808      	ldr	r0, [pc, #32]	; (8002048 <siprintf+0x40>)
 8002026:	cb04      	ldmia	r3!, {r2}
 8002028:	00a4      	lsls	r4, r4, #2
 800202a:	6800      	ldr	r0, [r0, #0]
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	818c      	strh	r4, [r1, #12]
 8002030:	f000 f870 	bl	8002114 <_svfiprintf_r>
 8002034:	2300      	movs	r3, #0
 8002036:	9a02      	ldr	r2, [sp, #8]
 8002038:	7013      	strb	r3, [r2, #0]
 800203a:	b01d      	add	sp, #116	; 0x74
 800203c:	bc10      	pop	{r4}
 800203e:	bc08      	pop	{r3}
 8002040:	b003      	add	sp, #12
 8002042:	4718      	bx	r3
 8002044:	7fffffff 	.word	0x7fffffff
 8002048:	20000024 	.word	0x20000024

0800204c <__malloc_lock>:
 800204c:	4770      	bx	lr

0800204e <__malloc_unlock>:
 800204e:	4770      	bx	lr

08002050 <__ssputs_r>:
 8002050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002052:	688e      	ldr	r6, [r1, #8]
 8002054:	b085      	sub	sp, #20
 8002056:	0007      	movs	r7, r0
 8002058:	000c      	movs	r4, r1
 800205a:	9203      	str	r2, [sp, #12]
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	429e      	cmp	r6, r3
 8002060:	d839      	bhi.n	80020d6 <__ssputs_r+0x86>
 8002062:	2390      	movs	r3, #144	; 0x90
 8002064:	898a      	ldrh	r2, [r1, #12]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	421a      	tst	r2, r3
 800206a:	d034      	beq.n	80020d6 <__ssputs_r+0x86>
 800206c:	2503      	movs	r5, #3
 800206e:	6909      	ldr	r1, [r1, #16]
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	1a5b      	subs	r3, r3, r1
 8002074:	9302      	str	r3, [sp, #8]
 8002076:	6963      	ldr	r3, [r4, #20]
 8002078:	9802      	ldr	r0, [sp, #8]
 800207a:	435d      	muls	r5, r3
 800207c:	0feb      	lsrs	r3, r5, #31
 800207e:	195d      	adds	r5, r3, r5
 8002080:	9b01      	ldr	r3, [sp, #4]
 8002082:	106d      	asrs	r5, r5, #1
 8002084:	3301      	adds	r3, #1
 8002086:	181b      	adds	r3, r3, r0
 8002088:	42ab      	cmp	r3, r5
 800208a:	d900      	bls.n	800208e <__ssputs_r+0x3e>
 800208c:	001d      	movs	r5, r3
 800208e:	0553      	lsls	r3, r2, #21
 8002090:	d532      	bpl.n	80020f8 <__ssputs_r+0xa8>
 8002092:	0029      	movs	r1, r5
 8002094:	0038      	movs	r0, r7
 8002096:	f7ff ff47 	bl	8001f28 <_malloc_r>
 800209a:	1e06      	subs	r6, r0, #0
 800209c:	d109      	bne.n	80020b2 <__ssputs_r+0x62>
 800209e:	230c      	movs	r3, #12
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	2340      	movs	r3, #64	; 0x40
 80020a4:	2001      	movs	r0, #1
 80020a6:	89a2      	ldrh	r2, [r4, #12]
 80020a8:	4240      	negs	r0, r0
 80020aa:	4313      	orrs	r3, r2
 80020ac:	81a3      	strh	r3, [r4, #12]
 80020ae:	b005      	add	sp, #20
 80020b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020b2:	9a02      	ldr	r2, [sp, #8]
 80020b4:	6921      	ldr	r1, [r4, #16]
 80020b6:	f7ff fedb 	bl	8001e70 <memcpy>
 80020ba:	89a3      	ldrh	r3, [r4, #12]
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <__ssputs_r+0xc0>)
 80020be:	401a      	ands	r2, r3
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	4313      	orrs	r3, r2
 80020c4:	81a3      	strh	r3, [r4, #12]
 80020c6:	9b02      	ldr	r3, [sp, #8]
 80020c8:	6126      	str	r6, [r4, #16]
 80020ca:	18f6      	adds	r6, r6, r3
 80020cc:	6026      	str	r6, [r4, #0]
 80020ce:	6165      	str	r5, [r4, #20]
 80020d0:	9e01      	ldr	r6, [sp, #4]
 80020d2:	1aed      	subs	r5, r5, r3
 80020d4:	60a5      	str	r5, [r4, #8]
 80020d6:	9b01      	ldr	r3, [sp, #4]
 80020d8:	42b3      	cmp	r3, r6
 80020da:	d200      	bcs.n	80020de <__ssputs_r+0x8e>
 80020dc:	001e      	movs	r6, r3
 80020de:	0032      	movs	r2, r6
 80020e0:	9903      	ldr	r1, [sp, #12]
 80020e2:	6820      	ldr	r0, [r4, #0]
 80020e4:	f000 faad 	bl	8002642 <memmove>
 80020e8:	68a3      	ldr	r3, [r4, #8]
 80020ea:	2000      	movs	r0, #0
 80020ec:	1b9b      	subs	r3, r3, r6
 80020ee:	60a3      	str	r3, [r4, #8]
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	199e      	adds	r6, r3, r6
 80020f4:	6026      	str	r6, [r4, #0]
 80020f6:	e7da      	b.n	80020ae <__ssputs_r+0x5e>
 80020f8:	002a      	movs	r2, r5
 80020fa:	0038      	movs	r0, r7
 80020fc:	f000 fab3 	bl	8002666 <_realloc_r>
 8002100:	1e06      	subs	r6, r0, #0
 8002102:	d1e0      	bne.n	80020c6 <__ssputs_r+0x76>
 8002104:	6921      	ldr	r1, [r4, #16]
 8002106:	0038      	movs	r0, r7
 8002108:	f7ff fec4 	bl	8001e94 <_free_r>
 800210c:	e7c7      	b.n	800209e <__ssputs_r+0x4e>
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	fffffb7f 	.word	0xfffffb7f

08002114 <_svfiprintf_r>:
 8002114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002116:	b09f      	sub	sp, #124	; 0x7c
 8002118:	9002      	str	r0, [sp, #8]
 800211a:	9305      	str	r3, [sp, #20]
 800211c:	898b      	ldrh	r3, [r1, #12]
 800211e:	000f      	movs	r7, r1
 8002120:	0016      	movs	r6, r2
 8002122:	061b      	lsls	r3, r3, #24
 8002124:	d511      	bpl.n	800214a <_svfiprintf_r+0x36>
 8002126:	690b      	ldr	r3, [r1, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10e      	bne.n	800214a <_svfiprintf_r+0x36>
 800212c:	2140      	movs	r1, #64	; 0x40
 800212e:	f7ff fefb 	bl	8001f28 <_malloc_r>
 8002132:	6038      	str	r0, [r7, #0]
 8002134:	6138      	str	r0, [r7, #16]
 8002136:	2800      	cmp	r0, #0
 8002138:	d105      	bne.n	8002146 <_svfiprintf_r+0x32>
 800213a:	230c      	movs	r3, #12
 800213c:	9a02      	ldr	r2, [sp, #8]
 800213e:	3801      	subs	r0, #1
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	b01f      	add	sp, #124	; 0x7c
 8002144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002146:	2340      	movs	r3, #64	; 0x40
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	2300      	movs	r3, #0
 800214c:	ad06      	add	r5, sp, #24
 800214e:	616b      	str	r3, [r5, #20]
 8002150:	3320      	adds	r3, #32
 8002152:	766b      	strb	r3, [r5, #25]
 8002154:	3310      	adds	r3, #16
 8002156:	76ab      	strb	r3, [r5, #26]
 8002158:	0034      	movs	r4, r6
 800215a:	7823      	ldrb	r3, [r4, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d147      	bne.n	80021f0 <_svfiprintf_r+0xdc>
 8002160:	1ba3      	subs	r3, r4, r6
 8002162:	9304      	str	r3, [sp, #16]
 8002164:	d00d      	beq.n	8002182 <_svfiprintf_r+0x6e>
 8002166:	1ba3      	subs	r3, r4, r6
 8002168:	0032      	movs	r2, r6
 800216a:	0039      	movs	r1, r7
 800216c:	9802      	ldr	r0, [sp, #8]
 800216e:	f7ff ff6f 	bl	8002050 <__ssputs_r>
 8002172:	1c43      	adds	r3, r0, #1
 8002174:	d100      	bne.n	8002178 <_svfiprintf_r+0x64>
 8002176:	e0b5      	b.n	80022e4 <_svfiprintf_r+0x1d0>
 8002178:	696a      	ldr	r2, [r5, #20]
 800217a:	9b04      	ldr	r3, [sp, #16]
 800217c:	4694      	mov	ip, r2
 800217e:	4463      	add	r3, ip
 8002180:	616b      	str	r3, [r5, #20]
 8002182:	7823      	ldrb	r3, [r4, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d100      	bne.n	800218a <_svfiprintf_r+0x76>
 8002188:	e0ac      	b.n	80022e4 <_svfiprintf_r+0x1d0>
 800218a:	2201      	movs	r2, #1
 800218c:	2300      	movs	r3, #0
 800218e:	4252      	negs	r2, r2
 8002190:	606a      	str	r2, [r5, #4]
 8002192:	a902      	add	r1, sp, #8
 8002194:	3254      	adds	r2, #84	; 0x54
 8002196:	1852      	adds	r2, r2, r1
 8002198:	3401      	adds	r4, #1
 800219a:	602b      	str	r3, [r5, #0]
 800219c:	60eb      	str	r3, [r5, #12]
 800219e:	60ab      	str	r3, [r5, #8]
 80021a0:	7013      	strb	r3, [r2, #0]
 80021a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80021a4:	4e58      	ldr	r6, [pc, #352]	; (8002308 <_svfiprintf_r+0x1f4>)
 80021a6:	2205      	movs	r2, #5
 80021a8:	7821      	ldrb	r1, [r4, #0]
 80021aa:	0030      	movs	r0, r6
 80021ac:	f000 fa3e 	bl	800262c <memchr>
 80021b0:	1c62      	adds	r2, r4, #1
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d120      	bne.n	80021f8 <_svfiprintf_r+0xe4>
 80021b6:	6829      	ldr	r1, [r5, #0]
 80021b8:	06cb      	lsls	r3, r1, #27
 80021ba:	d504      	bpl.n	80021c6 <_svfiprintf_r+0xb2>
 80021bc:	2353      	movs	r3, #83	; 0x53
 80021be:	ae02      	add	r6, sp, #8
 80021c0:	3020      	adds	r0, #32
 80021c2:	199b      	adds	r3, r3, r6
 80021c4:	7018      	strb	r0, [r3, #0]
 80021c6:	070b      	lsls	r3, r1, #28
 80021c8:	d504      	bpl.n	80021d4 <_svfiprintf_r+0xc0>
 80021ca:	2353      	movs	r3, #83	; 0x53
 80021cc:	202b      	movs	r0, #43	; 0x2b
 80021ce:	ae02      	add	r6, sp, #8
 80021d0:	199b      	adds	r3, r3, r6
 80021d2:	7018      	strb	r0, [r3, #0]
 80021d4:	7823      	ldrb	r3, [r4, #0]
 80021d6:	2b2a      	cmp	r3, #42	; 0x2a
 80021d8:	d016      	beq.n	8002208 <_svfiprintf_r+0xf4>
 80021da:	2000      	movs	r0, #0
 80021dc:	210a      	movs	r1, #10
 80021de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021e0:	7822      	ldrb	r2, [r4, #0]
 80021e2:	3a30      	subs	r2, #48	; 0x30
 80021e4:	2a09      	cmp	r2, #9
 80021e6:	d955      	bls.n	8002294 <_svfiprintf_r+0x180>
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d015      	beq.n	8002218 <_svfiprintf_r+0x104>
 80021ec:	9309      	str	r3, [sp, #36]	; 0x24
 80021ee:	e013      	b.n	8002218 <_svfiprintf_r+0x104>
 80021f0:	2b25      	cmp	r3, #37	; 0x25
 80021f2:	d0b5      	beq.n	8002160 <_svfiprintf_r+0x4c>
 80021f4:	3401      	adds	r4, #1
 80021f6:	e7b0      	b.n	800215a <_svfiprintf_r+0x46>
 80021f8:	2301      	movs	r3, #1
 80021fa:	1b80      	subs	r0, r0, r6
 80021fc:	4083      	lsls	r3, r0
 80021fe:	6829      	ldr	r1, [r5, #0]
 8002200:	0014      	movs	r4, r2
 8002202:	430b      	orrs	r3, r1
 8002204:	602b      	str	r3, [r5, #0]
 8002206:	e7cd      	b.n	80021a4 <_svfiprintf_r+0x90>
 8002208:	9b05      	ldr	r3, [sp, #20]
 800220a:	1d18      	adds	r0, r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	9005      	str	r0, [sp, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db39      	blt.n	8002288 <_svfiprintf_r+0x174>
 8002214:	9309      	str	r3, [sp, #36]	; 0x24
 8002216:	0014      	movs	r4, r2
 8002218:	7823      	ldrb	r3, [r4, #0]
 800221a:	2b2e      	cmp	r3, #46	; 0x2e
 800221c:	d10b      	bne.n	8002236 <_svfiprintf_r+0x122>
 800221e:	7863      	ldrb	r3, [r4, #1]
 8002220:	1c62      	adds	r2, r4, #1
 8002222:	2b2a      	cmp	r3, #42	; 0x2a
 8002224:	d13e      	bne.n	80022a4 <_svfiprintf_r+0x190>
 8002226:	9b05      	ldr	r3, [sp, #20]
 8002228:	3402      	adds	r4, #2
 800222a:	1d1a      	adds	r2, r3, #4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	9205      	str	r2, [sp, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db34      	blt.n	800229e <_svfiprintf_r+0x18a>
 8002234:	9307      	str	r3, [sp, #28]
 8002236:	4e35      	ldr	r6, [pc, #212]	; (800230c <_svfiprintf_r+0x1f8>)
 8002238:	7821      	ldrb	r1, [r4, #0]
 800223a:	2203      	movs	r2, #3
 800223c:	0030      	movs	r0, r6
 800223e:	f000 f9f5 	bl	800262c <memchr>
 8002242:	2800      	cmp	r0, #0
 8002244:	d006      	beq.n	8002254 <_svfiprintf_r+0x140>
 8002246:	2340      	movs	r3, #64	; 0x40
 8002248:	1b80      	subs	r0, r0, r6
 800224a:	4083      	lsls	r3, r0
 800224c:	682a      	ldr	r2, [r5, #0]
 800224e:	3401      	adds	r4, #1
 8002250:	4313      	orrs	r3, r2
 8002252:	602b      	str	r3, [r5, #0]
 8002254:	7821      	ldrb	r1, [r4, #0]
 8002256:	2206      	movs	r2, #6
 8002258:	482d      	ldr	r0, [pc, #180]	; (8002310 <_svfiprintf_r+0x1fc>)
 800225a:	1c66      	adds	r6, r4, #1
 800225c:	7629      	strb	r1, [r5, #24]
 800225e:	f000 f9e5 	bl	800262c <memchr>
 8002262:	2800      	cmp	r0, #0
 8002264:	d046      	beq.n	80022f4 <_svfiprintf_r+0x1e0>
 8002266:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <_svfiprintf_r+0x200>)
 8002268:	2b00      	cmp	r3, #0
 800226a:	d12f      	bne.n	80022cc <_svfiprintf_r+0x1b8>
 800226c:	6829      	ldr	r1, [r5, #0]
 800226e:	9b05      	ldr	r3, [sp, #20]
 8002270:	2207      	movs	r2, #7
 8002272:	05c9      	lsls	r1, r1, #23
 8002274:	d528      	bpl.n	80022c8 <_svfiprintf_r+0x1b4>
 8002276:	189b      	adds	r3, r3, r2
 8002278:	4393      	bics	r3, r2
 800227a:	3308      	adds	r3, #8
 800227c:	9305      	str	r3, [sp, #20]
 800227e:	696b      	ldr	r3, [r5, #20]
 8002280:	9a03      	ldr	r2, [sp, #12]
 8002282:	189b      	adds	r3, r3, r2
 8002284:	616b      	str	r3, [r5, #20]
 8002286:	e767      	b.n	8002158 <_svfiprintf_r+0x44>
 8002288:	425b      	negs	r3, r3
 800228a:	60eb      	str	r3, [r5, #12]
 800228c:	2302      	movs	r3, #2
 800228e:	430b      	orrs	r3, r1
 8002290:	602b      	str	r3, [r5, #0]
 8002292:	e7c0      	b.n	8002216 <_svfiprintf_r+0x102>
 8002294:	434b      	muls	r3, r1
 8002296:	3401      	adds	r4, #1
 8002298:	189b      	adds	r3, r3, r2
 800229a:	2001      	movs	r0, #1
 800229c:	e7a0      	b.n	80021e0 <_svfiprintf_r+0xcc>
 800229e:	2301      	movs	r3, #1
 80022a0:	425b      	negs	r3, r3
 80022a2:	e7c7      	b.n	8002234 <_svfiprintf_r+0x120>
 80022a4:	2300      	movs	r3, #0
 80022a6:	0014      	movs	r4, r2
 80022a8:	200a      	movs	r0, #10
 80022aa:	001a      	movs	r2, r3
 80022ac:	606b      	str	r3, [r5, #4]
 80022ae:	7821      	ldrb	r1, [r4, #0]
 80022b0:	3930      	subs	r1, #48	; 0x30
 80022b2:	2909      	cmp	r1, #9
 80022b4:	d903      	bls.n	80022be <_svfiprintf_r+0x1aa>
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0bd      	beq.n	8002236 <_svfiprintf_r+0x122>
 80022ba:	9207      	str	r2, [sp, #28]
 80022bc:	e7bb      	b.n	8002236 <_svfiprintf_r+0x122>
 80022be:	4342      	muls	r2, r0
 80022c0:	3401      	adds	r4, #1
 80022c2:	1852      	adds	r2, r2, r1
 80022c4:	2301      	movs	r3, #1
 80022c6:	e7f2      	b.n	80022ae <_svfiprintf_r+0x19a>
 80022c8:	3307      	adds	r3, #7
 80022ca:	e7d5      	b.n	8002278 <_svfiprintf_r+0x164>
 80022cc:	ab05      	add	r3, sp, #20
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	003a      	movs	r2, r7
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <_svfiprintf_r+0x204>)
 80022d4:	0029      	movs	r1, r5
 80022d6:	9802      	ldr	r0, [sp, #8]
 80022d8:	e000      	b.n	80022dc <_svfiprintf_r+0x1c8>
 80022da:	bf00      	nop
 80022dc:	9003      	str	r0, [sp, #12]
 80022de:	9b03      	ldr	r3, [sp, #12]
 80022e0:	3301      	adds	r3, #1
 80022e2:	d1cc      	bne.n	800227e <_svfiprintf_r+0x16a>
 80022e4:	89bb      	ldrh	r3, [r7, #12]
 80022e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80022e8:	065b      	lsls	r3, r3, #25
 80022ea:	d400      	bmi.n	80022ee <_svfiprintf_r+0x1da>
 80022ec:	e729      	b.n	8002142 <_svfiprintf_r+0x2e>
 80022ee:	2001      	movs	r0, #1
 80022f0:	4240      	negs	r0, r0
 80022f2:	e726      	b.n	8002142 <_svfiprintf_r+0x2e>
 80022f4:	ab05      	add	r3, sp, #20
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	003a      	movs	r2, r7
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <_svfiprintf_r+0x204>)
 80022fc:	0029      	movs	r1, r5
 80022fe:	9802      	ldr	r0, [sp, #8]
 8002300:	f000 f87a 	bl	80023f8 <_printf_i>
 8002304:	e7ea      	b.n	80022dc <_svfiprintf_r+0x1c8>
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	08002797 	.word	0x08002797
 800230c:	0800279d 	.word	0x0800279d
 8002310:	080027a1 	.word	0x080027a1
 8002314:	00000000 	.word	0x00000000
 8002318:	08002051 	.word	0x08002051

0800231c <_printf_common>:
 800231c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800231e:	0015      	movs	r5, r2
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	688a      	ldr	r2, [r1, #8]
 8002324:	690b      	ldr	r3, [r1, #16]
 8002326:	9000      	str	r0, [sp, #0]
 8002328:	000c      	movs	r4, r1
 800232a:	4293      	cmp	r3, r2
 800232c:	da00      	bge.n	8002330 <_printf_common+0x14>
 800232e:	0013      	movs	r3, r2
 8002330:	0022      	movs	r2, r4
 8002332:	602b      	str	r3, [r5, #0]
 8002334:	3243      	adds	r2, #67	; 0x43
 8002336:	7812      	ldrb	r2, [r2, #0]
 8002338:	2a00      	cmp	r2, #0
 800233a:	d001      	beq.n	8002340 <_printf_common+0x24>
 800233c:	3301      	adds	r3, #1
 800233e:	602b      	str	r3, [r5, #0]
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	069b      	lsls	r3, r3, #26
 8002344:	d502      	bpl.n	800234c <_printf_common+0x30>
 8002346:	682b      	ldr	r3, [r5, #0]
 8002348:	3302      	adds	r3, #2
 800234a:	602b      	str	r3, [r5, #0]
 800234c:	2706      	movs	r7, #6
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	401f      	ands	r7, r3
 8002352:	d027      	beq.n	80023a4 <_printf_common+0x88>
 8002354:	0023      	movs	r3, r4
 8002356:	3343      	adds	r3, #67	; 0x43
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	4193      	sbcs	r3, r2
 800235e:	6822      	ldr	r2, [r4, #0]
 8002360:	0692      	lsls	r2, r2, #26
 8002362:	d430      	bmi.n	80023c6 <_printf_common+0xaa>
 8002364:	0022      	movs	r2, r4
 8002366:	9901      	ldr	r1, [sp, #4]
 8002368:	3243      	adds	r2, #67	; 0x43
 800236a:	9800      	ldr	r0, [sp, #0]
 800236c:	9e08      	ldr	r6, [sp, #32]
 800236e:	47b0      	blx	r6
 8002370:	1c43      	adds	r3, r0, #1
 8002372:	d025      	beq.n	80023c0 <_printf_common+0xa4>
 8002374:	2306      	movs	r3, #6
 8002376:	6820      	ldr	r0, [r4, #0]
 8002378:	682a      	ldr	r2, [r5, #0]
 800237a:	68e1      	ldr	r1, [r4, #12]
 800237c:	4003      	ands	r3, r0
 800237e:	2500      	movs	r5, #0
 8002380:	2b04      	cmp	r3, #4
 8002382:	d103      	bne.n	800238c <_printf_common+0x70>
 8002384:	1a8d      	subs	r5, r1, r2
 8002386:	43eb      	mvns	r3, r5
 8002388:	17db      	asrs	r3, r3, #31
 800238a:	401d      	ands	r5, r3
 800238c:	68a3      	ldr	r3, [r4, #8]
 800238e:	6922      	ldr	r2, [r4, #16]
 8002390:	4293      	cmp	r3, r2
 8002392:	dd01      	ble.n	8002398 <_printf_common+0x7c>
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	18ed      	adds	r5, r5, r3
 8002398:	2700      	movs	r7, #0
 800239a:	42bd      	cmp	r5, r7
 800239c:	d120      	bne.n	80023e0 <_printf_common+0xc4>
 800239e:	2000      	movs	r0, #0
 80023a0:	e010      	b.n	80023c4 <_printf_common+0xa8>
 80023a2:	3701      	adds	r7, #1
 80023a4:	68e3      	ldr	r3, [r4, #12]
 80023a6:	682a      	ldr	r2, [r5, #0]
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	429f      	cmp	r7, r3
 80023ac:	dad2      	bge.n	8002354 <_printf_common+0x38>
 80023ae:	0022      	movs	r2, r4
 80023b0:	2301      	movs	r3, #1
 80023b2:	3219      	adds	r2, #25
 80023b4:	9901      	ldr	r1, [sp, #4]
 80023b6:	9800      	ldr	r0, [sp, #0]
 80023b8:	9e08      	ldr	r6, [sp, #32]
 80023ba:	47b0      	blx	r6
 80023bc:	1c43      	adds	r3, r0, #1
 80023be:	d1f0      	bne.n	80023a2 <_printf_common+0x86>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023c6:	2030      	movs	r0, #48	; 0x30
 80023c8:	18e1      	adds	r1, r4, r3
 80023ca:	3143      	adds	r1, #67	; 0x43
 80023cc:	7008      	strb	r0, [r1, #0]
 80023ce:	0021      	movs	r1, r4
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	3145      	adds	r1, #69	; 0x45
 80023d4:	7809      	ldrb	r1, [r1, #0]
 80023d6:	18a2      	adds	r2, r4, r2
 80023d8:	3243      	adds	r2, #67	; 0x43
 80023da:	3302      	adds	r3, #2
 80023dc:	7011      	strb	r1, [r2, #0]
 80023de:	e7c1      	b.n	8002364 <_printf_common+0x48>
 80023e0:	0022      	movs	r2, r4
 80023e2:	2301      	movs	r3, #1
 80023e4:	321a      	adds	r2, #26
 80023e6:	9901      	ldr	r1, [sp, #4]
 80023e8:	9800      	ldr	r0, [sp, #0]
 80023ea:	9e08      	ldr	r6, [sp, #32]
 80023ec:	47b0      	blx	r6
 80023ee:	1c43      	adds	r3, r0, #1
 80023f0:	d0e6      	beq.n	80023c0 <_printf_common+0xa4>
 80023f2:	3701      	adds	r7, #1
 80023f4:	e7d1      	b.n	800239a <_printf_common+0x7e>
	...

080023f8 <_printf_i>:
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fa:	b08b      	sub	sp, #44	; 0x2c
 80023fc:	9206      	str	r2, [sp, #24]
 80023fe:	000a      	movs	r2, r1
 8002400:	3243      	adds	r2, #67	; 0x43
 8002402:	9307      	str	r3, [sp, #28]
 8002404:	9005      	str	r0, [sp, #20]
 8002406:	9204      	str	r2, [sp, #16]
 8002408:	7e0a      	ldrb	r2, [r1, #24]
 800240a:	000c      	movs	r4, r1
 800240c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800240e:	2a6e      	cmp	r2, #110	; 0x6e
 8002410:	d100      	bne.n	8002414 <_printf_i+0x1c>
 8002412:	e08f      	b.n	8002534 <_printf_i+0x13c>
 8002414:	d817      	bhi.n	8002446 <_printf_i+0x4e>
 8002416:	2a63      	cmp	r2, #99	; 0x63
 8002418:	d02c      	beq.n	8002474 <_printf_i+0x7c>
 800241a:	d808      	bhi.n	800242e <_printf_i+0x36>
 800241c:	2a00      	cmp	r2, #0
 800241e:	d100      	bne.n	8002422 <_printf_i+0x2a>
 8002420:	e099      	b.n	8002556 <_printf_i+0x15e>
 8002422:	2a58      	cmp	r2, #88	; 0x58
 8002424:	d054      	beq.n	80024d0 <_printf_i+0xd8>
 8002426:	0026      	movs	r6, r4
 8002428:	3642      	adds	r6, #66	; 0x42
 800242a:	7032      	strb	r2, [r6, #0]
 800242c:	e029      	b.n	8002482 <_printf_i+0x8a>
 800242e:	2a64      	cmp	r2, #100	; 0x64
 8002430:	d001      	beq.n	8002436 <_printf_i+0x3e>
 8002432:	2a69      	cmp	r2, #105	; 0x69
 8002434:	d1f7      	bne.n	8002426 <_printf_i+0x2e>
 8002436:	6821      	ldr	r1, [r4, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	0608      	lsls	r0, r1, #24
 800243c:	d523      	bpl.n	8002486 <_printf_i+0x8e>
 800243e:	1d11      	adds	r1, r2, #4
 8002440:	6019      	str	r1, [r3, #0]
 8002442:	6815      	ldr	r5, [r2, #0]
 8002444:	e025      	b.n	8002492 <_printf_i+0x9a>
 8002446:	2a73      	cmp	r2, #115	; 0x73
 8002448:	d100      	bne.n	800244c <_printf_i+0x54>
 800244a:	e088      	b.n	800255e <_printf_i+0x166>
 800244c:	d808      	bhi.n	8002460 <_printf_i+0x68>
 800244e:	2a6f      	cmp	r2, #111	; 0x6f
 8002450:	d029      	beq.n	80024a6 <_printf_i+0xae>
 8002452:	2a70      	cmp	r2, #112	; 0x70
 8002454:	d1e7      	bne.n	8002426 <_printf_i+0x2e>
 8002456:	2220      	movs	r2, #32
 8002458:	6809      	ldr	r1, [r1, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	6022      	str	r2, [r4, #0]
 800245e:	e003      	b.n	8002468 <_printf_i+0x70>
 8002460:	2a75      	cmp	r2, #117	; 0x75
 8002462:	d020      	beq.n	80024a6 <_printf_i+0xae>
 8002464:	2a78      	cmp	r2, #120	; 0x78
 8002466:	d1de      	bne.n	8002426 <_printf_i+0x2e>
 8002468:	0022      	movs	r2, r4
 800246a:	2178      	movs	r1, #120	; 0x78
 800246c:	3245      	adds	r2, #69	; 0x45
 800246e:	7011      	strb	r1, [r2, #0]
 8002470:	4a6c      	ldr	r2, [pc, #432]	; (8002624 <_printf_i+0x22c>)
 8002472:	e030      	b.n	80024d6 <_printf_i+0xde>
 8002474:	000e      	movs	r6, r1
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	3642      	adds	r6, #66	; 0x42
 800247a:	1d11      	adds	r1, r2, #4
 800247c:	6019      	str	r1, [r3, #0]
 800247e:	6813      	ldr	r3, [r2, #0]
 8002480:	7033      	strb	r3, [r6, #0]
 8002482:	2301      	movs	r3, #1
 8002484:	e079      	b.n	800257a <_printf_i+0x182>
 8002486:	0649      	lsls	r1, r1, #25
 8002488:	d5d9      	bpl.n	800243e <_printf_i+0x46>
 800248a:	1d11      	adds	r1, r2, #4
 800248c:	6019      	str	r1, [r3, #0]
 800248e:	2300      	movs	r3, #0
 8002490:	5ed5      	ldrsh	r5, [r2, r3]
 8002492:	2d00      	cmp	r5, #0
 8002494:	da03      	bge.n	800249e <_printf_i+0xa6>
 8002496:	232d      	movs	r3, #45	; 0x2d
 8002498:	9a04      	ldr	r2, [sp, #16]
 800249a:	426d      	negs	r5, r5
 800249c:	7013      	strb	r3, [r2, #0]
 800249e:	4b62      	ldr	r3, [pc, #392]	; (8002628 <_printf_i+0x230>)
 80024a0:	270a      	movs	r7, #10
 80024a2:	9303      	str	r3, [sp, #12]
 80024a4:	e02f      	b.n	8002506 <_printf_i+0x10e>
 80024a6:	6820      	ldr	r0, [r4, #0]
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	0605      	lsls	r5, r0, #24
 80024ac:	d503      	bpl.n	80024b6 <_printf_i+0xbe>
 80024ae:	1d08      	adds	r0, r1, #4
 80024b0:	6018      	str	r0, [r3, #0]
 80024b2:	680d      	ldr	r5, [r1, #0]
 80024b4:	e005      	b.n	80024c2 <_printf_i+0xca>
 80024b6:	0640      	lsls	r0, r0, #25
 80024b8:	d5f9      	bpl.n	80024ae <_printf_i+0xb6>
 80024ba:	680d      	ldr	r5, [r1, #0]
 80024bc:	1d08      	adds	r0, r1, #4
 80024be:	6018      	str	r0, [r3, #0]
 80024c0:	b2ad      	uxth	r5, r5
 80024c2:	4b59      	ldr	r3, [pc, #356]	; (8002628 <_printf_i+0x230>)
 80024c4:	2708      	movs	r7, #8
 80024c6:	9303      	str	r3, [sp, #12]
 80024c8:	2a6f      	cmp	r2, #111	; 0x6f
 80024ca:	d018      	beq.n	80024fe <_printf_i+0x106>
 80024cc:	270a      	movs	r7, #10
 80024ce:	e016      	b.n	80024fe <_printf_i+0x106>
 80024d0:	3145      	adds	r1, #69	; 0x45
 80024d2:	700a      	strb	r2, [r1, #0]
 80024d4:	4a54      	ldr	r2, [pc, #336]	; (8002628 <_printf_i+0x230>)
 80024d6:	9203      	str	r2, [sp, #12]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	6821      	ldr	r1, [r4, #0]
 80024dc:	1d10      	adds	r0, r2, #4
 80024de:	6018      	str	r0, [r3, #0]
 80024e0:	6815      	ldr	r5, [r2, #0]
 80024e2:	0608      	lsls	r0, r1, #24
 80024e4:	d522      	bpl.n	800252c <_printf_i+0x134>
 80024e6:	07cb      	lsls	r3, r1, #31
 80024e8:	d502      	bpl.n	80024f0 <_printf_i+0xf8>
 80024ea:	2320      	movs	r3, #32
 80024ec:	4319      	orrs	r1, r3
 80024ee:	6021      	str	r1, [r4, #0]
 80024f0:	2710      	movs	r7, #16
 80024f2:	2d00      	cmp	r5, #0
 80024f4:	d103      	bne.n	80024fe <_printf_i+0x106>
 80024f6:	2320      	movs	r3, #32
 80024f8:	6822      	ldr	r2, [r4, #0]
 80024fa:	439a      	bics	r2, r3
 80024fc:	6022      	str	r2, [r4, #0]
 80024fe:	0023      	movs	r3, r4
 8002500:	2200      	movs	r2, #0
 8002502:	3343      	adds	r3, #67	; 0x43
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	6863      	ldr	r3, [r4, #4]
 8002508:	60a3      	str	r3, [r4, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	db5c      	blt.n	80025c8 <_printf_i+0x1d0>
 800250e:	2204      	movs	r2, #4
 8002510:	6821      	ldr	r1, [r4, #0]
 8002512:	4391      	bics	r1, r2
 8002514:	6021      	str	r1, [r4, #0]
 8002516:	2d00      	cmp	r5, #0
 8002518:	d158      	bne.n	80025cc <_printf_i+0x1d4>
 800251a:	9e04      	ldr	r6, [sp, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d064      	beq.n	80025ea <_printf_i+0x1f2>
 8002520:	0026      	movs	r6, r4
 8002522:	9b03      	ldr	r3, [sp, #12]
 8002524:	3642      	adds	r6, #66	; 0x42
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	7033      	strb	r3, [r6, #0]
 800252a:	e05e      	b.n	80025ea <_printf_i+0x1f2>
 800252c:	0648      	lsls	r0, r1, #25
 800252e:	d5da      	bpl.n	80024e6 <_printf_i+0xee>
 8002530:	b2ad      	uxth	r5, r5
 8002532:	e7d8      	b.n	80024e6 <_printf_i+0xee>
 8002534:	6809      	ldr	r1, [r1, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	0608      	lsls	r0, r1, #24
 800253a:	d505      	bpl.n	8002548 <_printf_i+0x150>
 800253c:	1d11      	adds	r1, r2, #4
 800253e:	6019      	str	r1, [r3, #0]
 8002540:	6813      	ldr	r3, [r2, #0]
 8002542:	6962      	ldr	r2, [r4, #20]
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e006      	b.n	8002556 <_printf_i+0x15e>
 8002548:	0649      	lsls	r1, r1, #25
 800254a:	d5f7      	bpl.n	800253c <_printf_i+0x144>
 800254c:	1d11      	adds	r1, r2, #4
 800254e:	6019      	str	r1, [r3, #0]
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	8aa2      	ldrh	r2, [r4, #20]
 8002554:	801a      	strh	r2, [r3, #0]
 8002556:	2300      	movs	r3, #0
 8002558:	9e04      	ldr	r6, [sp, #16]
 800255a:	6123      	str	r3, [r4, #16]
 800255c:	e054      	b.n	8002608 <_printf_i+0x210>
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	1d11      	adds	r1, r2, #4
 8002562:	6019      	str	r1, [r3, #0]
 8002564:	6816      	ldr	r6, [r2, #0]
 8002566:	2100      	movs	r1, #0
 8002568:	6862      	ldr	r2, [r4, #4]
 800256a:	0030      	movs	r0, r6
 800256c:	f000 f85e 	bl	800262c <memchr>
 8002570:	2800      	cmp	r0, #0
 8002572:	d001      	beq.n	8002578 <_printf_i+0x180>
 8002574:	1b80      	subs	r0, r0, r6
 8002576:	6060      	str	r0, [r4, #4]
 8002578:	6863      	ldr	r3, [r4, #4]
 800257a:	6123      	str	r3, [r4, #16]
 800257c:	2300      	movs	r3, #0
 800257e:	9a04      	ldr	r2, [sp, #16]
 8002580:	7013      	strb	r3, [r2, #0]
 8002582:	e041      	b.n	8002608 <_printf_i+0x210>
 8002584:	6923      	ldr	r3, [r4, #16]
 8002586:	0032      	movs	r2, r6
 8002588:	9906      	ldr	r1, [sp, #24]
 800258a:	9805      	ldr	r0, [sp, #20]
 800258c:	9d07      	ldr	r5, [sp, #28]
 800258e:	47a8      	blx	r5
 8002590:	1c43      	adds	r3, r0, #1
 8002592:	d043      	beq.n	800261c <_printf_i+0x224>
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	2500      	movs	r5, #0
 8002598:	079b      	lsls	r3, r3, #30
 800259a:	d40f      	bmi.n	80025bc <_printf_i+0x1c4>
 800259c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800259e:	68e0      	ldr	r0, [r4, #12]
 80025a0:	4298      	cmp	r0, r3
 80025a2:	da3d      	bge.n	8002620 <_printf_i+0x228>
 80025a4:	0018      	movs	r0, r3
 80025a6:	e03b      	b.n	8002620 <_printf_i+0x228>
 80025a8:	0022      	movs	r2, r4
 80025aa:	2301      	movs	r3, #1
 80025ac:	3219      	adds	r2, #25
 80025ae:	9906      	ldr	r1, [sp, #24]
 80025b0:	9805      	ldr	r0, [sp, #20]
 80025b2:	9e07      	ldr	r6, [sp, #28]
 80025b4:	47b0      	blx	r6
 80025b6:	1c43      	adds	r3, r0, #1
 80025b8:	d030      	beq.n	800261c <_printf_i+0x224>
 80025ba:	3501      	adds	r5, #1
 80025bc:	68e3      	ldr	r3, [r4, #12]
 80025be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	429d      	cmp	r5, r3
 80025c4:	dbf0      	blt.n	80025a8 <_printf_i+0x1b0>
 80025c6:	e7e9      	b.n	800259c <_printf_i+0x1a4>
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d0a9      	beq.n	8002520 <_printf_i+0x128>
 80025cc:	9e04      	ldr	r6, [sp, #16]
 80025ce:	0028      	movs	r0, r5
 80025d0:	0039      	movs	r1, r7
 80025d2:	f7fd fe3b 	bl	800024c <__aeabi_uidivmod>
 80025d6:	9b03      	ldr	r3, [sp, #12]
 80025d8:	3e01      	subs	r6, #1
 80025da:	5c5b      	ldrb	r3, [r3, r1]
 80025dc:	0028      	movs	r0, r5
 80025de:	7033      	strb	r3, [r6, #0]
 80025e0:	0039      	movs	r1, r7
 80025e2:	f7fd fdad 	bl	8000140 <__udivsi3>
 80025e6:	1e05      	subs	r5, r0, #0
 80025e8:	d1f1      	bne.n	80025ce <_printf_i+0x1d6>
 80025ea:	2f08      	cmp	r7, #8
 80025ec:	d109      	bne.n	8002602 <_printf_i+0x20a>
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	07db      	lsls	r3, r3, #31
 80025f2:	d506      	bpl.n	8002602 <_printf_i+0x20a>
 80025f4:	6863      	ldr	r3, [r4, #4]
 80025f6:	6922      	ldr	r2, [r4, #16]
 80025f8:	4293      	cmp	r3, r2
 80025fa:	dc02      	bgt.n	8002602 <_printf_i+0x20a>
 80025fc:	2330      	movs	r3, #48	; 0x30
 80025fe:	3e01      	subs	r6, #1
 8002600:	7033      	strb	r3, [r6, #0]
 8002602:	9b04      	ldr	r3, [sp, #16]
 8002604:	1b9b      	subs	r3, r3, r6
 8002606:	6123      	str	r3, [r4, #16]
 8002608:	9b07      	ldr	r3, [sp, #28]
 800260a:	aa09      	add	r2, sp, #36	; 0x24
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	0021      	movs	r1, r4
 8002610:	9b06      	ldr	r3, [sp, #24]
 8002612:	9805      	ldr	r0, [sp, #20]
 8002614:	f7ff fe82 	bl	800231c <_printf_common>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	d1b3      	bne.n	8002584 <_printf_i+0x18c>
 800261c:	2001      	movs	r0, #1
 800261e:	4240      	negs	r0, r0
 8002620:	b00b      	add	sp, #44	; 0x2c
 8002622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002624:	080027b9 	.word	0x080027b9
 8002628:	080027a8 	.word	0x080027a8

0800262c <memchr>:
 800262c:	b2c9      	uxtb	r1, r1
 800262e:	1882      	adds	r2, r0, r2
 8002630:	4290      	cmp	r0, r2
 8002632:	d101      	bne.n	8002638 <memchr+0xc>
 8002634:	2000      	movs	r0, #0
 8002636:	4770      	bx	lr
 8002638:	7803      	ldrb	r3, [r0, #0]
 800263a:	428b      	cmp	r3, r1
 800263c:	d0fb      	beq.n	8002636 <memchr+0xa>
 800263e:	3001      	adds	r0, #1
 8002640:	e7f6      	b.n	8002630 <memchr+0x4>

08002642 <memmove>:
 8002642:	b510      	push	{r4, lr}
 8002644:	4288      	cmp	r0, r1
 8002646:	d902      	bls.n	800264e <memmove+0xc>
 8002648:	188b      	adds	r3, r1, r2
 800264a:	4298      	cmp	r0, r3
 800264c:	d308      	bcc.n	8002660 <memmove+0x1e>
 800264e:	2300      	movs	r3, #0
 8002650:	429a      	cmp	r2, r3
 8002652:	d007      	beq.n	8002664 <memmove+0x22>
 8002654:	5ccc      	ldrb	r4, [r1, r3]
 8002656:	54c4      	strb	r4, [r0, r3]
 8002658:	3301      	adds	r3, #1
 800265a:	e7f9      	b.n	8002650 <memmove+0xe>
 800265c:	5c8b      	ldrb	r3, [r1, r2]
 800265e:	5483      	strb	r3, [r0, r2]
 8002660:	3a01      	subs	r2, #1
 8002662:	d2fb      	bcs.n	800265c <memmove+0x1a>
 8002664:	bd10      	pop	{r4, pc}

08002666 <_realloc_r>:
 8002666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002668:	0007      	movs	r7, r0
 800266a:	000d      	movs	r5, r1
 800266c:	0016      	movs	r6, r2
 800266e:	2900      	cmp	r1, #0
 8002670:	d105      	bne.n	800267e <_realloc_r+0x18>
 8002672:	0011      	movs	r1, r2
 8002674:	f7ff fc58 	bl	8001f28 <_malloc_r>
 8002678:	0004      	movs	r4, r0
 800267a:	0020      	movs	r0, r4
 800267c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800267e:	2a00      	cmp	r2, #0
 8002680:	d103      	bne.n	800268a <_realloc_r+0x24>
 8002682:	f7ff fc07 	bl	8001e94 <_free_r>
 8002686:	0034      	movs	r4, r6
 8002688:	e7f7      	b.n	800267a <_realloc_r+0x14>
 800268a:	f000 f812 	bl	80026b2 <_malloc_usable_size_r>
 800268e:	002c      	movs	r4, r5
 8002690:	4286      	cmp	r6, r0
 8002692:	d9f2      	bls.n	800267a <_realloc_r+0x14>
 8002694:	0031      	movs	r1, r6
 8002696:	0038      	movs	r0, r7
 8002698:	f7ff fc46 	bl	8001f28 <_malloc_r>
 800269c:	1e04      	subs	r4, r0, #0
 800269e:	d0ec      	beq.n	800267a <_realloc_r+0x14>
 80026a0:	0029      	movs	r1, r5
 80026a2:	0032      	movs	r2, r6
 80026a4:	f7ff fbe4 	bl	8001e70 <memcpy>
 80026a8:	0029      	movs	r1, r5
 80026aa:	0038      	movs	r0, r7
 80026ac:	f7ff fbf2 	bl	8001e94 <_free_r>
 80026b0:	e7e3      	b.n	800267a <_realloc_r+0x14>

080026b2 <_malloc_usable_size_r>:
 80026b2:	1f0b      	subs	r3, r1, #4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1f18      	subs	r0, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	da01      	bge.n	80026c0 <_malloc_usable_size_r+0xe>
 80026bc:	580b      	ldr	r3, [r1, r0]
 80026be:	18c0      	adds	r0, r0, r3
 80026c0:	4770      	bx	lr
	...

080026c4 <_init>:
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ca:	bc08      	pop	{r3}
 80026cc:	469e      	mov	lr, r3
 80026ce:	4770      	bx	lr

080026d0 <_fini>:
 80026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d6:	bc08      	pop	{r3}
 80026d8:	469e      	mov	lr, r3
 80026da:	4770      	bx	lr
