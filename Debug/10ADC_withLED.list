
10ADC_withLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006604  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  080066c4  080066c4  000166c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08006e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000018d0  20000088  08006f18  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001958  08006f18  00021958  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013b05  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000030e0  00000000  00000000  00033bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b936  00000000  00000000  00036c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c18  00000000  00000000  000425d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001150  00000000  00000000  000431e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007285  00000000  00000000  00044338  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000038e5  00000000  00000000  0004b5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004eea2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027c0  00000000  00000000  0004ef20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080066ac 	.word	0x080066ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	080066ac 	.word	0x080066ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_d2uiz>:
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	2200      	movs	r2, #0
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <__aeabi_d2uiz+0x38>)
 800025e:	0004      	movs	r4, r0
 8000260:	000d      	movs	r5, r1
 8000262:	f000 fe4d 	bl	8000f00 <__aeabi_dcmpge>
 8000266:	2800      	cmp	r0, #0
 8000268:	d104      	bne.n	8000274 <__aeabi_d2uiz+0x1c>
 800026a:	0020      	movs	r0, r4
 800026c:	0029      	movs	r1, r5
 800026e:	f000 fda7 	bl	8000dc0 <__aeabi_d2iz>
 8000272:	bd70      	pop	{r4, r5, r6, pc}
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <__aeabi_d2uiz+0x38>)
 8000276:	2200      	movs	r2, #0
 8000278:	0020      	movs	r0, r4
 800027a:	0029      	movs	r1, r5
 800027c:	f000 fa8a 	bl	8000794 <__aeabi_dsub>
 8000280:	f000 fd9e 	bl	8000dc0 <__aeabi_d2iz>
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	061b      	lsls	r3, r3, #24
 8000288:	469c      	mov	ip, r3
 800028a:	4460      	add	r0, ip
 800028c:	e7f1      	b.n	8000272 <__aeabi_d2uiz+0x1a>
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	41e00000 	.word	0x41e00000

08000294 <__aeabi_dmul>:
 8000294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000296:	4657      	mov	r7, sl
 8000298:	4645      	mov	r5, r8
 800029a:	46de      	mov	lr, fp
 800029c:	464e      	mov	r6, r9
 800029e:	b5e0      	push	{r5, r6, r7, lr}
 80002a0:	030c      	lsls	r4, r1, #12
 80002a2:	4698      	mov	r8, r3
 80002a4:	004e      	lsls	r6, r1, #1
 80002a6:	0b23      	lsrs	r3, r4, #12
 80002a8:	b087      	sub	sp, #28
 80002aa:	0007      	movs	r7, r0
 80002ac:	4692      	mov	sl, r2
 80002ae:	469b      	mov	fp, r3
 80002b0:	0d76      	lsrs	r6, r6, #21
 80002b2:	0fcd      	lsrs	r5, r1, #31
 80002b4:	2e00      	cmp	r6, #0
 80002b6:	d06b      	beq.n	8000390 <__aeabi_dmul+0xfc>
 80002b8:	4b6d      	ldr	r3, [pc, #436]	; (8000470 <__aeabi_dmul+0x1dc>)
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d035      	beq.n	800032a <__aeabi_dmul+0x96>
 80002be:	2480      	movs	r4, #128	; 0x80
 80002c0:	465b      	mov	r3, fp
 80002c2:	0f42      	lsrs	r2, r0, #29
 80002c4:	0424      	lsls	r4, r4, #16
 80002c6:	00db      	lsls	r3, r3, #3
 80002c8:	4314      	orrs	r4, r2
 80002ca:	431c      	orrs	r4, r3
 80002cc:	00c3      	lsls	r3, r0, #3
 80002ce:	4699      	mov	r9, r3
 80002d0:	4b68      	ldr	r3, [pc, #416]	; (8000474 <__aeabi_dmul+0x1e0>)
 80002d2:	46a3      	mov	fp, r4
 80002d4:	469c      	mov	ip, r3
 80002d6:	2300      	movs	r3, #0
 80002d8:	2700      	movs	r7, #0
 80002da:	4466      	add	r6, ip
 80002dc:	9302      	str	r3, [sp, #8]
 80002de:	4643      	mov	r3, r8
 80002e0:	031c      	lsls	r4, r3, #12
 80002e2:	005a      	lsls	r2, r3, #1
 80002e4:	0fdb      	lsrs	r3, r3, #31
 80002e6:	4650      	mov	r0, sl
 80002e8:	0b24      	lsrs	r4, r4, #12
 80002ea:	0d52      	lsrs	r2, r2, #21
 80002ec:	4698      	mov	r8, r3
 80002ee:	d100      	bne.n	80002f2 <__aeabi_dmul+0x5e>
 80002f0:	e076      	b.n	80003e0 <__aeabi_dmul+0x14c>
 80002f2:	4b5f      	ldr	r3, [pc, #380]	; (8000470 <__aeabi_dmul+0x1dc>)
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d06d      	beq.n	80003d4 <__aeabi_dmul+0x140>
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	0f41      	lsrs	r1, r0, #29
 80002fc:	041b      	lsls	r3, r3, #16
 80002fe:	430b      	orrs	r3, r1
 8000300:	495c      	ldr	r1, [pc, #368]	; (8000474 <__aeabi_dmul+0x1e0>)
 8000302:	00e4      	lsls	r4, r4, #3
 8000304:	468c      	mov	ip, r1
 8000306:	431c      	orrs	r4, r3
 8000308:	00c3      	lsls	r3, r0, #3
 800030a:	2000      	movs	r0, #0
 800030c:	4462      	add	r2, ip
 800030e:	4641      	mov	r1, r8
 8000310:	18b6      	adds	r6, r6, r2
 8000312:	4069      	eors	r1, r5
 8000314:	1c72      	adds	r2, r6, #1
 8000316:	9101      	str	r1, [sp, #4]
 8000318:	4694      	mov	ip, r2
 800031a:	4307      	orrs	r7, r0
 800031c:	2f0f      	cmp	r7, #15
 800031e:	d900      	bls.n	8000322 <__aeabi_dmul+0x8e>
 8000320:	e0b0      	b.n	8000484 <__aeabi_dmul+0x1f0>
 8000322:	4a55      	ldr	r2, [pc, #340]	; (8000478 <__aeabi_dmul+0x1e4>)
 8000324:	00bf      	lsls	r7, r7, #2
 8000326:	59d2      	ldr	r2, [r2, r7]
 8000328:	4697      	mov	pc, r2
 800032a:	465b      	mov	r3, fp
 800032c:	4303      	orrs	r3, r0
 800032e:	4699      	mov	r9, r3
 8000330:	d000      	beq.n	8000334 <__aeabi_dmul+0xa0>
 8000332:	e087      	b.n	8000444 <__aeabi_dmul+0x1b0>
 8000334:	2300      	movs	r3, #0
 8000336:	469b      	mov	fp, r3
 8000338:	3302      	adds	r3, #2
 800033a:	2708      	movs	r7, #8
 800033c:	9302      	str	r3, [sp, #8]
 800033e:	e7ce      	b.n	80002de <__aeabi_dmul+0x4a>
 8000340:	4642      	mov	r2, r8
 8000342:	9201      	str	r2, [sp, #4]
 8000344:	2802      	cmp	r0, #2
 8000346:	d067      	beq.n	8000418 <__aeabi_dmul+0x184>
 8000348:	2803      	cmp	r0, #3
 800034a:	d100      	bne.n	800034e <__aeabi_dmul+0xba>
 800034c:	e20e      	b.n	800076c <__aeabi_dmul+0x4d8>
 800034e:	2801      	cmp	r0, #1
 8000350:	d000      	beq.n	8000354 <__aeabi_dmul+0xc0>
 8000352:	e162      	b.n	800061a <__aeabi_dmul+0x386>
 8000354:	2300      	movs	r3, #0
 8000356:	2400      	movs	r4, #0
 8000358:	2200      	movs	r2, #0
 800035a:	4699      	mov	r9, r3
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	4001      	ands	r1, r0
 8000360:	b2cd      	uxtb	r5, r1
 8000362:	2100      	movs	r1, #0
 8000364:	0312      	lsls	r2, r2, #12
 8000366:	0d0b      	lsrs	r3, r1, #20
 8000368:	0b12      	lsrs	r2, r2, #12
 800036a:	051b      	lsls	r3, r3, #20
 800036c:	4313      	orrs	r3, r2
 800036e:	4a43      	ldr	r2, [pc, #268]	; (800047c <__aeabi_dmul+0x1e8>)
 8000370:	0524      	lsls	r4, r4, #20
 8000372:	4013      	ands	r3, r2
 8000374:	431c      	orrs	r4, r3
 8000376:	0064      	lsls	r4, r4, #1
 8000378:	07ed      	lsls	r5, r5, #31
 800037a:	0864      	lsrs	r4, r4, #1
 800037c:	432c      	orrs	r4, r5
 800037e:	4648      	mov	r0, r9
 8000380:	0021      	movs	r1, r4
 8000382:	b007      	add	sp, #28
 8000384:	bc3c      	pop	{r2, r3, r4, r5}
 8000386:	4690      	mov	r8, r2
 8000388:	4699      	mov	r9, r3
 800038a:	46a2      	mov	sl, r4
 800038c:	46ab      	mov	fp, r5
 800038e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000390:	4303      	orrs	r3, r0
 8000392:	4699      	mov	r9, r3
 8000394:	d04f      	beq.n	8000436 <__aeabi_dmul+0x1a2>
 8000396:	465b      	mov	r3, fp
 8000398:	2b00      	cmp	r3, #0
 800039a:	d100      	bne.n	800039e <__aeabi_dmul+0x10a>
 800039c:	e189      	b.n	80006b2 <__aeabi_dmul+0x41e>
 800039e:	4658      	mov	r0, fp
 80003a0:	f000 fdb8 	bl	8000f14 <__clzsi2>
 80003a4:	0003      	movs	r3, r0
 80003a6:	3b0b      	subs	r3, #11
 80003a8:	2b1c      	cmp	r3, #28
 80003aa:	dd00      	ble.n	80003ae <__aeabi_dmul+0x11a>
 80003ac:	e17a      	b.n	80006a4 <__aeabi_dmul+0x410>
 80003ae:	221d      	movs	r2, #29
 80003b0:	1ad3      	subs	r3, r2, r3
 80003b2:	003a      	movs	r2, r7
 80003b4:	0001      	movs	r1, r0
 80003b6:	465c      	mov	r4, fp
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	3908      	subs	r1, #8
 80003bc:	408c      	lsls	r4, r1
 80003be:	0013      	movs	r3, r2
 80003c0:	408f      	lsls	r7, r1
 80003c2:	4323      	orrs	r3, r4
 80003c4:	469b      	mov	fp, r3
 80003c6:	46b9      	mov	r9, r7
 80003c8:	2300      	movs	r3, #0
 80003ca:	4e2d      	ldr	r6, [pc, #180]	; (8000480 <__aeabi_dmul+0x1ec>)
 80003cc:	2700      	movs	r7, #0
 80003ce:	1a36      	subs	r6, r6, r0
 80003d0:	9302      	str	r3, [sp, #8]
 80003d2:	e784      	b.n	80002de <__aeabi_dmul+0x4a>
 80003d4:	4653      	mov	r3, sl
 80003d6:	4323      	orrs	r3, r4
 80003d8:	d12a      	bne.n	8000430 <__aeabi_dmul+0x19c>
 80003da:	2400      	movs	r4, #0
 80003dc:	2002      	movs	r0, #2
 80003de:	e796      	b.n	800030e <__aeabi_dmul+0x7a>
 80003e0:	4653      	mov	r3, sl
 80003e2:	4323      	orrs	r3, r4
 80003e4:	d020      	beq.n	8000428 <__aeabi_dmul+0x194>
 80003e6:	2c00      	cmp	r4, #0
 80003e8:	d100      	bne.n	80003ec <__aeabi_dmul+0x158>
 80003ea:	e157      	b.n	800069c <__aeabi_dmul+0x408>
 80003ec:	0020      	movs	r0, r4
 80003ee:	f000 fd91 	bl	8000f14 <__clzsi2>
 80003f2:	0003      	movs	r3, r0
 80003f4:	3b0b      	subs	r3, #11
 80003f6:	2b1c      	cmp	r3, #28
 80003f8:	dd00      	ble.n	80003fc <__aeabi_dmul+0x168>
 80003fa:	e149      	b.n	8000690 <__aeabi_dmul+0x3fc>
 80003fc:	211d      	movs	r1, #29
 80003fe:	1acb      	subs	r3, r1, r3
 8000400:	4651      	mov	r1, sl
 8000402:	0002      	movs	r2, r0
 8000404:	40d9      	lsrs	r1, r3
 8000406:	4653      	mov	r3, sl
 8000408:	3a08      	subs	r2, #8
 800040a:	4094      	lsls	r4, r2
 800040c:	4093      	lsls	r3, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <__aeabi_dmul+0x1ec>)
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	2000      	movs	r0, #0
 8000416:	e77a      	b.n	800030e <__aeabi_dmul+0x7a>
 8000418:	2501      	movs	r5, #1
 800041a:	9b01      	ldr	r3, [sp, #4]
 800041c:	4c14      	ldr	r4, [pc, #80]	; (8000470 <__aeabi_dmul+0x1dc>)
 800041e:	401d      	ands	r5, r3
 8000420:	2300      	movs	r3, #0
 8000422:	2200      	movs	r2, #0
 8000424:	4699      	mov	r9, r3
 8000426:	e79c      	b.n	8000362 <__aeabi_dmul+0xce>
 8000428:	2400      	movs	r4, #0
 800042a:	2200      	movs	r2, #0
 800042c:	2001      	movs	r0, #1
 800042e:	e76e      	b.n	800030e <__aeabi_dmul+0x7a>
 8000430:	4653      	mov	r3, sl
 8000432:	2003      	movs	r0, #3
 8000434:	e76b      	b.n	800030e <__aeabi_dmul+0x7a>
 8000436:	2300      	movs	r3, #0
 8000438:	469b      	mov	fp, r3
 800043a:	3301      	adds	r3, #1
 800043c:	2704      	movs	r7, #4
 800043e:	2600      	movs	r6, #0
 8000440:	9302      	str	r3, [sp, #8]
 8000442:	e74c      	b.n	80002de <__aeabi_dmul+0x4a>
 8000444:	2303      	movs	r3, #3
 8000446:	4681      	mov	r9, r0
 8000448:	270c      	movs	r7, #12
 800044a:	9302      	str	r3, [sp, #8]
 800044c:	e747      	b.n	80002de <__aeabi_dmul+0x4a>
 800044e:	2280      	movs	r2, #128	; 0x80
 8000450:	2300      	movs	r3, #0
 8000452:	2500      	movs	r5, #0
 8000454:	0312      	lsls	r2, r2, #12
 8000456:	4699      	mov	r9, r3
 8000458:	4c05      	ldr	r4, [pc, #20]	; (8000470 <__aeabi_dmul+0x1dc>)
 800045a:	e782      	b.n	8000362 <__aeabi_dmul+0xce>
 800045c:	465c      	mov	r4, fp
 800045e:	464b      	mov	r3, r9
 8000460:	9802      	ldr	r0, [sp, #8]
 8000462:	e76f      	b.n	8000344 <__aeabi_dmul+0xb0>
 8000464:	465c      	mov	r4, fp
 8000466:	464b      	mov	r3, r9
 8000468:	9501      	str	r5, [sp, #4]
 800046a:	9802      	ldr	r0, [sp, #8]
 800046c:	e76a      	b.n	8000344 <__aeabi_dmul+0xb0>
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	000007ff 	.word	0x000007ff
 8000474:	fffffc01 	.word	0xfffffc01
 8000478:	080066e4 	.word	0x080066e4
 800047c:	800fffff 	.word	0x800fffff
 8000480:	fffffc0d 	.word	0xfffffc0d
 8000484:	464a      	mov	r2, r9
 8000486:	4649      	mov	r1, r9
 8000488:	0c17      	lsrs	r7, r2, #16
 800048a:	0c1a      	lsrs	r2, r3, #16
 800048c:	041b      	lsls	r3, r3, #16
 800048e:	0c1b      	lsrs	r3, r3, #16
 8000490:	0408      	lsls	r0, r1, #16
 8000492:	0019      	movs	r1, r3
 8000494:	0c00      	lsrs	r0, r0, #16
 8000496:	4341      	muls	r1, r0
 8000498:	0015      	movs	r5, r2
 800049a:	4688      	mov	r8, r1
 800049c:	0019      	movs	r1, r3
 800049e:	437d      	muls	r5, r7
 80004a0:	4379      	muls	r1, r7
 80004a2:	9503      	str	r5, [sp, #12]
 80004a4:	4689      	mov	r9, r1
 80004a6:	0029      	movs	r1, r5
 80004a8:	0015      	movs	r5, r2
 80004aa:	4345      	muls	r5, r0
 80004ac:	444d      	add	r5, r9
 80004ae:	9502      	str	r5, [sp, #8]
 80004b0:	4645      	mov	r5, r8
 80004b2:	0c2d      	lsrs	r5, r5, #16
 80004b4:	46aa      	mov	sl, r5
 80004b6:	9d02      	ldr	r5, [sp, #8]
 80004b8:	4455      	add	r5, sl
 80004ba:	45a9      	cmp	r9, r5
 80004bc:	d906      	bls.n	80004cc <__aeabi_dmul+0x238>
 80004be:	468a      	mov	sl, r1
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0249      	lsls	r1, r1, #9
 80004c4:	4689      	mov	r9, r1
 80004c6:	44ca      	add	sl, r9
 80004c8:	4651      	mov	r1, sl
 80004ca:	9103      	str	r1, [sp, #12]
 80004cc:	0c29      	lsrs	r1, r5, #16
 80004ce:	9104      	str	r1, [sp, #16]
 80004d0:	4641      	mov	r1, r8
 80004d2:	0409      	lsls	r1, r1, #16
 80004d4:	042d      	lsls	r5, r5, #16
 80004d6:	0c09      	lsrs	r1, r1, #16
 80004d8:	4688      	mov	r8, r1
 80004da:	0029      	movs	r1, r5
 80004dc:	0c25      	lsrs	r5, r4, #16
 80004de:	0424      	lsls	r4, r4, #16
 80004e0:	4441      	add	r1, r8
 80004e2:	0c24      	lsrs	r4, r4, #16
 80004e4:	9105      	str	r1, [sp, #20]
 80004e6:	0021      	movs	r1, r4
 80004e8:	4341      	muls	r1, r0
 80004ea:	4688      	mov	r8, r1
 80004ec:	0021      	movs	r1, r4
 80004ee:	4379      	muls	r1, r7
 80004f0:	468a      	mov	sl, r1
 80004f2:	4368      	muls	r0, r5
 80004f4:	4641      	mov	r1, r8
 80004f6:	4450      	add	r0, sl
 80004f8:	4681      	mov	r9, r0
 80004fa:	0c08      	lsrs	r0, r1, #16
 80004fc:	4448      	add	r0, r9
 80004fe:	436f      	muls	r7, r5
 8000500:	4582      	cmp	sl, r0
 8000502:	d903      	bls.n	800050c <__aeabi_dmul+0x278>
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	0249      	lsls	r1, r1, #9
 8000508:	4689      	mov	r9, r1
 800050a:	444f      	add	r7, r9
 800050c:	0c01      	lsrs	r1, r0, #16
 800050e:	4689      	mov	r9, r1
 8000510:	0039      	movs	r1, r7
 8000512:	4449      	add	r1, r9
 8000514:	9102      	str	r1, [sp, #8]
 8000516:	4641      	mov	r1, r8
 8000518:	040f      	lsls	r7, r1, #16
 800051a:	9904      	ldr	r1, [sp, #16]
 800051c:	0c3f      	lsrs	r7, r7, #16
 800051e:	4688      	mov	r8, r1
 8000520:	0400      	lsls	r0, r0, #16
 8000522:	19c0      	adds	r0, r0, r7
 8000524:	4480      	add	r8, r0
 8000526:	4641      	mov	r1, r8
 8000528:	9104      	str	r1, [sp, #16]
 800052a:	4659      	mov	r1, fp
 800052c:	0c0f      	lsrs	r7, r1, #16
 800052e:	0409      	lsls	r1, r1, #16
 8000530:	0c09      	lsrs	r1, r1, #16
 8000532:	4688      	mov	r8, r1
 8000534:	4359      	muls	r1, r3
 8000536:	468a      	mov	sl, r1
 8000538:	0039      	movs	r1, r7
 800053a:	4351      	muls	r1, r2
 800053c:	4689      	mov	r9, r1
 800053e:	4641      	mov	r1, r8
 8000540:	434a      	muls	r2, r1
 8000542:	4651      	mov	r1, sl
 8000544:	0c09      	lsrs	r1, r1, #16
 8000546:	468b      	mov	fp, r1
 8000548:	437b      	muls	r3, r7
 800054a:	18d2      	adds	r2, r2, r3
 800054c:	445a      	add	r2, fp
 800054e:	4293      	cmp	r3, r2
 8000550:	d903      	bls.n	800055a <__aeabi_dmul+0x2c6>
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	025b      	lsls	r3, r3, #9
 8000556:	469b      	mov	fp, r3
 8000558:	44d9      	add	r9, fp
 800055a:	4651      	mov	r1, sl
 800055c:	0409      	lsls	r1, r1, #16
 800055e:	0c09      	lsrs	r1, r1, #16
 8000560:	468a      	mov	sl, r1
 8000562:	4641      	mov	r1, r8
 8000564:	4361      	muls	r1, r4
 8000566:	437c      	muls	r4, r7
 8000568:	0c13      	lsrs	r3, r2, #16
 800056a:	0412      	lsls	r2, r2, #16
 800056c:	444b      	add	r3, r9
 800056e:	4452      	add	r2, sl
 8000570:	46a1      	mov	r9, r4
 8000572:	468a      	mov	sl, r1
 8000574:	003c      	movs	r4, r7
 8000576:	4641      	mov	r1, r8
 8000578:	436c      	muls	r4, r5
 800057a:	434d      	muls	r5, r1
 800057c:	4651      	mov	r1, sl
 800057e:	444d      	add	r5, r9
 8000580:	0c0f      	lsrs	r7, r1, #16
 8000582:	197d      	adds	r5, r7, r5
 8000584:	45a9      	cmp	r9, r5
 8000586:	d903      	bls.n	8000590 <__aeabi_dmul+0x2fc>
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0249      	lsls	r1, r1, #9
 800058c:	4688      	mov	r8, r1
 800058e:	4444      	add	r4, r8
 8000590:	9f04      	ldr	r7, [sp, #16]
 8000592:	9903      	ldr	r1, [sp, #12]
 8000594:	46b8      	mov	r8, r7
 8000596:	4441      	add	r1, r8
 8000598:	468b      	mov	fp, r1
 800059a:	4583      	cmp	fp, r0
 800059c:	4180      	sbcs	r0, r0
 800059e:	4241      	negs	r1, r0
 80005a0:	4688      	mov	r8, r1
 80005a2:	4651      	mov	r1, sl
 80005a4:	0408      	lsls	r0, r1, #16
 80005a6:	042f      	lsls	r7, r5, #16
 80005a8:	0c00      	lsrs	r0, r0, #16
 80005aa:	183f      	adds	r7, r7, r0
 80005ac:	4658      	mov	r0, fp
 80005ae:	9902      	ldr	r1, [sp, #8]
 80005b0:	1810      	adds	r0, r2, r0
 80005b2:	4689      	mov	r9, r1
 80005b4:	4290      	cmp	r0, r2
 80005b6:	4192      	sbcs	r2, r2
 80005b8:	444f      	add	r7, r9
 80005ba:	46ba      	mov	sl, r7
 80005bc:	4252      	negs	r2, r2
 80005be:	4699      	mov	r9, r3
 80005c0:	4693      	mov	fp, r2
 80005c2:	44c2      	add	sl, r8
 80005c4:	44d1      	add	r9, sl
 80005c6:	44cb      	add	fp, r9
 80005c8:	428f      	cmp	r7, r1
 80005ca:	41bf      	sbcs	r7, r7
 80005cc:	45c2      	cmp	sl, r8
 80005ce:	4189      	sbcs	r1, r1
 80005d0:	4599      	cmp	r9, r3
 80005d2:	419b      	sbcs	r3, r3
 80005d4:	4593      	cmp	fp, r2
 80005d6:	4192      	sbcs	r2, r2
 80005d8:	427f      	negs	r7, r7
 80005da:	4249      	negs	r1, r1
 80005dc:	0c2d      	lsrs	r5, r5, #16
 80005de:	4252      	negs	r2, r2
 80005e0:	430f      	orrs	r7, r1
 80005e2:	425b      	negs	r3, r3
 80005e4:	4313      	orrs	r3, r2
 80005e6:	197f      	adds	r7, r7, r5
 80005e8:	18ff      	adds	r7, r7, r3
 80005ea:	465b      	mov	r3, fp
 80005ec:	193c      	adds	r4, r7, r4
 80005ee:	0ddb      	lsrs	r3, r3, #23
 80005f0:	9a05      	ldr	r2, [sp, #20]
 80005f2:	0264      	lsls	r4, r4, #9
 80005f4:	431c      	orrs	r4, r3
 80005f6:	0243      	lsls	r3, r0, #9
 80005f8:	4313      	orrs	r3, r2
 80005fa:	1e5d      	subs	r5, r3, #1
 80005fc:	41ab      	sbcs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	0dc0      	lsrs	r0, r0, #23
 8000602:	4303      	orrs	r3, r0
 8000604:	0252      	lsls	r2, r2, #9
 8000606:	4313      	orrs	r3, r2
 8000608:	01e2      	lsls	r2, r4, #7
 800060a:	d556      	bpl.n	80006ba <__aeabi_dmul+0x426>
 800060c:	2001      	movs	r0, #1
 800060e:	085a      	lsrs	r2, r3, #1
 8000610:	4003      	ands	r3, r0
 8000612:	4313      	orrs	r3, r2
 8000614:	07e2      	lsls	r2, r4, #31
 8000616:	4313      	orrs	r3, r2
 8000618:	0864      	lsrs	r4, r4, #1
 800061a:	485a      	ldr	r0, [pc, #360]	; (8000784 <__aeabi_dmul+0x4f0>)
 800061c:	4460      	add	r0, ip
 800061e:	2800      	cmp	r0, #0
 8000620:	dd4d      	ble.n	80006be <__aeabi_dmul+0x42a>
 8000622:	075a      	lsls	r2, r3, #29
 8000624:	d009      	beq.n	800063a <__aeabi_dmul+0x3a6>
 8000626:	220f      	movs	r2, #15
 8000628:	401a      	ands	r2, r3
 800062a:	2a04      	cmp	r2, #4
 800062c:	d005      	beq.n	800063a <__aeabi_dmul+0x3a6>
 800062e:	1d1a      	adds	r2, r3, #4
 8000630:	429a      	cmp	r2, r3
 8000632:	419b      	sbcs	r3, r3
 8000634:	425b      	negs	r3, r3
 8000636:	18e4      	adds	r4, r4, r3
 8000638:	0013      	movs	r3, r2
 800063a:	01e2      	lsls	r2, r4, #7
 800063c:	d504      	bpl.n	8000648 <__aeabi_dmul+0x3b4>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	4a51      	ldr	r2, [pc, #324]	; (8000788 <__aeabi_dmul+0x4f4>)
 8000642:	00c0      	lsls	r0, r0, #3
 8000644:	4014      	ands	r4, r2
 8000646:	4460      	add	r0, ip
 8000648:	4a50      	ldr	r2, [pc, #320]	; (800078c <__aeabi_dmul+0x4f8>)
 800064a:	4290      	cmp	r0, r2
 800064c:	dd00      	ble.n	8000650 <__aeabi_dmul+0x3bc>
 800064e:	e6e3      	b.n	8000418 <__aeabi_dmul+0x184>
 8000650:	2501      	movs	r5, #1
 8000652:	08db      	lsrs	r3, r3, #3
 8000654:	0762      	lsls	r2, r4, #29
 8000656:	431a      	orrs	r2, r3
 8000658:	0264      	lsls	r4, r4, #9
 800065a:	9b01      	ldr	r3, [sp, #4]
 800065c:	4691      	mov	r9, r2
 800065e:	0b22      	lsrs	r2, r4, #12
 8000660:	0544      	lsls	r4, r0, #21
 8000662:	0d64      	lsrs	r4, r4, #21
 8000664:	401d      	ands	r5, r3
 8000666:	e67c      	b.n	8000362 <__aeabi_dmul+0xce>
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	4659      	mov	r1, fp
 800066c:	0312      	lsls	r2, r2, #12
 800066e:	4211      	tst	r1, r2
 8000670:	d008      	beq.n	8000684 <__aeabi_dmul+0x3f0>
 8000672:	4214      	tst	r4, r2
 8000674:	d106      	bne.n	8000684 <__aeabi_dmul+0x3f0>
 8000676:	4322      	orrs	r2, r4
 8000678:	0312      	lsls	r2, r2, #12
 800067a:	0b12      	lsrs	r2, r2, #12
 800067c:	4645      	mov	r5, r8
 800067e:	4699      	mov	r9, r3
 8000680:	4c43      	ldr	r4, [pc, #268]	; (8000790 <__aeabi_dmul+0x4fc>)
 8000682:	e66e      	b.n	8000362 <__aeabi_dmul+0xce>
 8000684:	465b      	mov	r3, fp
 8000686:	431a      	orrs	r2, r3
 8000688:	0312      	lsls	r2, r2, #12
 800068a:	0b12      	lsrs	r2, r2, #12
 800068c:	4c40      	ldr	r4, [pc, #256]	; (8000790 <__aeabi_dmul+0x4fc>)
 800068e:	e668      	b.n	8000362 <__aeabi_dmul+0xce>
 8000690:	0003      	movs	r3, r0
 8000692:	4654      	mov	r4, sl
 8000694:	3b28      	subs	r3, #40	; 0x28
 8000696:	409c      	lsls	r4, r3
 8000698:	2300      	movs	r3, #0
 800069a:	e6b9      	b.n	8000410 <__aeabi_dmul+0x17c>
 800069c:	f000 fc3a 	bl	8000f14 <__clzsi2>
 80006a0:	3020      	adds	r0, #32
 80006a2:	e6a6      	b.n	80003f2 <__aeabi_dmul+0x15e>
 80006a4:	0003      	movs	r3, r0
 80006a6:	3b28      	subs	r3, #40	; 0x28
 80006a8:	409f      	lsls	r7, r3
 80006aa:	2300      	movs	r3, #0
 80006ac:	46bb      	mov	fp, r7
 80006ae:	4699      	mov	r9, r3
 80006b0:	e68a      	b.n	80003c8 <__aeabi_dmul+0x134>
 80006b2:	f000 fc2f 	bl	8000f14 <__clzsi2>
 80006b6:	3020      	adds	r0, #32
 80006b8:	e674      	b.n	80003a4 <__aeabi_dmul+0x110>
 80006ba:	46b4      	mov	ip, r6
 80006bc:	e7ad      	b.n	800061a <__aeabi_dmul+0x386>
 80006be:	2501      	movs	r5, #1
 80006c0:	1a2a      	subs	r2, r5, r0
 80006c2:	2a38      	cmp	r2, #56	; 0x38
 80006c4:	dd06      	ble.n	80006d4 <__aeabi_dmul+0x440>
 80006c6:	9b01      	ldr	r3, [sp, #4]
 80006c8:	2400      	movs	r4, #0
 80006ca:	401d      	ands	r5, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	2200      	movs	r2, #0
 80006d0:	4699      	mov	r9, r3
 80006d2:	e646      	b.n	8000362 <__aeabi_dmul+0xce>
 80006d4:	2a1f      	cmp	r2, #31
 80006d6:	dc21      	bgt.n	800071c <__aeabi_dmul+0x488>
 80006d8:	2520      	movs	r5, #32
 80006da:	0020      	movs	r0, r4
 80006dc:	1aad      	subs	r5, r5, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	40ab      	lsls	r3, r5
 80006e2:	40a8      	lsls	r0, r5
 80006e4:	40d6      	lsrs	r6, r2
 80006e6:	1e5d      	subs	r5, r3, #1
 80006e8:	41ab      	sbcs	r3, r5
 80006ea:	4330      	orrs	r0, r6
 80006ec:	4318      	orrs	r0, r3
 80006ee:	40d4      	lsrs	r4, r2
 80006f0:	0743      	lsls	r3, r0, #29
 80006f2:	d009      	beq.n	8000708 <__aeabi_dmul+0x474>
 80006f4:	230f      	movs	r3, #15
 80006f6:	4003      	ands	r3, r0
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d005      	beq.n	8000708 <__aeabi_dmul+0x474>
 80006fc:	0003      	movs	r3, r0
 80006fe:	1d18      	adds	r0, r3, #4
 8000700:	4298      	cmp	r0, r3
 8000702:	419b      	sbcs	r3, r3
 8000704:	425b      	negs	r3, r3
 8000706:	18e4      	adds	r4, r4, r3
 8000708:	0223      	lsls	r3, r4, #8
 800070a:	d521      	bpl.n	8000750 <__aeabi_dmul+0x4bc>
 800070c:	2501      	movs	r5, #1
 800070e:	9b01      	ldr	r3, [sp, #4]
 8000710:	2401      	movs	r4, #1
 8000712:	401d      	ands	r5, r3
 8000714:	2300      	movs	r3, #0
 8000716:	2200      	movs	r2, #0
 8000718:	4699      	mov	r9, r3
 800071a:	e622      	b.n	8000362 <__aeabi_dmul+0xce>
 800071c:	251f      	movs	r5, #31
 800071e:	0021      	movs	r1, r4
 8000720:	426d      	negs	r5, r5
 8000722:	1a28      	subs	r0, r5, r0
 8000724:	40c1      	lsrs	r1, r0
 8000726:	0008      	movs	r0, r1
 8000728:	2a20      	cmp	r2, #32
 800072a:	d01d      	beq.n	8000768 <__aeabi_dmul+0x4d4>
 800072c:	355f      	adds	r5, #95	; 0x5f
 800072e:	1aaa      	subs	r2, r5, r2
 8000730:	4094      	lsls	r4, r2
 8000732:	4323      	orrs	r3, r4
 8000734:	1e5c      	subs	r4, r3, #1
 8000736:	41a3      	sbcs	r3, r4
 8000738:	2507      	movs	r5, #7
 800073a:	4303      	orrs	r3, r0
 800073c:	401d      	ands	r5, r3
 800073e:	2200      	movs	r2, #0
 8000740:	2d00      	cmp	r5, #0
 8000742:	d009      	beq.n	8000758 <__aeabi_dmul+0x4c4>
 8000744:	220f      	movs	r2, #15
 8000746:	2400      	movs	r4, #0
 8000748:	401a      	ands	r2, r3
 800074a:	0018      	movs	r0, r3
 800074c:	2a04      	cmp	r2, #4
 800074e:	d1d6      	bne.n	80006fe <__aeabi_dmul+0x46a>
 8000750:	0003      	movs	r3, r0
 8000752:	0765      	lsls	r5, r4, #29
 8000754:	0264      	lsls	r4, r4, #9
 8000756:	0b22      	lsrs	r2, r4, #12
 8000758:	08db      	lsrs	r3, r3, #3
 800075a:	432b      	orrs	r3, r5
 800075c:	2501      	movs	r5, #1
 800075e:	4699      	mov	r9, r3
 8000760:	9b01      	ldr	r3, [sp, #4]
 8000762:	2400      	movs	r4, #0
 8000764:	401d      	ands	r5, r3
 8000766:	e5fc      	b.n	8000362 <__aeabi_dmul+0xce>
 8000768:	2400      	movs	r4, #0
 800076a:	e7e2      	b.n	8000732 <__aeabi_dmul+0x49e>
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	2501      	movs	r5, #1
 8000770:	0312      	lsls	r2, r2, #12
 8000772:	4322      	orrs	r2, r4
 8000774:	9901      	ldr	r1, [sp, #4]
 8000776:	0312      	lsls	r2, r2, #12
 8000778:	0b12      	lsrs	r2, r2, #12
 800077a:	400d      	ands	r5, r1
 800077c:	4699      	mov	r9, r3
 800077e:	4c04      	ldr	r4, [pc, #16]	; (8000790 <__aeabi_dmul+0x4fc>)
 8000780:	e5ef      	b.n	8000362 <__aeabi_dmul+0xce>
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	000003ff 	.word	0x000003ff
 8000788:	feffffff 	.word	0xfeffffff
 800078c:	000007fe 	.word	0x000007fe
 8000790:	000007ff 	.word	0x000007ff

08000794 <__aeabi_dsub>:
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000796:	4646      	mov	r6, r8
 8000798:	46d6      	mov	lr, sl
 800079a:	464f      	mov	r7, r9
 800079c:	030c      	lsls	r4, r1, #12
 800079e:	b5c0      	push	{r6, r7, lr}
 80007a0:	0fcd      	lsrs	r5, r1, #31
 80007a2:	004e      	lsls	r6, r1, #1
 80007a4:	0a61      	lsrs	r1, r4, #9
 80007a6:	0f44      	lsrs	r4, r0, #29
 80007a8:	430c      	orrs	r4, r1
 80007aa:	00c1      	lsls	r1, r0, #3
 80007ac:	0058      	lsls	r0, r3, #1
 80007ae:	0d40      	lsrs	r0, r0, #21
 80007b0:	4684      	mov	ip, r0
 80007b2:	468a      	mov	sl, r1
 80007b4:	000f      	movs	r7, r1
 80007b6:	0319      	lsls	r1, r3, #12
 80007b8:	0f50      	lsrs	r0, r2, #29
 80007ba:	0a49      	lsrs	r1, r1, #9
 80007bc:	4301      	orrs	r1, r0
 80007be:	48c6      	ldr	r0, [pc, #792]	; (8000ad8 <__aeabi_dsub+0x344>)
 80007c0:	0d76      	lsrs	r6, r6, #21
 80007c2:	46a8      	mov	r8, r5
 80007c4:	0fdb      	lsrs	r3, r3, #31
 80007c6:	00d2      	lsls	r2, r2, #3
 80007c8:	4584      	cmp	ip, r0
 80007ca:	d100      	bne.n	80007ce <__aeabi_dsub+0x3a>
 80007cc:	e0d8      	b.n	8000980 <__aeabi_dsub+0x1ec>
 80007ce:	2001      	movs	r0, #1
 80007d0:	4043      	eors	r3, r0
 80007d2:	42ab      	cmp	r3, r5
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dsub+0x44>
 80007d6:	e0a6      	b.n	8000926 <__aeabi_dsub+0x192>
 80007d8:	4660      	mov	r0, ip
 80007da:	1a35      	subs	r5, r6, r0
 80007dc:	2d00      	cmp	r5, #0
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_dsub+0x4e>
 80007e0:	e105      	b.n	80009ee <__aeabi_dsub+0x25a>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d110      	bne.n	8000808 <__aeabi_dsub+0x74>
 80007e6:	000b      	movs	r3, r1
 80007e8:	4313      	orrs	r3, r2
 80007ea:	d100      	bne.n	80007ee <__aeabi_dsub+0x5a>
 80007ec:	e0d7      	b.n	800099e <__aeabi_dsub+0x20a>
 80007ee:	1e6b      	subs	r3, r5, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_dsub+0x62>
 80007f4:	e14b      	b.n	8000a8e <__aeabi_dsub+0x2fa>
 80007f6:	4653      	mov	r3, sl
 80007f8:	1a9f      	subs	r7, r3, r2
 80007fa:	45ba      	cmp	sl, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	1a64      	subs	r4, r4, r1
 8000800:	4240      	negs	r0, r0
 8000802:	1a24      	subs	r4, r4, r0
 8000804:	2601      	movs	r6, #1
 8000806:	e01e      	b.n	8000846 <__aeabi_dsub+0xb2>
 8000808:	4bb3      	ldr	r3, [pc, #716]	; (8000ad8 <__aeabi_dsub+0x344>)
 800080a:	429e      	cmp	r6, r3
 800080c:	d048      	beq.n	80008a0 <__aeabi_dsub+0x10c>
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	041b      	lsls	r3, r3, #16
 8000812:	4319      	orrs	r1, r3
 8000814:	2d38      	cmp	r5, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dsub+0x86>
 8000818:	e119      	b.n	8000a4e <__aeabi_dsub+0x2ba>
 800081a:	2d1f      	cmp	r5, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dsub+0x8c>
 800081e:	e14c      	b.n	8000aba <__aeabi_dsub+0x326>
 8000820:	2320      	movs	r3, #32
 8000822:	000f      	movs	r7, r1
 8000824:	1b5b      	subs	r3, r3, r5
 8000826:	0010      	movs	r0, r2
 8000828:	409a      	lsls	r2, r3
 800082a:	409f      	lsls	r7, r3
 800082c:	40e8      	lsrs	r0, r5
 800082e:	1e53      	subs	r3, r2, #1
 8000830:	419a      	sbcs	r2, r3
 8000832:	40e9      	lsrs	r1, r5
 8000834:	4307      	orrs	r7, r0
 8000836:	4317      	orrs	r7, r2
 8000838:	4653      	mov	r3, sl
 800083a:	1bdf      	subs	r7, r3, r7
 800083c:	1a61      	subs	r1, r4, r1
 800083e:	45ba      	cmp	sl, r7
 8000840:	41a4      	sbcs	r4, r4
 8000842:	4264      	negs	r4, r4
 8000844:	1b0c      	subs	r4, r1, r4
 8000846:	0223      	lsls	r3, r4, #8
 8000848:	d400      	bmi.n	800084c <__aeabi_dsub+0xb8>
 800084a:	e0c5      	b.n	80009d8 <__aeabi_dsub+0x244>
 800084c:	0264      	lsls	r4, r4, #9
 800084e:	0a65      	lsrs	r5, r4, #9
 8000850:	2d00      	cmp	r5, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_dsub+0xc2>
 8000854:	e0f6      	b.n	8000a44 <__aeabi_dsub+0x2b0>
 8000856:	0028      	movs	r0, r5
 8000858:	f000 fb5c 	bl	8000f14 <__clzsi2>
 800085c:	0003      	movs	r3, r0
 800085e:	3b08      	subs	r3, #8
 8000860:	2b1f      	cmp	r3, #31
 8000862:	dd00      	ble.n	8000866 <__aeabi_dsub+0xd2>
 8000864:	e0e9      	b.n	8000a3a <__aeabi_dsub+0x2a6>
 8000866:	2220      	movs	r2, #32
 8000868:	003c      	movs	r4, r7
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	409d      	lsls	r5, r3
 800086e:	40d4      	lsrs	r4, r2
 8000870:	409f      	lsls	r7, r3
 8000872:	4325      	orrs	r5, r4
 8000874:	429e      	cmp	r6, r3
 8000876:	dd00      	ble.n	800087a <__aeabi_dsub+0xe6>
 8000878:	e0db      	b.n	8000a32 <__aeabi_dsub+0x29e>
 800087a:	1b9e      	subs	r6, r3, r6
 800087c:	1c73      	adds	r3, r6, #1
 800087e:	2b1f      	cmp	r3, #31
 8000880:	dd00      	ble.n	8000884 <__aeabi_dsub+0xf0>
 8000882:	e10a      	b.n	8000a9a <__aeabi_dsub+0x306>
 8000884:	2220      	movs	r2, #32
 8000886:	0038      	movs	r0, r7
 8000888:	1ad2      	subs	r2, r2, r3
 800088a:	0029      	movs	r1, r5
 800088c:	4097      	lsls	r7, r2
 800088e:	002c      	movs	r4, r5
 8000890:	4091      	lsls	r1, r2
 8000892:	40d8      	lsrs	r0, r3
 8000894:	1e7a      	subs	r2, r7, #1
 8000896:	4197      	sbcs	r7, r2
 8000898:	40dc      	lsrs	r4, r3
 800089a:	2600      	movs	r6, #0
 800089c:	4301      	orrs	r1, r0
 800089e:	430f      	orrs	r7, r1
 80008a0:	077b      	lsls	r3, r7, #29
 80008a2:	d009      	beq.n	80008b8 <__aeabi_dsub+0x124>
 80008a4:	230f      	movs	r3, #15
 80008a6:	403b      	ands	r3, r7
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d005      	beq.n	80008b8 <__aeabi_dsub+0x124>
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	42bb      	cmp	r3, r7
 80008b0:	41bf      	sbcs	r7, r7
 80008b2:	427f      	negs	r7, r7
 80008b4:	19e4      	adds	r4, r4, r7
 80008b6:	001f      	movs	r7, r3
 80008b8:	0223      	lsls	r3, r4, #8
 80008ba:	d525      	bpl.n	8000908 <__aeabi_dsub+0x174>
 80008bc:	4b86      	ldr	r3, [pc, #536]	; (8000ad8 <__aeabi_dsub+0x344>)
 80008be:	3601      	adds	r6, #1
 80008c0:	429e      	cmp	r6, r3
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dsub+0x132>
 80008c4:	e0af      	b.n	8000a26 <__aeabi_dsub+0x292>
 80008c6:	4b85      	ldr	r3, [pc, #532]	; (8000adc <__aeabi_dsub+0x348>)
 80008c8:	2501      	movs	r5, #1
 80008ca:	401c      	ands	r4, r3
 80008cc:	4643      	mov	r3, r8
 80008ce:	0762      	lsls	r2, r4, #29
 80008d0:	08ff      	lsrs	r7, r7, #3
 80008d2:	0264      	lsls	r4, r4, #9
 80008d4:	0576      	lsls	r6, r6, #21
 80008d6:	4317      	orrs	r7, r2
 80008d8:	0b24      	lsrs	r4, r4, #12
 80008da:	0d76      	lsrs	r6, r6, #21
 80008dc:	401d      	ands	r5, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	0324      	lsls	r4, r4, #12
 80008e2:	0b23      	lsrs	r3, r4, #12
 80008e4:	0d0c      	lsrs	r4, r1, #20
 80008e6:	4a7e      	ldr	r2, [pc, #504]	; (8000ae0 <__aeabi_dsub+0x34c>)
 80008e8:	0524      	lsls	r4, r4, #20
 80008ea:	431c      	orrs	r4, r3
 80008ec:	4014      	ands	r4, r2
 80008ee:	0533      	lsls	r3, r6, #20
 80008f0:	4323      	orrs	r3, r4
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	07ed      	lsls	r5, r5, #31
 80008f6:	085b      	lsrs	r3, r3, #1
 80008f8:	432b      	orrs	r3, r5
 80008fa:	0038      	movs	r0, r7
 80008fc:	0019      	movs	r1, r3
 80008fe:	bc1c      	pop	{r2, r3, r4}
 8000900:	4690      	mov	r8, r2
 8000902:	4699      	mov	r9, r3
 8000904:	46a2      	mov	sl, r4
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	2501      	movs	r5, #1
 800090a:	4643      	mov	r3, r8
 800090c:	0762      	lsls	r2, r4, #29
 800090e:	08ff      	lsrs	r7, r7, #3
 8000910:	4317      	orrs	r7, r2
 8000912:	08e4      	lsrs	r4, r4, #3
 8000914:	401d      	ands	r5, r3
 8000916:	4b70      	ldr	r3, [pc, #448]	; (8000ad8 <__aeabi_dsub+0x344>)
 8000918:	429e      	cmp	r6, r3
 800091a:	d036      	beq.n	800098a <__aeabi_dsub+0x1f6>
 800091c:	0324      	lsls	r4, r4, #12
 800091e:	0576      	lsls	r6, r6, #21
 8000920:	0b24      	lsrs	r4, r4, #12
 8000922:	0d76      	lsrs	r6, r6, #21
 8000924:	e7db      	b.n	80008de <__aeabi_dsub+0x14a>
 8000926:	4663      	mov	r3, ip
 8000928:	1af3      	subs	r3, r6, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	dc00      	bgt.n	8000930 <__aeabi_dsub+0x19c>
 800092e:	e094      	b.n	8000a5a <__aeabi_dsub+0x2c6>
 8000930:	4660      	mov	r0, ip
 8000932:	2800      	cmp	r0, #0
 8000934:	d035      	beq.n	80009a2 <__aeabi_dsub+0x20e>
 8000936:	4868      	ldr	r0, [pc, #416]	; (8000ad8 <__aeabi_dsub+0x344>)
 8000938:	4286      	cmp	r6, r0
 800093a:	d0b1      	beq.n	80008a0 <__aeabi_dsub+0x10c>
 800093c:	2780      	movs	r7, #128	; 0x80
 800093e:	043f      	lsls	r7, r7, #16
 8000940:	4339      	orrs	r1, r7
 8000942:	2b38      	cmp	r3, #56	; 0x38
 8000944:	dc00      	bgt.n	8000948 <__aeabi_dsub+0x1b4>
 8000946:	e0fd      	b.n	8000b44 <__aeabi_dsub+0x3b0>
 8000948:	430a      	orrs	r2, r1
 800094a:	0017      	movs	r7, r2
 800094c:	2100      	movs	r1, #0
 800094e:	1e7a      	subs	r2, r7, #1
 8000950:	4197      	sbcs	r7, r2
 8000952:	4457      	add	r7, sl
 8000954:	4557      	cmp	r7, sl
 8000956:	4180      	sbcs	r0, r0
 8000958:	1909      	adds	r1, r1, r4
 800095a:	4244      	negs	r4, r0
 800095c:	190c      	adds	r4, r1, r4
 800095e:	0223      	lsls	r3, r4, #8
 8000960:	d53a      	bpl.n	80009d8 <__aeabi_dsub+0x244>
 8000962:	4b5d      	ldr	r3, [pc, #372]	; (8000ad8 <__aeabi_dsub+0x344>)
 8000964:	3601      	adds	r6, #1
 8000966:	429e      	cmp	r6, r3
 8000968:	d100      	bne.n	800096c <__aeabi_dsub+0x1d8>
 800096a:	e14b      	b.n	8000c04 <__aeabi_dsub+0x470>
 800096c:	2201      	movs	r2, #1
 800096e:	4b5b      	ldr	r3, [pc, #364]	; (8000adc <__aeabi_dsub+0x348>)
 8000970:	401c      	ands	r4, r3
 8000972:	087b      	lsrs	r3, r7, #1
 8000974:	4017      	ands	r7, r2
 8000976:	431f      	orrs	r7, r3
 8000978:	07e2      	lsls	r2, r4, #31
 800097a:	4317      	orrs	r7, r2
 800097c:	0864      	lsrs	r4, r4, #1
 800097e:	e78f      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000980:	0008      	movs	r0, r1
 8000982:	4310      	orrs	r0, r2
 8000984:	d000      	beq.n	8000988 <__aeabi_dsub+0x1f4>
 8000986:	e724      	b.n	80007d2 <__aeabi_dsub+0x3e>
 8000988:	e721      	b.n	80007ce <__aeabi_dsub+0x3a>
 800098a:	0023      	movs	r3, r4
 800098c:	433b      	orrs	r3, r7
 800098e:	d100      	bne.n	8000992 <__aeabi_dsub+0x1fe>
 8000990:	e1b9      	b.n	8000d06 <__aeabi_dsub+0x572>
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	0312      	lsls	r2, r2, #12
 8000996:	4314      	orrs	r4, r2
 8000998:	0324      	lsls	r4, r4, #12
 800099a:	0b24      	lsrs	r4, r4, #12
 800099c:	e79f      	b.n	80008de <__aeabi_dsub+0x14a>
 800099e:	002e      	movs	r6, r5
 80009a0:	e77e      	b.n	80008a0 <__aeabi_dsub+0x10c>
 80009a2:	0008      	movs	r0, r1
 80009a4:	4310      	orrs	r0, r2
 80009a6:	d100      	bne.n	80009aa <__aeabi_dsub+0x216>
 80009a8:	e0ca      	b.n	8000b40 <__aeabi_dsub+0x3ac>
 80009aa:	1e58      	subs	r0, r3, #1
 80009ac:	4684      	mov	ip, r0
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dsub+0x220>
 80009b2:	e0e7      	b.n	8000b84 <__aeabi_dsub+0x3f0>
 80009b4:	4452      	add	r2, sl
 80009b6:	4552      	cmp	r2, sl
 80009b8:	4180      	sbcs	r0, r0
 80009ba:	1864      	adds	r4, r4, r1
 80009bc:	4240      	negs	r0, r0
 80009be:	1824      	adds	r4, r4, r0
 80009c0:	0017      	movs	r7, r2
 80009c2:	2601      	movs	r6, #1
 80009c4:	0223      	lsls	r3, r4, #8
 80009c6:	d507      	bpl.n	80009d8 <__aeabi_dsub+0x244>
 80009c8:	2602      	movs	r6, #2
 80009ca:	e7cf      	b.n	800096c <__aeabi_dsub+0x1d8>
 80009cc:	4664      	mov	r4, ip
 80009ce:	432c      	orrs	r4, r5
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dsub+0x240>
 80009d2:	e1b3      	b.n	8000d3c <__aeabi_dsub+0x5a8>
 80009d4:	002c      	movs	r4, r5
 80009d6:	4667      	mov	r7, ip
 80009d8:	077b      	lsls	r3, r7, #29
 80009da:	d000      	beq.n	80009de <__aeabi_dsub+0x24a>
 80009dc:	e762      	b.n	80008a4 <__aeabi_dsub+0x110>
 80009de:	0763      	lsls	r3, r4, #29
 80009e0:	08ff      	lsrs	r7, r7, #3
 80009e2:	431f      	orrs	r7, r3
 80009e4:	2501      	movs	r5, #1
 80009e6:	4643      	mov	r3, r8
 80009e8:	08e4      	lsrs	r4, r4, #3
 80009ea:	401d      	ands	r5, r3
 80009ec:	e793      	b.n	8000916 <__aeabi_dsub+0x182>
 80009ee:	2d00      	cmp	r5, #0
 80009f0:	d178      	bne.n	8000ae4 <__aeabi_dsub+0x350>
 80009f2:	1c75      	adds	r5, r6, #1
 80009f4:	056d      	lsls	r5, r5, #21
 80009f6:	0d6d      	lsrs	r5, r5, #21
 80009f8:	2d01      	cmp	r5, #1
 80009fa:	dc00      	bgt.n	80009fe <__aeabi_dsub+0x26a>
 80009fc:	e0f2      	b.n	8000be4 <__aeabi_dsub+0x450>
 80009fe:	4650      	mov	r0, sl
 8000a00:	1a80      	subs	r0, r0, r2
 8000a02:	4582      	cmp	sl, r0
 8000a04:	41bf      	sbcs	r7, r7
 8000a06:	1a65      	subs	r5, r4, r1
 8000a08:	427f      	negs	r7, r7
 8000a0a:	1bed      	subs	r5, r5, r7
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	0228      	lsls	r0, r5, #8
 8000a10:	d400      	bmi.n	8000a14 <__aeabi_dsub+0x280>
 8000a12:	e08c      	b.n	8000b2e <__aeabi_dsub+0x39a>
 8000a14:	4650      	mov	r0, sl
 8000a16:	1a17      	subs	r7, r2, r0
 8000a18:	42ba      	cmp	r2, r7
 8000a1a:	4192      	sbcs	r2, r2
 8000a1c:	1b0c      	subs	r4, r1, r4
 8000a1e:	4255      	negs	r5, r2
 8000a20:	1b65      	subs	r5, r4, r5
 8000a22:	4698      	mov	r8, r3
 8000a24:	e714      	b.n	8000850 <__aeabi_dsub+0xbc>
 8000a26:	2501      	movs	r5, #1
 8000a28:	4643      	mov	r3, r8
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	401d      	ands	r5, r3
 8000a2e:	2700      	movs	r7, #0
 8000a30:	e755      	b.n	80008de <__aeabi_dsub+0x14a>
 8000a32:	4c2a      	ldr	r4, [pc, #168]	; (8000adc <__aeabi_dsub+0x348>)
 8000a34:	1af6      	subs	r6, r6, r3
 8000a36:	402c      	ands	r4, r5
 8000a38:	e732      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000a3a:	003d      	movs	r5, r7
 8000a3c:	3828      	subs	r0, #40	; 0x28
 8000a3e:	4085      	lsls	r5, r0
 8000a40:	2700      	movs	r7, #0
 8000a42:	e717      	b.n	8000874 <__aeabi_dsub+0xe0>
 8000a44:	0038      	movs	r0, r7
 8000a46:	f000 fa65 	bl	8000f14 <__clzsi2>
 8000a4a:	3020      	adds	r0, #32
 8000a4c:	e706      	b.n	800085c <__aeabi_dsub+0xc8>
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	0017      	movs	r7, r2
 8000a52:	2100      	movs	r1, #0
 8000a54:	1e7a      	subs	r2, r7, #1
 8000a56:	4197      	sbcs	r7, r2
 8000a58:	e6ee      	b.n	8000838 <__aeabi_dsub+0xa4>
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_dsub+0x2cc>
 8000a5e:	e0e5      	b.n	8000c2c <__aeabi_dsub+0x498>
 8000a60:	1c73      	adds	r3, r6, #1
 8000a62:	469c      	mov	ip, r3
 8000a64:	055b      	lsls	r3, r3, #21
 8000a66:	0d5b      	lsrs	r3, r3, #21
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	dc00      	bgt.n	8000a6e <__aeabi_dsub+0x2da>
 8000a6c:	e09f      	b.n	8000bae <__aeabi_dsub+0x41a>
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <__aeabi_dsub+0x344>)
 8000a70:	459c      	cmp	ip, r3
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dsub+0x2e2>
 8000a74:	e0c5      	b.n	8000c02 <__aeabi_dsub+0x46e>
 8000a76:	4452      	add	r2, sl
 8000a78:	4552      	cmp	r2, sl
 8000a7a:	4180      	sbcs	r0, r0
 8000a7c:	1864      	adds	r4, r4, r1
 8000a7e:	4240      	negs	r0, r0
 8000a80:	1824      	adds	r4, r4, r0
 8000a82:	07e7      	lsls	r7, r4, #31
 8000a84:	0852      	lsrs	r2, r2, #1
 8000a86:	4317      	orrs	r7, r2
 8000a88:	0864      	lsrs	r4, r4, #1
 8000a8a:	4666      	mov	r6, ip
 8000a8c:	e708      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <__aeabi_dsub+0x344>)
 8000a90:	4285      	cmp	r5, r0
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dsub+0x302>
 8000a94:	e085      	b.n	8000ba2 <__aeabi_dsub+0x40e>
 8000a96:	001d      	movs	r5, r3
 8000a98:	e6bc      	b.n	8000814 <__aeabi_dsub+0x80>
 8000a9a:	0029      	movs	r1, r5
 8000a9c:	3e1f      	subs	r6, #31
 8000a9e:	40f1      	lsrs	r1, r6
 8000aa0:	2b20      	cmp	r3, #32
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dsub+0x312>
 8000aa4:	e07f      	b.n	8000ba6 <__aeabi_dsub+0x412>
 8000aa6:	2240      	movs	r2, #64	; 0x40
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	409d      	lsls	r5, r3
 8000aac:	432f      	orrs	r7, r5
 8000aae:	1e7d      	subs	r5, r7, #1
 8000ab0:	41af      	sbcs	r7, r5
 8000ab2:	2400      	movs	r4, #0
 8000ab4:	430f      	orrs	r7, r1
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	e78e      	b.n	80009d8 <__aeabi_dsub+0x244>
 8000aba:	002b      	movs	r3, r5
 8000abc:	000f      	movs	r7, r1
 8000abe:	3b20      	subs	r3, #32
 8000ac0:	40df      	lsrs	r7, r3
 8000ac2:	2d20      	cmp	r5, #32
 8000ac4:	d071      	beq.n	8000baa <__aeabi_dsub+0x416>
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	1b5d      	subs	r5, r3, r5
 8000aca:	40a9      	lsls	r1, r5
 8000acc:	430a      	orrs	r2, r1
 8000ace:	1e51      	subs	r1, r2, #1
 8000ad0:	418a      	sbcs	r2, r1
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4317      	orrs	r7, r2
 8000ad6:	e6af      	b.n	8000838 <__aeabi_dsub+0xa4>
 8000ad8:	000007ff 	.word	0x000007ff
 8000adc:	ff7fffff 	.word	0xff7fffff
 8000ae0:	800fffff 	.word	0x800fffff
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d03e      	beq.n	8000b66 <__aeabi_dsub+0x3d2>
 8000ae8:	4eb3      	ldr	r6, [pc, #716]	; (8000db8 <__aeabi_dsub+0x624>)
 8000aea:	45b4      	cmp	ip, r6
 8000aec:	d045      	beq.n	8000b7a <__aeabi_dsub+0x3e6>
 8000aee:	2680      	movs	r6, #128	; 0x80
 8000af0:	0436      	lsls	r6, r6, #16
 8000af2:	426d      	negs	r5, r5
 8000af4:	4334      	orrs	r4, r6
 8000af6:	2d38      	cmp	r5, #56	; 0x38
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dsub+0x368>
 8000afa:	e0a8      	b.n	8000c4e <__aeabi_dsub+0x4ba>
 8000afc:	2d1f      	cmp	r5, #31
 8000afe:	dd00      	ble.n	8000b02 <__aeabi_dsub+0x36e>
 8000b00:	e11f      	b.n	8000d42 <__aeabi_dsub+0x5ae>
 8000b02:	2620      	movs	r6, #32
 8000b04:	0027      	movs	r7, r4
 8000b06:	4650      	mov	r0, sl
 8000b08:	1b76      	subs	r6, r6, r5
 8000b0a:	40b7      	lsls	r7, r6
 8000b0c:	40e8      	lsrs	r0, r5
 8000b0e:	4307      	orrs	r7, r0
 8000b10:	4650      	mov	r0, sl
 8000b12:	40b0      	lsls	r0, r6
 8000b14:	1e46      	subs	r6, r0, #1
 8000b16:	41b0      	sbcs	r0, r6
 8000b18:	40ec      	lsrs	r4, r5
 8000b1a:	4338      	orrs	r0, r7
 8000b1c:	1a17      	subs	r7, r2, r0
 8000b1e:	42ba      	cmp	r2, r7
 8000b20:	4192      	sbcs	r2, r2
 8000b22:	1b0c      	subs	r4, r1, r4
 8000b24:	4252      	negs	r2, r2
 8000b26:	1aa4      	subs	r4, r4, r2
 8000b28:	4666      	mov	r6, ip
 8000b2a:	4698      	mov	r8, r3
 8000b2c:	e68b      	b.n	8000846 <__aeabi_dsub+0xb2>
 8000b2e:	4664      	mov	r4, ip
 8000b30:	4667      	mov	r7, ip
 8000b32:	432c      	orrs	r4, r5
 8000b34:	d000      	beq.n	8000b38 <__aeabi_dsub+0x3a4>
 8000b36:	e68b      	b.n	8000850 <__aeabi_dsub+0xbc>
 8000b38:	2500      	movs	r5, #0
 8000b3a:	2600      	movs	r6, #0
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e6ea      	b.n	8000916 <__aeabi_dsub+0x182>
 8000b40:	001e      	movs	r6, r3
 8000b42:	e6ad      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000b44:	2b1f      	cmp	r3, #31
 8000b46:	dc60      	bgt.n	8000c0a <__aeabi_dsub+0x476>
 8000b48:	2720      	movs	r7, #32
 8000b4a:	1af8      	subs	r0, r7, r3
 8000b4c:	000f      	movs	r7, r1
 8000b4e:	4684      	mov	ip, r0
 8000b50:	4087      	lsls	r7, r0
 8000b52:	0010      	movs	r0, r2
 8000b54:	40d8      	lsrs	r0, r3
 8000b56:	4307      	orrs	r7, r0
 8000b58:	4660      	mov	r0, ip
 8000b5a:	4082      	lsls	r2, r0
 8000b5c:	1e50      	subs	r0, r2, #1
 8000b5e:	4182      	sbcs	r2, r0
 8000b60:	40d9      	lsrs	r1, r3
 8000b62:	4317      	orrs	r7, r2
 8000b64:	e6f5      	b.n	8000952 <__aeabi_dsub+0x1be>
 8000b66:	0026      	movs	r6, r4
 8000b68:	4650      	mov	r0, sl
 8000b6a:	4306      	orrs	r6, r0
 8000b6c:	d005      	beq.n	8000b7a <__aeabi_dsub+0x3e6>
 8000b6e:	43ed      	mvns	r5, r5
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0d3      	beq.n	8000b1c <__aeabi_dsub+0x388>
 8000b74:	4e90      	ldr	r6, [pc, #576]	; (8000db8 <__aeabi_dsub+0x624>)
 8000b76:	45b4      	cmp	ip, r6
 8000b78:	d1bd      	bne.n	8000af6 <__aeabi_dsub+0x362>
 8000b7a:	000c      	movs	r4, r1
 8000b7c:	0017      	movs	r7, r2
 8000b7e:	4666      	mov	r6, ip
 8000b80:	4698      	mov	r8, r3
 8000b82:	e68d      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000b84:	488c      	ldr	r0, [pc, #560]	; (8000db8 <__aeabi_dsub+0x624>)
 8000b86:	4283      	cmp	r3, r0
 8000b88:	d00b      	beq.n	8000ba2 <__aeabi_dsub+0x40e>
 8000b8a:	4663      	mov	r3, ip
 8000b8c:	e6d9      	b.n	8000942 <__aeabi_dsub+0x1ae>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d000      	beq.n	8000b94 <__aeabi_dsub+0x400>
 8000b92:	e096      	b.n	8000cc2 <__aeabi_dsub+0x52e>
 8000b94:	0008      	movs	r0, r1
 8000b96:	4310      	orrs	r0, r2
 8000b98:	d100      	bne.n	8000b9c <__aeabi_dsub+0x408>
 8000b9a:	e0e2      	b.n	8000d62 <__aeabi_dsub+0x5ce>
 8000b9c:	000c      	movs	r4, r1
 8000b9e:	0017      	movs	r7, r2
 8000ba0:	4698      	mov	r8, r3
 8000ba2:	4e85      	ldr	r6, [pc, #532]	; (8000db8 <__aeabi_dsub+0x624>)
 8000ba4:	e67c      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000ba6:	2500      	movs	r5, #0
 8000ba8:	e780      	b.n	8000aac <__aeabi_dsub+0x318>
 8000baa:	2100      	movs	r1, #0
 8000bac:	e78e      	b.n	8000acc <__aeabi_dsub+0x338>
 8000bae:	0023      	movs	r3, r4
 8000bb0:	4650      	mov	r0, sl
 8000bb2:	4303      	orrs	r3, r0
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_dsub+0x426>
 8000bb8:	e0a8      	b.n	8000d0c <__aeabi_dsub+0x578>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dsub+0x42c>
 8000bbe:	e0de      	b.n	8000d7e <__aeabi_dsub+0x5ea>
 8000bc0:	000b      	movs	r3, r1
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_dsub+0x434>
 8000bc6:	e66b      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000bc8:	4452      	add	r2, sl
 8000bca:	4552      	cmp	r2, sl
 8000bcc:	4180      	sbcs	r0, r0
 8000bce:	1864      	adds	r4, r4, r1
 8000bd0:	4240      	negs	r0, r0
 8000bd2:	1824      	adds	r4, r4, r0
 8000bd4:	0017      	movs	r7, r2
 8000bd6:	0223      	lsls	r3, r4, #8
 8000bd8:	d400      	bmi.n	8000bdc <__aeabi_dsub+0x448>
 8000bda:	e6fd      	b.n	80009d8 <__aeabi_dsub+0x244>
 8000bdc:	4b77      	ldr	r3, [pc, #476]	; (8000dbc <__aeabi_dsub+0x628>)
 8000bde:	4666      	mov	r6, ip
 8000be0:	401c      	ands	r4, r3
 8000be2:	e65d      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000be4:	0025      	movs	r5, r4
 8000be6:	4650      	mov	r0, sl
 8000be8:	4305      	orrs	r5, r0
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d1cf      	bne.n	8000b8e <__aeabi_dsub+0x3fa>
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d14f      	bne.n	8000c92 <__aeabi_dsub+0x4fe>
 8000bf2:	000c      	movs	r4, r1
 8000bf4:	4314      	orrs	r4, r2
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_dsub+0x466>
 8000bf8:	e0a0      	b.n	8000d3c <__aeabi_dsub+0x5a8>
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	0017      	movs	r7, r2
 8000bfe:	4698      	mov	r8, r3
 8000c00:	e64e      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000c02:	4666      	mov	r6, ip
 8000c04:	2400      	movs	r4, #0
 8000c06:	2700      	movs	r7, #0
 8000c08:	e685      	b.n	8000916 <__aeabi_dsub+0x182>
 8000c0a:	001f      	movs	r7, r3
 8000c0c:	0008      	movs	r0, r1
 8000c0e:	3f20      	subs	r7, #32
 8000c10:	40f8      	lsrs	r0, r7
 8000c12:	0007      	movs	r7, r0
 8000c14:	2b20      	cmp	r3, #32
 8000c16:	d100      	bne.n	8000c1a <__aeabi_dsub+0x486>
 8000c18:	e08e      	b.n	8000d38 <__aeabi_dsub+0x5a4>
 8000c1a:	2040      	movs	r0, #64	; 0x40
 8000c1c:	1ac3      	subs	r3, r0, r3
 8000c1e:	4099      	lsls	r1, r3
 8000c20:	430a      	orrs	r2, r1
 8000c22:	1e51      	subs	r1, r2, #1
 8000c24:	418a      	sbcs	r2, r1
 8000c26:	2100      	movs	r1, #0
 8000c28:	4317      	orrs	r7, r2
 8000c2a:	e692      	b.n	8000952 <__aeabi_dsub+0x1be>
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d114      	bne.n	8000c5a <__aeabi_dsub+0x4c6>
 8000c30:	0026      	movs	r6, r4
 8000c32:	4650      	mov	r0, sl
 8000c34:	4306      	orrs	r6, r0
 8000c36:	d062      	beq.n	8000cfe <__aeabi_dsub+0x56a>
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d15c      	bne.n	8000cf8 <__aeabi_dsub+0x564>
 8000c3e:	1887      	adds	r7, r0, r2
 8000c40:	4297      	cmp	r7, r2
 8000c42:	4192      	sbcs	r2, r2
 8000c44:	1864      	adds	r4, r4, r1
 8000c46:	4252      	negs	r2, r2
 8000c48:	18a4      	adds	r4, r4, r2
 8000c4a:	4666      	mov	r6, ip
 8000c4c:	e687      	b.n	800095e <__aeabi_dsub+0x1ca>
 8000c4e:	4650      	mov	r0, sl
 8000c50:	4320      	orrs	r0, r4
 8000c52:	1e44      	subs	r4, r0, #1
 8000c54:	41a0      	sbcs	r0, r4
 8000c56:	2400      	movs	r4, #0
 8000c58:	e760      	b.n	8000b1c <__aeabi_dsub+0x388>
 8000c5a:	4e57      	ldr	r6, [pc, #348]	; (8000db8 <__aeabi_dsub+0x624>)
 8000c5c:	45b4      	cmp	ip, r6
 8000c5e:	d04e      	beq.n	8000cfe <__aeabi_dsub+0x56a>
 8000c60:	2680      	movs	r6, #128	; 0x80
 8000c62:	0436      	lsls	r6, r6, #16
 8000c64:	425b      	negs	r3, r3
 8000c66:	4334      	orrs	r4, r6
 8000c68:	2b38      	cmp	r3, #56	; 0x38
 8000c6a:	dd00      	ble.n	8000c6e <__aeabi_dsub+0x4da>
 8000c6c:	e07f      	b.n	8000d6e <__aeabi_dsub+0x5da>
 8000c6e:	2b1f      	cmp	r3, #31
 8000c70:	dd00      	ble.n	8000c74 <__aeabi_dsub+0x4e0>
 8000c72:	e08b      	b.n	8000d8c <__aeabi_dsub+0x5f8>
 8000c74:	2620      	movs	r6, #32
 8000c76:	0027      	movs	r7, r4
 8000c78:	4650      	mov	r0, sl
 8000c7a:	1af6      	subs	r6, r6, r3
 8000c7c:	40b7      	lsls	r7, r6
 8000c7e:	40d8      	lsrs	r0, r3
 8000c80:	4307      	orrs	r7, r0
 8000c82:	4650      	mov	r0, sl
 8000c84:	40b0      	lsls	r0, r6
 8000c86:	1e46      	subs	r6, r0, #1
 8000c88:	41b0      	sbcs	r0, r6
 8000c8a:	4307      	orrs	r7, r0
 8000c8c:	40dc      	lsrs	r4, r3
 8000c8e:	18bf      	adds	r7, r7, r2
 8000c90:	e7d6      	b.n	8000c40 <__aeabi_dsub+0x4ac>
 8000c92:	000d      	movs	r5, r1
 8000c94:	4315      	orrs	r5, r2
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dsub+0x506>
 8000c98:	e602      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000c9a:	4650      	mov	r0, sl
 8000c9c:	1a80      	subs	r0, r0, r2
 8000c9e:	4582      	cmp	sl, r0
 8000ca0:	41bf      	sbcs	r7, r7
 8000ca2:	1a65      	subs	r5, r4, r1
 8000ca4:	427f      	negs	r7, r7
 8000ca6:	1bed      	subs	r5, r5, r7
 8000ca8:	4684      	mov	ip, r0
 8000caa:	0228      	lsls	r0, r5, #8
 8000cac:	d400      	bmi.n	8000cb0 <__aeabi_dsub+0x51c>
 8000cae:	e68d      	b.n	80009cc <__aeabi_dsub+0x238>
 8000cb0:	4650      	mov	r0, sl
 8000cb2:	1a17      	subs	r7, r2, r0
 8000cb4:	42ba      	cmp	r2, r7
 8000cb6:	4192      	sbcs	r2, r2
 8000cb8:	1b0c      	subs	r4, r1, r4
 8000cba:	4252      	negs	r2, r2
 8000cbc:	1aa4      	subs	r4, r4, r2
 8000cbe:	4698      	mov	r8, r3
 8000cc0:	e5ee      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000cc2:	000d      	movs	r5, r1
 8000cc4:	4315      	orrs	r5, r2
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dsub+0x536>
 8000cc8:	e76b      	b.n	8000ba2 <__aeabi_dsub+0x40e>
 8000cca:	4650      	mov	r0, sl
 8000ccc:	0767      	lsls	r7, r4, #29
 8000cce:	08c0      	lsrs	r0, r0, #3
 8000cd0:	4307      	orrs	r7, r0
 8000cd2:	2080      	movs	r0, #128	; 0x80
 8000cd4:	08e4      	lsrs	r4, r4, #3
 8000cd6:	0300      	lsls	r0, r0, #12
 8000cd8:	4204      	tst	r4, r0
 8000cda:	d007      	beq.n	8000cec <__aeabi_dsub+0x558>
 8000cdc:	08cd      	lsrs	r5, r1, #3
 8000cde:	4205      	tst	r5, r0
 8000ce0:	d104      	bne.n	8000cec <__aeabi_dsub+0x558>
 8000ce2:	002c      	movs	r4, r5
 8000ce4:	4698      	mov	r8, r3
 8000ce6:	08d7      	lsrs	r7, r2, #3
 8000ce8:	0749      	lsls	r1, r1, #29
 8000cea:	430f      	orrs	r7, r1
 8000cec:	0f7b      	lsrs	r3, r7, #29
 8000cee:	00e4      	lsls	r4, r4, #3
 8000cf0:	431c      	orrs	r4, r3
 8000cf2:	00ff      	lsls	r7, r7, #3
 8000cf4:	4e30      	ldr	r6, [pc, #192]	; (8000db8 <__aeabi_dsub+0x624>)
 8000cf6:	e5d3      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000cf8:	4e2f      	ldr	r6, [pc, #188]	; (8000db8 <__aeabi_dsub+0x624>)
 8000cfa:	45b4      	cmp	ip, r6
 8000cfc:	d1b4      	bne.n	8000c68 <__aeabi_dsub+0x4d4>
 8000cfe:	000c      	movs	r4, r1
 8000d00:	0017      	movs	r7, r2
 8000d02:	4666      	mov	r6, ip
 8000d04:	e5cc      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000d06:	2700      	movs	r7, #0
 8000d08:	2400      	movs	r4, #0
 8000d0a:	e5e8      	b.n	80008de <__aeabi_dsub+0x14a>
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d039      	beq.n	8000d84 <__aeabi_dsub+0x5f0>
 8000d10:	000b      	movs	r3, r1
 8000d12:	4313      	orrs	r3, r2
 8000d14:	d100      	bne.n	8000d18 <__aeabi_dsub+0x584>
 8000d16:	e744      	b.n	8000ba2 <__aeabi_dsub+0x40e>
 8000d18:	08c0      	lsrs	r0, r0, #3
 8000d1a:	0767      	lsls	r7, r4, #29
 8000d1c:	4307      	orrs	r7, r0
 8000d1e:	2080      	movs	r0, #128	; 0x80
 8000d20:	08e4      	lsrs	r4, r4, #3
 8000d22:	0300      	lsls	r0, r0, #12
 8000d24:	4204      	tst	r4, r0
 8000d26:	d0e1      	beq.n	8000cec <__aeabi_dsub+0x558>
 8000d28:	08cb      	lsrs	r3, r1, #3
 8000d2a:	4203      	tst	r3, r0
 8000d2c:	d1de      	bne.n	8000cec <__aeabi_dsub+0x558>
 8000d2e:	08d7      	lsrs	r7, r2, #3
 8000d30:	0749      	lsls	r1, r1, #29
 8000d32:	430f      	orrs	r7, r1
 8000d34:	001c      	movs	r4, r3
 8000d36:	e7d9      	b.n	8000cec <__aeabi_dsub+0x558>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e771      	b.n	8000c20 <__aeabi_dsub+0x48c>
 8000d3c:	2500      	movs	r5, #0
 8000d3e:	2700      	movs	r7, #0
 8000d40:	e5e9      	b.n	8000916 <__aeabi_dsub+0x182>
 8000d42:	002e      	movs	r6, r5
 8000d44:	0027      	movs	r7, r4
 8000d46:	3e20      	subs	r6, #32
 8000d48:	40f7      	lsrs	r7, r6
 8000d4a:	2d20      	cmp	r5, #32
 8000d4c:	d02f      	beq.n	8000dae <__aeabi_dsub+0x61a>
 8000d4e:	2640      	movs	r6, #64	; 0x40
 8000d50:	1b75      	subs	r5, r6, r5
 8000d52:	40ac      	lsls	r4, r5
 8000d54:	4650      	mov	r0, sl
 8000d56:	4320      	orrs	r0, r4
 8000d58:	1e44      	subs	r4, r0, #1
 8000d5a:	41a0      	sbcs	r0, r4
 8000d5c:	2400      	movs	r4, #0
 8000d5e:	4338      	orrs	r0, r7
 8000d60:	e6dc      	b.n	8000b1c <__aeabi_dsub+0x388>
 8000d62:	2480      	movs	r4, #128	; 0x80
 8000d64:	2500      	movs	r5, #0
 8000d66:	0324      	lsls	r4, r4, #12
 8000d68:	4e13      	ldr	r6, [pc, #76]	; (8000db8 <__aeabi_dsub+0x624>)
 8000d6a:	2700      	movs	r7, #0
 8000d6c:	e5d3      	b.n	8000916 <__aeabi_dsub+0x182>
 8000d6e:	4650      	mov	r0, sl
 8000d70:	4320      	orrs	r0, r4
 8000d72:	0007      	movs	r7, r0
 8000d74:	1e78      	subs	r0, r7, #1
 8000d76:	4187      	sbcs	r7, r0
 8000d78:	2400      	movs	r4, #0
 8000d7a:	18bf      	adds	r7, r7, r2
 8000d7c:	e760      	b.n	8000c40 <__aeabi_dsub+0x4ac>
 8000d7e:	000c      	movs	r4, r1
 8000d80:	0017      	movs	r7, r2
 8000d82:	e58d      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000d84:	000c      	movs	r4, r1
 8000d86:	0017      	movs	r7, r2
 8000d88:	4e0b      	ldr	r6, [pc, #44]	; (8000db8 <__aeabi_dsub+0x624>)
 8000d8a:	e589      	b.n	80008a0 <__aeabi_dsub+0x10c>
 8000d8c:	001e      	movs	r6, r3
 8000d8e:	0027      	movs	r7, r4
 8000d90:	3e20      	subs	r6, #32
 8000d92:	40f7      	lsrs	r7, r6
 8000d94:	2b20      	cmp	r3, #32
 8000d96:	d00c      	beq.n	8000db2 <__aeabi_dsub+0x61e>
 8000d98:	2640      	movs	r6, #64	; 0x40
 8000d9a:	1af3      	subs	r3, r6, r3
 8000d9c:	409c      	lsls	r4, r3
 8000d9e:	4650      	mov	r0, sl
 8000da0:	4320      	orrs	r0, r4
 8000da2:	1e44      	subs	r4, r0, #1
 8000da4:	41a0      	sbcs	r0, r4
 8000da6:	4307      	orrs	r7, r0
 8000da8:	2400      	movs	r4, #0
 8000daa:	18bf      	adds	r7, r7, r2
 8000dac:	e748      	b.n	8000c40 <__aeabi_dsub+0x4ac>
 8000dae:	2400      	movs	r4, #0
 8000db0:	e7d0      	b.n	8000d54 <__aeabi_dsub+0x5c0>
 8000db2:	2400      	movs	r4, #0
 8000db4:	e7f3      	b.n	8000d9e <__aeabi_dsub+0x60a>
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	000007ff 	.word	0x000007ff
 8000dbc:	ff7fffff 	.word	0xff7fffff

08000dc0 <__aeabi_d2iz>:
 8000dc0:	b530      	push	{r4, r5, lr}
 8000dc2:	4d13      	ldr	r5, [pc, #76]	; (8000e10 <__aeabi_d2iz+0x50>)
 8000dc4:	030a      	lsls	r2, r1, #12
 8000dc6:	004b      	lsls	r3, r1, #1
 8000dc8:	0b12      	lsrs	r2, r2, #12
 8000dca:	0d5b      	lsrs	r3, r3, #21
 8000dcc:	0fc9      	lsrs	r1, r1, #31
 8000dce:	2400      	movs	r4, #0
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	dd10      	ble.n	8000df6 <__aeabi_d2iz+0x36>
 8000dd4:	4c0f      	ldr	r4, [pc, #60]	; (8000e14 <__aeabi_d2iz+0x54>)
 8000dd6:	42a3      	cmp	r3, r4
 8000dd8:	dc0f      	bgt.n	8000dfa <__aeabi_d2iz+0x3a>
 8000dda:	2480      	movs	r4, #128	; 0x80
 8000ddc:	4d0e      	ldr	r5, [pc, #56]	; (8000e18 <__aeabi_d2iz+0x58>)
 8000dde:	0364      	lsls	r4, r4, #13
 8000de0:	4322      	orrs	r2, r4
 8000de2:	1aed      	subs	r5, r5, r3
 8000de4:	2d1f      	cmp	r5, #31
 8000de6:	dd0b      	ble.n	8000e00 <__aeabi_d2iz+0x40>
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <__aeabi_d2iz+0x5c>)
 8000dea:	1ac3      	subs	r3, r0, r3
 8000dec:	40da      	lsrs	r2, r3
 8000dee:	4254      	negs	r4, r2
 8000df0:	2900      	cmp	r1, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_d2iz+0x36>
 8000df4:	0014      	movs	r4, r2
 8000df6:	0020      	movs	r0, r4
 8000df8:	bd30      	pop	{r4, r5, pc}
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <__aeabi_d2iz+0x60>)
 8000dfc:	18cc      	adds	r4, r1, r3
 8000dfe:	e7fa      	b.n	8000df6 <__aeabi_d2iz+0x36>
 8000e00:	4c08      	ldr	r4, [pc, #32]	; (8000e24 <__aeabi_d2iz+0x64>)
 8000e02:	40e8      	lsrs	r0, r5
 8000e04:	46a4      	mov	ip, r4
 8000e06:	4463      	add	r3, ip
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	4302      	orrs	r2, r0
 8000e0c:	e7ef      	b.n	8000dee <__aeabi_d2iz+0x2e>
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	000003fe 	.word	0x000003fe
 8000e14:	0000041d 	.word	0x0000041d
 8000e18:	00000433 	.word	0x00000433
 8000e1c:	00000413 	.word	0x00000413
 8000e20:	7fffffff 	.word	0x7fffffff
 8000e24:	fffffbed 	.word	0xfffffbed

08000e28 <__aeabi_ui2d>:
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	1e04      	subs	r4, r0, #0
 8000e2c:	d028      	beq.n	8000e80 <__aeabi_ui2d+0x58>
 8000e2e:	f000 f871 	bl	8000f14 <__clzsi2>
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <__aeabi_ui2d+0x60>)
 8000e34:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <__aeabi_ui2d+0x64>)
 8000e36:	1a1b      	subs	r3, r3, r0
 8000e38:	1ad2      	subs	r2, r2, r3
 8000e3a:	2a1f      	cmp	r2, #31
 8000e3c:	dd15      	ble.n	8000e6a <__aeabi_ui2d+0x42>
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <__aeabi_ui2d+0x68>)
 8000e40:	1ad2      	subs	r2, r2, r3
 8000e42:	4094      	lsls	r4, r2
 8000e44:	2200      	movs	r2, #0
 8000e46:	0324      	lsls	r4, r4, #12
 8000e48:	055b      	lsls	r3, r3, #21
 8000e4a:	0b24      	lsrs	r4, r4, #12
 8000e4c:	0d5b      	lsrs	r3, r3, #21
 8000e4e:	2100      	movs	r1, #0
 8000e50:	0010      	movs	r0, r2
 8000e52:	0324      	lsls	r4, r4, #12
 8000e54:	0d0a      	lsrs	r2, r1, #20
 8000e56:	0b24      	lsrs	r4, r4, #12
 8000e58:	0512      	lsls	r2, r2, #20
 8000e5a:	4322      	orrs	r2, r4
 8000e5c:	4c0d      	ldr	r4, [pc, #52]	; (8000e94 <__aeabi_ui2d+0x6c>)
 8000e5e:	051b      	lsls	r3, r3, #20
 8000e60:	4022      	ands	r2, r4
 8000e62:	4313      	orrs	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	0859      	lsrs	r1, r3, #1
 8000e68:	bd10      	pop	{r4, pc}
 8000e6a:	0021      	movs	r1, r4
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	210b      	movs	r1, #11
 8000e72:	1a08      	subs	r0, r1, r0
 8000e74:	40c4      	lsrs	r4, r0
 8000e76:	055b      	lsls	r3, r3, #21
 8000e78:	0324      	lsls	r4, r4, #12
 8000e7a:	0b24      	lsrs	r4, r4, #12
 8000e7c:	0d5b      	lsrs	r3, r3, #21
 8000e7e:	e7e6      	b.n	8000e4e <__aeabi_ui2d+0x26>
 8000e80:	2300      	movs	r3, #0
 8000e82:	2400      	movs	r4, #0
 8000e84:	2200      	movs	r2, #0
 8000e86:	e7e2      	b.n	8000e4e <__aeabi_ui2d+0x26>
 8000e88:	0000041e 	.word	0x0000041e
 8000e8c:	00000433 	.word	0x00000433
 8000e90:	00000413 	.word	0x00000413
 8000e94:	800fffff 	.word	0x800fffff

08000e98 <__aeabi_cdrcmple>:
 8000e98:	4684      	mov	ip, r0
 8000e9a:	1c10      	adds	r0, r2, #0
 8000e9c:	4662      	mov	r2, ip
 8000e9e:	468c      	mov	ip, r1
 8000ea0:	1c19      	adds	r1, r3, #0
 8000ea2:	4663      	mov	r3, ip
 8000ea4:	e000      	b.n	8000ea8 <__aeabi_cdcmpeq>
 8000ea6:	46c0      	nop			; (mov r8, r8)

08000ea8 <__aeabi_cdcmpeq>:
 8000ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000eaa:	f000 f8ef 	bl	800108c <__ledf2>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d401      	bmi.n	8000eb6 <__aeabi_cdcmpeq+0xe>
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	42c8      	cmn	r0, r1
 8000eb6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000eb8 <__aeabi_dcmpeq>:
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	f000 f849 	bl	8000f50 <__eqdf2>
 8000ebe:	4240      	negs	r0, r0
 8000ec0:	3001      	adds	r0, #1
 8000ec2:	bd10      	pop	{r4, pc}

08000ec4 <__aeabi_dcmplt>:
 8000ec4:	b510      	push	{r4, lr}
 8000ec6:	f000 f8e1 	bl	800108c <__ledf2>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	db01      	blt.n	8000ed2 <__aeabi_dcmplt+0xe>
 8000ece:	2000      	movs	r0, #0
 8000ed0:	bd10      	pop	{r4, pc}
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	bd10      	pop	{r4, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)

08000ed8 <__aeabi_dcmple>:
 8000ed8:	b510      	push	{r4, lr}
 8000eda:	f000 f8d7 	bl	800108c <__ledf2>
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	dd01      	ble.n	8000ee6 <__aeabi_dcmple+0xe>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	bd10      	pop	{r4, pc}
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	bd10      	pop	{r4, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)

08000eec <__aeabi_dcmpgt>:
 8000eec:	b510      	push	{r4, lr}
 8000eee:	f000 f869 	bl	8000fc4 <__gedf2>
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	dc01      	bgt.n	8000efa <__aeabi_dcmpgt+0xe>
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	bd10      	pop	{r4, pc}
 8000efa:	2001      	movs	r0, #1
 8000efc:	bd10      	pop	{r4, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)

08000f00 <__aeabi_dcmpge>:
 8000f00:	b510      	push	{r4, lr}
 8000f02:	f000 f85f 	bl	8000fc4 <__gedf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	da01      	bge.n	8000f0e <__aeabi_dcmpge+0xe>
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	bd10      	pop	{r4, pc}
 8000f0e:	2001      	movs	r0, #1
 8000f10:	bd10      	pop	{r4, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)

08000f14 <__clzsi2>:
 8000f14:	211c      	movs	r1, #28
 8000f16:	2301      	movs	r3, #1
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	4298      	cmp	r0, r3
 8000f1c:	d301      	bcc.n	8000f22 <__clzsi2+0xe>
 8000f1e:	0c00      	lsrs	r0, r0, #16
 8000f20:	3910      	subs	r1, #16
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	4298      	cmp	r0, r3
 8000f26:	d301      	bcc.n	8000f2c <__clzsi2+0x18>
 8000f28:	0a00      	lsrs	r0, r0, #8
 8000f2a:	3908      	subs	r1, #8
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	d301      	bcc.n	8000f36 <__clzsi2+0x22>
 8000f32:	0900      	lsrs	r0, r0, #4
 8000f34:	3904      	subs	r1, #4
 8000f36:	a202      	add	r2, pc, #8	; (adr r2, 8000f40 <__clzsi2+0x2c>)
 8000f38:	5c10      	ldrb	r0, [r2, r0]
 8000f3a:	1840      	adds	r0, r0, r1
 8000f3c:	4770      	bx	lr
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	02020304 	.word	0x02020304
 8000f44:	01010101 	.word	0x01010101
	...

08000f50 <__eqdf2>:
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	464f      	mov	r7, r9
 8000f54:	4646      	mov	r6, r8
 8000f56:	46d6      	mov	lr, sl
 8000f58:	005c      	lsls	r4, r3, #1
 8000f5a:	b5c0      	push	{r6, r7, lr}
 8000f5c:	031f      	lsls	r7, r3, #12
 8000f5e:	0fdb      	lsrs	r3, r3, #31
 8000f60:	469a      	mov	sl, r3
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <__eqdf2+0x70>)
 8000f64:	030e      	lsls	r6, r1, #12
 8000f66:	004d      	lsls	r5, r1, #1
 8000f68:	4684      	mov	ip, r0
 8000f6a:	4680      	mov	r8, r0
 8000f6c:	0b36      	lsrs	r6, r6, #12
 8000f6e:	0d6d      	lsrs	r5, r5, #21
 8000f70:	0fc9      	lsrs	r1, r1, #31
 8000f72:	4691      	mov	r9, r2
 8000f74:	0b3f      	lsrs	r7, r7, #12
 8000f76:	0d64      	lsrs	r4, r4, #21
 8000f78:	2001      	movs	r0, #1
 8000f7a:	429d      	cmp	r5, r3
 8000f7c:	d008      	beq.n	8000f90 <__eqdf2+0x40>
 8000f7e:	429c      	cmp	r4, r3
 8000f80:	d001      	beq.n	8000f86 <__eqdf2+0x36>
 8000f82:	42a5      	cmp	r5, r4
 8000f84:	d00b      	beq.n	8000f9e <__eqdf2+0x4e>
 8000f86:	bc1c      	pop	{r2, r3, r4}
 8000f88:	4690      	mov	r8, r2
 8000f8a:	4699      	mov	r9, r3
 8000f8c:	46a2      	mov	sl, r4
 8000f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f90:	4663      	mov	r3, ip
 8000f92:	4333      	orrs	r3, r6
 8000f94:	d1f7      	bne.n	8000f86 <__eqdf2+0x36>
 8000f96:	42ac      	cmp	r4, r5
 8000f98:	d1f5      	bne.n	8000f86 <__eqdf2+0x36>
 8000f9a:	433a      	orrs	r2, r7
 8000f9c:	d1f3      	bne.n	8000f86 <__eqdf2+0x36>
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	42be      	cmp	r6, r7
 8000fa2:	d1f0      	bne.n	8000f86 <__eqdf2+0x36>
 8000fa4:	45c8      	cmp	r8, r9
 8000fa6:	d1ee      	bne.n	8000f86 <__eqdf2+0x36>
 8000fa8:	4551      	cmp	r1, sl
 8000faa:	d007      	beq.n	8000fbc <__eqdf2+0x6c>
 8000fac:	2d00      	cmp	r5, #0
 8000fae:	d1ea      	bne.n	8000f86 <__eqdf2+0x36>
 8000fb0:	4663      	mov	r3, ip
 8000fb2:	431e      	orrs	r6, r3
 8000fb4:	0030      	movs	r0, r6
 8000fb6:	1e46      	subs	r6, r0, #1
 8000fb8:	41b0      	sbcs	r0, r6
 8000fba:	e7e4      	b.n	8000f86 <__eqdf2+0x36>
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	e7e2      	b.n	8000f86 <__eqdf2+0x36>
 8000fc0:	000007ff 	.word	0x000007ff

08000fc4 <__gedf2>:
 8000fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc6:	4645      	mov	r5, r8
 8000fc8:	46de      	mov	lr, fp
 8000fca:	4657      	mov	r7, sl
 8000fcc:	464e      	mov	r6, r9
 8000fce:	b5e0      	push	{r5, r6, r7, lr}
 8000fd0:	031f      	lsls	r7, r3, #12
 8000fd2:	0b3d      	lsrs	r5, r7, #12
 8000fd4:	4f2c      	ldr	r7, [pc, #176]	; (8001088 <__gedf2+0xc4>)
 8000fd6:	030e      	lsls	r6, r1, #12
 8000fd8:	004c      	lsls	r4, r1, #1
 8000fda:	46ab      	mov	fp, r5
 8000fdc:	005d      	lsls	r5, r3, #1
 8000fde:	4684      	mov	ip, r0
 8000fe0:	0b36      	lsrs	r6, r6, #12
 8000fe2:	0d64      	lsrs	r4, r4, #21
 8000fe4:	0fc9      	lsrs	r1, r1, #31
 8000fe6:	4690      	mov	r8, r2
 8000fe8:	0d6d      	lsrs	r5, r5, #21
 8000fea:	0fdb      	lsrs	r3, r3, #31
 8000fec:	42bc      	cmp	r4, r7
 8000fee:	d02a      	beq.n	8001046 <__gedf2+0x82>
 8000ff0:	4f25      	ldr	r7, [pc, #148]	; (8001088 <__gedf2+0xc4>)
 8000ff2:	42bd      	cmp	r5, r7
 8000ff4:	d02d      	beq.n	8001052 <__gedf2+0x8e>
 8000ff6:	2c00      	cmp	r4, #0
 8000ff8:	d10f      	bne.n	800101a <__gedf2+0x56>
 8000ffa:	4330      	orrs	r0, r6
 8000ffc:	0007      	movs	r7, r0
 8000ffe:	4681      	mov	r9, r0
 8001000:	4278      	negs	r0, r7
 8001002:	4178      	adcs	r0, r7
 8001004:	b2c0      	uxtb	r0, r0
 8001006:	2d00      	cmp	r5, #0
 8001008:	d117      	bne.n	800103a <__gedf2+0x76>
 800100a:	465f      	mov	r7, fp
 800100c:	433a      	orrs	r2, r7
 800100e:	d114      	bne.n	800103a <__gedf2+0x76>
 8001010:	464b      	mov	r3, r9
 8001012:	2000      	movs	r0, #0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00a      	beq.n	800102e <__gedf2+0x6a>
 8001018:	e006      	b.n	8001028 <__gedf2+0x64>
 800101a:	2d00      	cmp	r5, #0
 800101c:	d102      	bne.n	8001024 <__gedf2+0x60>
 800101e:	4658      	mov	r0, fp
 8001020:	4302      	orrs	r2, r0
 8001022:	d001      	beq.n	8001028 <__gedf2+0x64>
 8001024:	4299      	cmp	r1, r3
 8001026:	d018      	beq.n	800105a <__gedf2+0x96>
 8001028:	4248      	negs	r0, r1
 800102a:	2101      	movs	r1, #1
 800102c:	4308      	orrs	r0, r1
 800102e:	bc3c      	pop	{r2, r3, r4, r5}
 8001030:	4690      	mov	r8, r2
 8001032:	4699      	mov	r9, r3
 8001034:	46a2      	mov	sl, r4
 8001036:	46ab      	mov	fp, r5
 8001038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800103a:	2800      	cmp	r0, #0
 800103c:	d0f2      	beq.n	8001024 <__gedf2+0x60>
 800103e:	2001      	movs	r0, #1
 8001040:	3b01      	subs	r3, #1
 8001042:	4318      	orrs	r0, r3
 8001044:	e7f3      	b.n	800102e <__gedf2+0x6a>
 8001046:	0037      	movs	r7, r6
 8001048:	4307      	orrs	r7, r0
 800104a:	d0d1      	beq.n	8000ff0 <__gedf2+0x2c>
 800104c:	2002      	movs	r0, #2
 800104e:	4240      	negs	r0, r0
 8001050:	e7ed      	b.n	800102e <__gedf2+0x6a>
 8001052:	465f      	mov	r7, fp
 8001054:	4317      	orrs	r7, r2
 8001056:	d0ce      	beq.n	8000ff6 <__gedf2+0x32>
 8001058:	e7f8      	b.n	800104c <__gedf2+0x88>
 800105a:	42ac      	cmp	r4, r5
 800105c:	dce4      	bgt.n	8001028 <__gedf2+0x64>
 800105e:	da03      	bge.n	8001068 <__gedf2+0xa4>
 8001060:	1e48      	subs	r0, r1, #1
 8001062:	2101      	movs	r1, #1
 8001064:	4308      	orrs	r0, r1
 8001066:	e7e2      	b.n	800102e <__gedf2+0x6a>
 8001068:	455e      	cmp	r6, fp
 800106a:	d8dd      	bhi.n	8001028 <__gedf2+0x64>
 800106c:	d006      	beq.n	800107c <__gedf2+0xb8>
 800106e:	2000      	movs	r0, #0
 8001070:	455e      	cmp	r6, fp
 8001072:	d2dc      	bcs.n	800102e <__gedf2+0x6a>
 8001074:	2301      	movs	r3, #1
 8001076:	1e48      	subs	r0, r1, #1
 8001078:	4318      	orrs	r0, r3
 800107a:	e7d8      	b.n	800102e <__gedf2+0x6a>
 800107c:	45c4      	cmp	ip, r8
 800107e:	d8d3      	bhi.n	8001028 <__gedf2+0x64>
 8001080:	2000      	movs	r0, #0
 8001082:	45c4      	cmp	ip, r8
 8001084:	d3f6      	bcc.n	8001074 <__gedf2+0xb0>
 8001086:	e7d2      	b.n	800102e <__gedf2+0x6a>
 8001088:	000007ff 	.word	0x000007ff

0800108c <__ledf2>:
 800108c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108e:	464e      	mov	r6, r9
 8001090:	4645      	mov	r5, r8
 8001092:	46de      	mov	lr, fp
 8001094:	4657      	mov	r7, sl
 8001096:	005c      	lsls	r4, r3, #1
 8001098:	b5e0      	push	{r5, r6, r7, lr}
 800109a:	031f      	lsls	r7, r3, #12
 800109c:	0fdb      	lsrs	r3, r3, #31
 800109e:	4699      	mov	r9, r3
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <__ledf2+0xc0>)
 80010a2:	030e      	lsls	r6, r1, #12
 80010a4:	004d      	lsls	r5, r1, #1
 80010a6:	0fc9      	lsrs	r1, r1, #31
 80010a8:	4684      	mov	ip, r0
 80010aa:	0b36      	lsrs	r6, r6, #12
 80010ac:	0d6d      	lsrs	r5, r5, #21
 80010ae:	468b      	mov	fp, r1
 80010b0:	4690      	mov	r8, r2
 80010b2:	0b3f      	lsrs	r7, r7, #12
 80010b4:	0d64      	lsrs	r4, r4, #21
 80010b6:	429d      	cmp	r5, r3
 80010b8:	d020      	beq.n	80010fc <__ledf2+0x70>
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <__ledf2+0xc0>)
 80010bc:	429c      	cmp	r4, r3
 80010be:	d022      	beq.n	8001106 <__ledf2+0x7a>
 80010c0:	2d00      	cmp	r5, #0
 80010c2:	d112      	bne.n	80010ea <__ledf2+0x5e>
 80010c4:	4330      	orrs	r0, r6
 80010c6:	4243      	negs	r3, r0
 80010c8:	4143      	adcs	r3, r0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2c00      	cmp	r4, #0
 80010ce:	d01f      	beq.n	8001110 <__ledf2+0x84>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00c      	beq.n	80010ee <__ledf2+0x62>
 80010d4:	464b      	mov	r3, r9
 80010d6:	2001      	movs	r0, #1
 80010d8:	3b01      	subs	r3, #1
 80010da:	4303      	orrs	r3, r0
 80010dc:	0018      	movs	r0, r3
 80010de:	bc3c      	pop	{r2, r3, r4, r5}
 80010e0:	4690      	mov	r8, r2
 80010e2:	4699      	mov	r9, r3
 80010e4:	46a2      	mov	sl, r4
 80010e6:	46ab      	mov	fp, r5
 80010e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ea:	2c00      	cmp	r4, #0
 80010ec:	d016      	beq.n	800111c <__ledf2+0x90>
 80010ee:	45cb      	cmp	fp, r9
 80010f0:	d017      	beq.n	8001122 <__ledf2+0x96>
 80010f2:	465b      	mov	r3, fp
 80010f4:	4259      	negs	r1, r3
 80010f6:	2301      	movs	r3, #1
 80010f8:	430b      	orrs	r3, r1
 80010fa:	e7ef      	b.n	80010dc <__ledf2+0x50>
 80010fc:	0031      	movs	r1, r6
 80010fe:	2302      	movs	r3, #2
 8001100:	4301      	orrs	r1, r0
 8001102:	d1eb      	bne.n	80010dc <__ledf2+0x50>
 8001104:	e7d9      	b.n	80010ba <__ledf2+0x2e>
 8001106:	0039      	movs	r1, r7
 8001108:	2302      	movs	r3, #2
 800110a:	4311      	orrs	r1, r2
 800110c:	d1e6      	bne.n	80010dc <__ledf2+0x50>
 800110e:	e7d7      	b.n	80010c0 <__ledf2+0x34>
 8001110:	433a      	orrs	r2, r7
 8001112:	d1dd      	bne.n	80010d0 <__ledf2+0x44>
 8001114:	2300      	movs	r3, #0
 8001116:	2800      	cmp	r0, #0
 8001118:	d0e0      	beq.n	80010dc <__ledf2+0x50>
 800111a:	e7ea      	b.n	80010f2 <__ledf2+0x66>
 800111c:	433a      	orrs	r2, r7
 800111e:	d1e6      	bne.n	80010ee <__ledf2+0x62>
 8001120:	e7e7      	b.n	80010f2 <__ledf2+0x66>
 8001122:	42a5      	cmp	r5, r4
 8001124:	dce5      	bgt.n	80010f2 <__ledf2+0x66>
 8001126:	db05      	blt.n	8001134 <__ledf2+0xa8>
 8001128:	42be      	cmp	r6, r7
 800112a:	d8e2      	bhi.n	80010f2 <__ledf2+0x66>
 800112c:	d007      	beq.n	800113e <__ledf2+0xb2>
 800112e:	2300      	movs	r3, #0
 8001130:	42be      	cmp	r6, r7
 8001132:	d2d3      	bcs.n	80010dc <__ledf2+0x50>
 8001134:	4659      	mov	r1, fp
 8001136:	2301      	movs	r3, #1
 8001138:	3901      	subs	r1, #1
 800113a:	430b      	orrs	r3, r1
 800113c:	e7ce      	b.n	80010dc <__ledf2+0x50>
 800113e:	45c4      	cmp	ip, r8
 8001140:	d8d7      	bhi.n	80010f2 <__ledf2+0x66>
 8001142:	2300      	movs	r3, #0
 8001144:	45c4      	cmp	ip, r8
 8001146:	d3f5      	bcc.n	8001134 <__ledf2+0xa8>
 8001148:	e7c8      	b.n	80010dc <__ledf2+0x50>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	000007ff 	.word	0x000007ff

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	20fa      	movs	r0, #250	; 0xfa
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_InitTick+0x3c>)
 8001158:	0080      	lsls	r0, r0, #2
 800115a:	7819      	ldrb	r1, [r3, #0]
 800115c:	f7fe fff0 	bl	8000140 <__udivsi3>
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_InitTick+0x40>)
 8001162:	0001      	movs	r1, r0
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	f7fe ffeb 	bl	8000140 <__udivsi3>
 800116a:	f000 fb3f 	bl	80017ec <HAL_SYSTICK_Config>
 800116e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001170:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001172:	2c00      	cmp	r4, #0
 8001174:	d109      	bne.n	800118a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	2d03      	cmp	r5, #3
 8001178:	d807      	bhi.n	800118a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117a:	3802      	subs	r0, #2
 800117c:	0022      	movs	r2, r4
 800117e:	0029      	movs	r1, r5
 8001180:	f000 faf8 	bl	8001774 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	0020      	movs	r0, r4
 8001186:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_InitTick+0x44>)
 8001188:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800118a:	bd70      	pop	{r4, r5, r6, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	2000000c 	.word	0x2000000c
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	2310      	movs	r3, #16
 800119a:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_Init+0x1c>)
{
 800119c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a0:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a2:	430b      	orrs	r3, r1
 80011a4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	f7ff ffd3 	bl	8001150 <HAL_InitTick>
  HAL_MspInit();
 80011aa:	f004 fca1 	bl	8005af0 <HAL_MspInit>
}
 80011ae:	2000      	movs	r0, #0
 80011b0:	bd10      	pop	{r4, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	40022000 	.word	0x40022000

080011b8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_IncTick+0x10>)
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <HAL_IncTick+0x14>)
 80011bc:	6811      	ldr	r1, [r2, #0]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	185b      	adds	r3, r3, r1
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	4770      	bx	lr
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	200002e0 	.word	0x200002e0
 80011cc:	20000000 	.word	0x20000000

080011d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011d0:	4b01      	ldr	r3, [pc, #4]	; (80011d8 <HAL_GetTick+0x8>)
 80011d2:	6818      	ldr	r0, [r3, #0]
}
 80011d4:	4770      	bx	lr
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	200002e0 	.word	0x200002e0

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff fff6 	bl	80011d0 <HAL_GetTick>
 80011e4:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	1c63      	adds	r3, r4, #1
 80011e8:	d002      	beq.n	80011f0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_Delay+0x20>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011f0:	f7ff ffee 	bl	80011d0 <HAL_GetTick>
 80011f4:	1b40      	subs	r0, r0, r5
 80011f6:	4284      	cmp	r4, r0
 80011f8:	d8fa      	bhi.n	80011f0 <HAL_Delay+0x14>
  {
  }
}
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	20000000 	.word	0x20000000

08001200 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001200:	2103      	movs	r1, #3
 8001202:	6803      	ldr	r3, [r0, #0]
{
 8001204:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001206:	689a      	ldr	r2, [r3, #8]
{
 8001208:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800120a:	400a      	ands	r2, r1
 800120c:	2a01      	cmp	r2, #1
 800120e:	d001      	beq.n	8001214 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001210:	2000      	movs	r0, #0
}
 8001212:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001214:	6819      	ldr	r1, [r3, #0]
 8001216:	4211      	tst	r1, r2
 8001218:	d102      	bne.n	8001220 <ADC_Disable+0x20>
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	0412      	lsls	r2, r2, #16
 800121e:	d5f7      	bpl.n	8001210 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001220:	2205      	movs	r2, #5
 8001222:	689d      	ldr	r5, [r3, #8]
 8001224:	4015      	ands	r5, r2
 8001226:	2d01      	cmp	r5, #1
 8001228:	d11a      	bne.n	8001260 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 800122a:	2202      	movs	r2, #2
 800122c:	6899      	ldr	r1, [r3, #8]
 800122e:	430a      	orrs	r2, r1
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	2203      	movs	r2, #3
 8001234:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001236:	f7ff ffcb 	bl	80011d0 <HAL_GetTick>
 800123a:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	422b      	tst	r3, r5
 8001242:	d0e5      	beq.n	8001210 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001244:	f7ff ffc4 	bl	80011d0 <HAL_GetTick>
 8001248:	1b80      	subs	r0, r0, r6
 800124a:	2802      	cmp	r0, #2
 800124c:	d9f6      	bls.n	800123c <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124e:	2310      	movs	r3, #16
 8001250:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001252:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001254:	4313      	orrs	r3, r2
 8001256:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001258:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800125a:	431d      	orrs	r5, r3
 800125c:	63e5      	str	r5, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800125e:	e7d8      	b.n	8001212 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001260:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001262:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001264:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001266:	4313      	orrs	r3, r2
 8001268:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800126c:	4303      	orrs	r3, r0
 800126e:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001270:	e7cf      	b.n	8001212 <ADC_Disable+0x12>
	...

08001274 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001274:	2300      	movs	r3, #0
{
 8001276:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001278:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 800127a:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800127c:	6803      	ldr	r3, [r0, #0]
{
 800127e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	400a      	ands	r2, r1
 8001284:	2a01      	cmp	r2, #1
 8001286:	d107      	bne.n	8001298 <ADC_Enable+0x24>
 8001288:	6819      	ldr	r1, [r3, #0]
 800128a:	4211      	tst	r1, r2
 800128c:	d001      	beq.n	8001292 <ADC_Enable+0x1e>
  return HAL_OK;
 800128e:	2000      	movs	r0, #0
}
 8001290:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	0412      	lsls	r2, r2, #16
 8001296:	d4fa      	bmi.n	800128e <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001298:	6899      	ldr	r1, [r3, #8]
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <ADC_Enable+0x8c>)
 800129c:	4211      	tst	r1, r2
 800129e:	d008      	beq.n	80012b2 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a0:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80012a6:	4313      	orrs	r3, r2
 80012a8:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012ac:	4303      	orrs	r3, r0
 80012ae:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80012b0:	e7ee      	b.n	8001290 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80012b2:	2201      	movs	r2, #1
 80012b4:	6899      	ldr	r1, [r3, #8]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <ADC_Enable+0x90>)
 80012bc:	4912      	ldr	r1, [pc, #72]	; (8001308 <ADC_Enable+0x94>)
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	f7fe ff3e 	bl	8000140 <__udivsi3>
 80012c4:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80012c6:	9b01      	ldr	r3, [sp, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d115      	bne.n	80012f8 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 80012cc:	f7ff ff80 	bl	80011d0 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012d0:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80012d2:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	422b      	tst	r3, r5
 80012da:	d1d8      	bne.n	800128e <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012dc:	f7ff ff78 	bl	80011d0 <HAL_GetTick>
 80012e0:	1b80      	subs	r0, r0, r6
 80012e2:	2802      	cmp	r0, #2
 80012e4:	d9f6      	bls.n	80012d4 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e6:	2310      	movs	r3, #16
 80012e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 80012ea:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ec:	4313      	orrs	r3, r2
 80012ee:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012f2:	432b      	orrs	r3, r5
 80012f4:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80012f6:	e7cb      	b.n	8001290 <ADC_Enable+0x1c>
      wait_loop_index--;
 80012f8:	9b01      	ldr	r3, [sp, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	e7e2      	b.n	80012c6 <ADC_Enable+0x52>
 8001300:	80000017 	.word	0x80000017
 8001304:	2000000c 	.word	0x2000000c
 8001308:	000f4240 	.word	0x000f4240

0800130c <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800130c:	2204      	movs	r2, #4
 800130e:	6803      	ldr	r3, [r0, #0]
{
 8001310:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001312:	6899      	ldr	r1, [r3, #8]
{
 8001314:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001316:	4211      	tst	r1, r2
 8001318:	d101      	bne.n	800131e <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800131a:	2000      	movs	r0, #0
}
 800131c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800131e:	6899      	ldr	r1, [r3, #8]
 8001320:	4211      	tst	r1, r2
 8001322:	d006      	beq.n	8001332 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001324:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001326:	0792      	lsls	r2, r2, #30
 8001328:	d403      	bmi.n	8001332 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800132a:	2210      	movs	r2, #16
 800132c:	6899      	ldr	r1, [r3, #8]
 800132e:	430a      	orrs	r2, r1
 8001330:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001332:	f7ff ff4d 	bl	80011d0 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001336:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8001338:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	422b      	tst	r3, r5
 8001340:	d0eb      	beq.n	800131a <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001342:	f7ff ff45 	bl	80011d0 <HAL_GetTick>
 8001346:	1b80      	subs	r0, r0, r6
 8001348:	2802      	cmp	r0, #2
 800134a:	d9f6      	bls.n	800133a <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134c:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001350:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001352:	4313      	orrs	r3, r2
 8001354:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001356:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001358:	4303      	orrs	r3, r0
 800135a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800135c:	e7de      	b.n	800131c <ADC_ConversionStop+0x10>
	...

08001360 <HAL_ADC_Init>:
{
 8001360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001362:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001364:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001366:	2c00      	cmp	r4, #0
 8001368:	d073      	beq.n	8001452 <HAL_ADC_Init+0xf2>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800136a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800136c:	2b00      	cmp	r3, #0
 800136e:	d106      	bne.n	800137e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8001370:	0022      	movs	r2, r4
 8001372:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001374:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8001376:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001378:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800137a:	f004 fbd1 	bl	8005b20 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800137e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001380:	06db      	lsls	r3, r3, #27
 8001382:	d500      	bpl.n	8001386 <HAL_ADC_Init+0x26>
 8001384:	e07a      	b.n	800147c <HAL_ADC_Init+0x11c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001386:	2204      	movs	r2, #4
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	6898      	ldr	r0, [r3, #8]
 800138c:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800138e:	d000      	beq.n	8001392 <HAL_ADC_Init+0x32>
 8001390:	e074      	b.n	800147c <HAL_ADC_Init+0x11c>
    ADC_STATE_CLR_SET(hadc->State,
 8001392:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001394:	4943      	ldr	r1, [pc, #268]	; (80014a4 <HAL_ADC_Init+0x144>)
 8001396:	4011      	ands	r1, r2
 8001398:	2202      	movs	r2, #2
 800139a:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 800139c:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800139e:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	400a      	ands	r2, r1
 80013a4:	2a01      	cmp	r2, #1
 80013a6:	d000      	beq.n	80013aa <HAL_ADC_Init+0x4a>
 80013a8:	e06e      	b.n	8001488 <HAL_ADC_Init+0x128>
 80013aa:	6819      	ldr	r1, [r3, #0]
 80013ac:	4211      	tst	r1, r2
 80013ae:	d102      	bne.n	80013b6 <HAL_ADC_Init+0x56>
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	0412      	lsls	r2, r2, #16
 80013b4:	d568      	bpl.n	8001488 <HAL_ADC_Init+0x128>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	493b      	ldr	r1, [pc, #236]	; (80014a8 <HAL_ADC_Init+0x148>)
 80013ba:	400a      	ands	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013be:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013c0:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013c2:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013c4:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013c6:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013ca:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013cc:	3a01      	subs	r2, #1
 80013ce:	1e56      	subs	r6, r2, #1
 80013d0:	41b2      	sbcs	r2, r6
 80013d2:	0316      	lsls	r6, r2, #12
 80013d4:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013d6:	034f      	lsls	r7, r1, #13
 80013d8:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013da:	6922      	ldr	r2, [r4, #16]
 80013dc:	432f      	orrs	r7, r5
 80013de:	2a02      	cmp	r2, #2
 80013e0:	d100      	bne.n	80013e4 <HAL_ADC_Init+0x84>
 80013e2:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80013e4:	1d62      	adds	r2, r4, #5
 80013e6:	7fd2      	ldrb	r2, [r2, #31]
 80013e8:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013ea:	433a      	orrs	r2, r7
 80013ec:	4332      	orrs	r2, r6
 80013ee:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013f0:	7ee0      	ldrb	r0, [r4, #27]
 80013f2:	2801      	cmp	r0, #1
 80013f4:	d104      	bne.n	8001400 <HAL_ADC_Init+0xa0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013f6:	2900      	cmp	r1, #0
 80013f8:	d12c      	bne.n	8001454 <HAL_ADC_Init+0xf4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	0249      	lsls	r1, r1, #9
 80013fe:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001400:	20c2      	movs	r0, #194	; 0xc2
 8001402:	69e1      	ldr	r1, [r4, #28]
 8001404:	30ff      	adds	r0, #255	; 0xff
 8001406:	4281      	cmp	r1, r0
 8001408:	d002      	beq.n	8001410 <HAL_ADC_Init+0xb0>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800140a:	6a20      	ldr	r0, [r4, #32]
 800140c:	4301      	orrs	r1, r0
 800140e:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001410:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001412:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001414:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001416:	4311      	orrs	r1, r2
 8001418:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800141a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800141c:	4281      	cmp	r1, r0
 800141e:	d002      	beq.n	8001426 <HAL_ADC_Init+0xc6>
 8001420:	1e48      	subs	r0, r1, #1
 8001422:	2806      	cmp	r0, #6
 8001424:	d807      	bhi.n	8001436 <HAL_ADC_Init+0xd6>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001426:	2507      	movs	r5, #7
 8001428:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800142a:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800142c:	43a8      	bics	r0, r5
 800142e:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001430:	6958      	ldr	r0, [r3, #20]
 8001432:	4301      	orrs	r1, r0
 8001434:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	491c      	ldr	r1, [pc, #112]	; (80014ac <HAL_ADC_Init+0x14c>)
 800143a:	400b      	ands	r3, r1
 800143c:	429a      	cmp	r2, r3
 800143e:	d111      	bne.n	8001464 <HAL_ADC_Init+0x104>
      ADC_CLEAR_ERRORCODE(hadc);
 8001440:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001442:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001444:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001446:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001448:	4393      	bics	r3, r2
 800144a:	001a      	movs	r2, r3
 800144c:	2301      	movs	r3, #1
 800144e:	4313      	orrs	r3, r2
 8001450:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001454:	2120      	movs	r1, #32
 8001456:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001458:	4329      	orrs	r1, r5
 800145a:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800145e:	4308      	orrs	r0, r1
 8001460:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001462:	e7cd      	b.n	8001400 <HAL_ADC_Init+0xa0>
      ADC_STATE_CLR_SET(hadc->State,
 8001464:	2212      	movs	r2, #18
 8001466:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001468:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800146a:	4393      	bics	r3, r2
 800146c:	001a      	movs	r2, r3
 800146e:	2310      	movs	r3, #16
 8001470:	4313      	orrs	r3, r2
 8001472:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001474:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001476:	4303      	orrs	r3, r0
 8001478:	63e3      	str	r3, [r4, #60]	; 0x3c
 800147a:	e7ea      	b.n	8001452 <HAL_ADC_Init+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147c:	2310      	movs	r3, #16
 800147e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001480:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001482:	4313      	orrs	r3, r2
 8001484:	63a3      	str	r3, [r4, #56]	; 0x38
 8001486:	e7e4      	b.n	8001452 <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001488:	2118      	movs	r1, #24
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	438a      	bics	r2, r1
 800148e:	68a1      	ldr	r1, [r4, #8]
 8001490:	430a      	orrs	r2, r1
 8001492:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001494:	6919      	ldr	r1, [r3, #16]
 8001496:	6862      	ldr	r2, [r4, #4]
 8001498:	0089      	lsls	r1, r1, #2
 800149a:	0889      	lsrs	r1, r1, #2
 800149c:	4311      	orrs	r1, r2
 800149e:	6119      	str	r1, [r3, #16]
 80014a0:	e789      	b.n	80013b6 <HAL_ADC_Init+0x56>
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	fffffefd 	.word	0xfffffefd
 80014a8:	fffe0219 	.word	0xfffe0219
 80014ac:	833fffe7 	.word	0x833fffe7

080014b0 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014b0:	6803      	ldr	r3, [r0, #0]
{
 80014b2:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014b4:	689b      	ldr	r3, [r3, #8]
{
 80014b6:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80014b8:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014ba:	075b      	lsls	r3, r3, #29
 80014bc:	d41a      	bmi.n	80014f4 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80014be:	0025      	movs	r5, r4
 80014c0:	3534      	adds	r5, #52	; 0x34
 80014c2:	782b      	ldrb	r3, [r5, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d015      	beq.n	80014f4 <HAL_ADC_Start+0x44>
 80014c8:	2301      	movs	r3, #1
 80014ca:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014cc:	7e63      	ldrb	r3, [r4, #25]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d111      	bne.n	80014f6 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80014d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80014d6:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80014d8:	401a      	ands	r2, r3
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014e0:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80014e2:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014e4:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80014e6:	63e0      	str	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 80014e8:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014ea:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80014ec:	6899      	ldr	r1, [r3, #8]
 80014ee:	3a18      	subs	r2, #24
 80014f0:	430a      	orrs	r2, r1
 80014f2:	609a      	str	r2, [r3, #8]
}
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80014f6:	0020      	movs	r0, r4
 80014f8:	f7ff febc 	bl	8001274 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d1f9      	bne.n	80014f4 <HAL_ADC_Start+0x44>
 8001500:	e7e7      	b.n	80014d2 <HAL_ADC_Start+0x22>
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	fffff0fe 	.word	0xfffff0fe

08001508 <HAL_ADC_Stop>:
{ 
 8001508:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800150a:	0006      	movs	r6, r0
 800150c:	3634      	adds	r6, #52	; 0x34
 800150e:	7833      	ldrb	r3, [r6, #0]
{ 
 8001510:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001512:	2002      	movs	r0, #2
 8001514:	2b01      	cmp	r3, #1
 8001516:	d012      	beq.n	800153e <HAL_ADC_Stop+0x36>
 8001518:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800151a:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 800151c:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800151e:	f7ff fef5 	bl	800130c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001522:	2800      	cmp	r0, #0
 8001524:	d109      	bne.n	800153a <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001526:	0020      	movs	r0, r4
 8001528:	f7ff fe6a 	bl	8001200 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800152c:	2800      	cmp	r0, #0
 800152e:	d104      	bne.n	800153a <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001532:	4a03      	ldr	r2, [pc, #12]	; (8001540 <HAL_ADC_Stop+0x38>)
 8001534:	4013      	ands	r3, r2
 8001536:	431d      	orrs	r5, r3
 8001538:	63a5      	str	r5, [r4, #56]	; 0x38
  __HAL_UNLOCK(hadc);
 800153a:	2300      	movs	r3, #0
 800153c:	7033      	strb	r3, [r6, #0]
}
 800153e:	bd70      	pop	{r4, r5, r6, pc}
 8001540:	fffffefe 	.word	0xfffffefe

08001544 <HAL_ADC_Start_DMA>:
{
 8001544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001546:	6803      	ldr	r3, [r0, #0]
{
 8001548:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800154a:	689b      	ldr	r3, [r3, #8]
{
 800154c:	000f      	movs	r7, r1
 800154e:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8001550:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001552:	075b      	lsls	r3, r3, #29
 8001554:	d430      	bmi.n	80015b8 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8001556:	0026      	movs	r6, r4
 8001558:	3634      	adds	r6, #52	; 0x34
 800155a:	7833      	ldrb	r3, [r6, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d02b      	beq.n	80015b8 <HAL_ADC_Start_DMA+0x74>
 8001560:	2301      	movs	r3, #1
 8001562:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001564:	7e63      	ldrb	r3, [r4, #25]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d127      	bne.n	80015ba <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 800156a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800156c:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 800156e:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001570:	401a      	ands	r2, r3
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4313      	orrs	r3, r2
 8001578:	63a3      	str	r3, [r4, #56]	; 0x38
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800157a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 800157e:	63e5      	str	r5, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8001580:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001582:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001586:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001588:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_ADC_Start_DMA+0x90>)
 800158c:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800158e:	231c      	movs	r3, #28
 8001590:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001592:	684a      	ldr	r2, [r1, #4]
 8001594:	3b0c      	subs	r3, #12
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800159a:	2301      	movs	r3, #1
 800159c:	68ca      	ldr	r2, [r1, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015a2:	003a      	movs	r2, r7
 80015a4:	3140      	adds	r1, #64	; 0x40
 80015a6:	9b01      	ldr	r3, [sp, #4]
 80015a8:	f000 f96c 	bl	8001884 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80015ac:	2304      	movs	r3, #4
 80015ae:	0028      	movs	r0, r5
 80015b0:	6822      	ldr	r2, [r4, #0]
 80015b2:	6891      	ldr	r1, [r2, #8]
 80015b4:	430b      	orrs	r3, r1
 80015b6:	6093      	str	r3, [r2, #8]
}
 80015b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80015ba:	0020      	movs	r0, r4
 80015bc:	f7ff fe5a 	bl	8001274 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d1f9      	bne.n	80015b8 <HAL_ADC_Start_DMA+0x74>
 80015c4:	e7d1      	b.n	800156a <HAL_ADC_Start_DMA+0x26>
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	fffff0fe 	.word	0xfffff0fe
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	0800164f 	.word	0x0800164f
 80015d4:	0800165b 	.word	0x0800165b

080015d8 <HAL_ADC_ConvCpltCallback>:
 80015d8:	4770      	bx	lr
	...

080015dc <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015dc:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015de:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80015e0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80015e4:	4211      	tst	r1, r2
 80015e6:	d12a      	bne.n	800163e <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80015ea:	32b1      	adds	r2, #177	; 0xb1
 80015ec:	32ff      	adds	r2, #255	; 0xff
 80015ee:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015f0:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	0109      	lsls	r1, r1, #4
 80015f8:	68d0      	ldr	r0, [r2, #12]
 80015fa:	4208      	tst	r0, r1
 80015fc:	d112      	bne.n	8001624 <ADC_DMAConvCplt+0x48>
 80015fe:	7e99      	ldrb	r1, [r3, #26]
 8001600:	2900      	cmp	r1, #0
 8001602:	d10f      	bne.n	8001624 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001604:	6811      	ldr	r1, [r2, #0]
 8001606:	0709      	lsls	r1, r1, #28
 8001608:	d50c      	bpl.n	8001624 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800160a:	6891      	ldr	r1, [r2, #8]
 800160c:	0749      	lsls	r1, r1, #29
 800160e:	d40d      	bmi.n	800162c <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001610:	200c      	movs	r0, #12
 8001612:	6851      	ldr	r1, [r2, #4]
 8001614:	4381      	bics	r1, r0
 8001616:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800161a:	490b      	ldr	r1, [pc, #44]	; (8001648 <ADC_DMAConvCplt+0x6c>)
 800161c:	4011      	ands	r1, r2
 800161e:	2201      	movs	r2, #1
 8001620:	430a      	orrs	r2, r1
 8001622:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff ffd7 	bl	80015d8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800162a:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162c:	2220      	movs	r2, #32
 800162e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001630:	430a      	orrs	r2, r1
 8001632:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001634:	2201      	movs	r2, #1
 8001636:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001638:	430a      	orrs	r2, r1
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c
 800163c:	e7f2      	b.n	8001624 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4798      	blx	r3
}
 8001644:	e7f1      	b.n	800162a <ADC_DMAConvCplt+0x4e>
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	fffffefe 	.word	0xfffffefe

0800164c <HAL_ADC_ConvHalfCpltCallback>:
 800164c:	4770      	bx	lr

0800164e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800164e:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001650:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001652:	f7ff fffb 	bl	800164c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001656:	bd10      	pop	{r4, pc}

08001658 <HAL_ADC_ErrorCallback>:
}
 8001658:	4770      	bx	lr

0800165a <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800165a:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800165c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800165e:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001660:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001662:	4313      	orrs	r3, r2
 8001664:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001666:	2304      	movs	r3, #4
 8001668:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800166a:	4313      	orrs	r3, r2
 800166c:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800166e:	f7ff fff3 	bl	8001658 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001672:	bd10      	pop	{r4, pc}

08001674 <HAL_ADC_ConfigChannel>:
{
 8001674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001676:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001678:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 800167a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800167c:	3434      	adds	r4, #52	; 0x34
 800167e:	7823      	ldrb	r3, [r4, #0]
{
 8001680:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8001682:	2002      	movs	r0, #2
 8001684:	2b01      	cmp	r3, #1
 8001686:	d02b      	beq.n	80016e0 <HAL_ADC_ConfigChannel+0x6c>
 8001688:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800168a:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800168c:	6aee      	ldr	r6, [r5, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800168e:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8001690:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001692:	0740      	lsls	r0, r0, #29
 8001694:	d45a      	bmi.n	800174c <HAL_ADC_ConfigChannel+0xd8>
    if (sConfig->Rank != ADC_RANK_NONE)
 8001696:	4830      	ldr	r0, [pc, #192]	; (8001758 <HAL_ADC_ConfigChannel+0xe4>)
 8001698:	684f      	ldr	r7, [r1, #4]
 800169a:	680d      	ldr	r5, [r1, #0]
 800169c:	4287      	cmp	r7, r0
 800169e:	d03f      	beq.n	8001720 <HAL_ADC_ConfigChannel+0xac>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016a0:	40ab      	lsls	r3, r5
 80016a2:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016a4:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016a6:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016a8:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016aa:	4338      	orrs	r0, r7
 80016ac:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016ae:	429e      	cmp	r6, r3
 80016b0:	d00f      	beq.n	80016d2 <HAL_ADC_ConfigChannel+0x5e>
 80016b2:	3e01      	subs	r6, #1
 80016b4:	2e06      	cmp	r6, #6
 80016b6:	d90c      	bls.n	80016d2 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80016b8:	688b      	ldr	r3, [r1, #8]
 80016ba:	2107      	movs	r1, #7
 80016bc:	6950      	ldr	r0, [r2, #20]
 80016be:	4008      	ands	r0, r1
 80016c0:	4283      	cmp	r3, r0
 80016c2:	d006      	beq.n	80016d2 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80016c4:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80016c6:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80016c8:	4388      	bics	r0, r1
 80016ca:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80016cc:	6950      	ldr	r0, [r2, #20]
 80016ce:	4303      	orrs	r3, r0
 80016d0:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016d2:	002b      	movs	r3, r5
 80016d4:	3b10      	subs	r3, #16
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d903      	bls.n	80016e2 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016da:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80016dc:	2300      	movs	r3, #0
 80016de:	7023      	strb	r3, [r4, #0]
}
 80016e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_ADC_ConfigChannel+0xe8>)
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	6811      	ldr	r1, [r2, #0]
 80016e8:	2d10      	cmp	r5, #16
 80016ea:	d015      	beq.n	8001718 <HAL_ADC_ConfigChannel+0xa4>
 80016ec:	2d11      	cmp	r5, #17
 80016ee:	d015      	beq.n	800171c <HAL_ADC_ConfigChannel+0xa8>
 80016f0:	045b      	lsls	r3, r3, #17
 80016f2:	430b      	orrs	r3, r1
 80016f4:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f6:	2d10      	cmp	r5, #16
 80016f8:	d1ef      	bne.n	80016da <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_ADC_ConfigChannel+0xec>)
 80016fc:	4919      	ldr	r1, [pc, #100]	; (8001764 <HAL_ADC_ConfigChannel+0xf0>)
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	f7fe fd1e 	bl	8000140 <__udivsi3>
 8001704:	230a      	movs	r3, #10
 8001706:	4358      	muls	r0, r3
 8001708:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 800170a:	9b01      	ldr	r3, [sp, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0e4      	beq.n	80016da <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8001710:	9b01      	ldr	r3, [sp, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	e7f8      	b.n	800170a <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	e7ea      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x7e>
 800171c:	03db      	lsls	r3, r3, #15
 800171e:	e7e8      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001720:	40ab      	lsls	r3, r5
 8001722:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001724:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001726:	002b      	movs	r3, r5
 8001728:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800172a:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800172c:	2b02      	cmp	r3, #2
 800172e:	d8d4      	bhi.n	80016da <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_ADC_ConfigChannel+0xe8>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2d10      	cmp	r5, #16
 8001736:	d005      	beq.n	8001744 <HAL_ADC_ConfigChannel+0xd0>
 8001738:	2d11      	cmp	r5, #17
 800173a:	d005      	beq.n	8001748 <HAL_ADC_ConfigChannel+0xd4>
 800173c:	490a      	ldr	r1, [pc, #40]	; (8001768 <HAL_ADC_ConfigChannel+0xf4>)
 800173e:	400a      	ands	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e7ca      	b.n	80016da <HAL_ADC_ConfigChannel+0x66>
 8001744:	4909      	ldr	r1, [pc, #36]	; (800176c <HAL_ADC_ConfigChannel+0xf8>)
 8001746:	e7fa      	b.n	800173e <HAL_ADC_ConfigChannel+0xca>
 8001748:	4909      	ldr	r1, [pc, #36]	; (8001770 <HAL_ADC_ConfigChannel+0xfc>)
 800174a:	e7f8      	b.n	800173e <HAL_ADC_ConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800174c:	2220      	movs	r2, #32
 800174e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001750:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001752:	430a      	orrs	r2, r1
 8001754:	63aa      	str	r2, [r5, #56]	; 0x38
 8001756:	e7c1      	b.n	80016dc <HAL_ADC_ConfigChannel+0x68>
 8001758:	00001001 	.word	0x00001001
 800175c:	40012708 	.word	0x40012708
 8001760:	2000000c 	.word	0x2000000c
 8001764:	000f4240 	.word	0x000f4240
 8001768:	feffffff 	.word	0xfeffffff
 800176c:	ff7fffff 	.word	0xff7fffff
 8001770:	ffbfffff 	.word	0xffbfffff

08001774 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001774:	b570      	push	{r4, r5, r6, lr}
 8001776:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001778:	2800      	cmp	r0, #0
 800177a:	db12      	blt.n	80017a2 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800177c:	0883      	lsrs	r3, r0, #2
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <HAL_NVIC_SetPriority+0x58>)
 8001780:	2403      	movs	r4, #3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	189b      	adds	r3, r3, r2
 8001786:	22ff      	movs	r2, #255	; 0xff
 8001788:	4020      	ands	r0, r4
 800178a:	40a0      	lsls	r0, r4
 800178c:	0014      	movs	r4, r2
 800178e:	25c0      	movs	r5, #192	; 0xc0
 8001790:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001792:	4011      	ands	r1, r2
 8001794:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001796:	00ad      	lsls	r5, r5, #2
 8001798:	595e      	ldr	r6, [r3, r5]
 800179a:	43a6      	bics	r6, r4
 800179c:	4331      	orrs	r1, r6
 800179e:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80017a0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017a2:	2403      	movs	r4, #3
 80017a4:	230f      	movs	r3, #15
 80017a6:	b2c0      	uxtb	r0, r0
 80017a8:	4003      	ands	r3, r0
 80017aa:	4020      	ands	r0, r4
 80017ac:	40a0      	lsls	r0, r4
 80017ae:	34fc      	adds	r4, #252	; 0xfc
 80017b0:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017b2:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017b6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b8:	3b08      	subs	r3, #8
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <HAL_NVIC_SetPriority+0x5c>)
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	189b      	adds	r3, r3, r2
 80017c2:	69da      	ldr	r2, [r3, #28]
 80017c4:	43aa      	bics	r2, r5
 80017c6:	4311      	orrs	r1, r2
 80017c8:	61d9      	str	r1, [r3, #28]
 80017ca:	e7e9      	b.n	80017a0 <HAL_NVIC_SetPriority+0x2c>
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80017d4:	2800      	cmp	r0, #0
 80017d6:	db05      	blt.n	80017e4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d8:	231f      	movs	r3, #31
 80017da:	4018      	ands	r0, r3
 80017dc:	3b1e      	subs	r3, #30
 80017de:	4083      	lsls	r3, r0
 80017e0:	4a01      	ldr	r2, [pc, #4]	; (80017e8 <HAL_NVIC_EnableIRQ+0x14>)
 80017e2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80017e4:	4770      	bx	lr
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	e000e100 	.word	0xe000e100

080017ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_SYSTICK_Config+0x28>)
 80017ee:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f0:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d80d      	bhi.n	8001812 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f6:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017fa:	4808      	ldr	r0, [pc, #32]	; (800181c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fc:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017fe:	6a03      	ldr	r3, [r0, #32]
 8001800:	0609      	lsls	r1, r1, #24
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	430b      	orrs	r3, r1
 8001808:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001810:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001812:	4770      	bx	lr
 8001814:	00ffffff 	.word	0x00ffffff
 8001818:	e000e010 	.word	0xe000e010
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001820:	b570      	push	{r4, r5, r6, lr}
 8001822:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8001824:	2001      	movs	r0, #1
  if(NULL == hdma)
 8001826:	2c00      	cmp	r4, #0
 8001828:	d024      	beq.n	8001874 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800182a:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800182c:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800182e:	1ca5      	adds	r5, r4, #2
 8001830:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8001832:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001836:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001838:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800183a:	6863      	ldr	r3, [r4, #4]
 800183c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183e:	68e1      	ldr	r1, [r4, #12]
 8001840:	430b      	orrs	r3, r1
 8001842:	6921      	ldr	r1, [r4, #16]
 8001844:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001846:	6961      	ldr	r1, [r4, #20]
 8001848:	430b      	orrs	r3, r1
 800184a:	69a1      	ldr	r1, [r4, #24]
 800184c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800184e:	69e1      	ldr	r1, [r4, #28]
 8001850:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001852:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001854:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_DMA_Init+0x5c>)
 8001858:	2114      	movs	r1, #20
 800185a:	18c0      	adds	r0, r0, r3
 800185c:	f7fe fc70 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001862:	0080      	lsls	r0, r0, #2
 8001864:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001866:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001868:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800186a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800186c:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 800186e:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8001870:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8001872:	77e0      	strb	r0, [r4, #31]
}  
 8001874:	bd70      	pop	{r4, r5, r6, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	ffffc00f 	.word	0xffffc00f
 800187c:	bffdfff8 	.word	0xbffdfff8
 8001880:	40020000 	.word	0x40020000

08001884 <HAL_DMA_Start_IT>:
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8001886:	1c46      	adds	r6, r0, #1
 8001888:	7ff5      	ldrb	r5, [r6, #31]
 800188a:	2402      	movs	r4, #2
 800188c:	2d01      	cmp	r5, #1
 800188e:	d026      	beq.n	80018de <HAL_DMA_Start_IT+0x5a>
 8001890:	2501      	movs	r5, #1
 8001892:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001894:	1905      	adds	r5, r0, r4
 8001896:	46ac      	mov	ip, r5
 8001898:	7fed      	ldrb	r5, [r5, #31]
 800189a:	2700      	movs	r7, #0
 800189c:	b2ed      	uxtb	r5, r5
 800189e:	2d01      	cmp	r5, #1
 80018a0:	d129      	bne.n	80018f6 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80018a2:	4666      	mov	r6, ip
 80018a4:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018a6:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a8:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018aa:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018ac:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018ae:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018b0:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018b2:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018b4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80018b6:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80018b8:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ba:	6843      	ldr	r3, [r0, #4]
 80018bc:	6805      	ldr	r5, [r0, #0]
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d10f      	bne.n	80018e2 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 80018c2:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80018c4:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80018c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018c8:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00c      	beq.n	80018e8 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018ce:	230e      	movs	r3, #14
 80018d0:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018d2:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80018d4:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 80018d6:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80018d8:	682a      	ldr	r2, [r5, #0]
 80018da:	4313      	orrs	r3, r2
 80018dc:	602b      	str	r3, [r5, #0]
} 
 80018de:	0020      	movs	r0, r4
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 80018e2:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80018e4:	60e2      	str	r2, [r4, #12]
 80018e6:	e7ee      	b.n	80018c6 <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80018e8:	230a      	movs	r3, #10
 80018ea:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018ec:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80018ee:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	4393      	bics	r3, r2
 80018f4:	e7ed      	b.n	80018d2 <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 80018f6:	77f7      	strb	r7, [r6, #31]
 80018f8:	e7f1      	b.n	80018de <HAL_DMA_Start_IT+0x5a>

080018fa <HAL_DMA_IRQHandler>:
{
 80018fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80018fc:	2704      	movs	r7, #4
 80018fe:	003e      	movs	r6, r7
 8001900:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001902:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001904:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001906:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001908:	6803      	ldr	r3, [r0, #0]
 800190a:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800190c:	422e      	tst	r6, r5
 800190e:	d00d      	beq.n	800192c <HAL_DMA_IRQHandler+0x32>
 8001910:	423c      	tst	r4, r7
 8001912:	d00b      	beq.n	800192c <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001914:	6819      	ldr	r1, [r3, #0]
 8001916:	0689      	lsls	r1, r1, #26
 8001918:	d402      	bmi.n	8001920 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800191a:	6819      	ldr	r1, [r3, #0]
 800191c:	43b9      	bics	r1, r7
 800191e:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001920:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001922:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001924:	2b00      	cmp	r3, #0
 8001926:	d019      	beq.n	800195c <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8001928:	4798      	blx	r3
}  
 800192a:	e017      	b.n	800195c <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800192c:	2702      	movs	r7, #2
 800192e:	003e      	movs	r6, r7
 8001930:	408e      	lsls	r6, r1
 8001932:	422e      	tst	r6, r5
 8001934:	d013      	beq.n	800195e <HAL_DMA_IRQHandler+0x64>
 8001936:	423c      	tst	r4, r7
 8001938:	d011      	beq.n	800195e <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	0689      	lsls	r1, r1, #26
 800193e:	d406      	bmi.n	800194e <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001940:	240a      	movs	r4, #10
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	43a1      	bics	r1, r4
 8001946:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001948:	2101      	movs	r1, #1
 800194a:	19c3      	adds	r3, r0, r7
 800194c:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800194e:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001950:	2200      	movs	r2, #0
 8001952:	1c43      	adds	r3, r0, #1
 8001954:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8001956:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8001958:	4293      	cmp	r3, r2
 800195a:	d1e5      	bne.n	8001928 <HAL_DMA_IRQHandler+0x2e>
}  
 800195c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800195e:	2608      	movs	r6, #8
 8001960:	0037      	movs	r7, r6
 8001962:	408f      	lsls	r7, r1
 8001964:	423d      	tst	r5, r7
 8001966:	d0f9      	beq.n	800195c <HAL_DMA_IRQHandler+0x62>
 8001968:	4234      	tst	r4, r6
 800196a:	d0f7      	beq.n	800195c <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800196c:	250e      	movs	r5, #14
 800196e:	681c      	ldr	r4, [r3, #0]
 8001970:	43ac      	bics	r4, r5
 8001972:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001974:	2301      	movs	r3, #1
 8001976:	001c      	movs	r4, r3
 8001978:	408c      	lsls	r4, r1
 800197a:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 800197c:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800197e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001980:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8001982:	2200      	movs	r2, #0
 8001984:	18c3      	adds	r3, r0, r3
 8001986:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8001988:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800198a:	e7e5      	b.n	8001958 <HAL_DMA_IRQHandler+0x5e>

0800198c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	680b      	ldr	r3, [r1, #0]
{ 
 8001990:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8001994:	2300      	movs	r3, #0
{ 
 8001996:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001998:	9a02      	ldr	r2, [sp, #8]
 800199a:	40da      	lsrs	r2, r3
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 800199e:	b007      	add	sp, #28
 80019a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a2:	2201      	movs	r2, #1
 80019a4:	409a      	lsls	r2, r3
 80019a6:	9203      	str	r2, [sp, #12]
 80019a8:	9903      	ldr	r1, [sp, #12]
 80019aa:	9a02      	ldr	r2, [sp, #8]
 80019ac:	400a      	ands	r2, r1
 80019ae:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80019b0:	d100      	bne.n	80019b4 <HAL_GPIO_Init+0x28>
 80019b2:	e08c      	b.n	8001ace <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b4:	9a01      	ldr	r2, [sp, #4]
 80019b6:	2110      	movs	r1, #16
 80019b8:	6852      	ldr	r2, [r2, #4]
 80019ba:	0016      	movs	r6, r2
 80019bc:	438e      	bics	r6, r1
 80019be:	2e02      	cmp	r6, #2
 80019c0:	d10e      	bne.n	80019e0 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019c2:	2507      	movs	r5, #7
 80019c4:	401d      	ands	r5, r3
 80019c6:	00ad      	lsls	r5, r5, #2
 80019c8:	3901      	subs	r1, #1
 80019ca:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 80019cc:	08dc      	lsrs	r4, r3, #3
 80019ce:	00a4      	lsls	r4, r4, #2
 80019d0:	1904      	adds	r4, r0, r4
 80019d2:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d4:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019d6:	9901      	ldr	r1, [sp, #4]
 80019d8:	6909      	ldr	r1, [r1, #16]
 80019da:	40a9      	lsls	r1, r5
 80019dc:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 80019de:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019e0:	2403      	movs	r4, #3
 80019e2:	005f      	lsls	r7, r3, #1
 80019e4:	40bc      	lsls	r4, r7
 80019e6:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80019e8:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ea:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019ec:	4025      	ands	r5, r4
 80019ee:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019f0:	2503      	movs	r5, #3
 80019f2:	4015      	ands	r5, r2
 80019f4:	40bd      	lsls	r5, r7
 80019f6:	4661      	mov	r1, ip
 80019f8:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80019fa:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fc:	2e01      	cmp	r6, #1
 80019fe:	d80f      	bhi.n	8001a20 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a00:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8001a02:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a04:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a06:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a08:	40bd      	lsls	r5, r7
 8001a0a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001a0c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a0e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a10:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a12:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a14:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a16:	2101      	movs	r1, #1
 8001a18:	400d      	ands	r5, r1
 8001a1a:	409d      	lsls	r5, r3
 8001a1c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001a1e:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a20:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a22:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a24:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a26:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a28:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a2a:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2c:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a2e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001a30:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a32:	420a      	tst	r2, r1
 8001a34:	d04b      	beq.n	8001ace <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2101      	movs	r1, #1
 8001a38:	4c26      	ldr	r4, [pc, #152]	; (8001ad4 <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3c:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a40:	430d      	orrs	r5, r1
 8001a42:	61a5      	str	r5, [r4, #24]
 8001a44:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a46:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a48:	400c      	ands	r4, r1
 8001a4a:	9405      	str	r4, [sp, #20]
 8001a4c:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a4e:	240f      	movs	r4, #15
 8001a50:	4921      	ldr	r1, [pc, #132]	; (8001ad8 <HAL_GPIO_Init+0x14c>)
 8001a52:	00ad      	lsls	r5, r5, #2
 8001a54:	00b6      	lsls	r6, r6, #2
 8001a56:	186d      	adds	r5, r5, r1
 8001a58:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a5a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a5c:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a5e:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a60:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a62:	2400      	movs	r4, #0
 8001a64:	4288      	cmp	r0, r1
 8001a66:	d00c      	beq.n	8001a82 <HAL_GPIO_Init+0xf6>
 8001a68:	491c      	ldr	r1, [pc, #112]	; (8001adc <HAL_GPIO_Init+0x150>)
 8001a6a:	3401      	adds	r4, #1
 8001a6c:	4288      	cmp	r0, r1
 8001a6e:	d008      	beq.n	8001a82 <HAL_GPIO_Init+0xf6>
 8001a70:	491b      	ldr	r1, [pc, #108]	; (8001ae0 <HAL_GPIO_Init+0x154>)
 8001a72:	3401      	adds	r4, #1
 8001a74:	4288      	cmp	r0, r1
 8001a76:	d004      	beq.n	8001a82 <HAL_GPIO_Init+0xf6>
 8001a78:	491a      	ldr	r1, [pc, #104]	; (8001ae4 <HAL_GPIO_Init+0x158>)
 8001a7a:	3403      	adds	r4, #3
 8001a7c:	4288      	cmp	r0, r1
 8001a7e:	d100      	bne.n	8001a82 <HAL_GPIO_Init+0xf6>
 8001a80:	3c02      	subs	r4, #2
 8001a82:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8001a84:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a86:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8001a88:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a8a:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8001a8c:	4c16      	ldr	r4, [pc, #88]	; (8001ae8 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8001a8e:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8001a90:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8001a92:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a94:	03d1      	lsls	r1, r2, #15
 8001a96:	d401      	bmi.n	8001a9c <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8001a98:	003e      	movs	r6, r7
 8001a9a:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8001a9c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8001a9e:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8001aa0:	9e00      	ldr	r6, [sp, #0]
 8001aa2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa4:	0391      	lsls	r1, r2, #14
 8001aa6:	d401      	bmi.n	8001aac <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8001aa8:	003e      	movs	r6, r7
 8001aaa:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8001aac:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8001aae:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8001ab0:	9e00      	ldr	r6, [sp, #0]
 8001ab2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab4:	02d1      	lsls	r1, r2, #11
 8001ab6:	d401      	bmi.n	8001abc <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8001ab8:	003e      	movs	r6, r7
 8001aba:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8001abc:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8001abe:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8001ac0:	9f00      	ldr	r7, [sp, #0]
 8001ac2:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac4:	0292      	lsls	r2, r2, #10
 8001ac6:	d401      	bmi.n	8001acc <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8001ac8:	402e      	ands	r6, r5
 8001aca:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8001acc:	60e7      	str	r7, [r4, #12]
    position++;
 8001ace:	3301      	adds	r3, #1
 8001ad0:	e762      	b.n	8001998 <HAL_GPIO_Init+0xc>
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	48000400 	.word	0x48000400
 8001ae0:	48000800 	.word	0x48000800
 8001ae4:	48000c00 	.word	0x48000c00
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aec:	6900      	ldr	r0, [r0, #16]
 8001aee:	4008      	ands	r0, r1
 8001af0:	1e41      	subs	r1, r0, #1
 8001af2:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001af4:	b2c0      	uxtb	r0, r0
  }
 8001af6:	4770      	bx	lr

08001af8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af8:	2a00      	cmp	r2, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001afc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001afe:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b00:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001b02:	e7fc      	b.n	8001afe <HAL_GPIO_WritePin+0x6>

08001b04 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001b04:	6943      	ldr	r3, [r0, #20]
 8001b06:	4219      	tst	r1, r3
 8001b08:	d000      	beq.n	8001b0c <HAL_GPIO_TogglePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b0a:	0409      	lsls	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b0c:	6181      	str	r1, [r0, #24]
  }
}
 8001b0e:	4770      	bx	lr

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	0004      	movs	r4, r0
 8001b14:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b16:	2800      	cmp	r0, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001b1a:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8001b1c:	b005      	add	sp, #20
 8001b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b20:	6803      	ldr	r3, [r0, #0]
 8001b22:	07db      	lsls	r3, r3, #31
 8001b24:	d42e      	bmi.n	8001b84 <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	079b      	lsls	r3, r3, #30
 8001b2a:	d47e      	bmi.n	8001c2a <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	071b      	lsls	r3, r3, #28
 8001b30:	d500      	bpl.n	8001b34 <HAL_RCC_OscConfig+0x24>
 8001b32:	e0ba      	b.n	8001caa <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	075b      	lsls	r3, r3, #29
 8001b38:	d500      	bpl.n	8001b3c <HAL_RCC_OscConfig+0x2c>
 8001b3a:	e0dd      	b.n	8001cf8 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	06db      	lsls	r3, r3, #27
 8001b40:	d51a      	bpl.n	8001b78 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b42:	6962      	ldr	r2, [r4, #20]
 8001b44:	4db4      	ldr	r5, [pc, #720]	; (8001e18 <HAL_RCC_OscConfig+0x308>)
 8001b46:	2304      	movs	r3, #4
 8001b48:	2a01      	cmp	r2, #1
 8001b4a:	d000      	beq.n	8001b4e <HAL_RCC_OscConfig+0x3e>
 8001b4c:	e149      	b.n	8001de2 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b4e:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b50:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b52:	430b      	orrs	r3, r1
 8001b54:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001b56:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fb38 	bl	80011d0 <HAL_GetTick>
 8001b60:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b62:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b64:	4233      	tst	r3, r6
 8001b66:	d100      	bne.n	8001b6a <HAL_RCC_OscConfig+0x5a>
 8001b68:	e134      	b.n	8001dd4 <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b6a:	21f8      	movs	r1, #248	; 0xf8
 8001b6c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b6e:	69a3      	ldr	r3, [r4, #24]
 8001b70:	438a      	bics	r2, r1
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b78:	6a23      	ldr	r3, [r4, #32]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d000      	beq.n	8001b80 <HAL_RCC_OscConfig+0x70>
 8001b7e:	e157      	b.n	8001e30 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8001b80:	2000      	movs	r0, #0
 8001b82:	e7cb      	b.n	8001b1c <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b84:	210c      	movs	r1, #12
 8001b86:	4da4      	ldr	r5, [pc, #656]	; (8001e18 <HAL_RCC_OscConfig+0x308>)
 8001b88:	686a      	ldr	r2, [r5, #4]
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	2a04      	cmp	r2, #4
 8001b8e:	d006      	beq.n	8001b9e <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b90:	686b      	ldr	r3, [r5, #4]
 8001b92:	400b      	ands	r3, r1
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d109      	bne.n	8001bac <HAL_RCC_OscConfig+0x9c>
 8001b98:	686b      	ldr	r3, [r5, #4]
 8001b9a:	03db      	lsls	r3, r3, #15
 8001b9c:	d506      	bpl.n	8001bac <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9e:	682b      	ldr	r3, [r5, #0]
 8001ba0:	039b      	lsls	r3, r3, #14
 8001ba2:	d5c0      	bpl.n	8001b26 <HAL_RCC_OscConfig+0x16>
 8001ba4:	6863      	ldr	r3, [r4, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1bd      	bne.n	8001b26 <HAL_RCC_OscConfig+0x16>
 8001baa:	e7b6      	b.n	8001b1a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bac:	6863      	ldr	r3, [r4, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d113      	bne.n	8001bda <HAL_RCC_OscConfig+0xca>
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	682a      	ldr	r2, [r5, #0]
 8001bb6:	025b      	lsls	r3, r3, #9
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fb08 	bl	80011d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001bc2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc4:	02b6      	lsls	r6, r6, #10
 8001bc6:	682b      	ldr	r3, [r5, #0]
 8001bc8:	4233      	tst	r3, r6
 8001bca:	d1ac      	bne.n	8001b26 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fb00 	bl	80011d0 <HAL_GetTick>
 8001bd0:	1bc0      	subs	r0, r0, r7
 8001bd2:	2864      	cmp	r0, #100	; 0x64
 8001bd4:	d9f7      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	e7a0      	b.n	8001b1c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d115      	bne.n	8001c0a <HAL_RCC_OscConfig+0xfa>
 8001bde:	682b      	ldr	r3, [r5, #0]
 8001be0:	4a8e      	ldr	r2, [pc, #568]	; (8001e1c <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be4:	4013      	ands	r3, r2
 8001be6:	602b      	str	r3, [r5, #0]
 8001be8:	682b      	ldr	r3, [r5, #0]
 8001bea:	4a8d      	ldr	r2, [pc, #564]	; (8001e20 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bec:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bee:	4013      	ands	r3, r2
 8001bf0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bf2:	f7ff faed 	bl	80011d0 <HAL_GetTick>
 8001bf6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	4233      	tst	r3, r6
 8001bfc:	d093      	beq.n	8001b26 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fae7 	bl	80011d0 <HAL_GetTick>
 8001c02:	1bc0      	subs	r0, r0, r7
 8001c04:	2864      	cmp	r0, #100	; 0x64
 8001c06:	d9f7      	bls.n	8001bf8 <HAL_RCC_OscConfig+0xe8>
 8001c08:	e7e5      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCC_OscConfig+0x10a>
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	682a      	ldr	r2, [r5, #0]
 8001c12:	02db      	lsls	r3, r3, #11
 8001c14:	4313      	orrs	r3, r2
 8001c16:	602b      	str	r3, [r5, #0]
 8001c18:	e7cb      	b.n	8001bb2 <HAL_RCC_OscConfig+0xa2>
 8001c1a:	682b      	ldr	r3, [r5, #0]
 8001c1c:	4a7f      	ldr	r2, [pc, #508]	; (8001e1c <HAL_RCC_OscConfig+0x30c>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	602b      	str	r3, [r5, #0]
 8001c22:	682b      	ldr	r3, [r5, #0]
 8001c24:	4a7e      	ldr	r2, [pc, #504]	; (8001e20 <HAL_RCC_OscConfig+0x310>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	e7c7      	b.n	8001bba <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	4d7a      	ldr	r5, [pc, #488]	; (8001e18 <HAL_RCC_OscConfig+0x308>)
 8001c2e:	686b      	ldr	r3, [r5, #4]
 8001c30:	4213      	tst	r3, r2
 8001c32:	d006      	beq.n	8001c42 <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c34:	686b      	ldr	r3, [r5, #4]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d111      	bne.n	8001c60 <HAL_RCC_OscConfig+0x150>
 8001c3c:	686b      	ldr	r3, [r5, #4]
 8001c3e:	03db      	lsls	r3, r3, #15
 8001c40:	d40e      	bmi.n	8001c60 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	079b      	lsls	r3, r3, #30
 8001c46:	d503      	bpl.n	8001c50 <HAL_RCC_OscConfig+0x140>
 8001c48:	68e3      	ldr	r3, [r4, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d000      	beq.n	8001c50 <HAL_RCC_OscConfig+0x140>
 8001c4e:	e764      	b.n	8001b1a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	21f8      	movs	r1, #248	; 0xf8
 8001c52:	682a      	ldr	r2, [r5, #0]
 8001c54:	6923      	ldr	r3, [r4, #16]
 8001c56:	438a      	bics	r2, r1
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	602b      	str	r3, [r5, #0]
 8001c5e:	e765      	b.n	8001b2c <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c60:	68e2      	ldr	r2, [r4, #12]
 8001c62:	2301      	movs	r3, #1
 8001c64:	2a00      	cmp	r2, #0
 8001c66:	d00f      	beq.n	8001c88 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8001c68:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c70:	f7ff faae 	bl	80011d0 <HAL_GetTick>
 8001c74:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	682b      	ldr	r3, [r5, #0]
 8001c78:	4233      	tst	r3, r6
 8001c7a:	d1e9      	bne.n	8001c50 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff faa8 	bl	80011d0 <HAL_GetTick>
 8001c80:	1bc0      	subs	r0, r0, r7
 8001c82:	2802      	cmp	r0, #2
 8001c84:	d9f7      	bls.n	8001c76 <HAL_RCC_OscConfig+0x166>
 8001c86:	e7a6      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8001c88:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001c8c:	439a      	bics	r2, r3
 8001c8e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001c90:	f7ff fa9e 	bl	80011d0 <HAL_GetTick>
 8001c94:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	682b      	ldr	r3, [r5, #0]
 8001c98:	4233      	tst	r3, r6
 8001c9a:	d100      	bne.n	8001c9e <HAL_RCC_OscConfig+0x18e>
 8001c9c:	e746      	b.n	8001b2c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fa97 	bl	80011d0 <HAL_GetTick>
 8001ca2:	1bc0      	subs	r0, r0, r7
 8001ca4:	2802      	cmp	r0, #2
 8001ca6:	d9f6      	bls.n	8001c96 <HAL_RCC_OscConfig+0x186>
 8001ca8:	e795      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001caa:	69e2      	ldr	r2, [r4, #28]
 8001cac:	2301      	movs	r3, #1
 8001cae:	4d5a      	ldr	r5, [pc, #360]	; (8001e18 <HAL_RCC_OscConfig+0x308>)
 8001cb0:	2a00      	cmp	r2, #0
 8001cb2:	d010      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8001cb4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fa88 	bl	80011d0 <HAL_GetTick>
 8001cc0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001cc4:	4233      	tst	r3, r6
 8001cc6:	d000      	beq.n	8001cca <HAL_RCC_OscConfig+0x1ba>
 8001cc8:	e734      	b.n	8001b34 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff fa81 	bl	80011d0 <HAL_GetTick>
 8001cce:	1bc0      	subs	r0, r0, r7
 8001cd0:	2802      	cmp	r0, #2
 8001cd2:	d9f6      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x1b2>
 8001cd4:	e77f      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8001cd6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8001cda:	439a      	bics	r2, r3
 8001cdc:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001cde:	f7ff fa77 	bl	80011d0 <HAL_GetTick>
 8001ce2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001ce6:	4233      	tst	r3, r6
 8001ce8:	d100      	bne.n	8001cec <HAL_RCC_OscConfig+0x1dc>
 8001cea:	e723      	b.n	8001b34 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fa70 	bl	80011d0 <HAL_GetTick>
 8001cf0:	1bc0      	subs	r0, r0, r7
 8001cf2:	2802      	cmp	r0, #2
 8001cf4:	d9f6      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x1d4>
 8001cf6:	e76e      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001cfa:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfc:	4d46      	ldr	r5, [pc, #280]	; (8001e18 <HAL_RCC_OscConfig+0x308>)
 8001cfe:	0552      	lsls	r2, r2, #21
 8001d00:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d04:	4213      	tst	r3, r2
 8001d06:	d108      	bne.n	8001d1a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d08:	69eb      	ldr	r3, [r5, #28]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61eb      	str	r3, [r5, #28]
 8001d0e:	69eb      	ldr	r3, [r5, #28]
 8001d10:	4013      	ands	r3, r2
 8001d12:	9303      	str	r3, [sp, #12]
 8001d14:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001d16:	2301      	movs	r3, #1
 8001d18:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1a:	2780      	movs	r7, #128	; 0x80
 8001d1c:	4e41      	ldr	r6, [pc, #260]	; (8001e24 <HAL_RCC_OscConfig+0x314>)
 8001d1e:	007f      	lsls	r7, r7, #1
 8001d20:	6833      	ldr	r3, [r6, #0]
 8001d22:	423b      	tst	r3, r7
 8001d24:	d006      	beq.n	8001d34 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d26:	68a3      	ldr	r3, [r4, #8]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d113      	bne.n	8001d54 <HAL_RCC_OscConfig+0x244>
 8001d2c:	6a2a      	ldr	r2, [r5, #32]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	622b      	str	r3, [r5, #32]
 8001d32:	e030      	b.n	8001d96 <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d34:	6833      	ldr	r3, [r6, #0]
 8001d36:	433b      	orrs	r3, r7
 8001d38:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fa49 	bl	80011d0 <HAL_GetTick>
 8001d3e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	6833      	ldr	r3, [r6, #0]
 8001d42:	423b      	tst	r3, r7
 8001d44:	d1ef      	bne.n	8001d26 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff fa43 	bl	80011d0 <HAL_GetTick>
 8001d4a:	9b01      	ldr	r3, [sp, #4]
 8001d4c:	1ac0      	subs	r0, r0, r3
 8001d4e:	2864      	cmp	r0, #100	; 0x64
 8001d50:	d9f6      	bls.n	8001d40 <HAL_RCC_OscConfig+0x230>
 8001d52:	e740      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
 8001d54:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d114      	bne.n	8001d84 <HAL_RCC_OscConfig+0x274>
 8001d5a:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5e:	4393      	bics	r3, r2
 8001d60:	622b      	str	r3, [r5, #32]
 8001d62:	6a2b      	ldr	r3, [r5, #32]
 8001d64:	3203      	adds	r2, #3
 8001d66:	4393      	bics	r3, r2
 8001d68:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fa31 	bl	80011d0 <HAL_GetTick>
 8001d6e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d70:	6a2b      	ldr	r3, [r5, #32]
 8001d72:	423b      	tst	r3, r7
 8001d74:	d025      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7ff fa2b 	bl	80011d0 <HAL_GetTick>
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_RCC_OscConfig+0x318>)
 8001d7c:	1b80      	subs	r0, r0, r6
 8001d7e:	4298      	cmp	r0, r3
 8001d80:	d9f6      	bls.n	8001d70 <HAL_RCC_OscConfig+0x260>
 8001d82:	e728      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d10b      	bne.n	8001da0 <HAL_RCC_OscConfig+0x290>
 8001d88:	6a29      	ldr	r1, [r5, #32]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	622b      	str	r3, [r5, #32]
 8001d90:	6a2b      	ldr	r3, [r5, #32]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8001d96:	f7ff fa1b 	bl	80011d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001d9c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9e:	e00d      	b.n	8001dbc <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	6a2b      	ldr	r3, [r5, #32]
 8001da2:	4393      	bics	r3, r2
 8001da4:	2204      	movs	r2, #4
 8001da6:	622b      	str	r3, [r5, #32]
 8001da8:	6a2b      	ldr	r3, [r5, #32]
 8001daa:	4393      	bics	r3, r2
 8001dac:	e7c0      	b.n	8001d30 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7ff fa0f 	bl	80011d0 <HAL_GetTick>
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x318>)
 8001db4:	1b80      	subs	r0, r0, r6
 8001db6:	4298      	cmp	r0, r3
 8001db8:	d900      	bls.n	8001dbc <HAL_RCC_OscConfig+0x2ac>
 8001dba:	e70c      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	6a2b      	ldr	r3, [r5, #32]
 8001dbe:	423b      	tst	r3, r7
 8001dc0:	d0f5      	beq.n	8001dae <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 8001dc2:	9b00      	ldr	r3, [sp, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d000      	beq.n	8001dca <HAL_RCC_OscConfig+0x2ba>
 8001dc8:	e6b8      	b.n	8001b3c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dca:	69eb      	ldr	r3, [r5, #28]
 8001dcc:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_RCC_OscConfig+0x31c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61eb      	str	r3, [r5, #28]
 8001dd2:	e6b3      	b.n	8001b3c <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dd4:	f7ff f9fc 	bl	80011d0 <HAL_GetTick>
 8001dd8:	1bc0      	subs	r0, r0, r7
 8001dda:	2802      	cmp	r0, #2
 8001ddc:	d800      	bhi.n	8001de0 <HAL_RCC_OscConfig+0x2d0>
 8001dde:	e6c0      	b.n	8001b62 <HAL_RCC_OscConfig+0x52>
 8001de0:	e6f9      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001de2:	3205      	adds	r2, #5
 8001de4:	d103      	bne.n	8001dee <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001de6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001de8:	439a      	bics	r2, r3
 8001dea:	636a      	str	r2, [r5, #52]	; 0x34
 8001dec:	e6bd      	b.n	8001b6a <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001df0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001df2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001df4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001df6:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001df8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001dfa:	4393      	bics	r3, r2
 8001dfc:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001dfe:	f7ff f9e7 	bl	80011d0 <HAL_GetTick>
 8001e02:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e04:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001e06:	4233      	tst	r3, r6
 8001e08:	d100      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2fc>
 8001e0a:	e6b5      	b.n	8001b78 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e0c:	f7ff f9e0 	bl	80011d0 <HAL_GetTick>
 8001e10:	1bc0      	subs	r0, r0, r7
 8001e12:	2802      	cmp	r0, #2
 8001e14:	d9f6      	bls.n	8001e04 <HAL_RCC_OscConfig+0x2f4>
 8001e16:	e6de      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	fffeffff 	.word	0xfffeffff
 8001e20:	fffbffff 	.word	0xfffbffff
 8001e24:	40007000 	.word	0x40007000
 8001e28:	00001388 	.word	0x00001388
 8001e2c:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e30:	200c      	movs	r0, #12
 8001e32:	4a35      	ldr	r2, [pc, #212]	; (8001f08 <HAL_RCC_OscConfig+0x3f8>)
 8001e34:	6851      	ldr	r1, [r2, #4]
 8001e36:	0015      	movs	r5, r2
 8001e38:	4001      	ands	r1, r0
 8001e3a:	2908      	cmp	r1, #8
 8001e3c:	d047      	beq.n	8001ece <HAL_RCC_OscConfig+0x3be>
 8001e3e:	4a33      	ldr	r2, [pc, #204]	; (8001f0c <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d132      	bne.n	8001eaa <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 8001e44:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001e48:	4013      	ands	r3, r2
 8001e4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f9c0 	bl	80011d0 <HAL_GetTick>
 8001e50:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	04b6      	lsls	r6, r6, #18
 8001e54:	682b      	ldr	r3, [r5, #0]
 8001e56:	4233      	tst	r3, r6
 8001e58:	d121      	bne.n	8001e9e <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001e5e:	4393      	bics	r3, r2
 8001e60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e62:	4313      	orrs	r3, r2
 8001e64:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001e66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e6a:	686a      	ldr	r2, [r5, #4]
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	4928      	ldr	r1, [pc, #160]	; (8001f10 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e70:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e72:	400a      	ands	r2, r1
 8001e74:	4313      	orrs	r3, r2
 8001e76:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	682a      	ldr	r2, [r5, #0]
 8001e7c:	045b      	lsls	r3, r3, #17
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e82:	f7ff f9a5 	bl	80011d0 <HAL_GetTick>
 8001e86:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	04a4      	lsls	r4, r4, #18
 8001e8a:	682b      	ldr	r3, [r5, #0]
 8001e8c:	4223      	tst	r3, r4
 8001e8e:	d000      	beq.n	8001e92 <HAL_RCC_OscConfig+0x382>
 8001e90:	e676      	b.n	8001b80 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff f99d 	bl	80011d0 <HAL_GetTick>
 8001e96:	1b80      	subs	r0, r0, r6
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	d9f6      	bls.n	8001e8a <HAL_RCC_OscConfig+0x37a>
 8001e9c:	e69b      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff f997 	bl	80011d0 <HAL_GetTick>
 8001ea2:	1bc0      	subs	r0, r0, r7
 8001ea4:	2802      	cmp	r0, #2
 8001ea6:	d9d5      	bls.n	8001e54 <HAL_RCC_OscConfig+0x344>
 8001ea8:	e695      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001eae:	4013      	ands	r3, r2
 8001eb0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001eb2:	f7ff f98d 	bl	80011d0 <HAL_GetTick>
 8001eb6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	04a4      	lsls	r4, r4, #18
 8001eba:	682b      	ldr	r3, [r5, #0]
 8001ebc:	4223      	tst	r3, r4
 8001ebe:	d100      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3b2>
 8001ec0:	e65e      	b.n	8001b80 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff f985 	bl	80011d0 <HAL_GetTick>
 8001ec6:	1b80      	subs	r0, r0, r6
 8001ec8:	2802      	cmp	r0, #2
 8001eca:	d9f6      	bls.n	8001eba <HAL_RCC_OscConfig+0x3aa>
 8001ecc:	e683      	b.n	8001bd6 <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 8001ece:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d100      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3c6>
 8001ed4:	e622      	b.n	8001b1c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001ed8:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001edc:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001ede:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee0:	4019      	ands	r1, r3
        return HAL_ERROR;
 8001ee2:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee4:	42a9      	cmp	r1, r5
 8001ee6:	d000      	beq.n	8001eea <HAL_RCC_OscConfig+0x3da>
 8001ee8:	e618      	b.n	8001b1c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001eea:	210f      	movs	r1, #15
 8001eec:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ef0:	428a      	cmp	r2, r1
 8001ef2:	d000      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x3e6>
 8001ef4:	e612      	b.n	8001b1c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef6:	20f0      	movs	r0, #240	; 0xf0
 8001ef8:	0380      	lsls	r0, r0, #14
 8001efa:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001efc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001efe:	1a1b      	subs	r3, r3, r0
 8001f00:	1e58      	subs	r0, r3, #1
 8001f02:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 8001f04:	b2d8      	uxtb	r0, r3
 8001f06:	e609      	b.n	8001b1c <HAL_RCC_OscConfig+0xc>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	feffffff 	.word	0xfeffffff
 8001f10:	ffc2ffff 	.word	0xffc2ffff

08001f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001f16:	4c14      	ldr	r4, [pc, #80]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8001f18:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	0021      	movs	r1, r4
 8001f1e:	4668      	mov	r0, sp
 8001f20:	f003 ff9a 	bl	8005e58 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001f24:	0021      	movs	r1, r4
 8001f26:	ad04      	add	r5, sp, #16
 8001f28:	2210      	movs	r2, #16
 8001f2a:	3110      	adds	r1, #16
 8001f2c:	0028      	movs	r0, r5
 8001f2e:	f003 ff93 	bl	8005e58 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f32:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001f34:	4e0d      	ldr	r6, [pc, #52]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x58>)
 8001f36:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f38:	401a      	ands	r2, r3
 8001f3a:	2a08      	cmp	r2, #8
 8001f3c:	d111      	bne.n	8001f62 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f3e:	200f      	movs	r0, #15
 8001f40:	466a      	mov	r2, sp
 8001f42:	0c99      	lsrs	r1, r3, #18
 8001f44:	4001      	ands	r1, r0
 8001f46:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f48:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001f4a:	4002      	ands	r2, r0
 8001f4c:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f4e:	03db      	lsls	r3, r3, #15
 8001f50:	d505      	bpl.n	8001f5e <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f52:	4807      	ldr	r0, [pc, #28]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001f54:	f7fe f8f4 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f58:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f5a:	b008      	add	sp, #32
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f5e:	4805      	ldr	r0, [pc, #20]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x60>)
 8001f60:	e7fa      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8001f62:	4803      	ldr	r0, [pc, #12]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001f64:	e7f9      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x46>
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	080066c4 	.word	0x080066c4
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	007a1200 	.word	0x007a1200
 8001f74:	003d0900 	.word	0x003d0900

08001f78 <HAL_RCC_ClockConfig>:
{
 8001f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f7a:	0005      	movs	r5, r0
 8001f7c:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001f7e:	2800      	cmp	r0, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001f82:	2001      	movs	r0, #1
}
 8001f84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f86:	2201      	movs	r2, #1
 8001f88:	4c37      	ldr	r4, [pc, #220]	; (8002068 <HAL_RCC_ClockConfig+0xf0>)
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	428b      	cmp	r3, r1
 8001f90:	d31c      	bcc.n	8001fcc <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f92:	6829      	ldr	r1, [r5, #0]
 8001f94:	078b      	lsls	r3, r1, #30
 8001f96:	d422      	bmi.n	8001fde <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f98:	07cb      	lsls	r3, r1, #31
 8001f9a:	d42f      	bmi.n	8001ffc <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	6822      	ldr	r2, [r4, #0]
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	4297      	cmp	r7, r2
 8001fa4:	d351      	bcc.n	800204a <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa6:	682b      	ldr	r3, [r5, #0]
 8001fa8:	4c30      	ldr	r4, [pc, #192]	; (800206c <HAL_RCC_ClockConfig+0xf4>)
 8001faa:	075b      	lsls	r3, r3, #29
 8001fac:	d454      	bmi.n	8002058 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fae:	f7ff ffb1 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001fb2:	6863      	ldr	r3, [r4, #4]
 8001fb4:	4a2e      	ldr	r2, [pc, #184]	; (8002070 <HAL_RCC_ClockConfig+0xf8>)
 8001fb6:	061b      	lsls	r3, r3, #24
 8001fb8:	0f1b      	lsrs	r3, r3, #28
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	40d8      	lsrs	r0, r3
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_RCC_ClockConfig+0xfc>)
 8001fc0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff f8c4 	bl	8001150 <HAL_InitTick>
  return HAL_OK;
 8001fc8:	2000      	movs	r0, #0
 8001fca:	e7db      	b.n	8001f84 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	4393      	bics	r3, r2
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	4299      	cmp	r1, r3
 8001fda:	d1d2      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xa>
 8001fdc:	e7d9      	b.n	8001f92 <HAL_RCC_ClockConfig+0x1a>
 8001fde:	4a23      	ldr	r2, [pc, #140]	; (800206c <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	074b      	lsls	r3, r1, #29
 8001fe2:	d504      	bpl.n	8001fee <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fe4:	23e0      	movs	r3, #224	; 0xe0
 8001fe6:	6850      	ldr	r0, [r2, #4]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4303      	orrs	r3, r0
 8001fec:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fee:	20f0      	movs	r0, #240	; 0xf0
 8001ff0:	6853      	ldr	r3, [r2, #4]
 8001ff2:	4383      	bics	r3, r0
 8001ff4:	68a8      	ldr	r0, [r5, #8]
 8001ff6:	4303      	orrs	r3, r0
 8001ff8:	6053      	str	r3, [r2, #4]
 8001ffa:	e7cd      	b.n	8001f98 <HAL_RCC_ClockConfig+0x20>
 8001ffc:	4e1b      	ldr	r6, [pc, #108]	; (800206c <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffe:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002000:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	2a01      	cmp	r2, #1
 8002004:	d119      	bne.n	800203a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	039b      	lsls	r3, r3, #14
 8002008:	d5bb      	bpl.n	8001f82 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200a:	2103      	movs	r1, #3
 800200c:	6873      	ldr	r3, [r6, #4]
 800200e:	438b      	bics	r3, r1
 8002010:	4313      	orrs	r3, r2
 8002012:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002014:	f7ff f8dc 	bl	80011d0 <HAL_GetTick>
 8002018:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	230c      	movs	r3, #12
 800201c:	6872      	ldr	r2, [r6, #4]
 800201e:	401a      	ands	r2, r3
 8002020:	686b      	ldr	r3, [r5, #4]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	429a      	cmp	r2, r3
 8002026:	d0b9      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7ff f8d2 	bl	80011d0 <HAL_GetTick>
 800202c:	9b01      	ldr	r3, [sp, #4]
 800202e:	1ac0      	subs	r0, r0, r3
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCC_ClockConfig+0x100>)
 8002032:	4298      	cmp	r0, r3
 8002034:	d9f1      	bls.n	800201a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8002036:	2003      	movs	r0, #3
 8002038:	e7a4      	b.n	8001f84 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203a:	2a02      	cmp	r2, #2
 800203c:	d102      	bne.n	8002044 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	019b      	lsls	r3, r3, #6
 8002040:	d4e3      	bmi.n	800200a <HAL_RCC_ClockConfig+0x92>
 8002042:	e79e      	b.n	8001f82 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	079b      	lsls	r3, r3, #30
 8002046:	d4e0      	bmi.n	800200a <HAL_RCC_ClockConfig+0x92>
 8002048:	e79b      	b.n	8001f82 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	6822      	ldr	r2, [r4, #0]
 800204c:	439a      	bics	r2, r3
 800204e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002050:	6822      	ldr	r2, [r4, #0]
 8002052:	421a      	tst	r2, r3
 8002054:	d195      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xa>
 8002056:	e7a6      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002058:	6863      	ldr	r3, [r4, #4]
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_RCC_ClockConfig+0x104>)
 800205c:	4013      	ands	r3, r2
 800205e:	68ea      	ldr	r2, [r5, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	6063      	str	r3, [r4, #4]
 8002064:	e7a3      	b.n	8001fae <HAL_RCC_ClockConfig+0x36>
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	40022000 	.word	0x40022000
 800206c:	40021000 	.word	0x40021000
 8002070:	08006e3a 	.word	0x08006e3a
 8002074:	2000000c 	.word	0x2000000c
 8002078:	00001388 	.word	0x00001388
 800207c:	fffff8ff 	.word	0xfffff8ff

08002080 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002082:	4a05      	ldr	r2, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	055b      	lsls	r3, r3, #21
 8002088:	0f5b      	lsrs	r3, r3, #29
 800208a:	5cd3      	ldrb	r3, [r2, r3]
 800208c:	4a03      	ldr	r2, [pc, #12]	; (800209c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800208e:	6810      	ldr	r0, [r2, #0]
 8002090:	40d8      	lsrs	r0, r3
}    
 8002092:	4770      	bx	lr
 8002094:	40021000 	.word	0x40021000
 8002098:	08006e4a 	.word	0x08006e4a
 800209c:	2000000c 	.word	0x2000000c

080020a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020a2:	6803      	ldr	r3, [r0, #0]
{
 80020a4:	b085      	sub	sp, #20
 80020a6:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020a8:	03db      	lsls	r3, r3, #15
 80020aa:	d528      	bpl.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ac:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b0:	4c3b      	ldr	r4, [pc, #236]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80020b2:	0552      	lsls	r2, r2, #21
 80020b4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80020b6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b8:	4213      	tst	r3, r2
 80020ba:	d108      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020bc:	69e3      	ldr	r3, [r4, #28]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61e3      	str	r3, [r4, #28]
 80020c2:	69e3      	ldr	r3, [r4, #28]
 80020c4:	4013      	ands	r3, r2
 80020c6:	9303      	str	r3, [sp, #12]
 80020c8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80020ca:	2301      	movs	r3, #1
 80020cc:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ce:	2780      	movs	r7, #128	; 0x80
 80020d0:	4e34      	ldr	r6, [pc, #208]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80020d2:	007f      	lsls	r7, r7, #1
 80020d4:	6833      	ldr	r3, [r6, #0]
 80020d6:	423b      	tst	r3, r7
 80020d8:	d02f      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020da:	22c0      	movs	r2, #192	; 0xc0
 80020dc:	6a23      	ldr	r3, [r4, #32]
 80020de:	0092      	lsls	r2, r2, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	4e31      	ldr	r6, [pc, #196]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020e4:	d13b      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e6:	6a23      	ldr	r3, [r4, #32]
 80020e8:	401e      	ands	r6, r3
 80020ea:	686b      	ldr	r3, [r5, #4]
 80020ec:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020ee:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f0:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d103      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f6:	69e3      	ldr	r3, [r4, #28]
 80020f8:	4a2c      	ldr	r2, [pc, #176]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020fe:	682a      	ldr	r2, [r5, #0]
 8002100:	07d3      	lsls	r3, r2, #31
 8002102:	d506      	bpl.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002104:	2003      	movs	r0, #3
 8002106:	4926      	ldr	r1, [pc, #152]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8002108:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800210a:	4383      	bics	r3, r0
 800210c:	68a8      	ldr	r0, [r5, #8]
 800210e:	4303      	orrs	r3, r0
 8002110:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002112:	0693      	lsls	r3, r2, #26
 8002114:	d506      	bpl.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002116:	2010      	movs	r0, #16
 8002118:	4921      	ldr	r1, [pc, #132]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800211a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800211c:	4383      	bics	r3, r0
 800211e:	68e8      	ldr	r0, [r5, #12]
 8002120:	4303      	orrs	r3, r0
 8002122:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002124:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002126:	0553      	lsls	r3, r2, #21
 8002128:	d517      	bpl.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800212a:	2140      	movs	r1, #64	; 0x40
 800212c:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800212e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002130:	438b      	bics	r3, r1
 8002132:	6929      	ldr	r1, [r5, #16]
 8002134:	430b      	orrs	r3, r1
 8002136:	6313      	str	r3, [r2, #48]	; 0x30
 8002138:	e00f      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	6833      	ldr	r3, [r6, #0]
 800213c:	433b      	orrs	r3, r7
 800213e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002140:	f7ff f846 	bl	80011d0 <HAL_GetTick>
 8002144:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	6833      	ldr	r3, [r6, #0]
 8002148:	423b      	tst	r3, r7
 800214a:	d1c6      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7ff f840 	bl	80011d0 <HAL_GetTick>
 8002150:	9b01      	ldr	r3, [sp, #4]
 8002152:	1ac0      	subs	r0, r0, r3
 8002154:	2864      	cmp	r0, #100	; 0x64
 8002156:	d9f6      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 8002158:	2003      	movs	r0, #3
}
 800215a:	b005      	add	sp, #20
 800215c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800215e:	6869      	ldr	r1, [r5, #4]
 8002160:	400a      	ands	r2, r1
 8002162:	4293      	cmp	r3, r2
 8002164:	d0bf      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002166:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002168:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800216a:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800216c:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	4303      	orrs	r3, r0
 8002172:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002174:	6a23      	ldr	r3, [r4, #32]
 8002176:	480e      	ldr	r0, [pc, #56]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002178:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800217a:	4003      	ands	r3, r0
 800217c:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 800217e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002180:	07d3      	lsls	r3, r2, #31
 8002182:	d5b0      	bpl.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8002184:	f7ff f824 	bl	80011d0 <HAL_GetTick>
 8002188:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	2202      	movs	r2, #2
 800218c:	6a23      	ldr	r3, [r4, #32]
 800218e:	4213      	tst	r3, r2
 8002190:	d1a9      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7ff f81d 	bl	80011d0 <HAL_GetTick>
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002198:	1bc0      	subs	r0, r0, r7
 800219a:	4298      	cmp	r0, r3
 800219c:	d9f5      	bls.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xea>
 800219e:	e7db      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
 80021a8:	fffffcff 	.word	0xfffffcff
 80021ac:	efffffff 	.word	0xefffffff
 80021b0:	fffeffff 	.word	0xfffeffff
 80021b4:	00001388 	.word	0x00001388

080021b8 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021b8:	21e0      	movs	r1, #224	; 0xe0
 80021ba:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80021bc:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	438a      	bics	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021c4:	2282      	movs	r2, #130	; 0x82
 80021c6:	6841      	ldr	r1, [r0, #4]
 80021c8:	0052      	lsls	r2, r2, #1
 80021ca:	4291      	cmp	r1, r2
 80021cc:	d10c      	bne.n	80021e8 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	6882      	ldr	r2, [r0, #8]
 80021d2:	0209      	lsls	r1, r1, #8
 80021d4:	428a      	cmp	r2, r1
 80021d6:	d003      	beq.n	80021e0 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	00c9      	lsls	r1, r1, #3
 80021dc:	428a      	cmp	r2, r1
 80021de:	d103      	bne.n	80021e8 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021e0:	2140      	movs	r1, #64	; 0x40
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	438a      	bics	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80021ec:	0189      	lsls	r1, r1, #6
 80021ee:	428a      	cmp	r2, r1
 80021f0:	d106      	bne.n	8002200 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	4c07      	ldr	r4, [pc, #28]	; (8002214 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 80021f6:	4021      	ands	r1, r4
 80021f8:	6019      	str	r1, [r3, #0]
 80021fa:	6819      	ldr	r1, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002200:	0003      	movs	r3, r0
 8002202:	2201      	movs	r2, #1
 8002204:	335d      	adds	r3, #93	; 0x5d
 8002206:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002208:	2300      	movs	r3, #0
 800220a:	305c      	adds	r0, #92	; 0x5c
 800220c:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 800220e:	2003      	movs	r0, #3
 8002210:	bd10      	pop	{r4, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	ffffdfff 	.word	0xffffdfff

08002218 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	0004      	movs	r4, r0
 800221c:	000d      	movs	r5, r1
 800221e:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002220:	2680      	movs	r6, #128	; 0x80
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	6898      	ldr	r0, [r3, #8]
 8002226:	4030      	ands	r0, r6
 8002228:	d009      	beq.n	800223e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800222a:	1c6a      	adds	r2, r5, #1
 800222c:	d0fa      	beq.n	8002224 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800222e:	f7fe ffcf 	bl	80011d0 <HAL_GetTick>
 8002232:	1bc0      	subs	r0, r0, r7
 8002234:	4285      	cmp	r5, r0
 8002236:	d8f4      	bhi.n	8002222 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 8002238:	0020      	movs	r0, r4
 800223a:	f7ff ffbd 	bl	80021b8 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 800223e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002240 <SPI_WaitFifoStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002242:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002244:	0005      	movs	r5, r0
 8002246:	000c      	movs	r4, r1
 8002248:	0016      	movs	r6, r2
 800224a:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800224c:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 800224e:	682b      	ldr	r3, [r5, #0]
 8002250:	6898      	ldr	r0, [r3, #8]
 8002252:	4020      	ands	r0, r4
 8002254:	d00d      	beq.n	8002272 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002256:	42bc      	cmp	r4, r7
 8002258:	d100      	bne.n	800225c <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800225a:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 800225c:	1c72      	adds	r2, r6, #1
 800225e:	d0f7      	beq.n	8002250 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002260:	f7fe ffb6 	bl	80011d0 <HAL_GetTick>
 8002264:	9b01      	ldr	r3, [sp, #4]
 8002266:	1ac0      	subs	r0, r0, r3
 8002268:	4286      	cmp	r6, r0
 800226a:	d8f0      	bhi.n	800224e <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
 800226c:	0028      	movs	r0, r5
 800226e:	f7ff ffa3 	bl	80021b8 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8002272:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002274 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002274:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002276:	0013      	movs	r3, r2
{
 8002278:	000d      	movs	r5, r1
 800227a:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800227c:	000a      	movs	r2, r1
 800227e:	21c0      	movs	r1, #192	; 0xc0
 8002280:	0149      	lsls	r1, r1, #5
{
 8002282:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002284:	f7ff ffdc 	bl	8002240 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8002288:	2800      	cmp	r0, #0
 800228a:	d005      	beq.n	8002298 <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800228c:	2320      	movs	r3, #32
 800228e:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002290:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002292:	4313      	orrs	r3, r2
 8002294:	6623      	str	r3, [r4, #96]	; 0x60
 8002296:	e00f      	b.n	80022b8 <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002298:	0032      	movs	r2, r6
 800229a:	0029      	movs	r1, r5
 800229c:	0020      	movs	r0, r4
 800229e:	f7ff ffbb 	bl	8002218 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d1f2      	bne.n	800228c <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022a6:	21c0      	movs	r1, #192	; 0xc0
 80022a8:	0033      	movs	r3, r6
 80022aa:	002a      	movs	r2, r5
 80022ac:	00c9      	lsls	r1, r1, #3
 80022ae:	0020      	movs	r0, r4
 80022b0:	f7ff ffc6 	bl	8002240 <SPI_WaitFifoStateUntilTimeout.constprop.10>
 80022b4:	2800      	cmp	r0, #0
 80022b6:	d1e9      	bne.n	800228c <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080022bc <HAL_SPI_Init>:
{
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	0004      	movs	r4, r0
    return HAL_ERROR;
 80022c0:	2001      	movs	r0, #1
  if (hspi == NULL)
 80022c2:	2c00      	cmp	r4, #0
 80022c4:	d04b      	beq.n	800235e <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c6:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80022c8:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ca:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80022cc:	355d      	adds	r5, #93	; 0x5d
 80022ce:	782b      	ldrb	r3, [r5, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d105      	bne.n	80022e2 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 80022d6:	0022      	movs	r2, r4
 80022d8:	325c      	adds	r2, #92	; 0x5c
 80022da:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 80022dc:	0020      	movs	r0, r4
 80022de:	f003 fc8f 	bl	8005c00 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80022e2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80022e8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80022ea:	680b      	ldr	r3, [r1, #0]
 80022ec:	2000      	movs	r0, #0
 80022ee:	4393      	bics	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
 80022f2:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022f4:	68e2      	ldr	r2, [r4, #12]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d931      	bls.n	8002360 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022fc:	26f0      	movs	r6, #240	; 0xf0
 80022fe:	0136      	lsls	r6, r6, #4
 8002300:	42b2      	cmp	r2, r6
 8002302:	d133      	bne.n	800236c <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002304:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002306:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002308:	2800      	cmp	r0, #0
 800230a:	d103      	bne.n	8002314 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800230c:	429a      	cmp	r2, r3
 800230e:	d92f      	bls.n	8002370 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002310:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002312:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002314:	68a7      	ldr	r7, [r4, #8]
 8002316:	6863      	ldr	r3, [r4, #4]
 8002318:	69a0      	ldr	r0, [r4, #24]
 800231a:	433b      	orrs	r3, r7
 800231c:	6927      	ldr	r7, [r4, #16]
 800231e:	433b      	orrs	r3, r7
 8002320:	6967      	ldr	r7, [r4, #20]
 8002322:	433b      	orrs	r3, r7
 8002324:	69e7      	ldr	r7, [r4, #28]
 8002326:	433b      	orrs	r3, r7
 8002328:	6a27      	ldr	r7, [r4, #32]
 800232a:	433b      	orrs	r3, r7
 800232c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800232e:	433b      	orrs	r3, r7
 8002330:	2780      	movs	r7, #128	; 0x80
 8002332:	00bf      	lsls	r7, r7, #2
 8002334:	4007      	ands	r7, r0
 8002336:	433b      	orrs	r3, r7
 8002338:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800233a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800233c:	0c00      	lsrs	r0, r0, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002342:	431a      	orrs	r2, r3
 8002344:	2304      	movs	r3, #4
 8002346:	4018      	ands	r0, r3
 8002348:	4310      	orrs	r0, r2
 800234a:	4306      	orrs	r6, r0
 800234c:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800234e:	69cb      	ldr	r3, [r1, #28]
 8002350:	4a08      	ldr	r2, [pc, #32]	; (8002374 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002352:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002354:	4013      	ands	r3, r2
 8002356:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002358:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800235a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800235c:	702b      	strb	r3, [r5, #0]
}
 800235e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002360:	2680      	movs	r6, #128	; 0x80
 8002362:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002364:	429a      	cmp	r2, r3
 8002366:	d0ce      	beq.n	8002306 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002368:	62a0      	str	r0, [r4, #40]	; 0x28
 800236a:	e7cc      	b.n	8002306 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800236c:	0006      	movs	r6, r0
 800236e:	e7fb      	b.n	8002368 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002370:	2301      	movs	r3, #1
 8002372:	e7ce      	b.n	8002312 <HAL_SPI_Init+0x56>
 8002374:	fffff7ff 	.word	0xfffff7ff

08002378 <HAL_SPI_Transmit>:
{
 8002378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237a:	b087      	sub	sp, #28
 800237c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 800237e:	0003      	movs	r3, r0
 8002380:	335c      	adds	r3, #92	; 0x5c
 8002382:	9303      	str	r3, [sp, #12]
 8002384:	781b      	ldrb	r3, [r3, #0]
{
 8002386:	0004      	movs	r4, r0
 8002388:	000d      	movs	r5, r1
 800238a:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 800238c:	2602      	movs	r6, #2
 800238e:	2b01      	cmp	r3, #1
 8002390:	d100      	bne.n	8002394 <HAL_SPI_Transmit+0x1c>
 8002392:	e07c      	b.n	800248e <HAL_SPI_Transmit+0x116>
 8002394:	2301      	movs	r3, #1
 8002396:	9a03      	ldr	r2, [sp, #12]
 8002398:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800239a:	f7fe ff19 	bl	80011d0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800239e:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 80023a0:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 80023a2:	325d      	adds	r2, #93	; 0x5d
 80023a4:	7813      	ldrb	r3, [r2, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d16a      	bne.n	8002482 <HAL_SPI_Transmit+0x10a>
    errorcode = HAL_ERROR;
 80023ac:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 80023ae:	2d00      	cmp	r5, #0
 80023b0:	d067      	beq.n	8002482 <HAL_SPI_Transmit+0x10a>
 80023b2:	2f00      	cmp	r7, #0
 80023b4:	d065      	beq.n	8002482 <HAL_SPI_Transmit+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023b6:	3302      	adds	r3, #2
 80023b8:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023ba:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 80023bc:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023be:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023c0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023c2:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80023c4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80023c6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 80023c8:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 80023ca:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023cc:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023ce:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80023d0:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	68a2      	ldr	r2, [r4, #8]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	429a      	cmp	r2, r3
 80023da:	d105      	bne.n	80023e8 <HAL_SPI_Transmit+0x70>
    SPI_1LINE_TX(hspi);
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	6822      	ldr	r2, [r4, #0]
 80023e0:	01db      	lsls	r3, r3, #7
 80023e2:	6811      	ldr	r1, [r2, #0]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023e8:	2240      	movs	r2, #64	; 0x40
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	4211      	tst	r1, r2
 80023f0:	d102      	bne.n	80023f8 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 80023f2:	6819      	ldr	r1, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023f8:	21e0      	movs	r1, #224	; 0xe0
 80023fa:	68e0      	ldr	r0, [r4, #12]
 80023fc:	00c9      	lsls	r1, r1, #3
 80023fe:	6862      	ldr	r2, [r4, #4]
 8002400:	4288      	cmp	r0, r1
 8002402:	d947      	bls.n	8002494 <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002404:	2a00      	cmp	r2, #0
 8002406:	d001      	beq.n	800240c <HAL_SPI_Transmit+0x94>
 8002408:	2f01      	cmp	r7, #1
 800240a:	d107      	bne.n	800241c <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800240c:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800240e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002410:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002412:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002414:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002416:	3b01      	subs	r3, #1
 8002418:	b29b      	uxth	r3, r3
 800241a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800241c:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 800241e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002420:	2b00      	cmp	r3, #0
 8002422:	d116      	bne.n	8002452 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002424:	9a02      	ldr	r2, [sp, #8]
 8002426:	9901      	ldr	r1, [sp, #4]
 8002428:	0020      	movs	r0, r4
 800242a:	f7ff ff23 	bl	8002274 <SPI_EndRxTxTransaction>
 800242e:	2800      	cmp	r0, #0
 8002430:	d000      	beq.n	8002434 <HAL_SPI_Transmit+0xbc>
 8002432:	e06d      	b.n	8002510 <HAL_SPI_Transmit+0x198>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002434:	68a3      	ldr	r3, [r4, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800243a:	9305      	str	r3, [sp, #20]
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	9205      	str	r2, [sp, #20]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	9305      	str	r3, [sp, #20]
 8002446:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002448:	6e26      	ldr	r6, [r4, #96]	; 0x60
 800244a:	1e73      	subs	r3, r6, #1
 800244c:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 800244e:	b2f6      	uxtb	r6, r6
 8002450:	e017      	b.n	8002482 <HAL_SPI_Transmit+0x10a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002452:	6822      	ldr	r2, [r4, #0]
 8002454:	6893      	ldr	r3, [r2, #8]
 8002456:	422b      	tst	r3, r5
 8002458:	d009      	beq.n	800246e <HAL_SPI_Transmit+0xf6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800245a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800245c:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800245e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002460:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002462:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002464:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002466:	3b01      	subs	r3, #1
 8002468:	b29b      	uxth	r3, r3
 800246a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800246c:	e7d7      	b.n	800241e <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800246e:	f7fe feaf 	bl	80011d0 <HAL_GetTick>
 8002472:	9b02      	ldr	r3, [sp, #8]
 8002474:	1ac0      	subs	r0, r0, r3
 8002476:	9b01      	ldr	r3, [sp, #4]
 8002478:	4298      	cmp	r0, r3
 800247a:	d3d0      	bcc.n	800241e <HAL_SPI_Transmit+0xa6>
 800247c:	3301      	adds	r3, #1
 800247e:	d0ce      	beq.n	800241e <HAL_SPI_Transmit+0xa6>
          errorcode = HAL_TIMEOUT;
 8002480:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002482:	2301      	movs	r3, #1
 8002484:	345d      	adds	r4, #93	; 0x5d
 8002486:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 8002488:	2300      	movs	r3, #0
 800248a:	9a03      	ldr	r2, [sp, #12]
 800248c:	7013      	strb	r3, [r2, #0]
}
 800248e:	0030      	movs	r0, r6
 8002490:	b007      	add	sp, #28
 8002492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002494:	2a00      	cmp	r2, #0
 8002496:	d001      	beq.n	800249c <HAL_SPI_Transmit+0x124>
 8002498:	2f01      	cmp	r7, #1
 800249a:	d10a      	bne.n	80024b2 <HAL_SPI_Transmit+0x13a>
      if (hspi->TxXferCount > 1U)
 800249c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800249e:	2a01      	cmp	r2, #1
 80024a0:	d91c      	bls.n	80024dc <HAL_SPI_Transmit+0x164>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a2:	882a      	ldrh	r2, [r5, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a4:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80024a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024aa:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80024ac:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024b2:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80024b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0b4      	beq.n	8002424 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024ba:	6822      	ldr	r2, [r4, #0]
 80024bc:	6893      	ldr	r3, [r2, #8]
 80024be:	422b      	tst	r3, r5
 80024c0:	d01c      	beq.n	80024fc <HAL_SPI_Transmit+0x184>
        if (hspi->TxXferCount > 1U)
 80024c2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80024c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024c6:	2901      	cmp	r1, #1
 80024c8:	d910      	bls.n	80024ec <HAL_SPI_Transmit+0x174>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ca:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024cc:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ce:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80024d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024d4:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80024da:	e7eb      	b.n	80024b4 <HAL_SPI_Transmit+0x13c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024dc:	782a      	ldrb	r2, [r5, #0]
 80024de:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80024e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024e2:	3301      	adds	r3, #1
 80024e4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80024e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024e8:	3b01      	subs	r3, #1
 80024ea:	e7e0      	b.n	80024ae <HAL_SPI_Transmit+0x136>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80024f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024f2:	3301      	adds	r3, #1
 80024f4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80024f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024f8:	3b01      	subs	r3, #1
 80024fa:	e7ec      	b.n	80024d6 <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024fc:	f7fe fe68 	bl	80011d0 <HAL_GetTick>
 8002500:	9b02      	ldr	r3, [sp, #8]
 8002502:	1ac0      	subs	r0, r0, r3
 8002504:	9b01      	ldr	r3, [sp, #4]
 8002506:	4283      	cmp	r3, r0
 8002508:	d8d4      	bhi.n	80024b4 <HAL_SPI_Transmit+0x13c>
 800250a:	3301      	adds	r3, #1
 800250c:	d0d2      	beq.n	80024b4 <HAL_SPI_Transmit+0x13c>
 800250e:	e7b7      	b.n	8002480 <HAL_SPI_Transmit+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002510:	2320      	movs	r3, #32
 8002512:	6623      	str	r3, [r4, #96]	; 0x60
 8002514:	e78e      	b.n	8002434 <HAL_SPI_Transmit+0xbc>
	...

08002518 <HAL_SPI_TransmitReceive>:
{
 8002518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800251a:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 800251c:	0003      	movs	r3, r0
{
 800251e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8002520:	335c      	adds	r3, #92	; 0x5c
 8002522:	781a      	ldrb	r2, [r3, #0]
{
 8002524:	0004      	movs	r4, r0
 8002526:	000f      	movs	r7, r1
  __HAL_LOCK(hspi);
 8002528:	2502      	movs	r5, #2
 800252a:	2a01      	cmp	r2, #1
 800252c:	d100      	bne.n	8002530 <HAL_SPI_TransmitReceive+0x18>
 800252e:	e0ac      	b.n	800268a <HAL_SPI_TransmitReceive+0x172>
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002534:	f7fe fe4c 	bl	80011d0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002538:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 800253a:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 800253c:	335d      	adds	r3, #93	; 0x5d
 800253e:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002540:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002542:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002544:	2b01      	cmp	r3, #1
 8002546:	d00b      	beq.n	8002560 <HAL_SPI_TransmitReceive+0x48>
 8002548:	2282      	movs	r2, #130	; 0x82
 800254a:	0052      	lsls	r2, r2, #1
 800254c:	4291      	cmp	r1, r2
 800254e:	d000      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x3a>
 8002550:	e094      	b.n	800267c <HAL_SPI_TransmitReceive+0x164>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002552:	68a2      	ldr	r2, [r4, #8]
 8002554:	2a00      	cmp	r2, #0
 8002556:	d000      	beq.n	800255a <HAL_SPI_TransmitReceive+0x42>
 8002558:	e090      	b.n	800267c <HAL_SPI_TransmitReceive+0x164>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d000      	beq.n	8002560 <HAL_SPI_TransmitReceive+0x48>
 800255e:	e08d      	b.n	800267c <HAL_SPI_TransmitReceive+0x164>
    errorcode = HAL_ERROR;
 8002560:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002562:	2f00      	cmp	r7, #0
 8002564:	d100      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x50>
 8002566:	e089      	b.n	800267c <HAL_SPI_TransmitReceive+0x164>
 8002568:	9b01      	ldr	r3, [sp, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d100      	bne.n	8002570 <HAL_SPI_TransmitReceive+0x58>
 800256e:	e085      	b.n	800267c <HAL_SPI_TransmitReceive+0x164>
 8002570:	2e00      	cmp	r6, #0
 8002572:	d100      	bne.n	8002576 <HAL_SPI_TransmitReceive+0x5e>
 8002574:	e082      	b.n	800267c <HAL_SPI_TransmitReceive+0x164>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002576:	0023      	movs	r3, r4
 8002578:	335d      	adds	r3, #93	; 0x5d
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	2a04      	cmp	r2, #4
 800257e:	d001      	beq.n	8002584 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002580:	2205      	movs	r2, #5
 8002582:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002584:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002586:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002588:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800258a:	0022      	movs	r2, r4
 800258c:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800258e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8002590:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002592:	1da2      	adds	r2, r4, #6
 8002594:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002596:	22e0      	movs	r2, #224	; 0xe0
 8002598:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 800259a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800259c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800259e:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80025a0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80025a2:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80025a4:	00d2      	lsls	r2, r2, #3
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	4290      	cmp	r0, r2
 80025aa:	d801      	bhi.n	80025b0 <HAL_SPI_TransmitReceive+0x98>
 80025ac:	2e01      	cmp	r6, #1
 80025ae:	d931      	bls.n	8002614 <HAL_SPI_TransmitReceive+0xfc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4d71      	ldr	r5, [pc, #452]	; (8002778 <HAL_SPI_TransmitReceive+0x260>)
 80025b4:	402a      	ands	r2, r5
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025b6:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	681d      	ldr	r5, [r3, #0]
 80025be:	4215      	tst	r5, r2
 80025c0:	d102      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80025c2:	681d      	ldr	r5, [r3, #0]
 80025c4:	432a      	orrs	r2, r5
 80025c6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025c8:	22e0      	movs	r2, #224	; 0xe0
 80025ca:	00d2      	lsls	r2, r2, #3
 80025cc:	4290      	cmp	r0, r2
 80025ce:	d95e      	bls.n	800268e <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025d0:	2900      	cmp	r1, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_SPI_TransmitReceive+0xc0>
 80025d4:	2e01      	cmp	r6, #1
 80025d6:	d107      	bne.n	80025e8 <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d8:	883a      	ldrh	r2, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025da:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025dc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80025de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e0:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80025e8:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025ea:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025ec:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d114      	bne.n	800261e <HAL_SPI_TransmitReceive+0x106>
 80025f4:	0023      	movs	r3, r4
 80025f6:	3308      	adds	r3, #8
 80025f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_SPI_TransmitReceive+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025fe:	9a00      	ldr	r2, [sp, #0]
 8002600:	9908      	ldr	r1, [sp, #32]
 8002602:	0020      	movs	r0, r4
 8002604:	f7ff fe36 	bl	8002274 <SPI_EndRxTxTransaction>
 8002608:	1e05      	subs	r5, r0, #0
 800260a:	d037      	beq.n	800267c <HAL_SPI_TransmitReceive+0x164>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800260c:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800260e:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002610:	6623      	str	r3, [r4, #96]	; 0x60
 8002612:	e033      	b.n	800267c <HAL_SPI_TransmitReceive+0x164>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002614:	2280      	movs	r2, #128	; 0x80
 8002616:	685d      	ldr	r5, [r3, #4]
 8002618:	0152      	lsls	r2, r2, #5
 800261a:	432a      	orrs	r2, r5
 800261c:	e7cb      	b.n	80025b6 <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800261e:	6822      	ldr	r2, [r4, #0]
 8002620:	6893      	ldr	r3, [r2, #8]
 8002622:	423b      	tst	r3, r7
 8002624:	d00e      	beq.n	8002644 <HAL_SPI_TransmitReceive+0x12c>
 8002626:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00b      	beq.n	8002644 <HAL_SPI_TransmitReceive+0x12c>
 800262c:	2d01      	cmp	r5, #1
 800262e:	d109      	bne.n	8002644 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 8002630:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002634:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002636:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002638:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800263a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800263c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800263e:	3b01      	subs	r3, #1
 8002640:	b29b      	uxth	r3, r3
 8002642:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002644:	6893      	ldr	r3, [r2, #8]
 8002646:	4233      	tst	r3, r6
 8002648:	d00e      	beq.n	8002668 <HAL_SPI_TransmitReceive+0x150>
 800264a:	0021      	movs	r1, r4
 800264c:	3108      	adds	r1, #8
 800264e:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8002654:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800265c:	3302      	adds	r3, #2
 800265e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002660:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8002662:	3b01      	subs	r3, #1
 8002664:	b29b      	uxth	r3, r3
 8002666:	87cb      	strh	r3, [r1, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002668:	f7fe fdb2 	bl	80011d0 <HAL_GetTick>
 800266c:	9b00      	ldr	r3, [sp, #0]
 800266e:	1ac0      	subs	r0, r0, r3
 8002670:	9b08      	ldr	r3, [sp, #32]
 8002672:	4283      	cmp	r3, r0
 8002674:	d8bb      	bhi.n	80025ee <HAL_SPI_TransmitReceive+0xd6>
 8002676:	3301      	adds	r3, #1
 8002678:	d0b9      	beq.n	80025ee <HAL_SPI_TransmitReceive+0xd6>
        errorcode = HAL_TIMEOUT;
 800267a:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800267c:	0023      	movs	r3, r4
 800267e:	2201      	movs	r2, #1
 8002680:	335d      	adds	r3, #93	; 0x5d
 8002682:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8002684:	2300      	movs	r3, #0
 8002686:	345c      	adds	r4, #92	; 0x5c
 8002688:	7023      	strb	r3, [r4, #0]
}
 800268a:	0028      	movs	r0, r5
 800268c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268e:	2900      	cmp	r1, #0
 8002690:	d001      	beq.n	8002696 <HAL_SPI_TransmitReceive+0x17e>
 8002692:	2e01      	cmp	r6, #1
 8002694:	d10a      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 8002696:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002698:	2a01      	cmp	r2, #1
 800269a:	d951      	bls.n	8002740 <HAL_SPI_TransmitReceive+0x228>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800269c:	883a      	ldrh	r2, [r7, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800269e:	3702      	adds	r7, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026a0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80026a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a4:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80026a6:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80026ac:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026ae:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026b0:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x1ac>
 80026b8:	0023      	movs	r3, r4
 80026ba:	3308      	adds	r3, #8
 80026bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d100      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x1ac>
 80026c2:	e79c      	b.n	80025fe <HAL_SPI_TransmitReceive+0xe6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026c4:	6822      	ldr	r2, [r4, #0]
 80026c6:	6893      	ldr	r3, [r2, #8]
 80026c8:	423b      	tst	r3, r7
 80026ca:	d011      	beq.n	80026f0 <HAL_SPI_TransmitReceive+0x1d8>
 80026cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00e      	beq.n	80026f0 <HAL_SPI_TransmitReceive+0x1d8>
 80026d2:	2d01      	cmp	r5, #1
 80026d4:	d10c      	bne.n	80026f0 <HAL_SPI_TransmitReceive+0x1d8>
        if (hspi->TxXferCount > 1U)
 80026d6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80026d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026da:	2901      	cmp	r1, #1
 80026dc:	d938      	bls.n	8002750 <HAL_SPI_TransmitReceive+0x238>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026de:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e0:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026e2:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80026e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026e8:	3b02      	subs	r3, #2
        txallowed = 0U;
 80026ea:	2500      	movs	r5, #0
          hspi->TxXferCount--;
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026f0:	6821      	ldr	r1, [r4, #0]
 80026f2:	688b      	ldr	r3, [r1, #8]
 80026f4:	4233      	tst	r3, r6
 80026f6:	d019      	beq.n	800272c <HAL_SPI_TransmitReceive+0x214>
 80026f8:	0023      	movs	r3, r4
 80026fa:	3308      	adds	r3, #8
 80026fc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80026fe:	2a00      	cmp	r2, #0
 8002700:	d014      	beq.n	800272c <HAL_SPI_TransmitReceive+0x214>
        if (hspi->RxXferCount > 1U)
 8002702:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8002704:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002706:	2801      	cmp	r0, #1
 8002708:	d92a      	bls.n	8002760 <HAL_SPI_TransmitReceive+0x248>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800270a:	68c8      	ldr	r0, [r1, #12]
        txallowed = 1U;
 800270c:	0035      	movs	r5, r6
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800270e:	8010      	strh	r0, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002710:	3202      	adds	r2, #2
 8002712:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002714:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002716:	3a02      	subs	r2, #2
 8002718:	b292      	uxth	r2, r2
 800271a:	87da      	strh	r2, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 800271c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271e:	2b01      	cmp	r3, #1
 8002720:	d804      	bhi.n	800272c <HAL_SPI_TransmitReceive+0x214>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	684a      	ldr	r2, [r1, #4]
 8002726:	015b      	lsls	r3, r3, #5
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800272c:	f7fe fd50 	bl	80011d0 <HAL_GetTick>
 8002730:	9b00      	ldr	r3, [sp, #0]
 8002732:	1ac0      	subs	r0, r0, r3
 8002734:	9b08      	ldr	r3, [sp, #32]
 8002736:	4283      	cmp	r3, r0
 8002738:	d8bb      	bhi.n	80026b2 <HAL_SPI_TransmitReceive+0x19a>
 800273a:	3301      	adds	r3, #1
 800273c:	d0b9      	beq.n	80026b2 <HAL_SPI_TransmitReceive+0x19a>
 800273e:	e79c      	b.n	800267a <HAL_SPI_TransmitReceive+0x162>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002740:	783a      	ldrb	r2, [r7, #0]
 8002742:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002744:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002746:	3301      	adds	r3, #1
 8002748:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800274a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800274c:	3b01      	subs	r3, #1
 800274e:	e7ab      	b.n	80026a8 <HAL_SPI_TransmitReceive+0x190>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002754:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002756:	3301      	adds	r3, #1
 8002758:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800275a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800275c:	3b01      	subs	r3, #1
 800275e:	e7c4      	b.n	80026ea <HAL_SPI_TransmitReceive+0x1d2>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002760:	7b09      	ldrb	r1, [r1, #12]
        txallowed = 1U;
 8002762:	0035      	movs	r5, r6
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002764:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8002766:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002768:	3201      	adds	r2, #1
 800276a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800276c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800276e:	3a01      	subs	r2, #1
 8002770:	b292      	uxth	r2, r2
 8002772:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002774:	e7da      	b.n	800272c <HAL_SPI_TransmitReceive+0x214>
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	ffffefff 	.word	0xffffefff

0800277c <HAL_SPI_GetState>:
  return hspi->State;
 800277c:	305d      	adds	r0, #93	; 0x5d
 800277e:	7800      	ldrb	r0, [r0, #0]
 8002780:	b2c0      	uxtb	r0, r0
}
 8002782:	4770      	bx	lr

08002784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002788:	6925      	ldr	r5, [r4, #16]
 800278a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800278c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800278e:	432b      	orrs	r3, r5
 8002790:	6965      	ldr	r5, [r4, #20]
 8002792:	69c1      	ldr	r1, [r0, #28]
 8002794:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002796:	6810      	ldr	r0, [r2, #0]
 8002798:	4d43      	ldr	r5, [pc, #268]	; (80028a8 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800279a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800279c:	4028      	ands	r0, r5
 800279e:	4303      	orrs	r3, r0
 80027a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a2:	6853      	ldr	r3, [r2, #4]
 80027a4:	4841      	ldr	r0, [pc, #260]	; (80028ac <UART_SetConfig+0x128>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80027a6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a8:	4003      	ands	r3, r0
 80027aa:	68e0      	ldr	r0, [r4, #12]
 80027ac:	4303      	orrs	r3, r0
 80027ae:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80027b0:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027b2:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80027b4:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027b6:	4d3e      	ldr	r5, [pc, #248]	; (80028b0 <UART_SetConfig+0x12c>)
 80027b8:	4028      	ands	r0, r5
 80027ba:	4303      	orrs	r3, r0
 80027bc:	6093      	str	r3, [r2, #8]
 80027be:	2380      	movs	r3, #128	; 0x80


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027c0:	483c      	ldr	r0, [pc, #240]	; (80028b4 <UART_SetConfig+0x130>)
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	4282      	cmp	r2, r0
 80027c6:	d110      	bne.n	80027ea <UART_SetConfig+0x66>
 80027c8:	2003      	movs	r0, #3
 80027ca:	4a3b      	ldr	r2, [pc, #236]	; (80028b8 <UART_SetConfig+0x134>)
 80027cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027ce:	4002      	ands	r2, r0
 80027d0:	483a      	ldr	r0, [pc, #232]	; (80028bc <UART_SetConfig+0x138>)
 80027d2:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d4:	4299      	cmp	r1, r3
 80027d6:	d013      	beq.n	8002800 <UART_SetConfig+0x7c>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80027d8:	2808      	cmp	r0, #8
 80027da:	d828      	bhi.n	800282e <UART_SetConfig+0xaa>
 80027dc:	f7fd fca6 	bl	800012c <__gnu_thumb1_case_uqi>
 80027e0:	27462741 	.word	0x27462741
 80027e4:	27272757 	.word	0x27272757
 80027e8:	5a          	.byte	0x5a
 80027e9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027ea:	4835      	ldr	r0, [pc, #212]	; (80028c0 <UART_SetConfig+0x13c>)
 80027ec:	4282      	cmp	r2, r0
 80027ee:	d156      	bne.n	800289e <UART_SetConfig+0x11a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f0:	4299      	cmp	r1, r3
 80027f2:	d136      	bne.n	8002862 <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK1Freq();
 80027f4:	f7ff fc44 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027f8:	6863      	ldr	r3, [r4, #4]
 80027fa:	0040      	lsls	r0, r0, #1
 80027fc:	085b      	lsrs	r3, r3, #1
 80027fe:	e00b      	b.n	8002818 <UART_SetConfig+0x94>
    switch (clocksource)
 8002800:	2808      	cmp	r0, #8
 8002802:	d81e      	bhi.n	8002842 <UART_SetConfig+0xbe>
 8002804:	f7fd fc88 	bl	8000118 <__gnu_thumb1_case_sqi>
 8002808:	1d051df6 	.word	0x1d051df6
 800280c:	1d1d1d15 	.word	0x1d1d1d15
 8002810:	18          	.byte	0x18
 8002811:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002812:	6863      	ldr	r3, [r4, #4]
 8002814:	0858      	lsrs	r0, r3, #1
 8002816:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <UART_SetConfig+0x140>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002818:	18c0      	adds	r0, r0, r3
 800281a:	6861      	ldr	r1, [r4, #4]
 800281c:	f7fd fc90 	bl	8000140 <__udivsi3>
 8002820:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002822:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002824:	001a      	movs	r2, r3
 8002826:	4928      	ldr	r1, [pc, #160]	; (80028c8 <UART_SetConfig+0x144>)
 8002828:	3a10      	subs	r2, #16
 800282a:	428a      	cmp	r2, r1
 800282c:	d90c      	bls.n	8002848 <UART_SetConfig+0xc4>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 800282e:	2001      	movs	r0, #1
 8002830:	e013      	b.n	800285a <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 8002832:	f7ff fb6f 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002836:	e7df      	b.n	80027f8 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002838:	6863      	ldr	r3, [r4, #4]
 800283a:	0858      	lsrs	r0, r3, #1
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	025b      	lsls	r3, r3, #9
 8002840:	e7ea      	b.n	8002818 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 8002842:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002844:	2300      	movs	r3, #0
 8002846:	e7ed      	b.n	8002824 <UART_SetConfig+0xa0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002848:	220f      	movs	r2, #15
 800284a:	0019      	movs	r1, r3
 800284c:	4391      	bics	r1, r2
 800284e:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002850:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 8002852:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002854:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8002856:	4313      	orrs	r3, r2
 8002858:	60cb      	str	r3, [r1, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800285a:	2300      	movs	r3, #0
 800285c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800285e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002860:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8002862:	f7ff fc0d 	bl	8002080 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002866:	6863      	ldr	r3, [r4, #4]
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	e002      	b.n	8002872 <UART_SetConfig+0xee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800286c:	6863      	ldr	r3, [r4, #4]
 800286e:	0858      	lsrs	r0, r3, #1
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <UART_SetConfig+0x148>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002872:	18c0      	adds	r0, r0, r3
 8002874:	6861      	ldr	r1, [r4, #4]
 8002876:	f7fd fc63 	bl	8000140 <__udivsi3>
 800287a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800287c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800287e:	001a      	movs	r2, r3
 8002880:	4911      	ldr	r1, [pc, #68]	; (80028c8 <UART_SetConfig+0x144>)
 8002882:	3a10      	subs	r2, #16
 8002884:	428a      	cmp	r2, r1
 8002886:	d8d2      	bhi.n	800282e <UART_SetConfig+0xaa>
      huart->Instance->BRR = usartdiv;
 8002888:	6822      	ldr	r2, [r4, #0]
 800288a:	60d3      	str	r3, [r2, #12]
 800288c:	e7e5      	b.n	800285a <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 800288e:	f7ff fb41 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8002892:	e7e8      	b.n	8002866 <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002894:	6863      	ldr	r3, [r4, #4]
 8002896:	0858      	lsrs	r0, r3, #1
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	e7e9      	b.n	8002872 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800289e:	4299      	cmp	r1, r3
 80028a0:	d0cf      	beq.n	8002842 <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 80028a2:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e7ea      	b.n	800287e <UART_SetConfig+0xfa>
 80028a8:	ffff69f3 	.word	0xffff69f3
 80028ac:	ffffcfff 	.word	0xffffcfff
 80028b0:	fffff4ff 	.word	0xfffff4ff
 80028b4:	40013800 	.word	0x40013800
 80028b8:	40021000 	.word	0x40021000
 80028bc:	08006724 	.word	0x08006724
 80028c0:	40004400 	.word	0x40004400
 80028c4:	00f42400 	.word	0x00f42400
 80028c8:	0000ffef 	.word	0x0000ffef
 80028cc:	007a1200 	.word	0x007a1200

080028d0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80028d2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028d4:	07da      	lsls	r2, r3, #31
 80028d6:	d506      	bpl.n	80028e6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028d8:	6801      	ldr	r1, [r0, #0]
 80028da:	4c28      	ldr	r4, [pc, #160]	; (800297c <UART_AdvFeatureConfig+0xac>)
 80028dc:	684a      	ldr	r2, [r1, #4]
 80028de:	4022      	ands	r2, r4
 80028e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80028e2:	4322      	orrs	r2, r4
 80028e4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028e6:	079a      	lsls	r2, r3, #30
 80028e8:	d506      	bpl.n	80028f8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028ea:	6801      	ldr	r1, [r0, #0]
 80028ec:	4c24      	ldr	r4, [pc, #144]	; (8002980 <UART_AdvFeatureConfig+0xb0>)
 80028ee:	684a      	ldr	r2, [r1, #4]
 80028f0:	4022      	ands	r2, r4
 80028f2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80028f4:	4322      	orrs	r2, r4
 80028f6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028f8:	075a      	lsls	r2, r3, #29
 80028fa:	d506      	bpl.n	800290a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028fc:	6801      	ldr	r1, [r0, #0]
 80028fe:	4c21      	ldr	r4, [pc, #132]	; (8002984 <UART_AdvFeatureConfig+0xb4>)
 8002900:	684a      	ldr	r2, [r1, #4]
 8002902:	4022      	ands	r2, r4
 8002904:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002906:	4322      	orrs	r2, r4
 8002908:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800290a:	071a      	lsls	r2, r3, #28
 800290c:	d506      	bpl.n	800291c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800290e:	6801      	ldr	r1, [r0, #0]
 8002910:	4c1d      	ldr	r4, [pc, #116]	; (8002988 <UART_AdvFeatureConfig+0xb8>)
 8002912:	684a      	ldr	r2, [r1, #4]
 8002914:	4022      	ands	r2, r4
 8002916:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002918:	4322      	orrs	r2, r4
 800291a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800291c:	06da      	lsls	r2, r3, #27
 800291e:	d506      	bpl.n	800292e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002920:	6801      	ldr	r1, [r0, #0]
 8002922:	4c1a      	ldr	r4, [pc, #104]	; (800298c <UART_AdvFeatureConfig+0xbc>)
 8002924:	688a      	ldr	r2, [r1, #8]
 8002926:	4022      	ands	r2, r4
 8002928:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800292a:	4322      	orrs	r2, r4
 800292c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800292e:	069a      	lsls	r2, r3, #26
 8002930:	d506      	bpl.n	8002940 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002932:	6801      	ldr	r1, [r0, #0]
 8002934:	4c16      	ldr	r4, [pc, #88]	; (8002990 <UART_AdvFeatureConfig+0xc0>)
 8002936:	688a      	ldr	r2, [r1, #8]
 8002938:	4022      	ands	r2, r4
 800293a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800293c:	4322      	orrs	r2, r4
 800293e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002940:	065a      	lsls	r2, r3, #25
 8002942:	d510      	bpl.n	8002966 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002944:	6801      	ldr	r1, [r0, #0]
 8002946:	4d13      	ldr	r5, [pc, #76]	; (8002994 <UART_AdvFeatureConfig+0xc4>)
 8002948:	684a      	ldr	r2, [r1, #4]
 800294a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800294c:	402a      	ands	r2, r5
 800294e:	4322      	orrs	r2, r4
 8002950:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002952:	2280      	movs	r2, #128	; 0x80
 8002954:	0352      	lsls	r2, r2, #13
 8002956:	4294      	cmp	r4, r2
 8002958:	d105      	bne.n	8002966 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800295a:	684a      	ldr	r2, [r1, #4]
 800295c:	4c0e      	ldr	r4, [pc, #56]	; (8002998 <UART_AdvFeatureConfig+0xc8>)
 800295e:	4022      	ands	r2, r4
 8002960:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002962:	4322      	orrs	r2, r4
 8002964:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002966:	061b      	lsls	r3, r3, #24
 8002968:	d506      	bpl.n	8002978 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800296a:	6802      	ldr	r2, [r0, #0]
 800296c:	490b      	ldr	r1, [pc, #44]	; (800299c <UART_AdvFeatureConfig+0xcc>)
 800296e:	6853      	ldr	r3, [r2, #4]
 8002970:	400b      	ands	r3, r1
 8002972:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002974:	430b      	orrs	r3, r1
 8002976:	6053      	str	r3, [r2, #4]
  }
}
 8002978:	bd30      	pop	{r4, r5, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	fffdffff 	.word	0xfffdffff
 8002980:	fffeffff 	.word	0xfffeffff
 8002984:	fffbffff 	.word	0xfffbffff
 8002988:	ffff7fff 	.word	0xffff7fff
 800298c:	ffffefff 	.word	0xffffefff
 8002990:	ffffdfff 	.word	0xffffdfff
 8002994:	ffefffff 	.word	0xffefffff
 8002998:	ff9fffff 	.word	0xff9fffff
 800299c:	fff7ffff 	.word	0xfff7ffff

080029a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029a2:	2780      	movs	r7, #128	; 0x80
{
 80029a4:	0004      	movs	r4, r0
 80029a6:	000e      	movs	r6, r1
 80029a8:	0015      	movs	r5, r2
 80029aa:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029ac:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ae:	6822      	ldr	r2, [r4, #0]
 80029b0:	69d3      	ldr	r3, [r2, #28]
 80029b2:	4033      	ands	r3, r6
 80029b4:	1b9b      	subs	r3, r3, r6
 80029b6:	4259      	negs	r1, r3
 80029b8:	414b      	adcs	r3, r1
 80029ba:	42ab      	cmp	r3, r5
 80029bc:	d001      	beq.n	80029c2 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2000      	movs	r0, #0
 80029c0:	e01c      	b.n	80029fc <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80029c2:	9b08      	ldr	r3, [sp, #32]
 80029c4:	3301      	adds	r3, #1
 80029c6:	d0f3      	beq.n	80029b0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c8:	f7fe fc02 	bl	80011d0 <HAL_GetTick>
 80029cc:	9b01      	ldr	r3, [sp, #4]
 80029ce:	9a08      	ldr	r2, [sp, #32]
 80029d0:	1ac0      	subs	r0, r0, r3
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	4282      	cmp	r2, r0
 80029d6:	d301      	bcc.n	80029dc <UART_WaitOnFlagUntilTimeout+0x3c>
 80029d8:	2a00      	cmp	r2, #0
 80029da:	d110      	bne.n	80029fe <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4913      	ldr	r1, [pc, #76]	; (8002a2c <UART_WaitOnFlagUntilTimeout+0x8c>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	31a3      	adds	r1, #163	; 0xa3
 80029e8:	31ff      	adds	r1, #255	; 0xff
 80029ea:	438a      	bics	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80029ee:	2320      	movs	r3, #32
 80029f0:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80029f2:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80029f4:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80029f6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80029f8:	3470      	adds	r4, #112	; 0x70
 80029fa:	7023      	strb	r3, [r4, #0]
}
 80029fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029fe:	2104      	movs	r1, #4
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	420a      	tst	r2, r1
 8002a04:	d0d3      	beq.n	80029ae <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	423a      	tst	r2, r7
 8002a0a:	d0d0      	beq.n	80029ae <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a0c:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4906      	ldr	r1, [pc, #24]	; (8002a2c <UART_WaitOnFlagUntilTimeout+0x8c>)
 8002a12:	400a      	ands	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	31a3      	adds	r1, #163	; 0xa3
 8002a1a:	31ff      	adds	r1, #255	; 0xff
 8002a1c:	438a      	bics	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8002a20:	2320      	movs	r3, #32
 8002a22:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002a24:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a26:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002a28:	e7e4      	b.n	80029f4 <UART_WaitOnFlagUntilTimeout+0x54>
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	fffffe5f 	.word	0xfffffe5f

08002a30 <HAL_UART_Transmit>:
{
 8002a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a32:	b087      	sub	sp, #28
 8002a34:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8002a36:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002a38:	0004      	movs	r4, r0
 8002a3a:	000d      	movs	r5, r1
 8002a3c:	0017      	movs	r7, r2
    return HAL_BUSY;
 8002a3e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d149      	bne.n	8002ad8 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8002a44:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002a46:	2900      	cmp	r1, #0
 8002a48:	d046      	beq.n	8002ad8 <HAL_UART_Transmit+0xa8>
 8002a4a:	2a00      	cmp	r2, #0
 8002a4c:	d044      	beq.n	8002ad8 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	68a2      	ldr	r2, [r4, #8]
 8002a52:	015b      	lsls	r3, r3, #5
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d104      	bne.n	8002a62 <HAL_UART_Transmit+0x32>
 8002a58:	6923      	ldr	r3, [r4, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a5e:	4201      	tst	r1, r0
 8002a60:	d13a      	bne.n	8002ad8 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8002a62:	0023      	movs	r3, r4
 8002a64:	3370      	adds	r3, #112	; 0x70
 8002a66:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002a68:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8002a6a:	2a01      	cmp	r2, #1
 8002a6c:	d034      	beq.n	8002ad8 <HAL_UART_Transmit+0xa8>
 8002a6e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a70:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8002a72:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a74:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a76:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a78:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002a7a:	f7fe fba9 	bl	80011d0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002a7e:	0023      	movs	r3, r4
 8002a80:	3350      	adds	r3, #80	; 0x50
 8002a82:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8002a84:	3302      	adds	r3, #2
 8002a86:	9303      	str	r3, [sp, #12]
 8002a88:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002a8e:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a90:	015b      	lsls	r3, r3, #5
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d104      	bne.n	8002aa0 <HAL_UART_Transmit+0x70>
 8002a96:	6923      	ldr	r3, [r4, #16]
 8002a98:	42b3      	cmp	r3, r6
 8002a9a:	d101      	bne.n	8002aa0 <HAL_UART_Transmit+0x70>
 8002a9c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8002a9e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8002aa0:	0023      	movs	r3, r4
 8002aa2:	3352      	adds	r3, #82	; 0x52
 8002aa4:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aa6:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8002aa8:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8002aae:	2a00      	cmp	r2, #0
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	2140      	movs	r1, #64	; 0x40
 8002ab4:	0020      	movs	r0, r4
 8002ab6:	f7ff ff73 	bl	80029a0 <UART_WaitOnFlagUntilTimeout>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d10b      	bne.n	8002ad6 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8002abe:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002ac0:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8002ac2:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8002ac4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002ac6:	e007      	b.n	8002ad8 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	0020      	movs	r0, r4
 8002ace:	f7ff ff67 	bl	80029a0 <UART_WaitOnFlagUntilTimeout>
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8002ad6:	2003      	movs	r0, #3
}
 8002ad8:	b007      	add	sp, #28
 8002ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002adc:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002ade:	2d00      	cmp	r5, #0
 8002ae0:	d10b      	bne.n	8002afa <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae2:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002ae4:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae6:	05db      	lsls	r3, r3, #23
 8002ae8:	0ddb      	lsrs	r3, r3, #23
 8002aea:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002aec:	9b03      	ldr	r3, [sp, #12]
 8002aee:	9a03      	ldr	r2, [sp, #12]
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	8013      	strh	r3, [r2, #0]
 8002af8:	e7d2      	b.n	8002aa0 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afa:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8002afc:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afe:	8513      	strh	r3, [r2, #40]	; 0x28
 8002b00:	e7f4      	b.n	8002aec <HAL_UART_Transmit+0xbc>
	...

08002b04 <UART_CheckIdleState>:
{
 8002b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b06:	2600      	movs	r6, #0
{
 8002b08:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002b0c:	f7fe fb60 	bl	80011d0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b10:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002b12:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	071b      	lsls	r3, r3, #28
 8002b18:	d415      	bmi.n	8002b46 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	075b      	lsls	r3, r3, #29
 8002b20:	d50a      	bpl.n	8002b38 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <UART_CheckIdleState+0x5c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	03c9      	lsls	r1, r1, #15
 8002b2c:	002b      	movs	r3, r5
 8002b2e:	0020      	movs	r0, r4
 8002b30:	f7ff ff36 	bl	80029a0 <UART_WaitOnFlagUntilTimeout>
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d111      	bne.n	8002b5c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8002b38:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002b3a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002b3c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002b3e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002b40:	3470      	adds	r4, #112	; 0x70
 8002b42:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002b44:	e00b      	b.n	8002b5e <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <UART_CheckIdleState+0x5c>)
 8002b4a:	0032      	movs	r2, r6
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	0389      	lsls	r1, r1, #14
 8002b50:	0003      	movs	r3, r0
 8002b52:	0020      	movs	r0, r4
 8002b54:	f7ff ff24 	bl	80029a0 <UART_WaitOnFlagUntilTimeout>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d0de      	beq.n	8002b1a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002b5c:	2003      	movs	r0, #3
}
 8002b5e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002b60:	01ffffff 	.word	0x01ffffff

08002b64 <HAL_UART_Init>:
{
 8002b64:	b510      	push	{r4, lr}
 8002b66:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002b6a:	2001      	movs	r0, #1
}
 8002b6c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002b6e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d104      	bne.n	8002b7e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002b74:	0002      	movs	r2, r0
 8002b76:	3270      	adds	r2, #112	; 0x70
 8002b78:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002b7a:	f003 f873 	bl	8005c64 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b7e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002b80:	2101      	movs	r1, #1
 8002b82:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b84:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002b86:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b88:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002b8a:	438b      	bics	r3, r1
 8002b8c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b8e:	f7ff fdf9 	bl	8002784 <UART_SetConfig>
 8002b92:	2801      	cmp	r0, #1
 8002b94:	d0e9      	beq.n	8002b6a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f7ff fe97 	bl	80028d0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <HAL_UART_Init+0x60>)
 8002ba6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002ba8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002baa:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bac:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	438a      	bics	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002bbe:	f7ff ffa1 	bl	8002b04 <UART_CheckIdleState>
 8002bc2:	e7d3      	b.n	8002b6c <HAL_UART_Init+0x8>
 8002bc4:	ffffb7ff 	.word	0xffffb7ff

08002bc8 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <disk_status+0x18>)
{
 8002bca:	b510      	push	{r4, lr}
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002bcc:	181a      	adds	r2, r3, r0
 8002bce:	0080      	lsls	r0, r0, #2
 8002bd0:	181b      	adds	r3, r3, r0
 8002bd2:	7a11      	ldrb	r1, [r2, #8]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	0008      	movs	r0, r1
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4798      	blx	r3
  return stat;
}
 8002bdc:	bd10      	pop	{r4, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	200002c4 	.word	0x200002c4

08002be4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <disk_initialize+0x24>)
{
 8002be6:	0002      	movs	r2, r0
  if(disk.is_initialized[pdrv] == 0)
 8002be8:	5c19      	ldrb	r1, [r3, r0]
  DSTATUS stat = RES_OK;
 8002bea:	2000      	movs	r0, #0
{
 8002bec:	b510      	push	{r4, lr}
  if(disk.is_initialized[pdrv] == 0)
 8002bee:	4281      	cmp	r1, r0
 8002bf0:	d108      	bne.n	8002c04 <disk_initialize+0x20>
  { 
    disk.is_initialized[pdrv] = 1;
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	5499      	strb	r1, [r3, r2]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002bf6:	1899      	adds	r1, r3, r2
 8002bf8:	0092      	lsls	r2, r2, #2
 8002bfa:	189b      	adds	r3, r3, r2
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	7a08      	ldrb	r0, [r1, #8]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4798      	blx	r3
  }
  return stat;
}
 8002c04:	bd10      	pop	{r4, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	200002c4 	.word	0x200002c4

08002c0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002c0c:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002c0e:	4c05      	ldr	r4, [pc, #20]	; (8002c24 <disk_read+0x18>)
 8002c10:	1825      	adds	r5, r4, r0
 8002c12:	0080      	lsls	r0, r0, #2
 8002c14:	1824      	adds	r4, r4, r0
 8002c16:	7a2e      	ldrb	r6, [r5, #8]
 8002c18:	6860      	ldr	r0, [r4, #4]
 8002c1a:	6884      	ldr	r4, [r0, #8]
 8002c1c:	0030      	movs	r0, r6
 8002c1e:	47a0      	blx	r4
  return res;
}
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	200002c4 	.word	0x200002c4

08002c28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002c28:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002c2a:	4c05      	ldr	r4, [pc, #20]	; (8002c40 <disk_write+0x18>)
 8002c2c:	1825      	adds	r5, r4, r0
 8002c2e:	0080      	lsls	r0, r0, #2
 8002c30:	1824      	adds	r4, r4, r0
 8002c32:	7a2e      	ldrb	r6, [r5, #8]
 8002c34:	6860      	ldr	r0, [r4, #4]
 8002c36:	68c4      	ldr	r4, [r0, #12]
 8002c38:	0030      	movs	r0, r6
 8002c3a:	47a0      	blx	r4
  return res;
}
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	200002c4 	.word	0x200002c4

08002c44 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <disk_ioctl+0x18>)
{
 8002c46:	b570      	push	{r4, r5, r6, lr}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002c48:	181c      	adds	r4, r3, r0
 8002c4a:	0080      	lsls	r0, r0, #2
 8002c4c:	181b      	adds	r3, r3, r0
 8002c4e:	7a25      	ldrb	r5, [r4, #8]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	0028      	movs	r0, r5
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	4798      	blx	r3
  return res;
}
 8002c58:	bd70      	pop	{r4, r5, r6, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	200002c4 	.word	0x200002c4

08002c60 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002c60:	2300      	movs	r3, #0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002c62:	b510      	push	{r4, lr}
	while (cnt--)
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d100      	bne.n	8002c6a <mem_cpy+0xa>
		*d++ = *s++;
}
 8002c68:	bd10      	pop	{r4, pc}
		*d++ = *s++;
 8002c6a:	5ccc      	ldrb	r4, [r1, r3]
 8002c6c:	54c4      	strb	r4, [r0, r3]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	e7f8      	b.n	8002c64 <mem_cpy+0x4>

08002c72 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002c72:	1882      	adds	r2, r0, r2
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8002c74:	4290      	cmp	r0, r2
 8002c76:	d100      	bne.n	8002c7a <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8002c78:	4770      	bx	lr
		*d++ = (BYTE)val;
 8002c7a:	7001      	strb	r1, [r0, #0]
 8002c7c:	3001      	adds	r0, #1
 8002c7e:	e7f9      	b.n	8002c74 <mem_set+0x2>

08002c80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002c82:	2400      	movs	r4, #0
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002c84:	2580      	movs	r5, #128	; 0x80
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002c86:	0022      	movs	r2, r4
 8002c88:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <chk_lock+0x64>)
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002c8a:	00ed      	lsls	r5, r5, #3
		if (Files[i].fs) {	/* Existing entry */
 8002c8c:	681f      	ldr	r7, [r3, #0]
 8002c8e:	2f00      	cmp	r7, #0
 8002c90:	d01c      	beq.n	8002ccc <chk_lock+0x4c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002c92:	5946      	ldr	r6, [r0, r5]
 8002c94:	42b7      	cmp	r7, r6
 8002c96:	d11a      	bne.n	8002cce <chk_lock+0x4e>
 8002c98:	2781      	movs	r7, #129	; 0x81
 8002c9a:	00ff      	lsls	r7, r7, #3
 8002c9c:	685e      	ldr	r6, [r3, #4]
 8002c9e:	59c7      	ldr	r7, [r0, r7]
 8002ca0:	42be      	cmp	r6, r7
 8002ca2:	d114      	bne.n	8002cce <chk_lock+0x4e>
				Files[i].clu == dp->sclust &&
 8002ca4:	891e      	ldrh	r6, [r3, #8]
 8002ca6:	46b4      	mov	ip, r6
 8002ca8:	4e0f      	ldr	r6, [pc, #60]	; (8002ce8 <chk_lock+0x68>)
 8002caa:	5b87      	ldrh	r7, [r0, r6]
 8002cac:	45bc      	cmp	ip, r7
 8002cae:	d10e      	bne.n	8002cce <chk_lock+0x4e>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002cb0:	2010      	movs	r0, #16
 8002cb2:	2900      	cmp	r1, #0
 8002cb4:	d115      	bne.n	8002ce2 <chk_lock+0x62>
 8002cb6:	230c      	movs	r3, #12
 8002cb8:	435a      	muls	r2, r3
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <chk_lock+0x64>)
 8002cbc:	189a      	adds	r2, r3, r2
 8002cbe:	8950      	ldrh	r0, [r2, #10]
 8002cc0:	3801      	subs	r0, #1
 8002cc2:	38ff      	subs	r0, #255	; 0xff
 8002cc4:	4242      	negs	r2, r0
 8002cc6:	4142      	adcs	r2, r0
 8002cc8:	0110      	lsls	r0, r2, #4
 8002cca:	e00a      	b.n	8002ce2 <chk_lock+0x62>
			be = 1;
 8002ccc:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002cce:	3201      	adds	r2, #1
 8002cd0:	330c      	adds	r3, #12
 8002cd2:	2a02      	cmp	r2, #2
 8002cd4:	d1da      	bne.n	8002c8c <chk_lock+0xc>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002cd6:	2000      	movs	r0, #0
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002cd8:	4284      	cmp	r4, r0
 8002cda:	d102      	bne.n	8002ce2 <chk_lock+0x62>
 8002cdc:	2902      	cmp	r1, #2
 8002cde:	d000      	beq.n	8002ce2 <chk_lock+0x62>
 8002ce0:	2012      	movs	r0, #18
}
 8002ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ce4:	200000a8 	.word	0x200000a8
 8002ce8:	00000406 	.word	0x00000406

08002cec <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8002cec:	2380      	movs	r3, #128	; 0x80
{
 8002cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf0:	4c24      	ldr	r4, [pc, #144]	; (8002d84 <inc_lock+0x98>)
		if (Files[i].fs == dp->fs &&
 8002cf2:	00db      	lsls	r3, r3, #3
			Files[i].clu == dp->sclust &&
 8002cf4:	2581      	movs	r5, #129	; 0x81
		if (Files[i].fs == dp->fs &&
 8002cf6:	58c6      	ldr	r6, [r0, r3]
 8002cf8:	0022      	movs	r2, r4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002cfa:	2300      	movs	r3, #0
			Files[i].clu == dp->sclust &&
 8002cfc:	00ed      	lsls	r5, r5, #3
		if (Files[i].fs == dp->fs &&
 8002cfe:	6827      	ldr	r7, [r4, #0]
 8002d00:	42b7      	cmp	r7, r6
 8002d02:	d10a      	bne.n	8002d1a <inc_lock+0x2e>
 8002d04:	6867      	ldr	r7, [r4, #4]
 8002d06:	46bc      	mov	ip, r7
 8002d08:	5947      	ldr	r7, [r0, r5]
 8002d0a:	45bc      	cmp	ip, r7
 8002d0c:	d105      	bne.n	8002d1a <inc_lock+0x2e>
			Files[i].clu == dp->sclust &&
 8002d0e:	8927      	ldrh	r7, [r4, #8]
 8002d10:	46bc      	mov	ip, r7
 8002d12:	4f1d      	ldr	r7, [pc, #116]	; (8002d88 <inc_lock+0x9c>)
 8002d14:	5bc7      	ldrh	r7, [r0, r7]
 8002d16:	45bc      	cmp	ip, r7
 8002d18:	d027      	beq.n	8002d6a <inc_lock+0x7e>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	340c      	adds	r4, #12
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d1ed      	bne.n	8002cfe <inc_lock+0x12>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002d22:	6813      	ldr	r3, [r2, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <inc_lock+0x46>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002d28:	2400      	movs	r4, #0
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002d2a:	68d3      	ldr	r3, [r2, #12]
 8002d2c:	42a3      	cmp	r3, r4
 8002d2e:	d11a      	bne.n	8002d66 <inc_lock+0x7a>
 8002d30:	2301      	movs	r3, #1
		Files[i].fs = dp->fs;
 8002d32:	240c      	movs	r4, #12
		Files[i].clu = dp->sclust;
 8002d34:	2581      	movs	r5, #129	; 0x81
		Files[i].fs = dp->fs;
 8002d36:	435c      	muls	r4, r3
		Files[i].clu = dp->sclust;
 8002d38:	00ed      	lsls	r5, r5, #3
 8002d3a:	5945      	ldr	r5, [r0, r5]
		Files[i].fs = dp->fs;
 8002d3c:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8002d3e:	1914      	adds	r4, r2, r4
 8002d40:	6065      	str	r5, [r4, #4]
		Files[i].idx = dp->index;
 8002d42:	4d11      	ldr	r5, [pc, #68]	; (8002d88 <inc_lock+0x9c>)
 8002d44:	5b40      	ldrh	r0, [r0, r5]
 8002d46:	8120      	strh	r0, [r4, #8]
		Files[i].ctr = 0;
 8002d48:	2000      	movs	r0, #0
 8002d4a:	8160      	strh	r0, [r4, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002d4c:	4281      	cmp	r1, r0
 8002d4e:	d115      	bne.n	8002d7c <inc_lock+0x90>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002d50:	210c      	movs	r1, #12
 8002d52:	4359      	muls	r1, r3
 8002d54:	1851      	adds	r1, r2, r1
 8002d56:	8949      	ldrh	r1, [r1, #10]
 8002d58:	3101      	adds	r1, #1
 8002d5a:	b289      	uxth	r1, r1
 8002d5c:	200c      	movs	r0, #12
 8002d5e:	4358      	muls	r0, r3
 8002d60:	1812      	adds	r2, r2, r0
 8002d62:	8151      	strh	r1, [r2, #10]

	return i + 1;
 8002d64:	1c5c      	adds	r4, r3, #1
}
 8002d66:	0020      	movs	r0, r4
 8002d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002d6a:	2900      	cmp	r1, #0
 8002d6c:	d0f0      	beq.n	8002d50 <inc_lock+0x64>
 8002d6e:	210c      	movs	r1, #12
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002d70:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002d72:	4359      	muls	r1, r3
 8002d74:	1851      	adds	r1, r2, r1
 8002d76:	8949      	ldrh	r1, [r1, #10]
 8002d78:	42a1      	cmp	r1, r4
 8002d7a:	d1f4      	bne.n	8002d66 <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	0049      	lsls	r1, r1, #1
 8002d80:	e7ec      	b.n	8002d5c <inc_lock+0x70>
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	200000a8 	.word	0x200000a8
 8002d88:	00000406 	.word	0x00000406

08002d8c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002d8c:	1e41      	subs	r1, r0, #1
{
 8002d8e:	b510      	push	{r4, lr}
		if (n) n--;					/* Decrement read mode open count */
		Files[i].ctr = n;
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002d90:	2002      	movs	r0, #2
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002d92:	2901      	cmp	r1, #1
 8002d94:	d811      	bhi.n	8002dba <dec_lock+0x2e>
		n = Files[i].ctr;
 8002d96:	230c      	movs	r3, #12
 8002d98:	001a      	movs	r2, r3
 8002d9a:	434a      	muls	r2, r1
 8002d9c:	4c07      	ldr	r4, [pc, #28]	; (8002dbc <dec_lock+0x30>)
 8002d9e:	18a2      	adds	r2, r4, r2
 8002da0:	8950      	ldrh	r0, [r2, #10]
		if (n) n--;					/* Decrement read mode open count */
 8002da2:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <dec_lock+0x34>)
 8002da4:	4002      	ands	r2, r0
 8002da6:	d001      	beq.n	8002dac <dec_lock+0x20>
 8002da8:	3801      	subs	r0, #1
 8002daa:	b282      	uxth	r2, r0
		res = FR_OK;
 8002dac:	2000      	movs	r0, #0
		Files[i].ctr = n;
 8002dae:	434b      	muls	r3, r1
 8002db0:	18e1      	adds	r1, r4, r3
 8002db2:	814a      	strh	r2, [r1, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002db4:	4282      	cmp	r2, r0
 8002db6:	d100      	bne.n	8002dba <dec_lock+0x2e>
 8002db8:	50e0      	str	r0, [r4, r3]
	}
	return res;
}
 8002dba:	bd10      	pop	{r4, pc}
 8002dbc:	200000a8 	.word	0x200000a8
 8002dc0:	fffffeff 	.word	0xfffffeff

08002dc4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	b570      	push	{r4, r5, r6, lr}
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <clmt_clust+0x38>)
{
 8002dca:	0008      	movs	r0, r1
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002dcc:	589c      	ldr	r4, [r3, r2]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8002dce:	3a24      	subs	r2, #36	; 0x24
 8002dd0:	589d      	ldr	r5, [r3, r2]
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <clmt_clust+0x3c>)
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002dd4:	3404      	adds	r4, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8002dd6:	5ae9      	ldrh	r1, [r5, r3]
 8002dd8:	f7fd f9b2 	bl	8000140 <__udivsi3>
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <clmt_clust+0x40>)
 8002dde:	5ce9      	ldrb	r1, [r5, r3]
 8002de0:	f7fd f9ae 	bl	8000140 <__udivsi3>
 8002de4:	0002      	movs	r2, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002de6:	6820      	ldr	r0, [r4, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d006      	beq.n	8002dfa <clmt_clust+0x36>
		if (cl < ncl) break;	/* In this fragment? */
 8002dec:	4282      	cmp	r2, r0
 8002dee:	d302      	bcc.n	8002df6 <clmt_clust+0x32>
		cl -= ncl; tbl++;		/* Next fragment */
 8002df0:	1a12      	subs	r2, r2, r0
 8002df2:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002df4:	e7f7      	b.n	8002de6 <clmt_clust+0x22>
	}
	return cl + *tbl;	/* Return the cluster number */
 8002df6:	6860      	ldr	r0, [r4, #4]
 8002df8:	1810      	adds	r0, r2, r0
}
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	00000424 	.word	0x00000424
 8002e00:	0000040a 	.word	0x0000040a
 8002e04:	00000402 	.word	0x00000402

08002e08 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8002e08:	0001      	movs	r1, r0
	BYTE sum = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	310b      	adds	r1, #11
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8002e0e:	085a      	lsrs	r2, r3, #1
 8002e10:	01db      	lsls	r3, r3, #7
 8002e12:	4313      	orrs	r3, r2
 8002e14:	7802      	ldrb	r2, [r0, #0]
 8002e16:	3001      	adds	r0, #1
 8002e18:	189b      	adds	r3, r3, r2
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4288      	cmp	r0, r1
 8002e1e:	d1f6      	bne.n	8002e0e <sum_sfn+0x6>
	return sum;
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	4770      	bx	lr

08002e24 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002e24:	6802      	ldr	r2, [r0, #0]
 8002e26:	1e13      	subs	r3, r2, #0
 8002e28:	d103      	bne.n	8002e32 <get_ldnumber+0xe>
	int vol = -1;
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	4240      	negs	r0, r0
 8002e2e:	e00e      	b.n	8002e4e <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002e30:	3301      	adds	r3, #1
 8002e32:	7819      	ldrb	r1, [r3, #0]
 8002e34:	291f      	cmp	r1, #31
 8002e36:	d909      	bls.n	8002e4c <get_ldnumber+0x28>
 8002e38:	293a      	cmp	r1, #58	; 0x3a
 8002e3a:	d1f9      	bne.n	8002e30 <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8002e3c:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002e3e:	428b      	cmp	r3, r1
 8002e40:	d1f3      	bne.n	8002e2a <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002e42:	7812      	ldrb	r2, [r2, #0]
 8002e44:	2a30      	cmp	r2, #48	; 0x30
 8002e46:	d1f0      	bne.n	8002e2a <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 8002e48:	3301      	adds	r3, #1
 8002e4a:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002e4c:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8002e4e:	4770      	bx	lr

08002e50 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8002e50:	b510      	push	{r4, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d015      	beq.n	8002e82 <validate+0x32>
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	00d2      	lsls	r2, r2, #3
 8002e5a:	5883      	ldr	r3, [r0, r2]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d010      	beq.n	8002e82 <validate+0x32>
 8002e60:	5c9a      	ldrb	r2, [r3, r2]
 8002e62:	2a00      	cmp	r2, #0
 8002e64:	d00d      	beq.n	8002e82 <validate+0x32>
 8002e66:	4a08      	ldr	r2, [pc, #32]	; (8002e88 <validate+0x38>)
 8002e68:	5a99      	ldrh	r1, [r3, r2]
 8002e6a:	4a08      	ldr	r2, [pc, #32]	; (8002e8c <validate+0x3c>)
 8002e6c:	5a82      	ldrh	r2, [r0, r2]
 8002e6e:	4291      	cmp	r1, r2
 8002e70:	d107      	bne.n	8002e82 <validate+0x32>
 8002e72:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <validate+0x40>)
 8002e74:	5c98      	ldrb	r0, [r3, r2]
 8002e76:	f7ff fea7 	bl	8002bc8 <disk_status>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	4003      	ands	r3, r0
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8002e7e:	1e18      	subs	r0, r3, #0
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002e80:	d000      	beq.n	8002e84 <validate+0x34>
		return FR_INVALID_OBJECT;
 8002e82:	2009      	movs	r0, #9
}
 8002e84:	bd10      	pop	{r4, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	00000406 	.word	0x00000406
 8002e8c:	00000404 	.word	0x00000404
 8002e90:	00000401 	.word	0x00000401

08002e94 <get_fileinfo>:
{
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (dp->sect) {		/* Get SFN */
 8002e96:	2382      	movs	r3, #130	; 0x82
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	58c3      	ldr	r3, [r0, r3]
{
 8002e9c:	000c      	movs	r4, r1
	p = fno->fname;
 8002e9e:	3109      	adds	r1, #9
	if (dp->sect) {		/* Get SFN */
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d038      	beq.n	8002f16 <get_fileinfo+0x82>
		i = 0;
 8002ea4:	2200      	movs	r2, #0
		dir = dp->dir;
 8002ea6:	4b33      	ldr	r3, [pc, #204]	; (8002f74 <get_fileinfo+0xe0>)
 8002ea8:	58c3      	ldr	r3, [r0, r3]
			c = (TCHAR)dir[i++];
 8002eaa:	1c55      	adds	r5, r2, #1
 8002eac:	5c9a      	ldrb	r2, [r3, r2]
			if (c == ' ') continue;				/* Skip padding spaces */
 8002eae:	2a20      	cmp	r2, #32
 8002eb0:	d017      	beq.n	8002ee2 <get_fileinfo+0x4e>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8002eb2:	2a05      	cmp	r2, #5
 8002eb4:	d059      	beq.n	8002f6a <get_fileinfo+0xd6>
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8002eb6:	2d09      	cmp	r5, #9
 8002eb8:	d102      	bne.n	8002ec0 <get_fileinfo+0x2c>
 8002eba:	272e      	movs	r7, #46	; 0x2e
 8002ebc:	700f      	strb	r7, [r1, #0]
 8002ebe:	3101      	adds	r1, #1
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 8002ec0:	0017      	movs	r7, r2
 8002ec2:	3f41      	subs	r7, #65	; 0x41
 8002ec4:	2f19      	cmp	r7, #25
 8002ec6:	d80a      	bhi.n	8002ede <get_fileinfo+0x4a>
 8002ec8:	7b1f      	ldrb	r7, [r3, #12]
 8002eca:	46bc      	mov	ip, r7
 8002ecc:	2710      	movs	r7, #16
 8002ece:	2d08      	cmp	r5, #8
 8002ed0:	d800      	bhi.n	8002ed4 <get_fileinfo+0x40>
 8002ed2:	3f08      	subs	r7, #8
 8002ed4:	4666      	mov	r6, ip
 8002ed6:	423e      	tst	r6, r7
 8002ed8:	d001      	beq.n	8002ede <get_fileinfo+0x4a>
				c += 0x20;			/* To lower */
 8002eda:	3220      	adds	r2, #32
 8002edc:	b2d2      	uxtb	r2, r2
			*p++ = c;
 8002ede:	700a      	strb	r2, [r1, #0]
 8002ee0:	3101      	adds	r1, #1
 8002ee2:	002a      	movs	r2, r5
		while (i < 11) {		/* Copy name body and extension */
 8002ee4:	2d0b      	cmp	r5, #11
 8002ee6:	d1e0      	bne.n	8002eaa <get_fileinfo+0x16>
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8002ee8:	7ada      	ldrb	r2, [r3, #11]
 8002eea:	7222      	strb	r2, [r4, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8002eec:	7f5d      	ldrb	r5, [r3, #29]
 8002eee:	7f1a      	ldrb	r2, [r3, #28]
 8002ef0:	022d      	lsls	r5, r5, #8
 8002ef2:	4315      	orrs	r5, r2
 8002ef4:	7f9a      	ldrb	r2, [r3, #30]
 8002ef6:	0412      	lsls	r2, r2, #16
 8002ef8:	4315      	orrs	r5, r2
 8002efa:	7fda      	ldrb	r2, [r3, #31]
 8002efc:	0612      	lsls	r2, r2, #24
 8002efe:	432a      	orrs	r2, r5
 8002f00:	6022      	str	r2, [r4, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8002f02:	7e5d      	ldrb	r5, [r3, #25]
 8002f04:	7e1a      	ldrb	r2, [r3, #24]
 8002f06:	022d      	lsls	r5, r5, #8
 8002f08:	432a      	orrs	r2, r5
 8002f0a:	80a2      	strh	r2, [r4, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8002f0c:	7dda      	ldrb	r2, [r3, #23]
 8002f0e:	7d9b      	ldrb	r3, [r3, #22]
 8002f10:	0212      	lsls	r2, r2, #8
 8002f12:	4313      	orrs	r3, r2
 8002f14:	80e3      	strh	r3, [r4, #6]
	*p = 0;		/* Terminate SFN string by a \0 */
 8002f16:	2500      	movs	r5, #0
 8002f18:	700d      	strb	r5, [r1, #0]
	if (fno->lfname) {
 8002f1a:	69a6      	ldr	r6, [r4, #24]
 8002f1c:	42ae      	cmp	r6, r5
 8002f1e:	d007      	beq.n	8002f30 <get_fileinfo+0x9c>
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8002f20:	2382      	movs	r3, #130	; 0x82
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	58c3      	ldr	r3, [r0, r3]
 8002f26:	42ab      	cmp	r3, r5
 8002f28:	d103      	bne.n	8002f32 <get_fileinfo+0x9e>
		i = 0; p = fno->lfname;
 8002f2a:	2300      	movs	r3, #0
		p[i] = 0;	/* Terminate LFN string by a \0 */
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	54f2      	strb	r2, [r6, r3]
}
 8002f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8002f32:	69e3      	ldr	r3, [r4, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f8      	beq.n	8002f2a <get_fileinfo+0x96>
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <get_fileinfo+0xe4>)
 8002f3a:	5ac2      	ldrh	r2, [r0, r3]
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <get_fileinfo+0xe8>)
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d0f3      	beq.n	8002f2a <get_fileinfo+0x96>
			lfn = dp->lfn;
 8002f42:	2384      	movs	r3, #132	; 0x84
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	58c7      	ldr	r7, [r0, r3]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8002f48:	006a      	lsls	r2, r5, #1
 8002f4a:	5ab8      	ldrh	r0, [r7, r2]
 8002f4c:	002b      	movs	r3, r5
 8002f4e:	2800      	cmp	r0, #0
 8002f50:	d0ec      	beq.n	8002f2c <get_fileinfo+0x98>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8002f52:	2100      	movs	r1, #0
 8002f54:	f001 fffa 	bl	8004f4c <ff_convert>
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d0e6      	beq.n	8002f2a <get_fileinfo+0x96>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 8002f5c:	69e3      	ldr	r3, [r4, #28]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	429d      	cmp	r5, r3
 8002f62:	d2e2      	bcs.n	8002f2a <get_fileinfo+0x96>
				p[i++] = (TCHAR)w;
 8002f64:	5570      	strb	r0, [r6, r5]
 8002f66:	3501      	adds	r5, #1
 8002f68:	e7ee      	b.n	8002f48 <get_fileinfo+0xb4>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8002f6a:	22e5      	movs	r2, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8002f6c:	2d09      	cmp	r5, #9
 8002f6e:	d1b6      	bne.n	8002ede <get_fileinfo+0x4a>
 8002f70:	e7a3      	b.n	8002eba <get_fileinfo+0x26>
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	00000414 	.word	0x00000414
 8002f78:	00000424 	.word	0x00000424
 8002f7c:	0000ffff 	.word	0x0000ffff

08002f80 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8002f80:	7eca      	ldrb	r2, [r1, #27]
DWORD ld_clust (
 8002f82:	b510      	push	{r4, lr}
 8002f84:	0004      	movs	r4, r0
	cl = LD_WORD(dir + DIR_FstClusLO);
 8002f86:	7e88      	ldrb	r0, [r1, #26]
 8002f88:	0212      	lsls	r2, r2, #8
 8002f8a:	4310      	orrs	r0, r2
	if (fs->fs_type == FS_FAT32)
 8002f8c:	2c03      	cmp	r4, #3
 8002f8e:	d105      	bne.n	8002f9c <ld_clust.isra.0+0x1c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8002f90:	7d4a      	ldrb	r2, [r1, #21]
 8002f92:	7d0b      	ldrb	r3, [r1, #20]
 8002f94:	0212      	lsls	r2, r2, #8
 8002f96:	4313      	orrs	r3, r2
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	4318      	orrs	r0, r3
}
 8002f9c:	bd10      	pop	{r4, pc}
	...

08002fa0 <sync_window.part.1>:
FRESULT sync_window (
 8002fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fa2:	0004      	movs	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <sync_window.part.1+0x54>)
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002fa6:	4e14      	ldr	r6, [pc, #80]	; (8002ff8 <sync_window.part.1+0x58>)
		wsect = fs->winsect;	/* Current sector number */
 8002fa8:	58c5      	ldr	r5, [r0, r3]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002faa:	0021      	movs	r1, r4
 8002fac:	2301      	movs	r3, #1
 8002fae:	5d80      	ldrb	r0, [r0, r6]
 8002fb0:	002a      	movs	r2, r5
 8002fb2:	f7ff fe39 	bl	8002c28 <disk_write>
 8002fb6:	9601      	str	r6, [sp, #4]
			res = FR_DISK_ERR;
 8002fb8:	2301      	movs	r3, #1
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d109      	bne.n	8002fd2 <sync_window.part.1+0x32>
			fs->wflag = 0;
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <sync_window.part.1+0x5c>)
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002fc0:	3617      	adds	r6, #23
			fs->wflag = 0;
 8002fc2:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002fc4:	331c      	adds	r3, #28
 8002fc6:	58e3      	ldr	r3, [r4, r3]
 8002fc8:	59a2      	ldr	r2, [r4, r6]
 8002fca:	1aeb      	subs	r3, r5, r3
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d302      	bcc.n	8002fd6 <sync_window.part.1+0x36>
	FRESULT res = FR_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <sync_window.part.1+0x60>)
 8002fd8:	5ce7      	ldrb	r7, [r4, r3]
 8002fda:	2f01      	cmp	r7, #1
 8002fdc:	d9f8      	bls.n	8002fd0 <sync_window.part.1+0x30>
					wsect += fs->fsize;
 8002fde:	59a3      	ldr	r3, [r4, r6]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002fe0:	0021      	movs	r1, r4
					wsect += fs->fsize;
 8002fe2:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002fe4:	9b01      	ldr	r3, [sp, #4]
 8002fe6:	002a      	movs	r2, r5
 8002fe8:	5ce0      	ldrb	r0, [r4, r3]
 8002fea:	2301      	movs	r3, #1
 8002fec:	f7ff fe1c 	bl	8002c28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002ff0:	3f01      	subs	r7, #1
 8002ff2:	e7f2      	b.n	8002fda <sync_window.part.1+0x3a>
 8002ff4:	0000042c 	.word	0x0000042c
 8002ff8:	00000401 	.word	0x00000401
 8002ffc:	00000404 	.word	0x00000404
 8003000:	00000403 	.word	0x00000403

08003004 <sync_window>:
{
 8003004:	b510      	push	{r4, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <sync_window+0x18>)
 8003008:	5cc2      	ldrb	r2, [r0, r3]
	FRESULT res = FR_OK;
 800300a:	2300      	movs	r3, #0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800300c:	429a      	cmp	r2, r3
 800300e:	d002      	beq.n	8003016 <sync_window+0x12>
 8003010:	f7ff ffc6 	bl	8002fa0 <sync_window.part.1>
 8003014:	0003      	movs	r3, r0
}
 8003016:	0018      	movs	r0, r3
 8003018:	bd10      	pop	{r4, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	00000404 	.word	0x00000404

08003020 <sync_fs>:
{
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	0004      	movs	r4, r0
	res = sync_window(fs);
 8003024:	f7ff ffee 	bl	8003004 <sync_window>
 8003028:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 800302a:	d15e      	bne.n	80030ea <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	5ce3      	ldrb	r3, [r4, r3]
 8003032:	2b03      	cmp	r3, #3
 8003034:	d150      	bne.n	80030d8 <sync_fs+0xb8>
 8003036:	4e2d      	ldr	r6, [pc, #180]	; (80030ec <sync_fs+0xcc>)
 8003038:	5da7      	ldrb	r7, [r4, r6]
 800303a:	2f01      	cmp	r7, #1
 800303c:	d14c      	bne.n	80030d8 <sync_fs+0xb8>
			mem_set(fs->win.d8, 0, SS(fs));
 800303e:	4b2c      	ldr	r3, [pc, #176]	; (80030f0 <sync_fs+0xd0>)
 8003040:	0001      	movs	r1, r0
 8003042:	5ae2      	ldrh	r2, [r4, r3]
 8003044:	0020      	movs	r0, r4
 8003046:	f7ff fe14 	bl	8002c72 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800304a:	23ff      	movs	r3, #255	; 0xff
 800304c:	2255      	movs	r2, #85	; 0x55
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800304e:	20f2      	movs	r0, #242	; 0xf2
 8003050:	2172      	movs	r1, #114	; 0x72
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	54e2      	strb	r2, [r4, r3]
 8003056:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <sync_fs+0xd4>)
 8003058:	1892      	adds	r2, r2, r2
 800305a:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800305c:	3bae      	subs	r3, #174	; 0xae
 800305e:	3bff      	subs	r3, #255	; 0xff
 8003060:	7023      	strb	r3, [r4, #0]
 8003062:	7063      	strb	r3, [r4, #1]
 8003064:	3a69      	subs	r2, #105	; 0x69
 8003066:	330f      	adds	r3, #15
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003068:	0040      	lsls	r0, r0, #1
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800306a:	70a3      	strb	r3, [r4, #2]
 800306c:	70e2      	strb	r2, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800306e:	5421      	strb	r1, [r4, r0]
 8003070:	20e6      	movs	r0, #230	; 0xe6
 8003072:	30ff      	adds	r0, #255	; 0xff
 8003074:	5421      	strb	r1, [r4, r0]
 8003076:	3175      	adds	r1, #117	; 0x75
 8003078:	31ff      	adds	r1, #255	; 0xff
 800307a:	5462      	strb	r2, [r4, r1]
 800307c:	22e8      	movs	r2, #232	; 0xe8
 800307e:	32ff      	adds	r2, #255	; 0xff
 8003080:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003082:	2382      	movs	r3, #130	; 0x82
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	58e3      	ldr	r3, [r4, r3]
 8003088:	3201      	adds	r2, #1
 800308a:	54a3      	strb	r3, [r4, r2]
 800308c:	22ea      	movs	r2, #234	; 0xea
 800308e:	0a19      	lsrs	r1, r3, #8
 8003090:	32ff      	adds	r2, #255	; 0xff
 8003092:	54a1      	strb	r1, [r4, r2]
 8003094:	0c19      	lsrs	r1, r3, #16
 8003096:	3201      	adds	r2, #1
 8003098:	54a1      	strb	r1, [r4, r2]
 800309a:	22ec      	movs	r2, #236	; 0xec
 800309c:	0e1b      	lsrs	r3, r3, #24
 800309e:	32ff      	adds	r2, #255	; 0xff
 80030a0:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <sync_fs+0xd8>)
 80030a4:	3201      	adds	r2, #1
 80030a6:	58e3      	ldr	r3, [r4, r3]
 80030a8:	54a3      	strb	r3, [r4, r2]
 80030aa:	22ee      	movs	r2, #238	; 0xee
 80030ac:	0a19      	lsrs	r1, r3, #8
 80030ae:	32ff      	adds	r2, #255	; 0xff
 80030b0:	54a1      	strb	r1, [r4, r2]
 80030b2:	0c19      	lsrs	r1, r3, #16
 80030b4:	3201      	adds	r2, #1
 80030b6:	54a1      	strb	r1, [r4, r2]
 80030b8:	22f0      	movs	r2, #240	; 0xf0
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	32ff      	adds	r2, #255	; 0xff
 80030be:	54a3      	strb	r3, [r4, r2]
			fs->winsect = fs->volbase + 1;
 80030c0:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <sync_fs+0xdc>)
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80030c2:	0021      	movs	r1, r4
			fs->winsect = fs->volbase + 1;
 80030c4:	58e2      	ldr	r2, [r4, r3]
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <sync_fs+0xe0>)
 80030c8:	3201      	adds	r2, #1
 80030ca:	50e2      	str	r2, [r4, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80030cc:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <sync_fs+0xe4>)
 80030ce:	5ce0      	ldrb	r0, [r4, r3]
 80030d0:	003b      	movs	r3, r7
 80030d2:	f7ff fda9 	bl	8002c28 <disk_write>
			fs->fsi_flag = 0;
 80030d6:	55a5      	strb	r5, [r4, r6]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80030d8:	2200      	movs	r2, #0
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <sync_fs+0xe4>)
 80030dc:	0011      	movs	r1, r2
 80030de:	5ce0      	ldrb	r0, [r4, r3]
 80030e0:	f7ff fdb0 	bl	8002c44 <disk_ioctl>
 80030e4:	1e43      	subs	r3, r0, #1
 80030e6:	4198      	sbcs	r0, r3
 80030e8:	b2c0      	uxtb	r0, r0
}
 80030ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ec:	00000405 	.word	0x00000405
 80030f0:	0000040a 	.word	0x0000040a
 80030f4:	000001ff 	.word	0x000001ff
 80030f8:	0000040c 	.word	0x0000040c
 80030fc:	0000041c 	.word	0x0000041c
 8003100:	0000042c 	.word	0x0000042c
 8003104:	00000401 	.word	0x00000401

08003108 <move_window>:
{
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800310a:	4f0d      	ldr	r7, [pc, #52]	; (8003140 <move_window+0x38>)
{
 800310c:	0004      	movs	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800310e:	59c2      	ldr	r2, [r0, r7]
{
 8003110:	000e      	movs	r6, r1
	FRESULT res = FR_OK;
 8003112:	2500      	movs	r5, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003114:	428a      	cmp	r2, r1
 8003116:	d010      	beq.n	800313a <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8003118:	f7ff ff74 	bl	8003004 <sync_window>
 800311c:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
 800311e:	d10c      	bne.n	800313a <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <move_window+0x3c>)
 8003122:	0032      	movs	r2, r6
 8003124:	5ce0      	ldrb	r0, [r4, r3]
 8003126:	0021      	movs	r1, r4
 8003128:	2301      	movs	r3, #1
 800312a:	f7ff fd6f 	bl	8002c0c <disk_read>
 800312e:	2800      	cmp	r0, #0
 8003130:	d002      	beq.n	8003138 <move_window+0x30>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003132:	2601      	movs	r6, #1
				res = FR_DISK_ERR;
 8003134:	3501      	adds	r5, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003136:	4276      	negs	r6, r6
			fs->winsect = sector;
 8003138:	51e6      	str	r6, [r4, r7]
}
 800313a:	0028      	movs	r0, r5
 800313c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	0000042c 	.word	0x0000042c
 8003144:	00000401 	.word	0x00000401

08003148 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003148:	2200      	movs	r2, #0
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <check_fs+0x64>)
{
 800314c:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800314e:	54c2      	strb	r2, [r0, r3]
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <check_fs+0x68>)
 8003152:	3a01      	subs	r2, #1
 8003154:	50c2      	str	r2, [r0, r3]
{
 8003156:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8003158:	f7ff ffd6 	bl	8003108 <move_window>
		return 3;
 800315c:	2303      	movs	r3, #3
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800315e:	2800      	cmp	r0, #0
 8003160:	d121      	bne.n	80031a6 <check_fs+0x5e>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8003162:	22ff      	movs	r2, #255	; 0xff
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <check_fs+0x6c>)
 8003166:	0052      	lsls	r2, r2, #1
 8003168:	5ce3      	ldrb	r3, [r4, r3]
 800316a:	5ca2      	ldrb	r2, [r4, r2]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	431a      	orrs	r2, r3
 8003170:	4911      	ldr	r1, [pc, #68]	; (80031b8 <check_fs+0x70>)
 8003172:	b212      	sxth	r2, r2
		return 2;
 8003174:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8003176:	428a      	cmp	r2, r1
 8003178:	d115      	bne.n	80031a6 <check_fs+0x5e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800317a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800317c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800317e:	0412      	lsls	r2, r2, #16
 8003180:	431a      	orrs	r2, r3
 8003182:	490e      	ldr	r1, [pc, #56]	; (80031bc <check_fs+0x74>)
 8003184:	0212      	lsls	r2, r2, #8
 8003186:	0a12      	lsrs	r2, r2, #8
		return 0;
 8003188:	0003      	movs	r3, r0
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800318a:	428a      	cmp	r2, r1
 800318c:	d00b      	beq.n	80031a6 <check_fs+0x5e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800318e:	3452      	adds	r4, #82	; 0x52
 8003190:	8863      	ldrh	r3, [r4, #2]
 8003192:	8820      	ldrh	r0, [r4, #0]
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	4303      	orrs	r3, r0
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <check_fs+0x78>)
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	1e58      	subs	r0, r3, #1
 80031a2:	4183      	sbcs	r3, r0
		return 3;
 80031a4:	b2db      	uxtb	r3, r3
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	bd10      	pop	{r4, pc}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	00000404 	.word	0x00000404
 80031b0:	0000042c 	.word	0x0000042c
 80031b4:	000001ff 	.word	0x000001ff
 80031b8:	ffffaa55 	.word	0xffffaa55
 80031bc:	00544146 	.word	0x00544146
 80031c0:	ffabbeba 	.word	0xffabbeba

080031c4 <find_volume>:
	*rfs = 0;
 80031c4:	2300      	movs	r3, #0
{
 80031c6:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 80031c8:	6003      	str	r3, [r0, #0]
{
 80031ca:	b08b      	sub	sp, #44	; 0x2c
 80031cc:	0006      	movs	r6, r0
	vol = get_ldnumber(path);
 80031ce:	0008      	movs	r0, r1
{
 80031d0:	0017      	movs	r7, r2
	vol = get_ldnumber(path);
 80031d2:	f7ff fe27 	bl	8002e24 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80031d6:	230b      	movs	r3, #11
	vol = get_ldnumber(path);
 80031d8:	1e05      	subs	r5, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 80031da:	db17      	blt.n	800320c <find_volume+0x48>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80031dc:	4baf      	ldr	r3, [pc, #700]	; (800349c <find_volume+0x2d8>)
 80031de:	0082      	lsls	r2, r0, #2
 80031e0:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80031e2:	230c      	movs	r3, #12
 80031e4:	2c00      	cmp	r4, #0
 80031e6:	d011      	beq.n	800320c <find_volume+0x48>
	if (fs->fs_type) {					/* If the volume has been mounted */
 80031e8:	2380      	movs	r3, #128	; 0x80
	*rfs = fs;							/* Return pointer to the file system object */
 80031ea:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	5ce3      	ldrb	r3, [r4, r3]
 80031f0:	4eab      	ldr	r6, [pc, #684]	; (80034a0 <find_volume+0x2dc>)
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00d      	beq.n	8003212 <find_volume+0x4e>
		stat = disk_status(fs->drv);
 80031f6:	5da0      	ldrb	r0, [r4, r6]
 80031f8:	f7ff fce6 	bl	8002bc8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80031fc:	2301      	movs	r3, #1
 80031fe:	4003      	ands	r3, r0
 8003200:	d107      	bne.n	8003212 <find_volume+0x4e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8003202:	2f00      	cmp	r7, #0
 8003204:	d002      	beq.n	800320c <find_volume+0x48>
 8003206:	0742      	lsls	r2, r0, #29
 8003208:	d500      	bpl.n	800320c <find_volume+0x48>
				return FR_WRITE_PROTECTED;
 800320a:	230a      	movs	r3, #10
}
 800320c:	0018      	movs	r0, r3
 800320e:	b00b      	add	sp, #44	; 0x2c
 8003210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	2200      	movs	r2, #0
 8003216:	00db      	lsls	r3, r3, #3
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003218:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 800321a:	54e2      	strb	r2, [r4, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800321c:	55a0      	strb	r0, [r4, r6]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800321e:	f7ff fce1 	bl	8002be4 <disk_initialize>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003222:	2303      	movs	r3, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8003224:	07c2      	lsls	r2, r0, #31
 8003226:	d4f1      	bmi.n	800320c <find_volume+0x48>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8003228:	2f00      	cmp	r7, #0
 800322a:	d001      	beq.n	8003230 <find_volume+0x6c>
 800322c:	0743      	lsls	r3, r0, #29
 800322e:	d4ec      	bmi.n	800320a <find_volume+0x46>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8003230:	4b9c      	ldr	r3, [pc, #624]	; (80034a4 <find_volume+0x2e0>)
 8003232:	5da0      	ldrb	r0, [r4, r6]
 8003234:	18e2      	adds	r2, r4, r3
 8003236:	2102      	movs	r1, #2
 8003238:	f7ff fd04 	bl	8002c44 <disk_ioctl>
 800323c:	1e06      	subs	r6, r0, #0
 800323e:	d001      	beq.n	8003244 <find_volume+0x80>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8003240:	2301      	movs	r3, #1
 8003242:	e7e3      	b.n	800320c <find_volume+0x48>
 8003244:	4d97      	ldr	r5, [pc, #604]	; (80034a4 <find_volume+0x2e0>)
 8003246:	4a98      	ldr	r2, [pc, #608]	; (80034a8 <find_volume+0x2e4>)
 8003248:	5b63      	ldrh	r3, [r4, r5]
 800324a:	189b      	adds	r3, r3, r2
 800324c:	2280      	movs	r2, #128	; 0x80
 800324e:	b29b      	uxth	r3, r3
 8003250:	0092      	lsls	r2, r2, #2
 8003252:	4293      	cmp	r3, r2
 8003254:	d8f4      	bhi.n	8003240 <find_volume+0x7c>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8003256:	0001      	movs	r1, r0
 8003258:	0020      	movs	r0, r4
 800325a:	f7ff ff75 	bl	8003148 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800325e:	2801      	cmp	r0, #1
 8003260:	d12b      	bne.n	80032ba <find_volume+0xf6>
 8003262:	0023      	movs	r3, r4
 8003264:	33c7      	adds	r3, #199	; 0xc7
 8003266:	33ff      	adds	r3, #255	; 0xff
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8003268:	1f1a      	subs	r2, r3, #4
 800326a:	7811      	ldrb	r1, [r2, #0]
 800326c:	2200      	movs	r2, #0
 800326e:	4291      	cmp	r1, r2
 8003270:	d009      	beq.n	8003286 <find_volume+0xc2>
 8003272:	7859      	ldrb	r1, [r3, #1]
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	0209      	lsls	r1, r1, #8
 8003278:	4311      	orrs	r1, r2
 800327a:	789a      	ldrb	r2, [r3, #2]
 800327c:	0412      	lsls	r2, r2, #16
 800327e:	4311      	orrs	r1, r2
 8003280:	78da      	ldrb	r2, [r3, #3]
 8003282:	0612      	lsls	r2, r2, #24
 8003284:	430a      	orrs	r2, r1
 8003286:	a906      	add	r1, sp, #24
 8003288:	5072      	str	r2, [r6, r1]
 800328a:	3604      	adds	r6, #4
 800328c:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800328e:	2e10      	cmp	r6, #16
 8003290:	d1ea      	bne.n	8003268 <find_volume+0xa4>
 8003292:	2600      	movs	r6, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8003294:	2702      	movs	r7, #2
			bsect = br[i];
 8003296:	ab06      	add	r3, sp, #24
 8003298:	599b      	ldr	r3, [r3, r6]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800329a:	0038      	movs	r0, r7
			bsect = br[i];
 800329c:	9300      	str	r3, [sp, #0]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <find_volume+0xea>
 80032a2:	0019      	movs	r1, r3
 80032a4:	0020      	movs	r0, r4
 80032a6:	f7ff ff4f 	bl	8003148 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80032aa:	2800      	cmp	r0, #0
 80032ac:	d00c      	beq.n	80032c8 <find_volume+0x104>
 80032ae:	3604      	adds	r6, #4
 80032b0:	2e10      	cmp	r6, #16
 80032b2:	d1f0      	bne.n	8003296 <find_volume+0xd2>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80032b4:	2803      	cmp	r0, #3
 80032b6:	d104      	bne.n	80032c2 <find_volume+0xfe>
 80032b8:	e7c2      	b.n	8003240 <find_volume+0x7c>
 80032ba:	2803      	cmp	r0, #3
 80032bc:	d0c0      	beq.n	8003240 <find_volume+0x7c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80032be:	2800      	cmp	r0, #0
 80032c0:	d001      	beq.n	80032c6 <find_volume+0x102>
 80032c2:	230d      	movs	r3, #13
 80032c4:	e7a2      	b.n	800320c <find_volume+0x48>
	bsect = 0;
 80032c6:	9000      	str	r0, [sp, #0]
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80032c8:	7b23      	ldrb	r3, [r4, #12]
 80032ca:	7ae2      	ldrb	r2, [r4, #11]
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	431a      	orrs	r2, r3
 80032d0:	9204      	str	r2, [sp, #16]
 80032d2:	5b63      	ldrh	r3, [r4, r5]
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d1f4      	bne.n	80032c2 <find_volume+0xfe>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80032d8:	7de2      	ldrb	r2, [r4, #23]
 80032da:	7da3      	ldrb	r3, [r4, #22]
 80032dc:	0212      	lsls	r2, r2, #8
 80032de:	4313      	orrs	r3, r2
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80032e0:	d100      	bne.n	80032e4 <find_volume+0x120>
 80032e2:	e0c6      	b.n	8003472 <find_volume+0x2ae>
 80032e4:	9302      	str	r3, [sp, #8]
	fs->fsize = fasize;
 80032e6:	2383      	movs	r3, #131	; 0x83
 80032e8:	9a02      	ldr	r2, [sp, #8]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	50e2      	str	r2, [r4, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80032ee:	7c26      	ldrb	r6, [r4, #16]
 80032f0:	4b6e      	ldr	r3, [pc, #440]	; (80034ac <find_volume+0x2e8>)
 80032f2:	54e6      	strb	r6, [r4, r3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80032f4:	1e73      	subs	r3, r6, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d8e3      	bhi.n	80032c2 <find_volume+0xfe>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80032fa:	7b65      	ldrb	r5, [r4, #13]
 80032fc:	4b6c      	ldr	r3, [pc, #432]	; (80034b0 <find_volume+0x2ec>)
 80032fe:	54e5      	strb	r5, [r4, r3]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8003300:	2d00      	cmp	r5, #0
 8003302:	d0de      	beq.n	80032c2 <find_volume+0xfe>
 8003304:	1e6b      	subs	r3, r5, #1
 8003306:	421d      	tst	r5, r3
 8003308:	d1db      	bne.n	80032c2 <find_volume+0xfe>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800330a:	7ca3      	ldrb	r3, [r4, #18]
 800330c:	7c62      	ldrb	r2, [r4, #17]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	431a      	orrs	r2, r3
 8003312:	9201      	str	r2, [sp, #4]
 8003314:	466a      	mov	r2, sp
 8003316:	2381      	movs	r3, #129	; 0x81
 8003318:	8892      	ldrh	r2, [r2, #4]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	52e2      	strh	r2, [r4, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800331e:	9b04      	ldr	r3, [sp, #16]
 8003320:	9801      	ldr	r0, [sp, #4]
 8003322:	095f      	lsrs	r7, r3, #5
 8003324:	0039      	movs	r1, r7
 8003326:	f7fc ff91 	bl	800024c <__aeabi_uidivmod>
 800332a:	b289      	uxth	r1, r1
 800332c:	2900      	cmp	r1, #0
 800332e:	d1c8      	bne.n	80032c2 <find_volume+0xfe>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8003330:	7d20      	ldrb	r0, [r4, #20]
 8003332:	7ce3      	ldrb	r3, [r4, #19]
 8003334:	0200      	lsls	r0, r0, #8
 8003336:	4303      	orrs	r3, r0
 8003338:	9303      	str	r3, [sp, #12]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800333a:	d101      	bne.n	8003340 <find_volume+0x17c>
 800333c:	6a23      	ldr	r3, [r4, #32]
 800333e:	9303      	str	r3, [sp, #12]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8003340:	7be3      	ldrb	r3, [r4, #15]
 8003342:	7ba2      	ldrb	r2, [r4, #14]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	431a      	orrs	r2, r3
 8003348:	9205      	str	r2, [sp, #20]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800334a:	d0ba      	beq.n	80032c2 <find_volume+0xfe>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800334c:	9b02      	ldr	r3, [sp, #8]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800334e:	0039      	movs	r1, r7
 8003350:	9801      	ldr	r0, [sp, #4]
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8003352:	435e      	muls	r6, r3
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8003354:	f7fc fef4 	bl	8000140 <__udivsi3>
 8003358:	9b05      	ldr	r3, [sp, #20]
 800335a:	b287      	uxth	r7, r0
 800335c:	18ff      	adds	r7, r7, r3
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800335e:	9b03      	ldr	r3, [sp, #12]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8003360:	19bf      	adds	r7, r7, r6
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003362:	42bb      	cmp	r3, r7
 8003364:	d3ad      	bcc.n	80032c2 <find_volume+0xfe>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8003366:	1bd8      	subs	r0, r3, r7
 8003368:	0029      	movs	r1, r5
 800336a:	f7fc fee9 	bl	8000140 <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800336e:	2800      	cmp	r0, #0
 8003370:	d0a7      	beq.n	80032c2 <find_volume+0xfe>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003372:	4b50      	ldr	r3, [pc, #320]	; (80034b4 <find_volume+0x2f0>)
	fmt = FS_FAT12;
 8003374:	2501      	movs	r5, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003376:	4298      	cmp	r0, r3
 8003378:	d904      	bls.n	8003384 <find_volume+0x1c0>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800337a:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <find_volume+0x2f4>)
 800337c:	4283      	cmp	r3, r0
 800337e:	419b      	sbcs	r3, r3
 8003380:	425d      	negs	r5, r3
 8003382:	3502      	adds	r5, #2
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003384:	4b4d      	ldr	r3, [pc, #308]	; (80034bc <find_volume+0x2f8>)
 8003386:	3002      	adds	r0, #2
 8003388:	50e0      	str	r0, [r4, r3]
	fs->volbase = bsect;								/* Volume start sector */
 800338a:	9a00      	ldr	r2, [sp, #0]
 800338c:	4b4c      	ldr	r3, [pc, #304]	; (80034c0 <find_volume+0x2fc>)
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800338e:	4694      	mov	ip, r2
	fs->volbase = bsect;								/* Volume start sector */
 8003390:	50e2      	str	r2, [r4, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003392:	2284      	movs	r2, #132	; 0x84
 8003394:	9b05      	ldr	r3, [sp, #20]
 8003396:	00d2      	lsls	r2, r2, #3
 8003398:	4463      	add	r3, ip
 800339a:	50a3      	str	r3, [r4, r2]
	fs->database = bsect + sysect;						/* Data start sector */
 800339c:	4662      	mov	r2, ip
 800339e:	19d7      	adds	r7, r2, r7
 80033a0:	2285      	movs	r2, #133	; 0x85
 80033a2:	00d2      	lsls	r2, r2, #3
 80033a4:	50a7      	str	r7, [r4, r2]
	if (fmt == FS_FAT32) {
 80033a6:	2d03      	cmp	r5, #3
 80033a8:	d165      	bne.n	8003476 <find_volume+0x2b2>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80033aa:	9b01      	ldr	r3, [sp, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d188      	bne.n	80032c2 <find_volume+0xfe>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80033b0:	4b44      	ldr	r3, [pc, #272]	; (80034c4 <find_volume+0x300>)
 80033b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80033b4:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80033b6:	50e2      	str	r2, [r4, r3]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80033b8:	9b04      	ldr	r3, [sp, #16]
 80033ba:	9904      	ldr	r1, [sp, #16]
 80033bc:	3b01      	subs	r3, #1
 80033be:	1818      	adds	r0, r3, r0
 80033c0:	f7fc febe 	bl	8000140 <__udivsi3>
 80033c4:	9b02      	ldr	r3, [sp, #8]
 80033c6:	4283      	cmp	r3, r0
 80033c8:	d200      	bcs.n	80033cc <find_volume+0x208>
 80033ca:	e77a      	b.n	80032c2 <find_volume+0xfe>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80033cc:	2682      	movs	r6, #130	; 0x82
 80033ce:	2301      	movs	r3, #1
 80033d0:	4a3d      	ldr	r2, [pc, #244]	; (80034c8 <find_volume+0x304>)
 80033d2:	425b      	negs	r3, r3
 80033d4:	00f6      	lsls	r6, r6, #3
	fs->fsi_flag = 0x80;
 80033d6:	4f3d      	ldr	r7, [pc, #244]	; (80034cc <find_volume+0x308>)
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80033d8:	51a3      	str	r3, [r4, r6]
 80033da:	50a3      	str	r3, [r4, r2]
	fs->fsi_flag = 0x80;
 80033dc:	3381      	adds	r3, #129	; 0x81
 80033de:	55e3      	strb	r3, [r4, r7]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80033e0:	2d03      	cmp	r5, #3
 80033e2:	d12f      	bne.n	8003444 <find_volume+0x280>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80033e4:	0023      	movs	r3, r4
 80033e6:	3331      	adds	r3, #49	; 0x31
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	0212      	lsls	r2, r2, #8
 80033f0:	4313      	orrs	r3, r2
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d126      	bne.n	8003444 <find_volume+0x280>
		&& move_window(fs, bsect + 1) == FR_OK)
 80033f6:	9900      	ldr	r1, [sp, #0]
 80033f8:	0020      	movs	r0, r4
 80033fa:	3101      	adds	r1, #1
 80033fc:	f7ff fe84 	bl	8003108 <move_window>
 8003400:	2800      	cmp	r0, #0
 8003402:	d11f      	bne.n	8003444 <find_volume+0x280>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003404:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <find_volume+0x30c>)
		fs->fsi_flag = 0;
 8003406:	55e0      	strb	r0, [r4, r7]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003408:	5ce2      	ldrb	r2, [r4, r3]
 800340a:	3b01      	subs	r3, #1
 800340c:	5ce3      	ldrb	r3, [r4, r3]
 800340e:	0212      	lsls	r2, r2, #8
 8003410:	4313      	orrs	r3, r2
 8003412:	4a30      	ldr	r2, [pc, #192]	; (80034d4 <find_volume+0x310>)
 8003414:	b21b      	sxth	r3, r3
 8003416:	4293      	cmp	r3, r2
 8003418:	d114      	bne.n	8003444 <find_volume+0x280>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800341a:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <find_volume+0x314>)
 800341c:	6822      	ldr	r2, [r4, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d110      	bne.n	8003444 <find_volume+0x280>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8003422:	22f2      	movs	r2, #242	; 0xf2
 8003424:	0052      	lsls	r2, r2, #1
 8003426:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <find_volume+0x318>)
 8003428:	58a2      	ldr	r2, [r4, r2]
 800342a:	429a      	cmp	r2, r3
 800342c:	d10a      	bne.n	8003444 <find_volume+0x280>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800342e:	23f4      	movs	r3, #244	; 0xf4
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	58e3      	ldr	r3, [r4, r3]
 8003434:	51a3      	str	r3, [r4, r6]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8003436:	23f6      	movs	r3, #246	; 0xf6
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	58e3      	ldr	r3, [r4, r3]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	9a00      	ldr	r2, [sp, #0]
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <find_volume+0x304>)
 8003442:	50e2      	str	r2, [r4, r3]
	fs->fs_type = fmt;	/* FAT sub-type */
 8003444:	2380      	movs	r3, #128	; 0x80
	fs->id = ++Fsid;	/* File system mount ID */
 8003446:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <find_volume+0x31c>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	54e5      	strb	r5, [r4, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 800344c:	8813      	ldrh	r3, [r2, #0]
 800344e:	3301      	adds	r3, #1
 8003450:	b29b      	uxth	r3, r3
 8003452:	8013      	strh	r3, [r2, #0]
 8003454:	4a23      	ldr	r2, [pc, #140]	; (80034e4 <find_volume+0x320>)
 8003456:	52a3      	strh	r3, [r4, r2]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003458:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <find_volume+0x324>)
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	429c      	cmp	r4, r3
 800345e:	d101      	bne.n	8003464 <find_volume+0x2a0>
 8003460:	2300      	movs	r3, #0
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	68d1      	ldr	r1, [r2, #12]
 8003466:	2300      	movs	r3, #0
 8003468:	428c      	cmp	r4, r1
 800346a:	d000      	beq.n	800346e <find_volume+0x2aa>
 800346c:	e6ce      	b.n	800320c <find_volume+0x48>
 800346e:	60d3      	str	r3, [r2, #12]
 8003470:	e6cc      	b.n	800320c <find_volume+0x48>
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8003472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003474:	e736      	b.n	80032e4 <find_volume+0x120>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003476:	9a01      	ldr	r2, [sp, #4]
 8003478:	2a00      	cmp	r2, #0
 800347a:	d100      	bne.n	800347e <find_volume+0x2ba>
 800347c:	e721      	b.n	80032c2 <find_volume+0xfe>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800347e:	18f6      	adds	r6, r6, r3
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <find_volume+0x300>)
 8003482:	50e6      	str	r6, [r4, r3]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003484:	2d02      	cmp	r5, #2
 8003486:	d101      	bne.n	800348c <find_volume+0x2c8>
 8003488:	0040      	lsls	r0, r0, #1
 800348a:	e795      	b.n	80033b8 <find_volume+0x1f4>
 800348c:	2303      	movs	r3, #3
 800348e:	2201      	movs	r2, #1
 8003490:	4343      	muls	r3, r0
 8003492:	4010      	ands	r0, r2
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	1818      	adds	r0, r3, r0
 8003498:	e78e      	b.n	80033b8 <find_volume+0x1f4>
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	200000a4 	.word	0x200000a4
 80034a0:	00000401 	.word	0x00000401
 80034a4:	0000040a 	.word	0x0000040a
 80034a8:	fffffe00 	.word	0xfffffe00
 80034ac:	00000403 	.word	0x00000403
 80034b0:	00000402 	.word	0x00000402
 80034b4:	00000ff5 	.word	0x00000ff5
 80034b8:	0000fff5 	.word	0x0000fff5
 80034bc:	00000414 	.word	0x00000414
 80034c0:	0000041c 	.word	0x0000041c
 80034c4:	00000424 	.word	0x00000424
 80034c8:	0000040c 	.word	0x0000040c
 80034cc:	00000405 	.word	0x00000405
 80034d0:	000001ff 	.word	0x000001ff
 80034d4:	ffffaa55 	.word	0xffffaa55
 80034d8:	41615252 	.word	0x41615252
 80034dc:	61417272 	.word	0x61417272
 80034e0:	200000c0 	.word	0x200000c0
 80034e4:	00000406 	.word	0x00000406
 80034e8:	200000a8 	.word	0x200000a8

080034ec <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80034ec:	4a07      	ldr	r2, [pc, #28]	; (800350c <clust2sect+0x20>)
	clst -= 2;
 80034ee:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80034f0:	5882      	ldr	r2, [r0, r2]
{
 80034f2:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80034f4:	3a02      	subs	r2, #2
 80034f6:	2000      	movs	r0, #0
 80034f8:	4291      	cmp	r1, r2
 80034fa:	d205      	bcs.n	8003508 <clust2sect+0x1c>
	return clst * fs->csize + fs->database;
 80034fc:	4a04      	ldr	r2, [pc, #16]	; (8003510 <clust2sect+0x24>)
 80034fe:	5c98      	ldrb	r0, [r3, r2]
 8003500:	3226      	adds	r2, #38	; 0x26
 8003502:	4341      	muls	r1, r0
 8003504:	5898      	ldr	r0, [r3, r2]
 8003506:	1808      	adds	r0, r1, r0
}
 8003508:	4770      	bx	lr
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	00000414 	.word	0x00000414
 8003510:	00000402 	.word	0x00000402

08003514 <get_fat>:
{
 8003514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 8003516:	2501      	movs	r5, #1
{
 8003518:	0004      	movs	r4, r0
 800351a:	000e      	movs	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800351c:	42a9      	cmp	r1, r5
 800351e:	d91f      	bls.n	8003560 <get_fat+0x4c>
 8003520:	4b40      	ldr	r3, [pc, #256]	; (8003624 <get_fat+0x110>)
 8003522:	58c3      	ldr	r3, [r0, r3]
 8003524:	4299      	cmp	r1, r3
 8003526:	d21b      	bcs.n	8003560 <get_fat+0x4c>
		switch (fs->fs_type) {
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	5cc3      	ldrb	r3, [r0, r3]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d03e      	beq.n	80035b0 <get_fat+0x9c>
 8003532:	2b03      	cmp	r3, #3
 8003534:	d055      	beq.n	80035e2 <get_fat+0xce>
 8003536:	42ab      	cmp	r3, r5
 8003538:	d112      	bne.n	8003560 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800353a:	4b3b      	ldr	r3, [pc, #236]	; (8003628 <get_fat+0x114>)
			bc = (UINT)clst; bc += bc / 2;
 800353c:	084f      	lsrs	r7, r1, #1
 800353e:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003540:	5ac1      	ldrh	r1, [r0, r3]
 8003542:	0038      	movs	r0, r7
 8003544:	f7fc fdfc 	bl	8000140 <__udivsi3>
 8003548:	2384      	movs	r3, #132	; 0x84
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	58e3      	ldr	r3, [r4, r3]
 800354e:	18c1      	adds	r1, r0, r3
 8003550:	0020      	movs	r0, r4
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	f7ff fdd8 	bl	8003108 <move_window>
 8003558:	2800      	cmp	r0, #0
 800355a:	d003      	beq.n	8003564 <get_fat+0x50>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800355c:	2501      	movs	r5, #1
 800355e:	426d      	negs	r5, r5
}
 8003560:	0028      	movs	r0, r5
 8003562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win.d8[bc++ % SS(fs)];
 8003564:	1c7b      	adds	r3, r7, #1
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	4b2f      	ldr	r3, [pc, #188]	; (8003628 <get_fat+0x114>)
 800356a:	0038      	movs	r0, r7
 800356c:	5ae3      	ldrh	r3, [r4, r3]
 800356e:	0019      	movs	r1, r3
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	f7fc fe6b 	bl	800024c <__aeabi_uidivmod>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003576:	9800      	ldr	r0, [sp, #0]
			wc = fs->win.d8[bc++ % SS(fs)];
 8003578:	5c67      	ldrb	r7, [r4, r1]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800357a:	9901      	ldr	r1, [sp, #4]
 800357c:	f7fc fde0 	bl	8000140 <__udivsi3>
 8003580:	2384      	movs	r3, #132	; 0x84
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	58e1      	ldr	r1, [r4, r3]
 8003586:	1841      	adds	r1, r0, r1
 8003588:	0020      	movs	r0, r4
 800358a:	f7ff fdbd 	bl	8003108 <move_window>
 800358e:	2800      	cmp	r0, #0
 8003590:	d1e4      	bne.n	800355c <get_fat+0x48>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003592:	4b25      	ldr	r3, [pc, #148]	; (8003628 <get_fat+0x114>)
 8003594:	9800      	ldr	r0, [sp, #0]
 8003596:	5ae1      	ldrh	r1, [r4, r3]
 8003598:	f7fc fe58 	bl	800024c <__aeabi_uidivmod>
 800359c:	5c63      	ldrb	r3, [r4, r1]
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	431f      	orrs	r7, r3
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80035a2:	422e      	tst	r6, r5
 80035a4:	d001      	beq.n	80035aa <get_fat+0x96>
 80035a6:	093d      	lsrs	r5, r7, #4
 80035a8:	e7da      	b.n	8003560 <get_fat+0x4c>
 80035aa:	053f      	lsls	r7, r7, #20
 80035ac:	0d3d      	lsrs	r5, r7, #20
 80035ae:	e7d7      	b.n	8003560 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80035b0:	4d1d      	ldr	r5, [pc, #116]	; (8003628 <get_fat+0x114>)
 80035b2:	5b41      	ldrh	r1, [r0, r5]
 80035b4:	0030      	movs	r0, r6
 80035b6:	0849      	lsrs	r1, r1, #1
 80035b8:	f7fc fdc2 	bl	8000140 <__udivsi3>
 80035bc:	2384      	movs	r3, #132	; 0x84
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	58e1      	ldr	r1, [r4, r3]
 80035c2:	1841      	adds	r1, r0, r1
 80035c4:	0020      	movs	r0, r4
 80035c6:	f7ff fd9f 	bl	8003108 <move_window>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d1c6      	bne.n	800355c <get_fat+0x48>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80035ce:	5b61      	ldrh	r1, [r4, r5]
 80035d0:	0070      	lsls	r0, r6, #1
 80035d2:	f7fc fe3b 	bl	800024c <__aeabi_uidivmod>
			val = LD_WORD(p);
 80035d6:	1863      	adds	r3, r4, r1
 80035d8:	785d      	ldrb	r5, [r3, #1]
 80035da:	5c63      	ldrb	r3, [r4, r1]
 80035dc:	022d      	lsls	r5, r5, #8
 80035de:	431d      	orrs	r5, r3
 80035e0:	e7be      	b.n	8003560 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80035e2:	4d11      	ldr	r5, [pc, #68]	; (8003628 <get_fat+0x114>)
 80035e4:	5b41      	ldrh	r1, [r0, r5]
 80035e6:	0030      	movs	r0, r6
 80035e8:	0889      	lsrs	r1, r1, #2
 80035ea:	f7fc fda9 	bl	8000140 <__udivsi3>
 80035ee:	2384      	movs	r3, #132	; 0x84
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	58e1      	ldr	r1, [r4, r3]
 80035f4:	1841      	adds	r1, r0, r1
 80035f6:	0020      	movs	r0, r4
 80035f8:	f7ff fd86 	bl	8003108 <move_window>
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d1ad      	bne.n	800355c <get_fat+0x48>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003600:	5b61      	ldrh	r1, [r4, r5]
 8003602:	00b0      	lsls	r0, r6, #2
 8003604:	f7fc fe22 	bl	800024c <__aeabi_uidivmod>
 8003608:	1863      	adds	r3, r4, r1
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800360a:	78dd      	ldrb	r5, [r3, #3]
 800360c:	789a      	ldrb	r2, [r3, #2]
 800360e:	062d      	lsls	r5, r5, #24
 8003610:	0412      	lsls	r2, r2, #16
 8003612:	4315      	orrs	r5, r2
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	5c62      	ldrb	r2, [r4, r1]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	4315      	orrs	r5, r2
 800361c:	431d      	orrs	r5, r3
 800361e:	012d      	lsls	r5, r5, #4
 8003620:	092d      	lsrs	r5, r5, #4
 8003622:	e79d      	b.n	8003560 <get_fat+0x4c>
 8003624:	00000414 	.word	0x00000414
 8003628:	0000040a 	.word	0x0000040a

0800362c <dir_sdi>:
{
 800362c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800362e:	0005      	movs	r5, r0
	dp->index = (WORD)idx;	/* Current index */
 8003630:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <dir_sdi+0xcc>)
{
 8003632:	000e      	movs	r6, r1
	dp->index = (WORD)idx;	/* Current index */
 8003634:	52e9      	strh	r1, [r5, r3]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003636:	3302      	adds	r3, #2
 8003638:	58c4      	ldr	r4, [r0, r3]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800363a:	2c01      	cmp	r4, #1
 800363c:	d101      	bne.n	8003642 <dir_sdi+0x16>
		return FR_INT_ERR;
 800363e:	2002      	movs	r0, #2
}
 8003640:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	00d2      	lsls	r2, r2, #3
 8003646:	492d      	ldr	r1, [pc, #180]	; (80036fc <dir_sdi+0xd0>)
 8003648:	5883      	ldr	r3, [r0, r2]
 800364a:	9101      	str	r1, [sp, #4]
 800364c:	5858      	ldr	r0, [r3, r1]
 800364e:	4284      	cmp	r4, r0
 8003650:	d2f5      	bcs.n	800363e <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003652:	2c00      	cmp	r4, #0
 8003654:	d12b      	bne.n	80036ae <dir_sdi+0x82>
 8003656:	5c9a      	ldrb	r2, [r3, r2]
 8003658:	2a03      	cmp	r2, #3
 800365a:	d103      	bne.n	8003664 <dir_sdi+0x38>
		clst = dp->fs->dirbase;
 800365c:	4a28      	ldr	r2, [pc, #160]	; (8003700 <dir_sdi+0xd4>)
 800365e:	589a      	ldr	r2, [r3, r2]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003660:	2a00      	cmp	r2, #0
 8003662:	d125      	bne.n	80036b0 <dir_sdi+0x84>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003664:	2281      	movs	r2, #129	; 0x81
 8003666:	00d2      	lsls	r2, r2, #3
 8003668:	5a9a      	ldrh	r2, [r3, r2]
 800366a:	4296      	cmp	r6, r2
 800366c:	d2e7      	bcs.n	800363e <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 800366e:	4a24      	ldr	r2, [pc, #144]	; (8003700 <dir_sdi+0xd4>)
 8003670:	589f      	ldr	r7, [r3, r2]
	dp->clust = clst;	/* Current cluster# */
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <dir_sdi+0xd8>)
 8003674:	50ec      	str	r4, [r5, r3]
	if (!sect) return FR_INT_ERR;
 8003676:	2f00      	cmp	r7, #0
 8003678:	d0e1      	beq.n	800363e <dir_sdi+0x12>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800367a:	3b0c      	subs	r3, #12
 800367c:	58eb      	ldr	r3, [r5, r3]
 800367e:	0030      	movs	r0, r6
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	9a00      	ldr	r2, [sp, #0]
 8003684:	4b20      	ldr	r3, [pc, #128]	; (8003708 <dir_sdi+0xdc>)
 8003686:	5ad4      	ldrh	r4, [r2, r3]
 8003688:	0964      	lsrs	r4, r4, #5
 800368a:	0021      	movs	r1, r4
 800368c:	f7fc fd58 	bl	8000140 <__udivsi3>
 8003690:	2382      	movs	r3, #130	; 0x82
 8003692:	19c7      	adds	r7, r0, r7
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	50ef      	str	r7, [r5, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003698:	0021      	movs	r1, r4
 800369a:	0030      	movs	r0, r6
 800369c:	f7fc fdd6 	bl	800024c <__aeabi_uidivmod>
 80036a0:	9b00      	ldr	r3, [sp, #0]
 80036a2:	0149      	lsls	r1, r1, #5
 80036a4:	1859      	adds	r1, r3, r1
 80036a6:	9b01      	ldr	r3, [sp, #4]
	return FR_OK;
 80036a8:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80036aa:	50e9      	str	r1, [r5, r3]
	return FR_OK;
 80036ac:	e7c8      	b.n	8003640 <dir_sdi+0x14>
 80036ae:	0022      	movs	r2, r4
 80036b0:	2780      	movs	r7, #128	; 0x80
		while (idx >= ic) {	/* Follow cluster chain */
 80036b2:	0014      	movs	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80036b4:	4914      	ldr	r1, [pc, #80]	; (8003708 <dir_sdi+0xdc>)
 80036b6:	4815      	ldr	r0, [pc, #84]	; (800370c <dir_sdi+0xe0>)
 80036b8:	5a59      	ldrh	r1, [r3, r1]
 80036ba:	5c1b      	ldrb	r3, [r3, r0]
 80036bc:	0949      	lsrs	r1, r1, #5
 80036be:	434b      	muls	r3, r1
 80036c0:	00ff      	lsls	r7, r7, #3
 80036c2:	9300      	str	r3, [sp, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80036c4:	9b00      	ldr	r3, [sp, #0]
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80036c6:	0021      	movs	r1, r4
 80036c8:	59e8      	ldr	r0, [r5, r7]
		while (idx >= ic) {	/* Follow cluster chain */
 80036ca:	429e      	cmp	r6, r3
 80036cc:	d203      	bcs.n	80036d6 <dir_sdi+0xaa>
		sect = clust2sect(dp->fs, clst);
 80036ce:	f7ff ff0d 	bl	80034ec <clust2sect>
 80036d2:	0007      	movs	r7, r0
 80036d4:	e7cd      	b.n	8003672 <dir_sdi+0x46>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80036d6:	f7ff ff1d 	bl	8003514 <get_fat>
 80036da:	0004      	movs	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80036dc:	1c43      	adds	r3, r0, #1
 80036de:	d009      	beq.n	80036f4 <dir_sdi+0xc8>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80036e0:	2801      	cmp	r0, #1
 80036e2:	d9ac      	bls.n	800363e <dir_sdi+0x12>
 80036e4:	59eb      	ldr	r3, [r5, r7]
 80036e6:	9a01      	ldr	r2, [sp, #4]
 80036e8:	589b      	ldr	r3, [r3, r2]
 80036ea:	4298      	cmp	r0, r3
 80036ec:	d2a7      	bcs.n	800363e <dir_sdi+0x12>
			idx -= ic;
 80036ee:	9b00      	ldr	r3, [sp, #0]
 80036f0:	1af6      	subs	r6, r6, r3
 80036f2:	e7e7      	b.n	80036c4 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80036f4:	2001      	movs	r0, #1
 80036f6:	e7a3      	b.n	8003640 <dir_sdi+0x14>
 80036f8:	00000406 	.word	0x00000406
 80036fc:	00000414 	.word	0x00000414
 8003700:	00000424 	.word	0x00000424
 8003704:	0000040c 	.word	0x0000040c
 8003708:	0000040a 	.word	0x0000040a
 800370c:	00000402 	.word	0x00000402

08003710 <put_fat>:
{
 8003710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003712:	b085      	sub	sp, #20
 8003714:	0004      	movs	r4, r0
 8003716:	000d      	movs	r5, r1
 8003718:	9201      	str	r2, [sp, #4]
		res = FR_INT_ERR;
 800371a:	2602      	movs	r6, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800371c:	2901      	cmp	r1, #1
 800371e:	d955      	bls.n	80037cc <put_fat+0xbc>
 8003720:	4b4f      	ldr	r3, [pc, #316]	; (8003860 <put_fat+0x150>)
 8003722:	58c3      	ldr	r3, [r0, r3]
 8003724:	4299      	cmp	r1, r3
 8003726:	d251      	bcs.n	80037cc <put_fat+0xbc>
		switch (fs->fs_type) {
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	5cc3      	ldrb	r3, [r0, r3]
 800372e:	9302      	str	r3, [sp, #8]
 8003730:	42b3      	cmp	r3, r6
 8003732:	d056      	beq.n	80037e2 <put_fat+0xd2>
 8003734:	2b03      	cmp	r3, #3
 8003736:	d100      	bne.n	800373a <put_fat+0x2a>
 8003738:	e071      	b.n	800381e <put_fat+0x10e>
 800373a:	2b01      	cmp	r3, #1
 800373c:	d146      	bne.n	80037cc <put_fat+0xbc>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800373e:	4b49      	ldr	r3, [pc, #292]	; (8003864 <put_fat+0x154>)
			bc = (UINT)clst; bc += bc / 2;
 8003740:	084f      	lsrs	r7, r1, #1
 8003742:	187f      	adds	r7, r7, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003744:	5ac1      	ldrh	r1, [r0, r3]
 8003746:	0038      	movs	r0, r7
 8003748:	f7fc fcfa 	bl	8000140 <__udivsi3>
 800374c:	2384      	movs	r3, #132	; 0x84
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	58e1      	ldr	r1, [r4, r3]
 8003752:	1841      	adds	r1, r0, r1
 8003754:	0020      	movs	r0, r4
 8003756:	f7ff fcd7 	bl	8003108 <move_window>
 800375a:	4b42      	ldr	r3, [pc, #264]	; (8003864 <put_fat+0x154>)
 800375c:	1e06      	subs	r6, r0, #0
 800375e:	9303      	str	r3, [sp, #12]
			if (res != FR_OK) break;
 8003760:	d134      	bne.n	80037cc <put_fat+0xbc>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003762:	1c7b      	adds	r3, r7, #1
 8003764:	9303      	str	r3, [sp, #12]
 8003766:	4b3f      	ldr	r3, [pc, #252]	; (8003864 <put_fat+0x154>)
 8003768:	0038      	movs	r0, r7
 800376a:	5ae6      	ldrh	r6, [r4, r3]
 800376c:	0031      	movs	r1, r6
 800376e:	f7fc fd6d 	bl	800024c <__aeabi_uidivmod>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003772:	466b      	mov	r3, sp
 8003774:	9f02      	ldr	r7, [sp, #8]
 8003776:	791b      	ldrb	r3, [r3, #4]
 8003778:	402f      	ands	r7, r5
 800377a:	d009      	beq.n	8003790 <put_fat+0x80>
 800377c:	220f      	movs	r2, #15
 800377e:	20ff      	movs	r0, #255	; 0xff
 8003780:	5c63      	ldrb	r3, [r4, r1]
 8003782:	0100      	lsls	r0, r0, #4
 8003784:	4013      	ands	r3, r2
 8003786:	9a01      	ldr	r2, [sp, #4]
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	4002      	ands	r2, r0
 800378c:	4313      	orrs	r3, r2
 800378e:	b2db      	uxtb	r3, r3
 8003790:	5463      	strb	r3, [r4, r1]
			fs->wflag = 1;
 8003792:	2301      	movs	r3, #1
 8003794:	4d34      	ldr	r5, [pc, #208]	; (8003868 <put_fat+0x158>)
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003796:	0031      	movs	r1, r6
			fs->wflag = 1;
 8003798:	5563      	strb	r3, [r4, r5]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800379a:	9803      	ldr	r0, [sp, #12]
 800379c:	f7fc fcd0 	bl	8000140 <__udivsi3>
 80037a0:	2384      	movs	r3, #132	; 0x84
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	58e1      	ldr	r1, [r4, r3]
 80037a6:	1841      	adds	r1, r0, r1
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7ff fcad 	bl	8003108 <move_window>
 80037ae:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 80037b0:	d10c      	bne.n	80037cc <put_fat+0xbc>
			p = &fs->win.d8[bc % SS(fs)];
 80037b2:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <put_fat+0x154>)
 80037b4:	9803      	ldr	r0, [sp, #12]
 80037b6:	5ae1      	ldrh	r1, [r4, r3]
 80037b8:	f7fc fd48 	bl	800024c <__aeabi_uidivmod>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80037bc:	2f00      	cmp	r7, #0
 80037be:	d008      	beq.n	80037d2 <put_fat+0xc2>
 80037c0:	9b01      	ldr	r3, [sp, #4]
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	5463      	strb	r3, [r4, r1]
			fs->wflag = 1;
 80037c8:	2301      	movs	r3, #1
 80037ca:	5563      	strb	r3, [r4, r5]
}
 80037cc:	0030      	movs	r0, r6
 80037ce:	b005      	add	sp, #20
 80037d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80037d2:	200f      	movs	r0, #15
 80037d4:	9a01      	ldr	r2, [sp, #4]
 80037d6:	5c63      	ldrb	r3, [r4, r1]
 80037d8:	0a12      	lsrs	r2, r2, #8
 80037da:	4383      	bics	r3, r0
 80037dc:	4002      	ands	r2, r0
 80037de:	4313      	orrs	r3, r2
 80037e0:	e7f1      	b.n	80037c6 <put_fat+0xb6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80037e2:	4f20      	ldr	r7, [pc, #128]	; (8003864 <put_fat+0x154>)
 80037e4:	5bc1      	ldrh	r1, [r0, r7]
 80037e6:	0028      	movs	r0, r5
 80037e8:	0849      	lsrs	r1, r1, #1
 80037ea:	f7fc fca9 	bl	8000140 <__udivsi3>
 80037ee:	2384      	movs	r3, #132	; 0x84
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	58e1      	ldr	r1, [r4, r3]
 80037f4:	1841      	adds	r1, r0, r1
 80037f6:	0020      	movs	r0, r4
 80037f8:	f7ff fc86 	bl	8003108 <move_window>
 80037fc:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 80037fe:	d1e5      	bne.n	80037cc <put_fat+0xbc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003800:	5be1      	ldrh	r1, [r4, r7]
 8003802:	0068      	lsls	r0, r5, #1
 8003804:	f7fc fd22 	bl	800024c <__aeabi_uidivmod>
			ST_WORD(p, (WORD)val);
 8003808:	466b      	mov	r3, sp
 800380a:	791b      	ldrb	r3, [r3, #4]
 800380c:	5463      	strb	r3, [r4, r1]
 800380e:	9b01      	ldr	r3, [sp, #4]
 8003810:	1861      	adds	r1, r4, r1
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	704b      	strb	r3, [r1, #1]
			fs->wflag = 1;
 8003816:	2201      	movs	r2, #1
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <put_fat+0x158>)
 800381a:	54e2      	strb	r2, [r4, r3]
 800381c:	e7d6      	b.n	80037cc <put_fat+0xbc>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800381e:	4f11      	ldr	r7, [pc, #68]	; (8003864 <put_fat+0x154>)
 8003820:	5bc1      	ldrh	r1, [r0, r7]
 8003822:	0028      	movs	r0, r5
 8003824:	0889      	lsrs	r1, r1, #2
 8003826:	f7fc fc8b 	bl	8000140 <__udivsi3>
 800382a:	2384      	movs	r3, #132	; 0x84
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	58e1      	ldr	r1, [r4, r3]
 8003830:	1841      	adds	r1, r0, r1
 8003832:	0020      	movs	r0, r4
 8003834:	f7ff fc68 	bl	8003108 <move_window>
 8003838:	1e06      	subs	r6, r0, #0
			if (res != FR_OK) break;
 800383a:	d1c7      	bne.n	80037cc <put_fat+0xbc>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800383c:	5be1      	ldrh	r1, [r4, r7]
 800383e:	00a8      	lsls	r0, r5, #2
 8003840:	f7fc fd04 	bl	800024c <__aeabi_uidivmod>
 8003844:	1862      	adds	r2, r4, r1
			val |= LD_DWORD(p) & 0xF0000000;
 8003846:	78d3      	ldrb	r3, [r2, #3]
 8003848:	9801      	ldr	r0, [sp, #4]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	071b      	lsls	r3, r3, #28
 800384e:	4303      	orrs	r3, r0
			ST_DWORD(p, val);
 8003850:	5463      	strb	r3, [r4, r1]
 8003852:	0a19      	lsrs	r1, r3, #8
 8003854:	7051      	strb	r1, [r2, #1]
 8003856:	0c19      	lsrs	r1, r3, #16
 8003858:	0e1b      	lsrs	r3, r3, #24
 800385a:	7091      	strb	r1, [r2, #2]
 800385c:	70d3      	strb	r3, [r2, #3]
 800385e:	e7da      	b.n	8003816 <put_fat+0x106>
 8003860:	00000414 	.word	0x00000414
 8003864:	0000040a 	.word	0x0000040a
 8003868:	00000404 	.word	0x00000404

0800386c <create_chain>:
{
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	0005      	movs	r5, r0
 8003870:	1e0f      	subs	r7, r1, #0
	if (clst == 0) {		/* Create a new chain */
 8003872:	d109      	bne.n	8003888 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
 8003874:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <create_chain+0xb4>)
 8003876:	58c6      	ldr	r6, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003878:	2e00      	cmp	r6, #0
 800387a:	d003      	beq.n	8003884 <create_chain+0x18>
 800387c:	4b29      	ldr	r3, [pc, #164]	; (8003924 <create_chain+0xb8>)
 800387e:	58c3      	ldr	r3, [r0, r3]
 8003880:	429e      	cmp	r6, r3
 8003882:	d311      	bcc.n	80038a8 <create_chain+0x3c>
 8003884:	2601      	movs	r6, #1
 8003886:	e00f      	b.n	80038a8 <create_chain+0x3c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003888:	f7ff fe44 	bl	8003514 <get_fat>
 800388c:	0004      	movs	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 800388e:	2801      	cmp	r0, #1
 8003890:	d943      	bls.n	800391a <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003892:	1c43      	adds	r3, r0, #1
 8003894:	d103      	bne.n	800389e <create_chain+0x32>
			ncl = 2;
 8003896:	2401      	movs	r4, #1
 8003898:	4264      	negs	r4, r4
}
 800389a:	0020      	movs	r0, r4
 800389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800389e:	4b21      	ldr	r3, [pc, #132]	; (8003924 <create_chain+0xb8>)
 80038a0:	003e      	movs	r6, r7
 80038a2:	58eb      	ldr	r3, [r5, r3]
 80038a4:	4298      	cmp	r0, r3
 80038a6:	d3f8      	bcc.n	800389a <create_chain+0x2e>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80038a8:	0034      	movs	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80038aa:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <create_chain+0xb8>)
		ncl++;							/* Next cluster */
 80038ac:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80038ae:	58eb      	ldr	r3, [r5, r3]
 80038b0:	429c      	cmp	r4, r3
 80038b2:	d304      	bcc.n	80038be <create_chain+0x52>
			if (ncl > scl) return 0;	/* No free cluster */
 80038b4:	2e01      	cmp	r6, #1
 80038b6:	d801      	bhi.n	80038bc <create_chain+0x50>
 80038b8:	2400      	movs	r4, #0
 80038ba:	e7ee      	b.n	800389a <create_chain+0x2e>
			ncl = 2;
 80038bc:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80038be:	0021      	movs	r1, r4
 80038c0:	0028      	movs	r0, r5
 80038c2:	f7ff fe27 	bl	8003514 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d006      	beq.n	80038d8 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80038ca:	1c43      	adds	r3, r0, #1
 80038cc:	d0e3      	beq.n	8003896 <create_chain+0x2a>
 80038ce:	2801      	cmp	r0, #1
 80038d0:	d023      	beq.n	800391a <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 80038d2:	42b4      	cmp	r4, r6
 80038d4:	d1e9      	bne.n	80038aa <create_chain+0x3e>
 80038d6:	e7ef      	b.n	80038b8 <create_chain+0x4c>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80038d8:	4a13      	ldr	r2, [pc, #76]	; (8003928 <create_chain+0xbc>)
 80038da:	0021      	movs	r1, r4
 80038dc:	0028      	movs	r0, r5
 80038de:	f7ff ff17 	bl	8003710 <put_fat>
	if (res == FR_OK && clst != 0) {
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d117      	bne.n	8003916 <create_chain+0xaa>
 80038e6:	2f00      	cmp	r7, #0
 80038e8:	d10e      	bne.n	8003908 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 80038ea:	2282      	movs	r2, #130	; 0x82
		fs->last_clust = ncl;			/* Update FSINFO */
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <create_chain+0xb4>)
		if (fs->free_clust != 0xFFFFFFFF) {
 80038ee:	00d2      	lsls	r2, r2, #3
		fs->last_clust = ncl;			/* Update FSINFO */
 80038f0:	50ec      	str	r4, [r5, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 80038f2:	58ab      	ldr	r3, [r5, r2]
 80038f4:	1c59      	adds	r1, r3, #1
 80038f6:	d0d0      	beq.n	800389a <create_chain+0x2e>
			fs->free_clust--;
 80038f8:	3b01      	subs	r3, #1
 80038fa:	50ab      	str	r3, [r5, r2]
			fs->fsi_flag |= 1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	4a0b      	ldr	r2, [pc, #44]	; (800392c <create_chain+0xc0>)
 8003900:	5ca9      	ldrb	r1, [r5, r2]
 8003902:	430b      	orrs	r3, r1
 8003904:	54ab      	strb	r3, [r5, r2]
 8003906:	e7c8      	b.n	800389a <create_chain+0x2e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003908:	0022      	movs	r2, r4
 800390a:	0039      	movs	r1, r7
 800390c:	0028      	movs	r0, r5
 800390e:	f7ff feff 	bl	8003710 <put_fat>
	if (res == FR_OK) {
 8003912:	2800      	cmp	r0, #0
 8003914:	d0e9      	beq.n	80038ea <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003916:	2801      	cmp	r0, #1
 8003918:	d0bd      	beq.n	8003896 <create_chain+0x2a>
 800391a:	2401      	movs	r4, #1
 800391c:	e7bd      	b.n	800389a <create_chain+0x2e>
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	0000040c 	.word	0x0000040c
 8003924:	00000414 	.word	0x00000414
 8003928:	0fffffff 	.word	0x0fffffff
 800392c:	00000405 	.word	0x00000405

08003930 <dir_next>:
{
 8003930:	b5f0      	push	{r4, r5, r6, r7, lr}
	i = dp->index + 1;
 8003932:	4b55      	ldr	r3, [pc, #340]	; (8003a88 <dir_next+0x158>)
{
 8003934:	b089      	sub	sp, #36	; 0x24
 8003936:	9105      	str	r1, [sp, #20]
	i = dp->index + 1;
 8003938:	5ac2      	ldrh	r2, [r0, r3]
{
 800393a:	0004      	movs	r4, r0
	i = dp->index + 1;
 800393c:	3201      	adds	r2, #1
 800393e:	9200      	str	r2, [sp, #0]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003940:	466a      	mov	r2, sp
 8003942:	8812      	ldrh	r2, [r2, #0]
 8003944:	9306      	str	r3, [sp, #24]
 8003946:	2a00      	cmp	r2, #0
 8003948:	d102      	bne.n	8003950 <dir_next+0x20>
		return FR_NO_FILE;
 800394a:	2004      	movs	r0, #4
}
 800394c:	b009      	add	sp, #36	; 0x24
 800394e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003950:	2682      	movs	r6, #130	; 0x82
 8003952:	00f6      	lsls	r6, r6, #3
 8003954:	5985      	ldr	r5, [r0, r6]
 8003956:	2d00      	cmp	r5, #0
 8003958:	d0f7      	beq.n	800394a <dir_next+0x1a>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	58c3      	ldr	r3, [r0, r3]
 8003960:	4f4a      	ldr	r7, [pc, #296]	; (8003a8c <dir_next+0x15c>)
 8003962:	9302      	str	r3, [sp, #8]
 8003964:	5bdb      	ldrh	r3, [r3, r7]
 8003966:	9800      	ldr	r0, [sp, #0]
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	0019      	movs	r1, r3
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	f7fc fc6d 	bl	800024c <__aeabi_uidivmod>
 8003972:	9703      	str	r7, [sp, #12]
 8003974:	2900      	cmp	r1, #0
 8003976:	d10c      	bne.n	8003992 <dir_next+0x62>
		if (!dp->clust) {		/* Static table */
 8003978:	4b45      	ldr	r3, [pc, #276]	; (8003a90 <dir_next+0x160>)
		dp->sect++;					/* Next sector */
 800397a:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 800397c:	58e7      	ldr	r7, [r4, r3]
		dp->sect++;					/* Next sector */
 800397e:	51a5      	str	r5, [r4, r6]
 8003980:	9304      	str	r3, [sp, #16]
		if (!dp->clust) {		/* Static table */
 8003982:	2f00      	cmp	r7, #0
 8003984:	d118      	bne.n	80039b8 <dir_next+0x88>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003986:	9a02      	ldr	r2, [sp, #8]
 8003988:	3b04      	subs	r3, #4
 800398a:	5ad3      	ldrh	r3, [r2, r3]
 800398c:	9a00      	ldr	r2, [sp, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d2db      	bcs.n	800394a <dir_next+0x1a>
	dp->index = (WORD)i;	/* Current index */
 8003992:	466a      	mov	r2, sp
 8003994:	9b06      	ldr	r3, [sp, #24]
 8003996:	8812      	ldrh	r2, [r2, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003998:	9800      	ldr	r0, [sp, #0]
	dp->index = (WORD)i;	/* Current index */
 800399a:	52e2      	strh	r2, [r4, r3]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	58e5      	ldr	r5, [r4, r3]
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	5ae9      	ldrh	r1, [r5, r3]
 80039a6:	0949      	lsrs	r1, r1, #5
 80039a8:	f7fc fc50 	bl	800024c <__aeabi_uidivmod>
 80039ac:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <dir_next+0x164>)
 80039ae:	0149      	lsls	r1, r1, #5
 80039b0:	186d      	adds	r5, r5, r1
 80039b2:	50e5      	str	r5, [r4, r3]
	return FR_OK;
 80039b4:	2000      	movs	r0, #0
 80039b6:	e7c9      	b.n	800394c <dir_next+0x1c>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80039b8:	4e37      	ldr	r6, [pc, #220]	; (8003a98 <dir_next+0x168>)
 80039ba:	9b02      	ldr	r3, [sp, #8]
 80039bc:	9901      	ldr	r1, [sp, #4]
 80039be:	9800      	ldr	r0, [sp, #0]
 80039c0:	5d9d      	ldrb	r5, [r3, r6]
 80039c2:	f7fc fbbd 	bl	8000140 <__udivsi3>
 80039c6:	3d01      	subs	r5, #1
 80039c8:	4028      	ands	r0, r5
 80039ca:	9001      	str	r0, [sp, #4]
 80039cc:	9607      	str	r6, [sp, #28]
 80039ce:	d1e0      	bne.n	8003992 <dir_next+0x62>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80039d0:	0039      	movs	r1, r7
 80039d2:	9802      	ldr	r0, [sp, #8]
 80039d4:	f7ff fd9e 	bl	8003514 <get_fat>
 80039d8:	0006      	movs	r6, r0
				if (clst <= 1) return FR_INT_ERR;
 80039da:	2801      	cmp	r0, #1
 80039dc:	d801      	bhi.n	80039e2 <dir_next+0xb2>
 80039de:	2002      	movs	r0, #2
 80039e0:	e7b4      	b.n	800394c <dir_next+0x1c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80039e2:	1c43      	adds	r3, r0, #1
 80039e4:	d101      	bne.n	80039ea <dir_next+0xba>
 80039e6:	2001      	movs	r0, #1
 80039e8:	e7b0      	b.n	800394c <dir_next+0x1c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	58e0      	ldr	r0, [r4, r3]
 80039f0:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <dir_next+0x164>)
 80039f2:	58c3      	ldr	r3, [r0, r3]
 80039f4:	429e      	cmp	r6, r3
 80039f6:	d32c      	bcc.n	8003a52 <dir_next+0x122>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80039f8:	9b05      	ldr	r3, [sp, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0a5      	beq.n	800394a <dir_next+0x1a>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80039fe:	9b04      	ldr	r3, [sp, #16]
 8003a00:	58e1      	ldr	r1, [r4, r3]
 8003a02:	f7ff ff33 	bl	800386c <create_chain>
 8003a06:	0006      	movs	r6, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003a08:	2007      	movs	r0, #7
 8003a0a:	2e00      	cmp	r6, #0
 8003a0c:	d09e      	beq.n	800394c <dir_next+0x1c>
					if (clst == 1) return FR_INT_ERR;
 8003a0e:	2e01      	cmp	r6, #1
 8003a10:	d0e5      	beq.n	80039de <dir_next+0xae>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003a12:	1c73      	adds	r3, r6, #1
 8003a14:	d0e7      	beq.n	80039e6 <dir_next+0xb6>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003a16:	2580      	movs	r5, #128	; 0x80
 8003a18:	00ed      	lsls	r5, r5, #3
 8003a1a:	5960      	ldr	r0, [r4, r5]
 8003a1c:	f7ff faf2 	bl	8003004 <sync_window>
 8003a20:	1e01      	subs	r1, r0, #0
 8003a22:	d1e0      	bne.n	80039e6 <dir_next+0xb6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003a24:	5963      	ldr	r3, [r4, r5]
 8003a26:	9a03      	ldr	r2, [sp, #12]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	5a9a      	ldrh	r2, [r3, r2]
 8003a2c:	f7ff f921 	bl	8002c72 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003a30:	5967      	ldr	r7, [r4, r5]
 8003a32:	0031      	movs	r1, r6
 8003a34:	0038      	movs	r0, r7
 8003a36:	f7ff fd59 	bl	80034ec <clust2sect>
 8003a3a:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <dir_next+0x16c>)
 8003a3c:	50f8      	str	r0, [r7, r3]
 8003a3e:	001f      	movs	r7, r3
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003a40:	5960      	ldr	r0, [r4, r5]
 8003a42:	9b07      	ldr	r3, [sp, #28]
 8003a44:	9a01      	ldr	r2, [sp, #4]
 8003a46:	5cc3      	ldrb	r3, [r0, r3]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d30e      	bcc.n	8003a6a <dir_next+0x13a>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003a4c:	59c3      	ldr	r3, [r0, r7]
 8003a4e:	1a9d      	subs	r5, r3, r2
 8003a50:	51c5      	str	r5, [r0, r7]
				dp->clust = clst;				/* Initialize data for new cluster */
 8003a52:	9b04      	ldr	r3, [sp, #16]
				dp->sect = clust2sect(dp->fs, clst);
 8003a54:	0031      	movs	r1, r6
				dp->clust = clst;				/* Initialize data for new cluster */
 8003a56:	50e6      	str	r6, [r4, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	58e0      	ldr	r0, [r4, r3]
 8003a5e:	f7ff fd45 	bl	80034ec <clust2sect>
 8003a62:	2382      	movs	r3, #130	; 0x82
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	50e0      	str	r0, [r4, r3]
 8003a68:	e793      	b.n	8003992 <dir_next+0x62>
						dp->fs->wflag = 1;
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <dir_next+0x170>)
 8003a6e:	54c2      	strb	r2, [r0, r3]
 8003a70:	f7ff fa96 	bl	8002fa0 <sync_window.part.1>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d1b6      	bne.n	80039e6 <dir_next+0xb6>
						dp->fs->winsect++;
 8003a78:	5962      	ldr	r2, [r4, r5]
 8003a7a:	59d3      	ldr	r3, [r2, r7]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	51d3      	str	r3, [r2, r7]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003a80:	9b01      	ldr	r3, [sp, #4]
 8003a82:	3301      	adds	r3, #1
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	e7db      	b.n	8003a40 <dir_next+0x110>
 8003a88:	00000406 	.word	0x00000406
 8003a8c:	0000040a 	.word	0x0000040a
 8003a90:	0000040c 	.word	0x0000040c
 8003a94:	00000414 	.word	0x00000414
 8003a98:	00000402 	.word	0x00000402
 8003a9c:	0000042c 	.word	0x0000042c
 8003aa0:	00000404 	.word	0x00000404

08003aa4 <dir_find.part.6>:
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	4b50      	ldr	r3, [pc, #320]	; (8003be8 <dir_find.part.6+0x144>)
 8003aa8:	4252      	negs	r2, r2
FRESULT dir_find (
 8003aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003aac:	52c2      	strh	r2, [r0, r3]
 8003aae:	3201      	adds	r2, #1
 8003ab0:	32ff      	adds	r2, #255	; 0xff
FRESULT dir_find (
 8003ab2:	0005      	movs	r5, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003ab4:	0014      	movs	r4, r2
FRESULT dir_find (
 8003ab6:	b087      	sub	sp, #28
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003ab8:	9202      	str	r2, [sp, #8]
 8003aba:	9303      	str	r3, [sp, #12]
		res = move_window(dp->fs, dp->sect);
 8003abc:	2382      	movs	r3, #130	; 0x82
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	58e9      	ldr	r1, [r5, r3]
 8003ac2:	3b10      	subs	r3, #16
 8003ac4:	58e8      	ldr	r0, [r5, r3]
 8003ac6:	f7ff fb1f 	bl	8003108 <move_window>
 8003aca:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
 8003acc:	d000      	beq.n	8003ad0 <dir_find.part.6+0x2c>
 8003ace:	e085      	b.n	8003bdc <dir_find.part.6+0x138>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003ad0:	4b46      	ldr	r3, [pc, #280]	; (8003bec <dir_find.part.6+0x148>)
 8003ad2:	58ee      	ldr	r6, [r5, r3]
		c = dir[DIR_Name];
 8003ad4:	7833      	ldrb	r3, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d100      	bne.n	8003adc <dir_find.part.6+0x38>
 8003ada:	e082      	b.n	8003be2 <dir_find.part.6+0x13e>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003adc:	2be5      	cmp	r3, #229	; 0xe5
 8003ade:	d006      	beq.n	8003aee <dir_find.part.6+0x4a>
		a = dir[DIR_Attr] & AM_MASK;
 8003ae0:	223f      	movs	r2, #63	; 0x3f
 8003ae2:	7af1      	ldrb	r1, [r6, #11]
 8003ae4:	400a      	ands	r2, r1
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003ae6:	0709      	lsls	r1, r1, #28
 8003ae8:	d506      	bpl.n	8003af8 <dir_find.part.6+0x54>
 8003aea:	2a0f      	cmp	r2, #15
 8003aec:	d006      	beq.n	8003afc <dir_find.part.6+0x58>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003aee:	2301      	movs	r3, #1
 8003af0:	9a03      	ldr	r2, [sp, #12]
 8003af2:	425b      	negs	r3, r3
 8003af4:	52ab      	strh	r3, [r5, r2]
 8003af6:	e04e      	b.n	8003b96 <dir_find.part.6+0xf2>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003af8:	2a0f      	cmp	r2, #15
 8003afa:	d158      	bne.n	8003bae <dir_find.part.6+0x10a>
				if (dp->lfn) {
 8003afc:	2284      	movs	r2, #132	; 0x84
 8003afe:	00d2      	lsls	r2, r2, #3
 8003b00:	58aa      	ldr	r2, [r5, r2]
 8003b02:	9201      	str	r2, [sp, #4]
 8003b04:	2a00      	cmp	r2, #0
 8003b06:	d047      	beq.n	8003b98 <dir_find.part.6+0xf4>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003b08:	2240      	movs	r2, #64	; 0x40
 8003b0a:	4213      	tst	r3, r2
 8003b0c:	d041      	beq.n	8003b92 <dir_find.part.6+0xee>
						c &= ~LLEF; ord = c;	/* LFN start order */
 8003b0e:	4393      	bics	r3, r2
 8003b10:	001c      	movs	r4, r3
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003b12:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <dir_find.part.6+0x14c>)
						sum = dir[LDIR_Chksum];
 8003b14:	7b71      	ldrb	r1, [r6, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003b16:	5aeb      	ldrh	r3, [r5, r3]
 8003b18:	9a03      	ldr	r2, [sp, #12]
						sum = dir[LDIR_Chksum];
 8003b1a:	9102      	str	r1, [sp, #8]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003b1c:	52ab      	strh	r3, [r5, r2]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003b1e:	7b73      	ldrb	r3, [r6, #13]
 8003b20:	9a02      	ldr	r2, [sp, #8]
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d137      	bne.n	8003b96 <dir_find.part.6+0xf2>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	270d      	movs	r7, #13
 8003b2a:	7833      	ldrb	r3, [r6, #0]
 8003b2c:	4393      	bics	r3, r2
 8003b2e:	3b01      	subs	r3, #1
	s = 0; wc = 1;
 8003b30:	2200      	movs	r2, #0
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003b32:	435f      	muls	r7, r3
	s = 0; wc = 1;
 8003b34:	2301      	movs	r3, #1
 8003b36:	9200      	str	r2, [sp, #0]
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003b38:	4a2e      	ldr	r2, [pc, #184]	; (8003bf4 <dir_find.part.6+0x150>)
 8003b3a:	9900      	ldr	r1, [sp, #0]
 8003b3c:	5c89      	ldrb	r1, [r1, r2]
 8003b3e:	1872      	adds	r2, r6, r1
 8003b40:	7852      	ldrb	r2, [r2, #1]
 8003b42:	5c70      	ldrb	r0, [r6, r1]
 8003b44:	0212      	lsls	r2, r2, #8
 8003b46:	4310      	orrs	r0, r2
		if (wc) {	/* Last character has not been processed */
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d02c      	beq.n	8003ba6 <dir_find.part.6+0x102>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003b4c:	f001 fa1c 	bl	8004f88 <ff_wtoupper>
 8003b50:	9005      	str	r0, [sp, #20]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003b52:	2ffe      	cmp	r7, #254	; 0xfe
 8003b54:	d81f      	bhi.n	8003b96 <dir_find.part.6+0xf2>
 8003b56:	1c7b      	adds	r3, r7, #1
 8003b58:	9304      	str	r3, [sp, #16]
 8003b5a:	9b01      	ldr	r3, [sp, #4]
 8003b5c:	007f      	lsls	r7, r7, #1
 8003b5e:	5af8      	ldrh	r0, [r7, r3]
 8003b60:	f001 fa12 	bl	8004f88 <ff_wtoupper>
 8003b64:	9a05      	ldr	r2, [sp, #20]
 8003b66:	0003      	movs	r3, r0
 8003b68:	4282      	cmp	r2, r0
 8003b6a:	d114      	bne.n	8003b96 <dir_find.part.6+0xf2>
 8003b6c:	9f04      	ldr	r7, [sp, #16]
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8003b6e:	9a00      	ldr	r2, [sp, #0]
 8003b70:	3201      	adds	r2, #1
 8003b72:	9200      	str	r2, [sp, #0]
 8003b74:	2a0d      	cmp	r2, #13
 8003b76:	d1df      	bne.n	8003b38 <dir_find.part.6+0x94>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8003b78:	7832      	ldrb	r2, [r6, #0]
 8003b7a:	0652      	lsls	r2, r2, #25
 8003b7c:	d506      	bpl.n	8003b8c <dir_find.part.6+0xe8>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <dir_find.part.6+0xe8>
 8003b82:	9a01      	ldr	r2, [sp, #4]
 8003b84:	007b      	lsls	r3, r7, #1
 8003b86:	5a9b      	ldrh	r3, [r3, r2]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d104      	bne.n	8003b96 <dir_find.part.6+0xf2>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003b8c:	3c01      	subs	r4, #1
 8003b8e:	b2e4      	uxtb	r4, r4
 8003b90:	e002      	b.n	8003b98 <dir_find.part.6+0xf4>
 8003b92:	42a3      	cmp	r3, r4
 8003b94:	d0c3      	beq.n	8003b1e <dir_find.part.6+0x7a>
 8003b96:	24ff      	movs	r4, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8003b98:	2100      	movs	r1, #0
 8003b9a:	0028      	movs	r0, r5
 8003b9c:	f7ff fec8 	bl	8003930 <dir_next>
 8003ba0:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
 8003ba2:	d08b      	beq.n	8003abc <dir_find.part.6+0x18>
 8003ba4:	e01a      	b.n	8003bdc <dir_find.part.6+0x138>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003ba6:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <dir_find.part.6+0x154>)
 8003ba8:	4290      	cmp	r0, r2
 8003baa:	d0e0      	beq.n	8003b6e <dir_find.part.6+0xca>
 8003bac:	e7f3      	b.n	8003b96 <dir_find.part.6+0xf2>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003bae:	2c00      	cmp	r4, #0
 8003bb0:	d105      	bne.n	8003bbe <dir_find.part.6+0x11a>
 8003bb2:	0030      	movs	r0, r6
 8003bb4:	f7ff f928 	bl	8002e08 <sum_sfn>
 8003bb8:	9b02      	ldr	r3, [sp, #8]
 8003bba:	4298      	cmp	r0, r3
 8003bbc:	d00e      	beq.n	8003bdc <dir_find.part.6+0x138>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8003bbe:	2383      	movs	r3, #131	; 0x83
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	58ea      	ldr	r2, [r5, r3]
 8003bc6:	7ad3      	ldrb	r3, [r2, #11]
 8003bc8:	400b      	ands	r3, r1
 8003bca:	d190      	bne.n	8003aee <dir_find.part.6+0x4a>
 8003bcc:	1c58      	adds	r0, r3, #1
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003bce:	5cf1      	ldrb	r1, [r6, r3]
 8003bd0:	5cd3      	ldrb	r3, [r2, r3]
 8003bd2:	4299      	cmp	r1, r3
 8003bd4:	d18b      	bne.n	8003aee <dir_find.part.6+0x4a>
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	280b      	cmp	r0, #11
 8003bda:	d1f7      	bne.n	8003bcc <dir_find.part.6+0x128>
}
 8003bdc:	0038      	movs	r0, r7
 8003bde:	b007      	add	sp, #28
 8003be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003be2:	2704      	movs	r7, #4
 8003be4:	e7fa      	b.n	8003bdc <dir_find.part.6+0x138>
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	00000424 	.word	0x00000424
 8003bec:	00000414 	.word	0x00000414
 8003bf0:	00000406 	.word	0x00000406
 8003bf4:	080067a8 	.word	0x080067a8
 8003bf8:	0000ffff 	.word	0x0000ffff

08003bfc <follow_path>:
{
 8003bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003bfe:	780b      	ldrb	r3, [r1, #0]
{
 8003c00:	b087      	sub	sp, #28
 8003c02:	0006      	movs	r6, r0
 8003c04:	9101      	str	r1, [sp, #4]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003c06:	2b2f      	cmp	r3, #47	; 0x2f
 8003c08:	d001      	beq.n	8003c0e <follow_path+0x12>
 8003c0a:	2b5c      	cmp	r3, #92	; 0x5c
 8003c0c:	d102      	bne.n	8003c14 <follow_path+0x18>
		path++;
 8003c0e:	9b01      	ldr	r3, [sp, #4]
 8003c10:	3301      	adds	r3, #1
 8003c12:	9301      	str	r3, [sp, #4]
	dp->sclust = 0;							/* Always start from the root directory */
 8003c14:	2381      	movs	r3, #129	; 0x81
 8003c16:	2400      	movs	r4, #0
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	50f4      	str	r4, [r6, r3]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003c1c:	9b01      	ldr	r3, [sp, #4]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b1f      	cmp	r3, #31
 8003c22:	d80a      	bhi.n	8003c3a <follow_path+0x3e>
		res = dir_sdi(dp, 0);
 8003c24:	0021      	movs	r1, r4
 8003c26:	0030      	movs	r0, r6
 8003c28:	f7ff fd00 	bl	800362c <dir_sdi>
		dp->dir = 0;
 8003c2c:	4b98      	ldr	r3, [pc, #608]	; (8003e90 <follow_path+0x294>)
 8003c2e:	50f4      	str	r4, [r6, r3]
}
 8003c30:	b007      	add	sp, #28
 8003c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8003c34:	9b01      	ldr	r3, [sp, #4]
 8003c36:	3301      	adds	r3, #1
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	9b01      	ldr	r3, [sp, #4]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b2f      	cmp	r3, #47	; 0x2f
 8003c40:	d0f8      	beq.n	8003c34 <follow_path+0x38>
 8003c42:	2b5c      	cmp	r3, #92	; 0x5c
 8003c44:	d0f6      	beq.n	8003c34 <follow_path+0x38>
	lfn = dp->lfn;
 8003c46:	2384      	movs	r3, #132	; 0x84
 8003c48:	2400      	movs	r4, #0
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	58f3      	ldr	r3, [r6, r3]
 8003c4e:	9305      	str	r3, [sp, #20]
		w = p[si++];					/* Get a character */
 8003c50:	9b01      	ldr	r3, [sp, #4]
 8003c52:	0027      	movs	r7, r4
 8003c54:	5d18      	ldrb	r0, [r3, r4]
 8003c56:	1c65      	adds	r5, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8003c58:	281f      	cmp	r0, #31
 8003c5a:	d91b      	bls.n	8003c94 <follow_path+0x98>
 8003c5c:	282f      	cmp	r0, #47	; 0x2f
 8003c5e:	d019      	beq.n	8003c94 <follow_path+0x98>
 8003c60:	285c      	cmp	r0, #92	; 0x5c
 8003c62:	d017      	beq.n	8003c94 <follow_path+0x98>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8003c64:	2cff      	cmp	r4, #255	; 0xff
 8003c66:	d00e      	beq.n	8003c86 <follow_path+0x8a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003c68:	2101      	movs	r1, #1
 8003c6a:	f001 f96f 	bl	8004f4c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d009      	beq.n	8003c86 <follow_path+0x8a>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8003c72:	287f      	cmp	r0, #127	; 0x7f
 8003c74:	d809      	bhi.n	8003c8a <follow_path+0x8e>
 8003c76:	2300      	movs	r3, #0
	while (*str && *str != chr) str++;
 8003c78:	4986      	ldr	r1, [pc, #536]	; (8003e94 <follow_path+0x298>)
 8003c7a:	5cca      	ldrb	r2, [r1, r3]
 8003c7c:	2a00      	cmp	r2, #0
 8003c7e:	d004      	beq.n	8003c8a <follow_path+0x8e>
 8003c80:	3301      	adds	r3, #1
 8003c82:	4282      	cmp	r2, r0
 8003c84:	d1f9      	bne.n	8003c7a <follow_path+0x7e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003c86:	2006      	movs	r0, #6
 8003c88:	e7d2      	b.n	8003c30 <follow_path+0x34>
		lfn[di++] = w;					/* Store the Unicode character */
 8003c8a:	9b05      	ldr	r3, [sp, #20]
 8003c8c:	0064      	lsls	r4, r4, #1
 8003c8e:	5318      	strh	r0, [r3, r4]
 8003c90:	002c      	movs	r4, r5
 8003c92:	e7dd      	b.n	8003c50 <follow_path+0x54>
	*path = &p[si];						/* Return pointer to the next segment */
 8003c94:	9b01      	ldr	r3, [sp, #4]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003c96:	2400      	movs	r4, #0
	*path = &p[si];						/* Return pointer to the next segment */
 8003c98:	195b      	adds	r3, r3, r5
 8003c9a:	9301      	str	r3, [sp, #4]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003c9c:	231f      	movs	r3, #31
 8003c9e:	4283      	cmp	r3, r0
 8003ca0:	4164      	adcs	r4, r4
 8003ca2:	00a4      	lsls	r4, r4, #2
	while (di) {						/* Strip trailing spaces and dots */
 8003ca4:	2f00      	cmp	r7, #0
 8003ca6:	d0ee      	beq.n	8003c86 <follow_path+0x8a>
 8003ca8:	9a05      	ldr	r2, [sp, #20]
 8003caa:	007b      	lsls	r3, r7, #1
 8003cac:	18d3      	adds	r3, r2, r3
		w = lfn[di - 1];
 8003cae:	1e9a      	subs	r2, r3, #2
 8003cb0:	8812      	ldrh	r2, [r2, #0]
		if (w != ' ' && w != '.') break;
 8003cb2:	2a20      	cmp	r2, #32
 8003cb4:	d002      	beq.n	8003cbc <follow_path+0xc0>
 8003cb6:	2a2e      	cmp	r2, #46	; 0x2e
 8003cb8:	d000      	beq.n	8003cbc <follow_path+0xc0>
 8003cba:	e086      	b.n	8003dca <follow_path+0x1ce>
		di--;
 8003cbc:	3f01      	subs	r7, #1
 8003cbe:	e7f1      	b.n	8003ca4 <follow_path+0xa8>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	9905      	ldr	r1, [sp, #20]
 8003cc4:	005a      	lsls	r2, r3, #1
 8003cc6:	5a8a      	ldrh	r2, [r1, r2]
 8003cc8:	2a20      	cmp	r2, #32
 8003cca:	d0f9      	beq.n	8003cc0 <follow_path+0xc4>
 8003ccc:	2a2e      	cmp	r2, #46	; 0x2e
 8003cce:	d0f7      	beq.n	8003cc0 <follow_path+0xc4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <follow_path+0xde>
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	4314      	orrs	r4, r2
 8003cd8:	b2e4      	uxtb	r4, r4
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003cda:	007a      	lsls	r2, r7, #1
 8003cdc:	9905      	ldr	r1, [sp, #20]
 8003cde:	3a02      	subs	r2, #2
 8003ce0:	5a8a      	ldrh	r2, [r1, r2]
 8003ce2:	2a2e      	cmp	r2, #46	; 0x2e
 8003ce4:	d002      	beq.n	8003cec <follow_path+0xf0>
 8003ce6:	3f01      	subs	r7, #1
 8003ce8:	2f00      	cmp	r7, #0
 8003cea:	d1f6      	bne.n	8003cda <follow_path+0xde>
		dp->fn[i++] = (BYTE)w;
 8003cec:	2208      	movs	r2, #8
 8003cee:	9202      	str	r2, [sp, #8]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	0015      	movs	r5, r2
 8003cf4:	9204      	str	r2, [sp, #16]
		w = lfn[si++];					/* Get an LFN character */
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	9203      	str	r2, [sp, #12]
 8003cfa:	9a05      	ldr	r2, [sp, #20]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d079      	beq.n	8003df8 <follow_path+0x1fc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003d04:	2820      	cmp	r0, #32
 8003d06:	d004      	beq.n	8003d12 <follow_path+0x116>
 8003d08:	282e      	cmp	r0, #46	; 0x2e
 8003d0a:	d107      	bne.n	8003d1c <follow_path+0x120>
 8003d0c:	9b03      	ldr	r3, [sp, #12]
 8003d0e:	42bb      	cmp	r3, r7
 8003d10:	d066      	beq.n	8003de0 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
 8003d12:	2303      	movs	r3, #3
 8003d14:	431c      	orrs	r4, r3
 8003d16:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)w;
 8003d18:	9b03      	ldr	r3, [sp, #12]
 8003d1a:	e7ec      	b.n	8003cf6 <follow_path+0xfa>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003d1c:	9b04      	ldr	r3, [sp, #16]
 8003d1e:	9a02      	ldr	r2, [sp, #8]
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d261      	bcs.n	8003de8 <follow_path+0x1ec>
 8003d24:	9b03      	ldr	r3, [sp, #12]
 8003d26:	42bb      	cmp	r3, r7
 8003d28:	d114      	bne.n	8003d54 <follow_path+0x158>
			if (ni == 11) {				/* Long extension */
 8003d2a:	9b02      	ldr	r3, [sp, #8]
 8003d2c:	2b0b      	cmp	r3, #11
 8003d2e:	d109      	bne.n	8003d44 <follow_path+0x148>
 8003d30:	e05d      	b.n	8003dee <follow_path+0x1f2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003d32:	9b03      	ldr	r3, [sp, #12]
 8003d34:	42bb      	cmp	r3, r7
 8003d36:	d005      	beq.n	8003d44 <follow_path+0x148>
 8003d38:	2303      	movs	r3, #3
 8003d3a:	431c      	orrs	r4, r3
			if (si > di) break;			/* No extension */
 8003d3c:	9b03      	ldr	r3, [sp, #12]
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003d3e:	b2e4      	uxtb	r4, r4
			if (si > di) break;			/* No extension */
 8003d40:	42bb      	cmp	r3, r7
 8003d42:	d859      	bhi.n	8003df8 <follow_path+0x1fc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003d44:	230b      	movs	r3, #11
			b <<= 2; continue;
 8003d46:	00ad      	lsls	r5, r5, #2
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003d48:	9302      	str	r3, [sp, #8]
			b <<= 2; continue;
 8003d4a:	b2ed      	uxtb	r5, r5
 8003d4c:	9703      	str	r7, [sp, #12]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003d4e:	3b03      	subs	r3, #3
		dp->fn[i++] = (BYTE)w;
 8003d50:	9304      	str	r3, [sp, #16]
 8003d52:	e7e1      	b.n	8003d18 <follow_path+0x11c>
		if (w >= 0x80) {				/* Non ASCII character */
 8003d54:	287f      	cmp	r0, #127	; 0x7f
 8003d56:	d90f      	bls.n	8003d78 <follow_path+0x17c>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003d58:	2100      	movs	r1, #0
 8003d5a:	f001 f8f7 	bl	8004f4c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003d5e:	2300      	movs	r3, #0
 8003d60:	4298      	cmp	r0, r3
 8003d62:	d003      	beq.n	8003d6c <follow_path+0x170>
 8003d64:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <follow_path+0x29c>)
 8003d66:	1818      	adds	r0, r3, r0
 8003d68:	3880      	subs	r0, #128	; 0x80
 8003d6a:	7803      	ldrb	r3, [r0, #0]
 8003d6c:	b298      	uxth	r0, r3
			cf |= NS_LFN;				/* Force create LFN entry */
 8003d6e:	2302      	movs	r3, #2
 8003d70:	431c      	orrs	r4, r3
 8003d72:	b2e4      	uxtb	r4, r4
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d007      	beq.n	8003d88 <follow_path+0x18c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003d78:	2300      	movs	r3, #0
	while (*str && *str != chr) str++;
 8003d7a:	4948      	ldr	r1, [pc, #288]	; (8003e9c <follow_path+0x2a0>)
 8003d7c:	5cca      	ldrb	r2, [r1, r3]
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	d078      	beq.n	8003e74 <follow_path+0x278>
 8003d82:	3301      	adds	r3, #1
 8003d84:	4282      	cmp	r2, r0
 8003d86:	d1f9      	bne.n	8003d7c <follow_path+0x180>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003d88:	2303      	movs	r3, #3
 8003d8a:	205f      	movs	r0, #95	; 0x5f
 8003d8c:	431c      	orrs	r4, r3
 8003d8e:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)w;
 8003d90:	2383      	movs	r3, #131	; 0x83
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	58f3      	ldr	r3, [r6, r3]
 8003d96:	9a04      	ldr	r2, [sp, #16]
 8003d98:	5498      	strb	r0, [r3, r2]
 8003d9a:	0013      	movs	r3, r2
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	e7d7      	b.n	8003d50 <follow_path+0x154>
					b |= 2;
 8003da0:	2302      	movs	r3, #2
 8003da2:	431d      	orrs	r5, r3
 8003da4:	e7f4      	b.n	8003d90 <follow_path+0x194>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003da6:	075b      	lsls	r3, r3, #29
 8003da8:	d500      	bpl.n	8003dac <follow_path+0x1b0>
 8003daa:	e741      	b.n	8003c30 <follow_path+0x34>
			dir = dp->dir;						/* Follow the sub-directory */
 8003dac:	4b38      	ldr	r3, [pc, #224]	; (8003e90 <follow_path+0x294>)
 8003dae:	58f1      	ldr	r1, [r6, r3]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8003db0:	7acb      	ldrb	r3, [r1, #11]
 8003db2:	06db      	lsls	r3, r3, #27
 8003db4:	d55c      	bpl.n	8003e70 <follow_path+0x274>
			dp->sclust = ld_clust(dp->fs, dir);
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	58f2      	ldr	r2, [r6, r3]
 8003dbc:	5cd0      	ldrb	r0, [r2, r3]
 8003dbe:	f7ff f8df 	bl	8002f80 <ld_clust.isra.0>
 8003dc2:	2381      	movs	r3, #129	; 0x81
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	50f0      	str	r0, [r6, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003dc8:	e737      	b.n	8003c3a <follow_path+0x3e>
	lfn[di] = 0;						/* LFN is created */
 8003dca:	2500      	movs	r5, #0
 8003dcc:	801d      	strh	r5, [r3, #0]
	mem_set(dp->fn, ' ', 11);
 8003dce:	2383      	movs	r3, #131	; 0x83
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	58f0      	ldr	r0, [r6, r3]
 8003dd4:	220b      	movs	r2, #11
 8003dd6:	2120      	movs	r1, #32
 8003dd8:	f7fe ff4b 	bl	8002c72 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003ddc:	002b      	movs	r3, r5
 8003dde:	e770      	b.n	8003cc2 <follow_path+0xc6>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003de0:	9b04      	ldr	r3, [sp, #16]
 8003de2:	9a02      	ldr	r2, [sp, #8]
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d3a0      	bcc.n	8003d2a <follow_path+0x12e>
			if (ni == 11) {				/* Long extension */
 8003de8:	9b02      	ldr	r3, [sp, #8]
 8003dea:	2b0b      	cmp	r3, #11
 8003dec:	d1a1      	bne.n	8003d32 <follow_path+0x136>
				cf |= NS_LOSS | NS_LFN; break;
 8003dee:	2303      	movs	r3, #3
 8003df0:	431c      	orrs	r4, r3
 8003df2:	3308      	adds	r3, #8
 8003df4:	b2e4      	uxtb	r4, r4
 8003df6:	9302      	str	r3, [sp, #8]
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8003df8:	2383      	movs	r3, #131	; 0x83
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	58f3      	ldr	r3, [r6, r3]
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	2ae5      	cmp	r2, #229	; 0xe5
 8003e02:	d101      	bne.n	8003e08 <follow_path+0x20c>
 8003e04:	3ae0      	subs	r2, #224	; 0xe0
 8003e06:	701a      	strb	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 8003e08:	9b02      	ldr	r3, [sp, #8]
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d101      	bne.n	8003e12 <follow_path+0x216>
 8003e0e:	00ad      	lsls	r5, r5, #2
 8003e10:	b2ed      	uxtb	r5, r5
 8003e12:	230c      	movs	r3, #12
 8003e14:	402b      	ands	r3, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d002      	beq.n	8003e20 <follow_path+0x224>
 8003e1a:	43ea      	mvns	r2, r5
 8003e1c:	0792      	lsls	r2, r2, #30
 8003e1e:	d102      	bne.n	8003e26 <follow_path+0x22a>
		cf |= NS_LFN;
 8003e20:	2202      	movs	r2, #2
 8003e22:	4314      	orrs	r4, r2
 8003e24:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003e26:	07a2      	lsls	r2, r4, #30
 8003e28:	d40b      	bmi.n	8003e42 <follow_path+0x246>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	4015      	ands	r5, r2
 8003e2e:	2d01      	cmp	r5, #1
 8003e30:	d102      	bne.n	8003e38 <follow_path+0x23c>
 8003e32:	320d      	adds	r2, #13
 8003e34:	4314      	orrs	r4, r2
 8003e36:	b2e4      	uxtb	r4, r4
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d102      	bne.n	8003e42 <follow_path+0x246>
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	431c      	orrs	r4, r3
 8003e40:	b2e4      	uxtb	r4, r4
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003e42:	2583      	movs	r5, #131	; 0x83
 8003e44:	00ed      	lsls	r5, r5, #3
 8003e46:	5973      	ldr	r3, [r6, r5]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003e48:	2100      	movs	r1, #0
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003e4a:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003e4c:	0030      	movs	r0, r6
 8003e4e:	f7ff fbed 	bl	800362c <dir_sdi>
	if (res != FR_OK) return res;
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d102      	bne.n	8003e5c <follow_path+0x260>
 8003e56:	0030      	movs	r0, r6
 8003e58:	f7ff fe24 	bl	8003aa4 <dir_find.part.6>
			ns = dp->fn[NSFLAG];
 8003e5c:	5973      	ldr	r3, [r6, r5]
 8003e5e:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d0a0      	beq.n	8003da6 <follow_path+0x1aa>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003e64:	2804      	cmp	r0, #4
 8003e66:	d000      	beq.n	8003e6a <follow_path+0x26e>
 8003e68:	e6e2      	b.n	8003c30 <follow_path+0x34>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003e6a:	4203      	tst	r3, r0
 8003e6c:	d000      	beq.n	8003e70 <follow_path+0x274>
 8003e6e:	e6df      	b.n	8003c30 <follow_path+0x34>
 8003e70:	2005      	movs	r0, #5
	return res;
 8003e72:	e6dd      	b.n	8003c30 <follow_path+0x34>
				if (IsUpper(w)) {		/* ASCII large capital */
 8003e74:	0003      	movs	r3, r0
 8003e76:	3b41      	subs	r3, #65	; 0x41
 8003e78:	2b19      	cmp	r3, #25
 8003e7a:	d991      	bls.n	8003da0 <follow_path+0x1a4>
					if (IsLower(w)) {	/* ASCII small capital */
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	3b61      	subs	r3, #97	; 0x61
 8003e80:	2b19      	cmp	r3, #25
 8003e82:	d885      	bhi.n	8003d90 <follow_path+0x194>
						b |= 1; w -= 0x20;
 8003e84:	2301      	movs	r3, #1
 8003e86:	3820      	subs	r0, #32
 8003e88:	431d      	orrs	r5, r3
 8003e8a:	b280      	uxth	r0, r0
 8003e8c:	e780      	b.n	8003d90 <follow_path+0x194>
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	00000414 	.word	0x00000414
 8003e94:	080067b5 	.word	0x080067b5
 8003e98:	08006728 	.word	0x08006728
 8003e9c:	080067be 	.word	0x080067be

08003ea0 <dir_register>:
	fn = dp->fn; lfn = dp->lfn;
 8003ea0:	2383      	movs	r3, #131	; 0x83
{
 8003ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
	fn = dp->fn; lfn = dp->lfn;
 8003ea4:	2484      	movs	r4, #132	; 0x84
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	58c6      	ldr	r6, [r0, r3]
{
 8003eaa:	b08b      	sub	sp, #44	; 0x2c
	fn = dp->fn; lfn = dp->lfn;
 8003eac:	00e4      	lsls	r4, r4, #3
 8003eae:	5903      	ldr	r3, [r0, r4]
	mem_cpy(sn, fn, 12);
 8003eb0:	ad07      	add	r5, sp, #28
{
 8003eb2:	0007      	movs	r7, r0
	mem_cpy(sn, fn, 12);
 8003eb4:	220c      	movs	r2, #12
 8003eb6:	0028      	movs	r0, r5
 8003eb8:	0031      	movs	r1, r6
	fn = dp->fn; lfn = dp->lfn;
 8003eba:	9301      	str	r3, [sp, #4]
	mem_cpy(sn, fn, 12);
 8003ebc:	f7fe fed0 	bl	8002c60 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003ec0:	7aeb      	ldrb	r3, [r5, #11]
 8003ec2:	2501      	movs	r5, #1
 8003ec4:	422b      	tst	r3, r5
 8003ec6:	d100      	bne.n	8003eca <dir_register+0x2a>
 8003ec8:	e077      	b.n	8003fba <dir_register+0x11a>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8003eca:	2300      	movs	r3, #0
 8003ecc:	72f3      	strb	r3, [r6, #11]
 8003ece:	513b      	str	r3, [r7, r4]
	mem_cpy(dst, src, 11);
 8003ed0:	220b      	movs	r2, #11
 8003ed2:	a907      	add	r1, sp, #28
 8003ed4:	0030      	movs	r0, r6
 8003ed6:	f7fe fec3 	bl	8002c60 <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003eda:	002b      	movs	r3, r5
 8003edc:	2d05      	cmp	r5, #5
 8003ede:	d847      	bhi.n	8003f70 <dir_register+0xd0>
		c = (seq % 16) + '0';
 8003ee0:	210f      	movs	r1, #15
		while (*lfn) {	/* Create a CRC */
 8003ee2:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
 8003ee4:	468c      	mov	ip, r1
		ns[i--] = c;
 8003ee6:	a905      	add	r1, sp, #20
		c = (seq % 16) + '0';
 8003ee8:	4664      	mov	r4, ip
 8003eea:	401c      	ands	r4, r3
 8003eec:	0020      	movs	r0, r4
 8003eee:	3030      	adds	r0, #48	; 0x30
		if (c > '9') c += 7;
 8003ef0:	2839      	cmp	r0, #57	; 0x39
 8003ef2:	d900      	bls.n	8003ef6 <dir_register+0x56>
 8003ef4:	3007      	adds	r0, #7
		ns[i--] = c;
 8003ef6:	3a01      	subs	r2, #1
 8003ef8:	188c      	adds	r4, r1, r2
 8003efa:	7060      	strb	r0, [r4, #1]
		seq /= 16;
 8003efc:	091b      	lsrs	r3, r3, #4
	} while (seq);
 8003efe:	d1f3      	bne.n	8003ee8 <dir_register+0x48>
	ns[i] = '~';
 8003f00:	207e      	movs	r0, #126	; 0x7e
 8003f02:	5488      	strb	r0, [r1, r2]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d037      	beq.n	8003f78 <dir_register+0xd8>
 8003f08:	5cf0      	ldrb	r0, [r6, r3]
 8003f0a:	2820      	cmp	r0, #32
 8003f0c:	d132      	bne.n	8003f74 <dir_register+0xd4>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003f0e:	2420      	movs	r4, #32
 8003f10:	0020      	movs	r0, r4
 8003f12:	2a07      	cmp	r2, #7
 8003f14:	d801      	bhi.n	8003f1a <dir_register+0x7a>
 8003f16:	5c88      	ldrb	r0, [r1, r2]
 8003f18:	3201      	adds	r2, #1
 8003f1a:	54f0      	strb	r0, [r6, r3]
 8003f1c:	3301      	adds	r3, #1
	} while (j < 8);
 8003f1e:	2b07      	cmp	r3, #7
 8003f20:	d9f6      	bls.n	8003f10 <dir_register+0x70>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003f22:	2100      	movs	r1, #0
 8003f24:	0038      	movs	r0, r7
 8003f26:	f7ff fb81 	bl	800362c <dir_sdi>
 8003f2a:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) return res;
 8003f2c:	d13c      	bne.n	8003fa8 <dir_register+0x108>
 8003f2e:	0038      	movs	r0, r7
 8003f30:	f7ff fdb8 	bl	8003aa4 <dir_find.part.6>
 8003f34:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
 8003f36:	d137      	bne.n	8003fa8 <dir_register+0x108>
		for (n = 1; n < 100; n++) {
 8003f38:	3501      	adds	r5, #1
 8003f3a:	2d64      	cmp	r5, #100	; 0x64
 8003f3c:	d1c8      	bne.n	8003ed0 <dir_register+0x30>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003f3e:	2407      	movs	r4, #7
}
 8003f40:	0020      	movs	r0, r4
 8003f42:	b00b      	add	sp, #44	; 0x2c
 8003f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
			wc = *lfn++;
 8003f46:	2010      	movs	r0, #16
 8003f48:	3102      	adds	r1, #2
				sr = (sr << 1) + (wc & 1);
 8003f4a:	2401      	movs	r4, #1
 8003f4c:	4014      	ands	r4, r2
 8003f4e:	46a4      	mov	ip, r4
				if (sr & 0x10000) sr ^= 0x11021;
 8003f50:	2480      	movs	r4, #128	; 0x80
				sr = (sr << 1) + (wc & 1);
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	4463      	add	r3, ip
				if (sr & 0x10000) sr ^= 0x11021;
 8003f56:	0264      	lsls	r4, r4, #9
				wc >>= 1;
 8003f58:	0852      	lsrs	r2, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8003f5a:	4223      	tst	r3, r4
 8003f5c:	d001      	beq.n	8003f62 <dir_register+0xc2>
 8003f5e:	4c6b      	ldr	r4, [pc, #428]	; (800410c <dir_register+0x26c>)
 8003f60:	4063      	eors	r3, r4
 8003f62:	3801      	subs	r0, #1
			for (i = 0; i < 16; i++) {
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d1f0      	bne.n	8003f4a <dir_register+0xaa>
		while (*lfn) {	/* Create a CRC */
 8003f68:	880a      	ldrh	r2, [r1, #0]
 8003f6a:	2a00      	cmp	r2, #0
 8003f6c:	d1eb      	bne.n	8003f46 <dir_register+0xa6>
 8003f6e:	e7b7      	b.n	8003ee0 <dir_register+0x40>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003f70:	9901      	ldr	r1, [sp, #4]
 8003f72:	e7f9      	b.n	8003f68 <dir_register+0xc8>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003f74:	3301      	adds	r3, #1
 8003f76:	e7c5      	b.n	8003f04 <dir_register+0x64>
 8003f78:	0013      	movs	r3, r2
 8003f7a:	e7c8      	b.n	8003f0e <dir_register+0x6e>
		for (n = 0; lfn[n]; n++) ;
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	9a01      	ldr	r2, [sp, #4]
 8003f80:	0043      	lsls	r3, r0, #1
 8003f82:	5ad3      	ldrh	r3, [r2, r3]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f9      	bne.n	8003f7c <dir_register+0xdc>
		nent = (n + 25) / 13;
 8003f88:	3019      	adds	r0, #25
 8003f8a:	210d      	movs	r1, #13
 8003f8c:	f7fc f8d8 	bl	8000140 <__udivsi3>
 8003f90:	0005      	movs	r5, r0
 8003f92:	e018      	b.n	8003fc6 <dir_register+0x126>
				n = 0;					/* Not a blank entry. Restart to search */
 8003f94:	0006      	movs	r6, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003f96:	2101      	movs	r1, #1
 8003f98:	0038      	movs	r0, r7
 8003f9a:	f7ff fcc9 	bl	8003930 <dir_next>
 8003f9e:	1e04      	subs	r4, r0, #0
		} while (res == FR_OK);
 8003fa0:	d018      	beq.n	8003fd4 <dir_register+0x134>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003fa2:	2c04      	cmp	r4, #4
 8003fa4:	d0cb      	beq.n	8003f3e <dir_register+0x9e>
 8003fa6:	e7cb      	b.n	8003f40 <dir_register+0xa0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003fa8:	2c04      	cmp	r4, #4
 8003faa:	d1c9      	bne.n	8003f40 <dir_register+0xa0>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8003fac:	ab07      	add	r3, sp, #28
 8003fae:	7adb      	ldrb	r3, [r3, #11]
 8003fb0:	9a01      	ldr	r2, [sp, #4]
 8003fb2:	72f3      	strb	r3, [r6, #11]
 8003fb4:	2384      	movs	r3, #132	; 0x84
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	50fa      	str	r2, [r7, r3]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8003fba:	ab07      	add	r3, sp, #28
 8003fbc:	7adb      	ldrb	r3, [r3, #11]
		nent = 1;
 8003fbe:	2501      	movs	r5, #1
 8003fc0:	2000      	movs	r0, #0
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8003fc2:	079b      	lsls	r3, r3, #30
 8003fc4:	d4db      	bmi.n	8003f7e <dir_register+0xde>
	res = dir_sdi(dp, 0);
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	0038      	movs	r0, r7
 8003fca:	f7ff fb2f 	bl	800362c <dir_sdi>
 8003fce:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 8003fd0:	d1e7      	bne.n	8003fa2 <dir_register+0x102>
 8003fd2:	0006      	movs	r6, r0
			res = move_window(dp->fs, dp->sect);
 8003fd4:	2382      	movs	r3, #130	; 0x82
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	58f9      	ldr	r1, [r7, r3]
 8003fda:	3b10      	subs	r3, #16
 8003fdc:	58f8      	ldr	r0, [r7, r3]
 8003fde:	f7ff f893 	bl	8003108 <move_window>
 8003fe2:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
 8003fe4:	d1dd      	bne.n	8003fa2 <dir_register+0x102>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003fe6:	4a4a      	ldr	r2, [pc, #296]	; (8004110 <dir_register+0x270>)
 8003fe8:	58bb      	ldr	r3, [r7, r2]
 8003fea:	9201      	str	r2, [sp, #4]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2be5      	cmp	r3, #229	; 0xe5
 8003ff0:	d001      	beq.n	8003ff6 <dir_register+0x156>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1ce      	bne.n	8003f94 <dir_register+0xf4>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003ff6:	3601      	adds	r6, #1
 8003ff8:	42b5      	cmp	r5, r6
 8003ffa:	d1cc      	bne.n	8003f96 <dir_register+0xf6>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003ffc:	3d01      	subs	r5, #1
 8003ffe:	2d00      	cmp	r5, #0
 8004000:	d05f      	beq.n	80040c2 <dir_register+0x222>
		res = dir_sdi(dp, dp->index - nent);
 8004002:	4b44      	ldr	r3, [pc, #272]	; (8004114 <dir_register+0x274>)
 8004004:	0038      	movs	r0, r7
 8004006:	5af9      	ldrh	r1, [r7, r3]
 8004008:	1b49      	subs	r1, r1, r5
 800400a:	f7ff fb0f 	bl	800362c <dir_sdi>
 800400e:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 8004010:	d000      	beq.n	8004014 <dir_register+0x174>
 8004012:	e795      	b.n	8003f40 <dir_register+0xa0>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004014:	2383      	movs	r3, #131	; 0x83
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	58f8      	ldr	r0, [r7, r3]
 800401a:	f7fe fef5 	bl	8002e08 <sum_sfn>
 800401e:	9003      	str	r0, [sp, #12]
				res = move_window(dp->fs, dp->sect);
 8004020:	2382      	movs	r3, #130	; 0x82
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	58f9      	ldr	r1, [r7, r3]
 8004026:	3b10      	subs	r3, #16
 8004028:	58f8      	ldr	r0, [r7, r3]
 800402a:	f7ff f86d 	bl	8003108 <move_window>
 800402e:	1e04      	subs	r4, r0, #0
				if (res != FR_OK) break;
 8004030:	d000      	beq.n	8004034 <dir_register+0x194>
 8004032:	e785      	b.n	8003f40 <dir_register+0xa0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004034:	2384      	movs	r3, #132	; 0x84
 8004036:	b2ea      	uxtb	r2, r5
 8004038:	4694      	mov	ip, r2
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800403a:	466a      	mov	r2, sp
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	58fb      	ldr	r3, [r7, r3]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004040:	7b12      	ldrb	r2, [r2, #12]
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004042:	9302      	str	r3, [sp, #8]
 8004044:	9b01      	ldr	r3, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004046:	210d      	movs	r1, #13
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004048:	58fb      	ldr	r3, [r7, r3]
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800404a:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800404c:	220f      	movs	r2, #15
 800404e:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004050:	b2ea      	uxtb	r2, r5
 8004052:	3a01      	subs	r2, #1
 8004054:	434a      	muls	r2, r1
	s = wc = 0;
 8004056:	0001      	movs	r1, r0
	dir[LDIR_Type] = 0;
 8004058:	7318      	strb	r0, [r3, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800405a:	7698      	strb	r0, [r3, #26]
 800405c:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800405e:	4c2e      	ldr	r4, [pc, #184]	; (8004118 <dir_register+0x278>)
 8004060:	42a0      	cmp	r0, r4
 8004062:	d003      	beq.n	800406c <dir_register+0x1cc>
 8004064:	9c02      	ldr	r4, [sp, #8]
 8004066:	0050      	lsls	r0, r2, #1
 8004068:	5b00      	ldrh	r0, [r0, r4]
 800406a:	3201      	adds	r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800406c:	4c2b      	ldr	r4, [pc, #172]	; (800411c <dir_register+0x27c>)
 800406e:	5d0c      	ldrb	r4, [r1, r4]
 8004070:	5518      	strb	r0, [r3, r4]
 8004072:	191c      	adds	r4, r3, r4
 8004074:	0026      	movs	r6, r4
 8004076:	0a04      	lsrs	r4, r0, #8
 8004078:	7074      	strb	r4, [r6, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800407a:	2800      	cmp	r0, #0
 800407c:	d100      	bne.n	8004080 <dir_register+0x1e0>
 800407e:	4826      	ldr	r0, [pc, #152]	; (8004118 <dir_register+0x278>)
	} while (++s < 13);
 8004080:	3101      	adds	r1, #1
 8004082:	290d      	cmp	r1, #13
 8004084:	d1eb      	bne.n	800405e <dir_register+0x1be>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004086:	4924      	ldr	r1, [pc, #144]	; (8004118 <dir_register+0x278>)
 8004088:	4288      	cmp	r0, r1
 800408a:	d004      	beq.n	8004096 <dir_register+0x1f6>
 800408c:	9902      	ldr	r1, [sp, #8]
 800408e:	0052      	lsls	r2, r2, #1
 8004090:	5a52      	ldrh	r2, [r2, r1]
 8004092:	2a00      	cmp	r2, #0
 8004094:	d103      	bne.n	800409e <dir_register+0x1fe>
 8004096:	4661      	mov	r1, ip
 8004098:	2240      	movs	r2, #64	; 0x40
 800409a:	4311      	orrs	r1, r2
 800409c:	468c      	mov	ip, r1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800409e:	4662      	mov	r2, ip
				dp->fs->wflag = 1;
 80040a0:	2180      	movs	r1, #128	; 0x80
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80040a2:	701a      	strb	r2, [r3, #0]
				dp->fs->wflag = 1;
 80040a4:	2201      	movs	r2, #1
 80040a6:	00c9      	lsls	r1, r1, #3
 80040a8:	5879      	ldr	r1, [r7, r1]
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <dir_register+0x280>)
				res = dir_next(dp, 0);	/* Next entry */
 80040ac:	0038      	movs	r0, r7
				dp->fs->wflag = 1;
 80040ae:	54ca      	strb	r2, [r1, r3]
				res = dir_next(dp, 0);	/* Next entry */
 80040b0:	2100      	movs	r1, #0
 80040b2:	f7ff fc3d 	bl	8003930 <dir_next>
 80040b6:	1e04      	subs	r4, r0, #0
			} while (res == FR_OK && --nent);
 80040b8:	d000      	beq.n	80040bc <dir_register+0x21c>
 80040ba:	e741      	b.n	8003f40 <dir_register+0xa0>
 80040bc:	3d01      	subs	r5, #1
 80040be:	2d00      	cmp	r5, #0
 80040c0:	d1ae      	bne.n	8004020 <dir_register+0x180>
		res = move_window(dp->fs, dp->sect);
 80040c2:	2580      	movs	r5, #128	; 0x80
 80040c4:	2382      	movs	r3, #130	; 0x82
 80040c6:	00ed      	lsls	r5, r5, #3
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	58f9      	ldr	r1, [r7, r3]
 80040cc:	5978      	ldr	r0, [r7, r5]
 80040ce:	f7ff f81b 	bl	8003108 <move_window>
 80040d2:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 80040d4:	d000      	beq.n	80040d8 <dir_register+0x238>
 80040d6:	e733      	b.n	8003f40 <dir_register+0xa0>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80040d8:	2683      	movs	r6, #131	; 0x83
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80040da:	9b01      	ldr	r3, [sp, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	58f8      	ldr	r0, [r7, r3]
 80040e0:	0021      	movs	r1, r4
 80040e2:	f7fe fdc6 	bl	8002c72 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80040e6:	9b01      	ldr	r3, [sp, #4]
 80040e8:	00f6      	lsls	r6, r6, #3
 80040ea:	220b      	movs	r2, #11
 80040ec:	59b9      	ldr	r1, [r7, r6]
 80040ee:	58f8      	ldr	r0, [r7, r3]
 80040f0:	f7fe fdb6 	bl	8002c60 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80040f4:	2118      	movs	r1, #24
 80040f6:	9b01      	ldr	r3, [sp, #4]
 80040f8:	58fa      	ldr	r2, [r7, r3]
 80040fa:	59bb      	ldr	r3, [r7, r6]
 80040fc:	7adb      	ldrb	r3, [r3, #11]
 80040fe:	400b      	ands	r3, r1
 8004100:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 8004102:	597a      	ldr	r2, [r7, r5]
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <dir_register+0x280>)
 8004106:	3917      	subs	r1, #23
 8004108:	54d1      	strb	r1, [r2, r3]
 800410a:	e719      	b.n	8003f40 <dir_register+0xa0>
 800410c:	00011021 	.word	0x00011021
 8004110:	00000414 	.word	0x00000414
 8004114:	00000406 	.word	0x00000406
 8004118:	0000ffff 	.word	0x0000ffff
 800411c:	080067a8 	.word	0x080067a8
 8004120:	00000404 	.word	0x00000404

08004124 <remove_chain>:
{
 8004124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004126:	0004      	movs	r4, r0
 8004128:	000d      	movs	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800412a:	2901      	cmp	r1, #1
 800412c:	d801      	bhi.n	8004132 <remove_chain+0xe>
		res = FR_INT_ERR;
 800412e:	2002      	movs	r0, #2
}
 8004130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004132:	4b16      	ldr	r3, [pc, #88]	; (800418c <remove_chain+0x68>)
 8004134:	58c2      	ldr	r2, [r0, r3]
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	4291      	cmp	r1, r2
 800413a:	d2f8      	bcs.n	800412e <remove_chain+0xa>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800413c:	2782      	movs	r7, #130	; 0x82
 800413e:	00ff      	lsls	r7, r7, #3
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004140:	9b01      	ldr	r3, [sp, #4]
 8004142:	58e3      	ldr	r3, [r4, r3]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	429d      	cmp	r5, r3
 8004148:	d205      	bcs.n	8004156 <remove_chain+0x32>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800414a:	0029      	movs	r1, r5
 800414c:	0020      	movs	r0, r4
 800414e:	f7ff f9e1 	bl	8003514 <get_fat>
 8004152:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
 8004154:	d101      	bne.n	800415a <remove_chain+0x36>
		res = FR_INT_ERR;
 8004156:	2000      	movs	r0, #0
 8004158:	e7ea      	b.n	8004130 <remove_chain+0xc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800415a:	2801      	cmp	r0, #1
 800415c:	d0e7      	beq.n	800412e <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800415e:	1c43      	adds	r3, r0, #1
 8004160:	d012      	beq.n	8004188 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004162:	2200      	movs	r2, #0
 8004164:	0029      	movs	r1, r5
 8004166:	0020      	movs	r0, r4
 8004168:	f7ff fad2 	bl	8003710 <put_fat>
			if (res != FR_OK) break;
 800416c:	2800      	cmp	r0, #0
 800416e:	d1df      	bne.n	8004130 <remove_chain+0xc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004170:	59e3      	ldr	r3, [r4, r7]
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	d006      	beq.n	8004184 <remove_chain+0x60>
				fs->fsi_flag |= 1;
 8004176:	2101      	movs	r1, #1
				fs->free_clust++;
 8004178:	3301      	adds	r3, #1
				fs->fsi_flag |= 1;
 800417a:	4a05      	ldr	r2, [pc, #20]	; (8004190 <remove_chain+0x6c>)
				fs->free_clust++;
 800417c:	51e3      	str	r3, [r4, r7]
				fs->fsi_flag |= 1;
 800417e:	5ca3      	ldrb	r3, [r4, r2]
 8004180:	430b      	orrs	r3, r1
 8004182:	54a3      	strb	r3, [r4, r2]
{
 8004184:	0035      	movs	r5, r6
 8004186:	e7db      	b.n	8004140 <remove_chain+0x1c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004188:	2001      	movs	r0, #1
 800418a:	e7d1      	b.n	8004130 <remove_chain+0xc>
 800418c:	00000414 	.word	0x00000414
 8004190:	00000405 	.word	0x00000405

08004194 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004194:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004196:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8004198:	a803      	add	r0, sp, #12
{
 800419a:	0014      	movs	r4, r2
 800419c:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800419e:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80041a0:	f7fe fe40 	bl	8002e24 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80041a4:	220b      	movs	r2, #11
 80041a6:	2800      	cmp	r0, #0
 80041a8:	db24      	blt.n	80041f4 <f_mount+0x60>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80041aa:	4d14      	ldr	r5, [pc, #80]	; (80041fc <f_mount+0x68>)
 80041ac:	0080      	lsls	r0, r0, #2
 80041ae:	5943      	ldr	r3, [r0, r5]

	if (cfs) {
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <f_mount+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80041b4:	4a12      	ldr	r2, [pc, #72]	; (8004200 <f_mount+0x6c>)
 80041b6:	6811      	ldr	r1, [r2, #0]
 80041b8:	428b      	cmp	r3, r1
 80041ba:	d101      	bne.n	80041c0 <f_mount+0x2c>
 80041bc:	2100      	movs	r1, #0
 80041be:	6011      	str	r1, [r2, #0]
 80041c0:	68d6      	ldr	r6, [r2, #12]
 80041c2:	2100      	movs	r1, #0
 80041c4:	42b3      	cmp	r3, r6
 80041c6:	d100      	bne.n	80041ca <f_mount+0x36>
 80041c8:	60d1      	str	r1, [r2, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80041ca:	2280      	movs	r2, #128	; 0x80
 80041cc:	00d2      	lsls	r2, r2, #3
 80041ce:	5499      	strb	r1, [r3, r2]
	}

	if (fs) {
 80041d0:	9b01      	ldr	r3, [sp, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	2100      	movs	r1, #0
 80041da:	00d2      	lsls	r2, r2, #3
 80041dc:	5499      	strb	r1, [r3, r2]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80041de:	502b      	str	r3, [r5, r0]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80041e0:	1e1a      	subs	r2, r3, #0
 80041e2:	d007      	beq.n	80041f4 <f_mount+0x60>
 80041e4:	2200      	movs	r2, #0
 80041e6:	2c01      	cmp	r4, #1
 80041e8:	d104      	bne.n	80041f4 <f_mount+0x60>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80041ea:	4669      	mov	r1, sp
 80041ec:	a801      	add	r0, sp, #4
 80041ee:	f7fe ffe9 	bl	80031c4 <find_volume>
 80041f2:	0002      	movs	r2, r0
	LEAVE_FF(fs, res);
}
 80041f4:	0010      	movs	r0, r2
 80041f6:	b004      	add	sp, #16
 80041f8:	bd70      	pop	{r4, r5, r6, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	200000a4 	.word	0x200000a4
 8004200:	200000a8 	.word	0x200000a8

08004204 <f_open>:
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004204:	2309      	movs	r3, #9
{
 8004206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004208:	4c7a      	ldr	r4, [pc, #488]	; (80043f4 <f_open+0x1f0>)
 800420a:	0015      	movs	r5, r2
 800420c:	44a5      	add	sp, r4
 800420e:	9001      	str	r0, [sp, #4]
 8004210:	9105      	str	r1, [sp, #20]
	if (!fp) return FR_INVALID_OBJECT;
 8004212:	9302      	str	r3, [sp, #8]
 8004214:	2800      	cmp	r0, #0
 8004216:	d100      	bne.n	800421a <f_open+0x16>
 8004218:	e086      	b.n	8004328 <f_open+0x124>
	fp->fs = 0;			/* Clear file object */
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	2200      	movs	r2, #0
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	50c2      	str	r2, [r0, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8004222:	321e      	adds	r2, #30
 8004224:	a8ff      	add	r0, sp, #1020	; 0x3fc
 8004226:	402a      	ands	r2, r5
 8004228:	a905      	add	r1, sp, #20
 800422a:	302c      	adds	r0, #44	; 0x2c
 800422c:	f7fe ffca 	bl	80031c4 <find_volume>
 8004230:	ae0a      	add	r6, sp, #40	; 0x28
 8004232:	9002      	str	r0, [sp, #8]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8004234:	1e03      	subs	r3, r0, #0
 8004236:	d177      	bne.n	8004328 <f_open+0x124>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8004238:	331f      	adds	r3, #31
 800423a:	402b      	ands	r3, r5
 800423c:	9303      	str	r3, [sp, #12]
		INIT_BUF(dj);
 800423e:	2383      	movs	r3, #131	; 0x83
 8004240:	aa07      	add	r2, sp, #28
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	50f2      	str	r2, [r6, r3]
 8004246:	4a6c      	ldr	r2, [pc, #432]	; (80043f8 <f_open+0x1f4>)
 8004248:	3308      	adds	r3, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 800424a:	9905      	ldr	r1, [sp, #20]
 800424c:	0030      	movs	r0, r6
		INIT_BUF(dj);
 800424e:	50f2      	str	r2, [r6, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8004250:	f7ff fcd4 	bl	8003bfc <follow_path>
		dir = dj.dir;
 8004254:	4f69      	ldr	r7, [pc, #420]	; (80043fc <f_open+0x1f8>)
 8004256:	59f4      	ldr	r4, [r6, r7]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004258:	2800      	cmp	r0, #0
 800425a:	d10a      	bne.n	8004272 <f_open+0x6e>
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
 800425c:	3006      	adds	r0, #6
			if (!dir)	/* Default directory itself */
 800425e:	2c00      	cmp	r4, #0
 8004260:	d007      	beq.n	8004272 <f_open+0x6e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004262:	2301      	movs	r3, #1
 8004264:	9903      	ldr	r1, [sp, #12]
 8004266:	0030      	movs	r0, r6
 8004268:	4399      	bics	r1, r3
 800426a:	1e4b      	subs	r3, r1, #1
 800426c:	4199      	sbcs	r1, r3
 800426e:	f7fe fd07 	bl	8002c80 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004272:	231c      	movs	r3, #28
 8004274:	421d      	tst	r5, r3
 8004276:	d05b      	beq.n	8004330 <f_open+0x12c>
			if (res != FR_OK) {					/* No file, create new */
 8004278:	2800      	cmp	r0, #0
 800427a:	d04d      	beq.n	8004318 <f_open+0x114>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800427c:	2804      	cmp	r0, #4
 800427e:	d149      	bne.n	8004314 <f_open+0x110>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004280:	4b5f      	ldr	r3, [pc, #380]	; (8004400 <f_open+0x1fc>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	2a00      	cmp	r2, #0
 8004286:	d003      	beq.n	8004290 <f_open+0x8c>
 8004288:	68db      	ldr	r3, [r3, #12]
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800428a:	300e      	adds	r0, #14
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800428c:	2b00      	cmp	r3, #0
 800428e:	d141      	bne.n	8004314 <f_open+0x110>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004290:	ac0a      	add	r4, sp, #40	; 0x28
 8004292:	0020      	movs	r0, r4
 8004294:	f7ff fe04 	bl	8003ea0 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004298:	2800      	cmp	r0, #0
 800429a:	d13b      	bne.n	8004314 <f_open+0x110>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800429c:	2308      	movs	r3, #8
 800429e:	9a03      	ldr	r2, [sp, #12]
				dir = dj.dir;					/* New entry */
 80042a0:	59e4      	ldr	r4, [r4, r7]
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80042a2:	431a      	orrs	r2, r3
 80042a4:	9203      	str	r2, [sp, #12]
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80042a6:	9b03      	ldr	r3, [sp, #12]
 80042a8:	071b      	lsls	r3, r3, #28
 80042aa:	d54a      	bpl.n	8004342 <f_open+0x13e>
				dw = GET_FATTIME();				/* Created time */
 80042ac:	f000 fe8c 	bl	8004fc8 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80042b0:	2500      	movs	r5, #0
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80042b2:	2780      	movs	r7, #128	; 0x80
				ST_DWORD(dir + DIR_CrtTime, dw);
 80042b4:	0a03      	lsrs	r3, r0, #8
 80042b6:	73a0      	strb	r0, [r4, #14]
 80042b8:	73e3      	strb	r3, [r4, #15]
 80042ba:	0c03      	lsrs	r3, r0, #16
 80042bc:	0e00      	lsrs	r0, r0, #24
 80042be:	7423      	strb	r3, [r4, #16]
 80042c0:	7460      	strb	r0, [r4, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80042c2:	72e5      	strb	r5, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80042c4:	7725      	strb	r5, [r4, #28]
 80042c6:	7765      	strb	r5, [r4, #29]
 80042c8:	77a5      	strb	r5, [r4, #30]
 80042ca:	77e5      	strb	r5, [r4, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80042cc:	00ff      	lsls	r7, r7, #3
 80042ce:	ae0a      	add	r6, sp, #40	; 0x28
 80042d0:	59f3      	ldr	r3, [r6, r7]
 80042d2:	0021      	movs	r1, r4
 80042d4:	5dd8      	ldrb	r0, [r3, r7]
 80042d6:	f7fe fe53 	bl	8002f80 <ld_clust.isra.0>
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 80042da:	2201      	movs	r2, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 80042dc:	76a5      	strb	r5, [r4, #26]
 80042de:	76e5      	strb	r5, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80042e0:	7525      	strb	r5, [r4, #20]
 80042e2:	7565      	strb	r5, [r4, #21]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80042e4:	9004      	str	r0, [sp, #16]
				dj.fs->wflag = 1;
 80042e6:	4b47      	ldr	r3, [pc, #284]	; (8004404 <f_open+0x200>)
 80042e8:	59f0      	ldr	r0, [r6, r7]
 80042ea:	54c2      	strb	r2, [r0, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 80042ec:	9b04      	ldr	r3, [sp, #16]
 80042ee:	42ab      	cmp	r3, r5
 80042f0:	d027      	beq.n	8004342 <f_open+0x13e>
					dw = dj.fs->winsect;
 80042f2:	4b45      	ldr	r3, [pc, #276]	; (8004408 <f_open+0x204>)
					res = remove_chain(dj.fs, cl);
 80042f4:	9904      	ldr	r1, [sp, #16]
					dw = dj.fs->winsect;
 80042f6:	58c5      	ldr	r5, [r0, r3]
					res = remove_chain(dj.fs, cl);
 80042f8:	f7ff ff14 	bl	8004124 <remove_chain>
					if (res == FR_OK) {
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d109      	bne.n	8004314 <f_open+0x110>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004300:	9b04      	ldr	r3, [sp, #16]
 8004302:	59f0      	ldr	r0, [r6, r7]
 8004304:	4a41      	ldr	r2, [pc, #260]	; (800440c <f_open+0x208>)
 8004306:	3b01      	subs	r3, #1
 8004308:	5083      	str	r3, [r0, r2]
						res = move_window(dj.fs, dw);
 800430a:	0029      	movs	r1, r5
 800430c:	f7fe fefc 	bl	8003108 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 8004310:	2800      	cmp	r0, #0
 8004312:	d016      	beq.n	8004342 <f_open+0x13e>
					res = FR_DENIED;
 8004314:	9002      	str	r0, [sp, #8]
 8004316:	e007      	b.n	8004328 <f_open+0x124>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004318:	2311      	movs	r3, #17
 800431a:	7ae2      	ldrb	r2, [r4, #11]
 800431c:	421a      	tst	r2, r3
 800431e:	d166      	bne.n	80043ee <f_open+0x1ea>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8004320:	076b      	lsls	r3, r5, #29
 8004322:	d5c0      	bpl.n	80042a6 <f_open+0xa2>
						res = FR_EXIST;
 8004324:	2308      	movs	r3, #8
					res = FR_DENIED;
 8004326:	9302      	str	r3, [sp, #8]
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8004328:	9802      	ldr	r0, [sp, #8]
 800432a:	4b39      	ldr	r3, [pc, #228]	; (8004410 <f_open+0x20c>)
 800432c:	449d      	add	sp, r3
 800432e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_OK) {					/* Follow succeeded */
 8004330:	2800      	cmp	r0, #0
 8004332:	d1ef      	bne.n	8004314 <f_open+0x110>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8004334:	7ae3      	ldrb	r3, [r4, #11]
 8004336:	06da      	lsls	r2, r3, #27
 8004338:	d457      	bmi.n	80043ea <f_open+0x1e6>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800433a:	07aa      	lsls	r2, r5, #30
 800433c:	d501      	bpl.n	8004342 <f_open+0x13e>
 800433e:	07db      	lsls	r3, r3, #31
 8004340:	d455      	bmi.n	80043ee <f_open+0x1ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004342:	9b03      	ldr	r3, [sp, #12]
 8004344:	071b      	lsls	r3, r3, #28
 8004346:	d503      	bpl.n	8004350 <f_open+0x14c>
				mode |= FA__WRITTEN;
 8004348:	2320      	movs	r3, #32
 800434a:	9a03      	ldr	r2, [sp, #12]
 800434c:	431a      	orrs	r2, r3
 800434e:	9203      	str	r2, [sp, #12]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004350:	2218      	movs	r2, #24
 8004352:	2580      	movs	r5, #128	; 0x80
 8004354:	ab04      	add	r3, sp, #16
 8004356:	189b      	adds	r3, r3, r2
 8004358:	00ed      	lsls	r5, r5, #3
 800435a:	595b      	ldr	r3, [r3, r5]
 800435c:	9901      	ldr	r1, [sp, #4]
 800435e:	9304      	str	r3, [sp, #16]
 8004360:	9a04      	ldr	r2, [sp, #16]
 8004362:	4b29      	ldr	r3, [pc, #164]	; (8004408 <f_open+0x204>)
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004364:	a80a      	add	r0, sp, #40	; 0x28
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004366:	58d2      	ldr	r2, [r2, r3]
 8004368:	4b2a      	ldr	r3, [pc, #168]	; (8004414 <f_open+0x210>)
 800436a:	50ca      	str	r2, [r1, r3]
			fp->dir_ptr = dir;
 800436c:	3304      	adds	r3, #4
 800436e:	50cc      	str	r4, [r1, r3]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004370:	2301      	movs	r3, #1
 8004372:	9903      	ldr	r1, [sp, #12]
 8004374:	4399      	bics	r1, r3
 8004376:	1e4b      	subs	r3, r1, #1
 8004378:	4199      	sbcs	r1, r3
 800437a:	f7fe fcb7 	bl	8002cec <inc_lock>
 800437e:	2385      	movs	r3, #133	; 0x85
 8004380:	9a01      	ldr	r2, [sp, #4]
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	50d0      	str	r0, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8004386:	2302      	movs	r3, #2
 8004388:	2800      	cmp	r0, #0
 800438a:	d0cc      	beq.n	8004326 <f_open+0x122>
			fp->flag = mode;					/* File access mode */
 800438c:	4669      	mov	r1, sp
			fp->err = 0;						/* Clear error flag */
 800438e:	2600      	movs	r6, #0
			fp->flag = mode;					/* File access mode */
 8004390:	9b01      	ldr	r3, [sp, #4]
 8004392:	4a21      	ldr	r2, [pc, #132]	; (8004418 <f_open+0x214>)
 8004394:	7b09      	ldrb	r1, [r1, #12]
 8004396:	5499      	strb	r1, [r3, r2]
			fp->err = 0;						/* Clear error flag */
 8004398:	4b20      	ldr	r3, [pc, #128]	; (800441c <f_open+0x218>)
 800439a:	9a01      	ldr	r2, [sp, #4]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800439c:	0021      	movs	r1, r4
			fp->err = 0;						/* Clear error flag */
 800439e:	54d6      	strb	r6, [r2, r3]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80043a0:	2218      	movs	r2, #24
 80043a2:	ab04      	add	r3, sp, #16
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	595f      	ldr	r7, [r3, r5]
 80043a8:	5d78      	ldrb	r0, [r7, r5]
 80043aa:	f7fe fde9 	bl	8002f80 <ld_clust.isra.0>
 80043ae:	2382      	movs	r3, #130	; 0x82
 80043b0:	9a01      	ldr	r2, [sp, #4]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	50d0      	str	r0, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80043b6:	7f62      	ldrb	r2, [r4, #29]
 80043b8:	7f23      	ldrb	r3, [r4, #28]
 80043ba:	0212      	lsls	r2, r2, #8
 80043bc:	431a      	orrs	r2, r3
 80043be:	7fa3      	ldrb	r3, [r4, #30]
 80043c0:	9901      	ldr	r1, [sp, #4]
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	431a      	orrs	r2, r3
 80043c6:	7fe3      	ldrb	r3, [r4, #31]
 80043c8:	061b      	lsls	r3, r3, #24
 80043ca:	4313      	orrs	r3, r2
 80043cc:	4a0f      	ldr	r2, [pc, #60]	; (800440c <f_open+0x208>)
 80043ce:	508b      	str	r3, [r1, r2]
			fp->fptr = 0;						/* File pointer */
 80043d0:	2381      	movs	r3, #129	; 0x81
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	50ce      	str	r6, [r1, r3]
			fp->dsect = 0;
 80043d6:	3310      	adds	r3, #16
 80043d8:	50ce      	str	r6, [r1, r3]
			fp->cltbl = 0;						/* Normal seek mode */
 80043da:	4b11      	ldr	r3, [pc, #68]	; (8004420 <f_open+0x21c>)
 80043dc:	50ce      	str	r6, [r1, r3]
			fp->id = fp->fs->id;
 80043de:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <f_open+0x214>)
			fp->fs = dj.fs;	 					/* Validate file object */
 80043e0:	514f      	str	r7, [r1, r5]
			fp->id = fp->fs->id;
 80043e2:	5afa      	ldrh	r2, [r7, r3]
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <f_open+0x200>)
 80043e6:	52ca      	strh	r2, [r1, r3]
 80043e8:	e79e      	b.n	8004328 <f_open+0x124>
					res = FR_NO_FILE;
 80043ea:	2304      	movs	r3, #4
 80043ec:	e79b      	b.n	8004326 <f_open+0x122>
					res = FR_DENIED;
 80043ee:	2307      	movs	r3, #7
 80043f0:	e799      	b.n	8004326 <f_open+0x122>
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	fffffbac 	.word	0xfffffbac
 80043f8:	200000c2 	.word	0x200000c2
 80043fc:	00000414 	.word	0x00000414
 8004400:	200000a8 	.word	0x200000a8
 8004404:	00000404 	.word	0x00000404
 8004408:	0000042c 	.word	0x0000042c
 800440c:	0000040c 	.word	0x0000040c
 8004410:	00000454 	.word	0x00000454
 8004414:	0000041c 	.word	0x0000041c
 8004418:	00000406 	.word	0x00000406
 800441c:	00000407 	.word	0x00000407
 8004420:	00000424 	.word	0x00000424

08004424 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8004424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	9306      	str	r3, [sp, #24]
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800442a:	2300      	movs	r3, #0
{
 800442c:	0015      	movs	r5, r2
	*br = 0;	/* Clear read byte counter */
 800442e:	9a06      	ldr	r2, [sp, #24]
{
 8004430:	0004      	movs	r4, r0
	*br = 0;	/* Clear read byte counter */
 8004432:	6013      	str	r3, [r2, #0]
{
 8004434:	000e      	movs	r6, r1

	res = validate(fp);							/* Check validity */
 8004436:	f7fe fd0b 	bl	8002e50 <validate>
 800443a:	9001      	str	r0, [sp, #4]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800443c:	2800      	cmp	r0, #0
 800443e:	d119      	bne.n	8004474 <f_read+0x50>
	if (fp->err)								/* Check error */
 8004440:	4a73      	ldr	r2, [pc, #460]	; (8004610 <f_read+0x1ec>)
 8004442:	5ca3      	ldrb	r3, [r4, r2]
 8004444:	9207      	str	r2, [sp, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d13c      	bne.n	80044c4 <f_read+0xa0>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800444a:	4b72      	ldr	r3, [pc, #456]	; (8004614 <f_read+0x1f0>)
 800444c:	5ce2      	ldrb	r2, [r4, r3]
 800444e:	9305      	str	r3, [sp, #20]
 8004450:	07d3      	lsls	r3, r2, #31
 8004452:	d400      	bmi.n	8004456 <f_read+0x32>
 8004454:	e0d9      	b.n	800460a <f_read+0x1e6>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8004456:	4b70      	ldr	r3, [pc, #448]	; (8004618 <f_read+0x1f4>)
 8004458:	58e2      	ldr	r2, [r4, r3]
 800445a:	3b04      	subs	r3, #4
 800445c:	58e3      	ldr	r3, [r4, r3]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	42ab      	cmp	r3, r5
 8004464:	d900      	bls.n	8004468 <f_read+0x44>
 8004466:	9500      	str	r5, [sp, #0]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8004468:	2780      	movs	r7, #128	; 0x80
	remain = fp->fsize - fp->fptr;
 800446a:	9604      	str	r6, [sp, #16]
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800446c:	00ff      	lsls	r7, r7, #3
	for ( ;  btr;								/* Repeat until all data read */
 800446e:	9b00      	ldr	r3, [sp, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <f_read+0x56>
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 8004474:	9801      	ldr	r0, [sp, #4]
 8004476:	b009      	add	sp, #36	; 0x24
 8004478:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800447a:	2381      	movs	r3, #129	; 0x81
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	58e5      	ldr	r5, [r4, r3]
 8004480:	59e3      	ldr	r3, [r4, r7]
 8004482:	4a66      	ldr	r2, [pc, #408]	; (800461c <f_read+0x1f8>)
 8004484:	9302      	str	r3, [sp, #8]
 8004486:	5a9b      	ldrh	r3, [r3, r2]
 8004488:	0028      	movs	r0, r5
 800448a:	0019      	movs	r1, r3
 800448c:	9303      	str	r3, [sp, #12]
 800448e:	f7fb fedd 	bl	800024c <__aeabi_uidivmod>
 8004492:	2900      	cmp	r1, #0
 8004494:	d000      	beq.n	8004498 <f_read+0x74>
 8004496:	e0a2      	b.n	80045de <f_read+0x1ba>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8004498:	9b02      	ldr	r3, [sp, #8]
 800449a:	4a61      	ldr	r2, [pc, #388]	; (8004620 <f_read+0x1fc>)
 800449c:	9903      	ldr	r1, [sp, #12]
 800449e:	0028      	movs	r0, r5
 80044a0:	5c9e      	ldrb	r6, [r3, r2]
 80044a2:	f7fb fe4d 	bl	8000140 <__udivsi3>
 80044a6:	3e01      	subs	r6, #1
 80044a8:	4006      	ands	r6, r0
 80044aa:	b2f6      	uxtb	r6, r6
			if (!csect) {						/* On the cluster boundary? */
 80044ac:	2e00      	cmp	r6, #0
 80044ae:	d120      	bne.n	80044f2 <f_read+0xce>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80044b0:	2d00      	cmp	r5, #0
 80044b2:	d109      	bne.n	80044c8 <f_read+0xa4>
					clst = fp->sclust;			/* Follow from the origin */
 80044b4:	2382      	movs	r3, #130	; 0x82
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	58e0      	ldr	r0, [r4, r3]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80044ba:	2801      	cmp	r0, #1
 80044bc:	d813      	bhi.n	80044e6 <f_read+0xc2>
 80044be:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80044c0:	9a07      	ldr	r2, [sp, #28]
 80044c2:	54a3      	strb	r3, [r4, r2]
		LEAVE_FF(fp->fs, FR_DENIED);
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	e7d5      	b.n	8004474 <f_read+0x50>
					if (fp->cltbl)
 80044c8:	4b56      	ldr	r3, [pc, #344]	; (8004624 <f_read+0x200>)
 80044ca:	58e3      	ldr	r3, [r4, r3]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <f_read+0xb6>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80044d0:	0029      	movs	r1, r5
 80044d2:	0020      	movs	r0, r4
 80044d4:	f7fe fc76 	bl	8002dc4 <clmt_clust>
 80044d8:	e7ef      	b.n	80044ba <f_read+0x96>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80044da:	4b53      	ldr	r3, [pc, #332]	; (8004628 <f_read+0x204>)
 80044dc:	9802      	ldr	r0, [sp, #8]
 80044de:	58e1      	ldr	r1, [r4, r3]
 80044e0:	f7ff f818 	bl	8003514 <get_fat>
 80044e4:	e7e9      	b.n	80044ba <f_read+0x96>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	d101      	bne.n	80044ee <f_read+0xca>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e7e8      	b.n	80044c0 <f_read+0x9c>
				fp->clust = clst;				/* Update current cluster */
 80044ee:	4b4e      	ldr	r3, [pc, #312]	; (8004628 <f_read+0x204>)
 80044f0:	50e0      	str	r0, [r4, r3]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80044f2:	59e3      	ldr	r3, [r4, r7]
 80044f4:	9302      	str	r3, [sp, #8]
 80044f6:	4b4c      	ldr	r3, [pc, #304]	; (8004628 <f_read+0x204>)
 80044f8:	9802      	ldr	r0, [sp, #8]
 80044fa:	58e1      	ldr	r1, [r4, r3]
 80044fc:	f7fe fff6 	bl	80034ec <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004500:	2800      	cmp	r0, #0
 8004502:	d0dc      	beq.n	80044be <f_read+0x9a>
			sect += csect;
 8004504:	1983      	adds	r3, r0, r6
 8004506:	9303      	str	r3, [sp, #12]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8004508:	4a44      	ldr	r2, [pc, #272]	; (800461c <f_read+0x1f8>)
 800450a:	9b02      	ldr	r3, [sp, #8]
 800450c:	9800      	ldr	r0, [sp, #0]
 800450e:	5a99      	ldrh	r1, [r3, r2]
 8004510:	f7fb fe16 	bl	8000140 <__udivsi3>
 8004514:	1e05      	subs	r5, r0, #0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004516:	d03c      	beq.n	8004592 <f_read+0x16e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004518:	4a41      	ldr	r2, [pc, #260]	; (8004620 <f_read+0x1fc>)
 800451a:	9b02      	ldr	r3, [sp, #8]
 800451c:	5c9b      	ldrb	r3, [r3, r2]
 800451e:	1832      	adds	r2, r6, r0
 8004520:	429a      	cmp	r2, r3
 8004522:	d900      	bls.n	8004526 <f_read+0x102>
					cc = fp->fs->csize - csect;
 8004524:	1b9d      	subs	r5, r3, r6
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8004526:	4b41      	ldr	r3, [pc, #260]	; (800462c <f_read+0x208>)
 8004528:	9a02      	ldr	r2, [sp, #8]
 800452a:	9904      	ldr	r1, [sp, #16]
 800452c:	5cd0      	ldrb	r0, [r2, r3]
 800452e:	002b      	movs	r3, r5
 8004530:	9a03      	ldr	r2, [sp, #12]
 8004532:	f7fe fb6b 	bl	8002c0c <disk_read>
 8004536:	2800      	cmp	r0, #0
 8004538:	d1d7      	bne.n	80044ea <f_read+0xc6>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800453a:	9b05      	ldr	r3, [sp, #20]
 800453c:	5ce3      	ldrb	r3, [r4, r3]
 800453e:	065b      	lsls	r3, r3, #25
 8004540:	d50f      	bpl.n	8004562 <f_read+0x13e>
 8004542:	2383      	movs	r3, #131	; 0x83
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	58e0      	ldr	r0, [r4, r3]
 8004548:	9b03      	ldr	r3, [sp, #12]
 800454a:	1ac0      	subs	r0, r0, r3
 800454c:	4285      	cmp	r5, r0
 800454e:	d908      	bls.n	8004562 <f_read+0x13e>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8004550:	59e3      	ldr	r3, [r4, r7]
 8004552:	4a32      	ldr	r2, [pc, #200]	; (800461c <f_read+0x1f8>)
 8004554:	0021      	movs	r1, r4
 8004556:	5a9a      	ldrh	r2, [r3, r2]
 8004558:	9b04      	ldr	r3, [sp, #16]
 800455a:	4350      	muls	r0, r2
 800455c:	1818      	adds	r0, r3, r0
 800455e:	f7fe fb7f 	bl	8002c60 <mem_cpy>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8004562:	59e3      	ldr	r3, [r4, r7]
 8004564:	4a2d      	ldr	r2, [pc, #180]	; (800461c <f_read+0x1f8>)
 8004566:	5a9b      	ldrh	r3, [r3, r2]
 8004568:	435d      	muls	r5, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800456a:	9b04      	ldr	r3, [sp, #16]
 800456c:	2281      	movs	r2, #129	; 0x81
 800456e:	195b      	adds	r3, r3, r5
 8004570:	9304      	str	r3, [sp, #16]
 8004572:	2381      	movs	r3, #129	; 0x81
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	58e3      	ldr	r3, [r4, r3]
 8004578:	00d2      	lsls	r2, r2, #3
 800457a:	195b      	adds	r3, r3, r5
 800457c:	50a3      	str	r3, [r4, r2]
 800457e:	9b06      	ldr	r3, [sp, #24]
 8004580:	9a06      	ldr	r2, [sp, #24]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	9302      	str	r3, [sp, #8]
 8004586:	195b      	adds	r3, r3, r5
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	9b00      	ldr	r3, [sp, #0]
 800458c:	1b5b      	subs	r3, r3, r5
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	e76d      	b.n	800446e <f_read+0x4a>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8004592:	2383      	movs	r3, #131	; 0x83
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	58e2      	ldr	r2, [r4, r3]
 8004598:	9b03      	ldr	r3, [sp, #12]
 800459a:	4293      	cmp	r3, r2
 800459c:	d01b      	beq.n	80045d6 <f_read+0x1b2>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800459e:	2640      	movs	r6, #64	; 0x40
 80045a0:	9b05      	ldr	r3, [sp, #20]
 80045a2:	4d22      	ldr	r5, [pc, #136]	; (800462c <f_read+0x208>)
 80045a4:	5ce3      	ldrb	r3, [r4, r3]
 80045a6:	4233      	tst	r3, r6
 80045a8:	d00c      	beq.n	80045c4 <f_read+0x1a0>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80045aa:	9b02      	ldr	r3, [sp, #8]
 80045ac:	0021      	movs	r1, r4
 80045ae:	5d58      	ldrb	r0, [r3, r5]
 80045b0:	2301      	movs	r3, #1
 80045b2:	f7fe fb39 	bl	8002c28 <disk_write>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d197      	bne.n	80044ea <f_read+0xc6>
					fp->flag &= ~FA__DIRTY;
 80045ba:	9b05      	ldr	r3, [sp, #20]
 80045bc:	9a05      	ldr	r2, [sp, #20]
 80045be:	5ce3      	ldrb	r3, [r4, r3]
 80045c0:	43b3      	bics	r3, r6
 80045c2:	54a3      	strb	r3, [r4, r2]
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80045c4:	59e3      	ldr	r3, [r4, r7]
 80045c6:	9a03      	ldr	r2, [sp, #12]
 80045c8:	5d58      	ldrb	r0, [r3, r5]
 80045ca:	0021      	movs	r1, r4
 80045cc:	2301      	movs	r3, #1
 80045ce:	f7fe fb1d 	bl	8002c0c <disk_read>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d189      	bne.n	80044ea <f_read+0xc6>
			fp->dsect = sect;
 80045d6:	2383      	movs	r3, #131	; 0x83
 80045d8:	9a03      	ldr	r2, [sp, #12]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	50e2      	str	r2, [r4, r3]
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80045de:	59e3      	ldr	r3, [r4, r7]
 80045e0:	4a0e      	ldr	r2, [pc, #56]	; (800461c <f_read+0x1f8>)
 80045e2:	5a9d      	ldrh	r5, [r3, r2]
 80045e4:	2381      	movs	r3, #129	; 0x81
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	58e3      	ldr	r3, [r4, r3]
 80045ea:	0029      	movs	r1, r5
 80045ec:	0018      	movs	r0, r3
 80045ee:	9302      	str	r3, [sp, #8]
 80045f0:	f7fb fe2c 	bl	800024c <__aeabi_uidivmod>
 80045f4:	1a6b      	subs	r3, r5, r1
 80045f6:	9d00      	ldr	r5, [sp, #0]
 80045f8:	429d      	cmp	r5, r3
 80045fa:	d900      	bls.n	80045fe <f_read+0x1da>
 80045fc:	001d      	movs	r5, r3
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80045fe:	1861      	adds	r1, r4, r1
 8004600:	002a      	movs	r2, r5
 8004602:	9804      	ldr	r0, [sp, #16]
 8004604:	f7fe fb2c 	bl	8002c60 <mem_cpy>
 8004608:	e7af      	b.n	800456a <f_read+0x146>
		LEAVE_FF(fp->fs, FR_DENIED);
 800460a:	2307      	movs	r3, #7
 800460c:	e75a      	b.n	80044c4 <f_read+0xa0>
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	00000407 	.word	0x00000407
 8004614:	00000406 	.word	0x00000406
 8004618:	0000040c 	.word	0x0000040c
 800461c:	0000040a 	.word	0x0000040a
 8004620:	00000402 	.word	0x00000402
 8004624:	00000424 	.word	0x00000424
 8004628:	00000414 	.word	0x00000414
 800462c:	00000401 	.word	0x00000401

08004630 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004632:	b08b      	sub	sp, #44	; 0x2c
 8004634:	9308      	str	r3, [sp, #32]
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8004636:	2300      	movs	r3, #0
{
 8004638:	9202      	str	r2, [sp, #8]
	*bw = 0;	/* Clear write byte counter */
 800463a:	9a08      	ldr	r2, [sp, #32]
{
 800463c:	0004      	movs	r4, r0
	*bw = 0;	/* Clear write byte counter */
 800463e:	6013      	str	r3, [r2, #0]
{
 8004640:	000d      	movs	r5, r1

	res = validate(fp);						/* Check validity */
 8004642:	f7fe fc05 	bl	8002e50 <validate>
 8004646:	9003      	str	r0, [sp, #12]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004648:	2800      	cmp	r0, #0
 800464a:	d159      	bne.n	8004700 <f_write+0xd0>
	if (fp->err)							/* Check error */
 800464c:	4a87      	ldr	r2, [pc, #540]	; (800486c <f_write+0x23c>)
 800464e:	5ca3      	ldrb	r3, [r4, r2]
 8004650:	9209      	str	r2, [sp, #36]	; 0x24
 8004652:	2b00      	cmp	r3, #0
 8004654:	d13a      	bne.n	80046cc <f_write+0x9c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8004656:	4b86      	ldr	r3, [pc, #536]	; (8004870 <f_write+0x240>)
 8004658:	5ce2      	ldrb	r2, [r4, r3]
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	0793      	lsls	r3, r2, #30
 800465e:	d400      	bmi.n	8004662 <f_write+0x32>
 8004660:	e101      	b.n	8004866 <f_write+0x236>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8004662:	2381      	movs	r3, #129	; 0x81
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	58e2      	ldr	r2, [r4, r3]
 8004668:	9902      	ldr	r1, [sp, #8]
 800466a:	1889      	adds	r1, r1, r2
 800466c:	428a      	cmp	r2, r1
 800466e:	d839      	bhi.n	80046e4 <f_write+0xb4>

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8004670:	2780      	movs	r7, #128	; 0x80
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8004672:	9505      	str	r5, [sp, #20]
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8004674:	9306      	str	r3, [sp, #24]
 8004676:	00ff      	lsls	r7, r7, #3
	for ( ;  btw;							/* Repeat until all data written */
 8004678:	9b02      	ldr	r3, [sp, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d032      	beq.n	80046e4 <f_write+0xb4>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800467e:	9b06      	ldr	r3, [sp, #24]
 8004680:	4a7c      	ldr	r2, [pc, #496]	; (8004874 <f_write+0x244>)
 8004682:	58e5      	ldr	r5, [r4, r3]
 8004684:	59e3      	ldr	r3, [r4, r7]
 8004686:	0028      	movs	r0, r5
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	5a9b      	ldrh	r3, [r3, r2]
 800468c:	0019      	movs	r1, r3
 800468e:	9307      	str	r3, [sp, #28]
 8004690:	f7fb fddc 	bl	800024c <__aeabi_uidivmod>
 8004694:	2900      	cmp	r1, #0
 8004696:	d000      	beq.n	800469a <f_write+0x6a>
 8004698:	e0c8      	b.n	800482c <f_write+0x1fc>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800469a:	9b04      	ldr	r3, [sp, #16]
 800469c:	4a76      	ldr	r2, [pc, #472]	; (8004878 <f_write+0x248>)
 800469e:	9907      	ldr	r1, [sp, #28]
 80046a0:	0028      	movs	r0, r5
 80046a2:	5c9e      	ldrb	r6, [r3, r2]
 80046a4:	f7fb fd4c 	bl	8000140 <__udivsi3>
 80046a8:	3e01      	subs	r6, #1
 80046aa:	4006      	ands	r6, r0
 80046ac:	b2f3      	uxtb	r3, r6
 80046ae:	9307      	str	r3, [sp, #28]
			if (!csect) {					/* On the cluster boundary? */
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d139      	bne.n	8004728 <f_write+0xf8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80046b4:	2d00      	cmp	r5, #0
 80046b6:	d10b      	bne.n	80046d0 <f_write+0xa0>
					clst = fp->sclust;		/* Follow from the origin */
 80046b8:	2382      	movs	r3, #130	; 0x82
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	58e0      	ldr	r0, [r4, r3]
					if (clst == 0)			/* When no cluster is allocated, */
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80046be:	1e01      	subs	r1, r0, #0
					if (clst == 0)			/* When no cluster is allocated, */
 80046c0:	d023      	beq.n	800470a <f_write+0xda>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80046c2:	2801      	cmp	r0, #1
 80046c4:	d125      	bne.n	8004712 <f_write+0xe2>
 80046c6:	2302      	movs	r3, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80046c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046ca:	54a3      	strb	r3, [r4, r2]
		LEAVE_FF(fp->fs, FR_DENIED);
 80046cc:	9303      	str	r3, [sp, #12]
 80046ce:	e017      	b.n	8004700 <f_write+0xd0>
					if (fp->cltbl)
 80046d0:	4b6a      	ldr	r3, [pc, #424]	; (800487c <f_write+0x24c>)
 80046d2:	58e3      	ldr	r3, [r4, r3]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d016      	beq.n	8004706 <f_write+0xd6>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80046d8:	0029      	movs	r1, r5
 80046da:	0020      	movs	r0, r4
 80046dc:	f7fe fb72 	bl	8002dc4 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d1ee      	bne.n	80046c2 <f_write+0x92>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80046e4:	2381      	movs	r3, #129	; 0x81
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	58e2      	ldr	r2, [r4, r3]
 80046ea:	4b65      	ldr	r3, [pc, #404]	; (8004880 <f_write+0x250>)
 80046ec:	58e1      	ldr	r1, [r4, r3]
 80046ee:	428a      	cmp	r2, r1
 80046f0:	d900      	bls.n	80046f4 <f_write+0xc4>
 80046f2:	e0b6      	b.n	8004862 <f_write+0x232>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80046f4:	9b01      	ldr	r3, [sp, #4]
 80046f6:	5ce2      	ldrb	r2, [r4, r3]
 80046f8:	2320      	movs	r3, #32
 80046fa:	4313      	orrs	r3, r2
 80046fc:	9a01      	ldr	r2, [sp, #4]
 80046fe:	54a3      	strb	r3, [r4, r2]

	LEAVE_FF(fp->fs, FR_OK);
}
 8004700:	9803      	ldr	r0, [sp, #12]
 8004702:	b00b      	add	sp, #44	; 0x2c
 8004704:	bdf0      	pop	{r4, r5, r6, r7, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004706:	4b5f      	ldr	r3, [pc, #380]	; (8004884 <f_write+0x254>)
 8004708:	58e1      	ldr	r1, [r4, r3]
 800470a:	9804      	ldr	r0, [sp, #16]
 800470c:	f7ff f8ae 	bl	800386c <create_chain>
 8004710:	e7e6      	b.n	80046e0 <f_write+0xb0>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d101      	bne.n	800471a <f_write+0xea>
 8004716:	2301      	movs	r3, #1
 8004718:	e7d6      	b.n	80046c8 <f_write+0x98>
				fp->clust = clst;			/* Update current cluster */
 800471a:	4b5a      	ldr	r3, [pc, #360]	; (8004884 <f_write+0x254>)
 800471c:	50e0      	str	r0, [r4, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800471e:	3b04      	subs	r3, #4
 8004720:	58e2      	ldr	r2, [r4, r3]
 8004722:	2a00      	cmp	r2, #0
 8004724:	d100      	bne.n	8004728 <f_write+0xf8>
 8004726:	50e0      	str	r0, [r4, r3]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8004728:	2540      	movs	r5, #64	; 0x40
 800472a:	9b01      	ldr	r3, [sp, #4]
 800472c:	5ce3      	ldrb	r3, [r4, r3]
 800472e:	422b      	tst	r3, r5
 8004730:	d010      	beq.n	8004754 <f_write+0x124>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004732:	4b55      	ldr	r3, [pc, #340]	; (8004888 <f_write+0x258>)
 8004734:	59e2      	ldr	r2, [r4, r7]
 8004736:	0021      	movs	r1, r4
 8004738:	5cd0      	ldrb	r0, [r2, r3]
 800473a:	2283      	movs	r2, #131	; 0x83
 800473c:	00d2      	lsls	r2, r2, #3
 800473e:	2301      	movs	r3, #1
 8004740:	58a2      	ldr	r2, [r4, r2]
 8004742:	f7fe fa71 	bl	8002c28 <disk_write>
 8004746:	2800      	cmp	r0, #0
 8004748:	d1e5      	bne.n	8004716 <f_write+0xe6>
				fp->flag &= ~FA__DIRTY;
 800474a:	9b01      	ldr	r3, [sp, #4]
 800474c:	9a01      	ldr	r2, [sp, #4]
 800474e:	5ce3      	ldrb	r3, [r4, r3]
 8004750:	43ab      	bics	r3, r5
 8004752:	54a3      	strb	r3, [r4, r2]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8004754:	59e3      	ldr	r3, [r4, r7]
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <f_write+0x254>)
 800475a:	9804      	ldr	r0, [sp, #16]
 800475c:	58e1      	ldr	r1, [r4, r3]
 800475e:	f7fe fec5 	bl	80034ec <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004762:	2800      	cmp	r0, #0
 8004764:	d0af      	beq.n	80046c6 <f_write+0x96>
			sect += csect;
 8004766:	9b07      	ldr	r3, [sp, #28]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8004768:	4a42      	ldr	r2, [pc, #264]	; (8004874 <f_write+0x244>)
			sect += csect;
 800476a:	18c5      	adds	r5, r0, r3
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800476c:	9b04      	ldr	r3, [sp, #16]
 800476e:	9802      	ldr	r0, [sp, #8]
 8004770:	5a99      	ldrh	r1, [r3, r2]
 8004772:	f7fb fce5 	bl	8000140 <__udivsi3>
 8004776:	1e06      	subs	r6, r0, #0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004778:	d03d      	beq.n	80047f6 <f_write+0x1c6>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800477a:	4a3f      	ldr	r2, [pc, #252]	; (8004878 <f_write+0x248>)
 800477c:	9b04      	ldr	r3, [sp, #16]
 800477e:	5c9b      	ldrb	r3, [r3, r2]
 8004780:	9a07      	ldr	r2, [sp, #28]
 8004782:	1812      	adds	r2, r2, r0
 8004784:	429a      	cmp	r2, r3
 8004786:	d901      	bls.n	800478c <f_write+0x15c>
					cc = fp->fs->csize - csect;
 8004788:	9a07      	ldr	r2, [sp, #28]
 800478a:	1a9e      	subs	r6, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800478c:	4b3e      	ldr	r3, [pc, #248]	; (8004888 <f_write+0x258>)
 800478e:	9a04      	ldr	r2, [sp, #16]
 8004790:	9905      	ldr	r1, [sp, #20]
 8004792:	5cd0      	ldrb	r0, [r2, r3]
 8004794:	0033      	movs	r3, r6
 8004796:	002a      	movs	r2, r5
 8004798:	f7fe fa46 	bl	8002c28 <disk_write>
 800479c:	2800      	cmp	r0, #0
 800479e:	d1ba      	bne.n	8004716 <f_write+0xe6>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80047a0:	2383      	movs	r3, #131	; 0x83
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	58e0      	ldr	r0, [r4, r3]
 80047a6:	1b45      	subs	r5, r0, r5
 80047a8:	42ae      	cmp	r6, r5
 80047aa:	d90e      	bls.n	80047ca <f_write+0x19a>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80047ac:	59e3      	ldr	r3, [r4, r7]
 80047ae:	4a31      	ldr	r2, [pc, #196]	; (8004874 <f_write+0x244>)
 80047b0:	0020      	movs	r0, r4
 80047b2:	5a9a      	ldrh	r2, [r3, r2]
 80047b4:	9b05      	ldr	r3, [sp, #20]
 80047b6:	4355      	muls	r5, r2
 80047b8:	1959      	adds	r1, r3, r5
 80047ba:	f7fe fa51 	bl	8002c60 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80047be:	2240      	movs	r2, #64	; 0x40
 80047c0:	9b01      	ldr	r3, [sp, #4]
 80047c2:	5ce3      	ldrb	r3, [r4, r3]
 80047c4:	4393      	bics	r3, r2
 80047c6:	9a01      	ldr	r2, [sp, #4]
 80047c8:	54a3      	strb	r3, [r4, r2]
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80047ca:	59e3      	ldr	r3, [r4, r7]
 80047cc:	4a29      	ldr	r2, [pc, #164]	; (8004874 <f_write+0x244>)
 80047ce:	5a9b      	ldrh	r3, [r3, r2]
 80047d0:	435e      	muls	r6, r3
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80047d2:	9b05      	ldr	r3, [sp, #20]
 80047d4:	9a06      	ldr	r2, [sp, #24]
 80047d6:	199b      	adds	r3, r3, r6
 80047d8:	9305      	str	r3, [sp, #20]
 80047da:	9b06      	ldr	r3, [sp, #24]
 80047dc:	58e3      	ldr	r3, [r4, r3]
 80047de:	199b      	adds	r3, r3, r6
 80047e0:	50a3      	str	r3, [r4, r2]
 80047e2:	9b08      	ldr	r3, [sp, #32]
 80047e4:	9a08      	ldr	r2, [sp, #32]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	9304      	str	r3, [sp, #16]
 80047ea:	199b      	adds	r3, r3, r6
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	9b02      	ldr	r3, [sp, #8]
 80047f0:	1b9b      	subs	r3, r3, r6
 80047f2:	9302      	str	r3, [sp, #8]
 80047f4:	e740      	b.n	8004678 <f_write+0x48>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80047f6:	2383      	movs	r3, #131	; 0x83
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	58e3      	ldr	r3, [r4, r3]
 80047fc:	429d      	cmp	r5, r3
 80047fe:	d012      	beq.n	8004826 <f_write+0x1f6>
				if (fp->fptr < fp->fsize &&
 8004800:	9b06      	ldr	r3, [sp, #24]
 8004802:	58e3      	ldr	r3, [r4, r3]
 8004804:	9307      	str	r3, [sp, #28]
 8004806:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <f_write+0x250>)
 8004808:	9a07      	ldr	r2, [sp, #28]
 800480a:	58e3      	ldr	r3, [r4, r3]
 800480c:	429a      	cmp	r2, r3
 800480e:	d20a      	bcs.n	8004826 <f_write+0x1f6>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8004810:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <f_write+0x258>)
 8004812:	9a04      	ldr	r2, [sp, #16]
 8004814:	0021      	movs	r1, r4
 8004816:	5cd0      	ldrb	r0, [r2, r3]
 8004818:	2301      	movs	r3, #1
 800481a:	002a      	movs	r2, r5
 800481c:	f7fe f9f6 	bl	8002c0c <disk_read>
				if (fp->fptr < fp->fsize &&
 8004820:	2800      	cmp	r0, #0
 8004822:	d000      	beq.n	8004826 <f_write+0x1f6>
 8004824:	e777      	b.n	8004716 <f_write+0xe6>
			fp->dsect = sect;
 8004826:	2383      	movs	r3, #131	; 0x83
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	50e5      	str	r5, [r4, r3]
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800482c:	59e3      	ldr	r3, [r4, r7]
 800482e:	4a11      	ldr	r2, [pc, #68]	; (8004874 <f_write+0x244>)
 8004830:	5a9d      	ldrh	r5, [r3, r2]
 8004832:	9b06      	ldr	r3, [sp, #24]
 8004834:	0029      	movs	r1, r5
 8004836:	58e3      	ldr	r3, [r4, r3]
 8004838:	0018      	movs	r0, r3
 800483a:	9304      	str	r3, [sp, #16]
 800483c:	f7fb fd06 	bl	800024c <__aeabi_uidivmod>
 8004840:	9e02      	ldr	r6, [sp, #8]
 8004842:	1a6d      	subs	r5, r5, r1
 8004844:	42ae      	cmp	r6, r5
 8004846:	d900      	bls.n	800484a <f_write+0x21a>
 8004848:	002e      	movs	r6, r5
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800484a:	1860      	adds	r0, r4, r1
 800484c:	0032      	movs	r2, r6
 800484e:	9905      	ldr	r1, [sp, #20]
 8004850:	f7fe fa06 	bl	8002c60 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8004854:	9b01      	ldr	r3, [sp, #4]
 8004856:	5ce2      	ldrb	r2, [r4, r3]
 8004858:	2340      	movs	r3, #64	; 0x40
 800485a:	4313      	orrs	r3, r2
 800485c:	9a01      	ldr	r2, [sp, #4]
 800485e:	54a3      	strb	r3, [r4, r2]
 8004860:	e7b7      	b.n	80047d2 <f_write+0x1a2>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8004862:	50e2      	str	r2, [r4, r3]
 8004864:	e746      	b.n	80046f4 <f_write+0xc4>
		LEAVE_FF(fp->fs, FR_DENIED);
 8004866:	2307      	movs	r3, #7
 8004868:	e730      	b.n	80046cc <f_write+0x9c>
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	00000407 	.word	0x00000407
 8004870:	00000406 	.word	0x00000406
 8004874:	0000040a 	.word	0x0000040a
 8004878:	00000402 	.word	0x00000402
 800487c:	00000424 	.word	0x00000424
 8004880:	0000040c 	.word	0x0000040c
 8004884:	00000414 	.word	0x00000414
 8004888:	00000401 	.word	0x00000401

0800488c <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800488c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800488e:	0004      	movs	r4, r0
 8004890:	000e      	movs	r6, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8004892:	290a      	cmp	r1, #10
 8004894:	d102      	bne.n	800489c <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 8004896:	210d      	movs	r1, #13
 8004898:	f7ff fff8 	bl	800488c <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800489c:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 800489e:	2b00      	cmp	r3, #0
 80048a0:	db14      	blt.n	80048cc <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80048a2:	1c5d      	adds	r5, r3, #1
 80048a4:	18e3      	adds	r3, r4, r3
 80048a6:	731e      	strb	r6, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80048a8:	2d3c      	cmp	r5, #60	; 0x3c
 80048aa:	dd0b      	ble.n	80048c4 <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80048ac:	0021      	movs	r1, r4
 80048ae:	ab01      	add	r3, sp, #4
 80048b0:	002a      	movs	r2, r5
 80048b2:	310c      	adds	r1, #12
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	f7ff febb 	bl	8004630 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80048ba:	9b01      	ldr	r3, [sp, #4]
 80048bc:	1b5d      	subs	r5, r3, r5
 80048be:	1e6b      	subs	r3, r5, #1
 80048c0:	419d      	sbcs	r5, r3
 80048c2:	426d      	negs	r5, r5
	}
	pb->idx = i;
	pb->nchr++;
 80048c4:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 80048c6:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 80048c8:	3301      	adds	r3, #1
 80048ca:	60a3      	str	r3, [r4, #8]
}
 80048cc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	...

080048d0 <f_sync>:
{
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	0004      	movs	r4, r0
	res = validate(fp);					/* Check validity of the object */
 80048d4:	f7fe fabc 	bl	8002e50 <validate>
 80048d8:	1e06      	subs	r6, r0, #0
	if (res == FR_OK) {
 80048da:	d155      	bne.n	8004988 <f_sync+0xb8>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80048dc:	4f2b      	ldr	r7, [pc, #172]	; (800498c <f_sync+0xbc>)
 80048de:	5de3      	ldrb	r3, [r4, r7]
 80048e0:	069a      	lsls	r2, r3, #26
 80048e2:	d551      	bpl.n	8004988 <f_sync+0xb8>
			if (fp->flag & FA__DIRTY) {
 80048e4:	2540      	movs	r5, #64	; 0x40
 80048e6:	422b      	tst	r3, r5
 80048e8:	d011      	beq.n	800490e <f_sync+0x3e>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	58e2      	ldr	r2, [r4, r3]
 80048f0:	4b27      	ldr	r3, [pc, #156]	; (8004990 <f_sync+0xc0>)
 80048f2:	0021      	movs	r1, r4
 80048f4:	5cd0      	ldrb	r0, [r2, r3]
 80048f6:	2283      	movs	r2, #131	; 0x83
 80048f8:	00d2      	lsls	r2, r2, #3
 80048fa:	2301      	movs	r3, #1
 80048fc:	58a2      	ldr	r2, [r4, r2]
 80048fe:	f7fe f993 	bl	8002c28 <disk_write>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8004902:	3601      	adds	r6, #1
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004904:	2800      	cmp	r0, #0
 8004906:	d13f      	bne.n	8004988 <f_sync+0xb8>
				fp->flag &= ~FA__DIRTY;
 8004908:	5de3      	ldrb	r3, [r4, r7]
 800490a:	43ab      	bics	r3, r5
 800490c:	55e3      	strb	r3, [r4, r7]
			res = move_window(fp->fs, fp->dir_sect);
 800490e:	4b21      	ldr	r3, [pc, #132]	; (8004994 <f_sync+0xc4>)
 8004910:	58e1      	ldr	r1, [r4, r3]
 8004912:	3b1c      	subs	r3, #28
 8004914:	58e0      	ldr	r0, [r4, r3]
 8004916:	f7fe fbf7 	bl	8003108 <move_window>
 800491a:	1e06      	subs	r6, r0, #0
			if (res == FR_OK) {
 800491c:	d134      	bne.n	8004988 <f_sync+0xb8>
				dir = fp->dir_ptr;
 800491e:	2384      	movs	r3, #132	; 0x84
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8004920:	2220      	movs	r2, #32
				dir = fp->dir_ptr;
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	58e5      	ldr	r5, [r4, r3]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8004926:	7aeb      	ldrb	r3, [r5, #11]
 8004928:	4313      	orrs	r3, r2
 800492a:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800492c:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <f_sync+0xc8>)
 800492e:	5ce2      	ldrb	r2, [r4, r3]
 8004930:	772a      	strb	r2, [r5, #28]
 8004932:	58e2      	ldr	r2, [r4, r3]
 8004934:	0a12      	lsrs	r2, r2, #8
 8004936:	776a      	strb	r2, [r5, #29]
 8004938:	58e2      	ldr	r2, [r4, r3]
 800493a:	0c12      	lsrs	r2, r2, #16
 800493c:	77aa      	strb	r2, [r5, #30]
 800493e:	58e3      	ldr	r3, [r4, r3]
 8004940:	0e1b      	lsrs	r3, r3, #24
 8004942:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8004944:	2382      	movs	r3, #130	; 0x82
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	58e3      	ldr	r3, [r4, r3]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800494a:	0a1a      	lsrs	r2, r3, #8
 800494c:	76ab      	strb	r3, [r5, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	752b      	strb	r3, [r5, #20]
 8004952:	0a1b      	lsrs	r3, r3, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004954:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004956:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 8004958:	f000 fb36 	bl	8004fc8 <get_fattime>
				fp->flag &= ~FA__WRITTEN;
 800495c:	2220      	movs	r2, #32
				ST_DWORD(dir + DIR_WrtTime, tm);
 800495e:	0a03      	lsrs	r3, r0, #8
 8004960:	75a8      	strb	r0, [r5, #22]
 8004962:	75eb      	strb	r3, [r5, #23]
 8004964:	0c03      	lsrs	r3, r0, #16
 8004966:	0e00      	lsrs	r0, r0, #24
				ST_WORD(dir + DIR_LstAccDate, 0);
 8004968:	74ae      	strb	r6, [r5, #18]
 800496a:	74ee      	strb	r6, [r5, #19]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800496c:	762b      	strb	r3, [r5, #24]
 800496e:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
 8004970:	5de3      	ldrb	r3, [r4, r7]
 8004972:	4393      	bics	r3, r2
 8004974:	55e3      	strb	r3, [r4, r7]
				fp->fs->wflag = 1;
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	58e0      	ldr	r0, [r4, r3]
 800497c:	4b07      	ldr	r3, [pc, #28]	; (800499c <f_sync+0xcc>)
 800497e:	3a1f      	subs	r2, #31
 8004980:	54c2      	strb	r2, [r0, r3]
				res = sync_fs(fp->fs);
 8004982:	f7fe fb4d 	bl	8003020 <sync_fs>
 8004986:	0006      	movs	r6, r0
}
 8004988:	0030      	movs	r0, r6
 800498a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800498c:	00000406 	.word	0x00000406
 8004990:	00000401 	.word	0x00000401
 8004994:	0000041c 	.word	0x0000041c
 8004998:	0000040c 	.word	0x0000040c
 800499c:	00000404 	.word	0x00000404

080049a0 <f_close>:
{
 80049a0:	b510      	push	{r4, lr}
 80049a2:	0004      	movs	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 80049a4:	f7ff ff94 	bl	80048d0 <f_sync>
	if (res == FR_OK)
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d10e      	bne.n	80049ca <f_close+0x2a>
		res = validate(fp);				/* Lock volume */
 80049ac:	0020      	movs	r0, r4
 80049ae:	f7fe fa4f 	bl	8002e50 <validate>
		if (res == FR_OK) {
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d109      	bne.n	80049ca <f_close+0x2a>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80049b6:	2385      	movs	r3, #133	; 0x85
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	58e0      	ldr	r0, [r4, r3]
 80049bc:	f7fe f9e6 	bl	8002d8c <dec_lock>
			if (res == FR_OK)
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d102      	bne.n	80049ca <f_close+0x2a>
				fp->fs = 0;				/* Invalidate file object */
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	50e0      	str	r0, [r4, r3]
}
 80049ca:	bd10      	pop	{r4, pc}

080049cc <f_lseek>:
{
 80049cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ce:	b089      	sub	sp, #36	; 0x24
 80049d0:	0006      	movs	r6, r0
 80049d2:	000f      	movs	r7, r1
	res = validate(fp);					/* Check validity of the object */
 80049d4:	f7fe fa3c 	bl	8002e50 <validate>
 80049d8:	9002      	str	r0, [sp, #8]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80049da:	2800      	cmp	r0, #0
 80049dc:	d14d      	bne.n	8004a7a <f_lseek+0xae>
	if (fp->err)						/* Check error */
 80049de:	4ac0      	ldr	r2, [pc, #768]	; (8004ce0 <f_lseek+0x314>)
 80049e0:	5cb3      	ldrb	r3, [r6, r2]
 80049e2:	9205      	str	r2, [sp, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d121      	bne.n	8004a2c <f_lseek+0x60>
	if (fp->cltbl) {	/* Fast seek */
 80049e8:	4abe      	ldr	r2, [pc, #760]	; (8004ce4 <f_lseek+0x318>)
 80049ea:	58b3      	ldr	r3, [r6, r2]
 80049ec:	9206      	str	r2, [sp, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d100      	bne.n	80049f4 <f_lseek+0x28>
 80049f2:	e09a      	b.n	8004b2a <f_lseek+0x15e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80049f4:	1c7a      	adds	r2, r7, #1
 80049f6:	d143      	bne.n	8004a80 <f_lseek+0xb4>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80049f8:	1d1d      	adds	r5, r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2402      	movs	r4, #2
 80049fe:	9304      	str	r3, [sp, #16]
			cl = fp->sclust;			/* Top of the chain */
 8004a00:	2382      	movs	r3, #130	; 0x82
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	58f7      	ldr	r7, [r6, r3]
			if (cl) {
 8004a06:	2f00      	cmp	r7, #0
 8004a08:	d02e      	beq.n	8004a68 <f_lseek+0x9c>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	9701      	str	r7, [sp, #4]
 8004a0e:	9303      	str	r3, [sp, #12]
						pcl = cl; ncl++;
 8004a10:	9b03      	ldr	r3, [sp, #12]
						cl = get_fat(fp->fs, cl);
 8004a12:	9901      	ldr	r1, [sp, #4]
						pcl = cl; ncl++;
 8004a14:	3301      	adds	r3, #1
 8004a16:	9303      	str	r3, [sp, #12]
						cl = get_fat(fp->fs, cl);
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	58f0      	ldr	r0, [r6, r3]
 8004a1e:	f7fe fd79 	bl	8003514 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8004a22:	2801      	cmp	r0, #1
 8004a24:	d806      	bhi.n	8004a34 <f_lseek+0x68>
 8004a26:	2302      	movs	r3, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004a28:	9a05      	ldr	r2, [sp, #20]
 8004a2a:	54b3      	strb	r3, [r6, r2]
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8004a2c:	9302      	str	r3, [sp, #8]
 8004a2e:	e024      	b.n	8004a7a <f_lseek+0xae>
 8004a30:	0007      	movs	r7, r0
 8004a32:	e7ea      	b.n	8004a0a <f_lseek+0x3e>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d101      	bne.n	8004a3c <f_lseek+0x70>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e7f5      	b.n	8004a28 <f_lseek+0x5c>
					} while (cl == pcl + 1);
 8004a3c:	9b01      	ldr	r3, [sp, #4]
 8004a3e:	9001      	str	r0, [sp, #4]
 8004a40:	3301      	adds	r3, #1
 8004a42:	4298      	cmp	r0, r3
 8004a44:	d0e4      	beq.n	8004a10 <f_lseek+0x44>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8004a46:	9b04      	ldr	r3, [sp, #16]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8004a48:	3402      	adds	r4, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8004a4a:	42a3      	cmp	r3, r4
 8004a4c:	d303      	bcc.n	8004a56 <f_lseek+0x8a>
						*tbl++ = ncl; *tbl++ = tcl;
 8004a4e:	9b03      	ldr	r3, [sp, #12]
 8004a50:	606f      	str	r7, [r5, #4]
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	3508      	adds	r5, #8
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	58f3      	ldr	r3, [r6, r3]
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	9a01      	ldr	r2, [sp, #4]
 8004a60:	4ba1      	ldr	r3, [pc, #644]	; (8004ce8 <f_lseek+0x31c>)
 8004a62:	58d3      	ldr	r3, [r2, r3]
 8004a64:	4298      	cmp	r0, r3
 8004a66:	d3e3      	bcc.n	8004a30 <f_lseek+0x64>
			*fp->cltbl = ulen;	/* Number of items used */
 8004a68:	9b06      	ldr	r3, [sp, #24]
 8004a6a:	58f3      	ldr	r3, [r6, r3]
 8004a6c:	601c      	str	r4, [r3, #0]
			if (ulen <= tlen)
 8004a6e:	9b04      	ldr	r3, [sp, #16]
 8004a70:	429c      	cmp	r4, r3
 8004a72:	d900      	bls.n	8004a76 <f_lseek+0xaa>
 8004a74:	e131      	b.n	8004cda <f_lseek+0x30e>
				*tbl = 0;		/* Terminate table */
 8004a76:	2300      	movs	r3, #0
 8004a78:	602b      	str	r3, [r5, #0]
}
 8004a7a:	9802      	ldr	r0, [sp, #8]
 8004a7c:	b009      	add	sp, #36	; 0x24
 8004a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8004a80:	4b9a      	ldr	r3, [pc, #616]	; (8004cec <f_lseek+0x320>)
 8004a82:	58f4      	ldr	r4, [r6, r3]
 8004a84:	42bc      	cmp	r4, r7
 8004a86:	d900      	bls.n	8004a8a <f_lseek+0xbe>
 8004a88:	003c      	movs	r4, r7
			fp->fptr = ofs;				/* Set file pointer */
 8004a8a:	2381      	movs	r3, #129	; 0x81
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	50f4      	str	r4, [r6, r3]
			if (ofs) {
 8004a90:	2c00      	cmp	r4, #0
 8004a92:	d0f2      	beq.n	8004a7a <f_lseek+0xae>
				fp->clust = clmt_clust(fp, ofs - 1);
 8004a94:	1e63      	subs	r3, r4, #1
 8004a96:	0019      	movs	r1, r3
 8004a98:	0030      	movs	r0, r6
 8004a9a:	9303      	str	r3, [sp, #12]
 8004a9c:	f7fe f992 	bl	8002dc4 <clmt_clust>
 8004aa0:	4b91      	ldr	r3, [pc, #580]	; (8004ce8 <f_lseek+0x31c>)
 8004aa2:	0001      	movs	r1, r0
 8004aa4:	50f0      	str	r0, [r6, r3]
				dsc = clust2sect(fp->fs, fp->clust);
 8004aa6:	3b14      	subs	r3, #20
 8004aa8:	58f3      	ldr	r3, [r6, r3]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	f7fe fd1d 	bl	80034ec <clust2sect>
 8004ab2:	1e05      	subs	r5, r0, #0
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8004ab4:	d0b7      	beq.n	8004a26 <f_lseek+0x5a>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8004ab6:	4b8e      	ldr	r3, [pc, #568]	; (8004cf0 <f_lseek+0x324>)
 8004ab8:	9a01      	ldr	r2, [sp, #4]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8004aba:	0020      	movs	r0, r4
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8004abc:	5ad7      	ldrh	r7, [r2, r3]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8004abe:	0039      	movs	r1, r7
 8004ac0:	f7fb fbc4 	bl	800024c <__aeabi_uidivmod>
 8004ac4:	2900      	cmp	r1, #0
 8004ac6:	d0d8      	beq.n	8004a7a <f_lseek+0xae>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8004ac8:	4b8a      	ldr	r3, [pc, #552]	; (8004cf4 <f_lseek+0x328>)
 8004aca:	9a01      	ldr	r2, [sp, #4]
 8004acc:	0039      	movs	r1, r7
 8004ace:	9803      	ldr	r0, [sp, #12]
 8004ad0:	5cd4      	ldrb	r4, [r2, r3]
 8004ad2:	f7fb fb35 	bl	8000140 <__udivsi3>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8004ad6:	2383      	movs	r3, #131	; 0x83
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8004ad8:	3c01      	subs	r4, #1
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8004ada:	00db      	lsls	r3, r3, #3
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8004adc:	4004      	ands	r4, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8004ade:	58f2      	ldr	r2, [r6, r3]
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8004ae0:	1965      	adds	r5, r4, r5
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8004ae2:	4295      	cmp	r5, r2
 8004ae4:	d0c9      	beq.n	8004a7a <f_lseek+0xae>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8004ae6:	2140      	movs	r1, #64	; 0x40
 8004ae8:	4c83      	ldr	r4, [pc, #524]	; (8004cf8 <f_lseek+0x32c>)
 8004aea:	4f84      	ldr	r7, [pc, #528]	; (8004cfc <f_lseek+0x330>)
 8004aec:	5d33      	ldrb	r3, [r6, r4]
 8004aee:	420b      	tst	r3, r1
 8004af0:	d00b      	beq.n	8004b0a <f_lseek+0x13e>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004af2:	9b01      	ldr	r3, [sp, #4]
 8004af4:	0031      	movs	r1, r6
 8004af6:	5dd8      	ldrb	r0, [r3, r7]
 8004af8:	2301      	movs	r3, #1
 8004afa:	f7fe f895 	bl	8002c28 <disk_write>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d19a      	bne.n	8004a38 <f_lseek+0x6c>
						fp->flag &= ~FA__DIRTY;
 8004b02:	2240      	movs	r2, #64	; 0x40
 8004b04:	5d33      	ldrb	r3, [r6, r4]
 8004b06:	4393      	bics	r3, r2
 8004b08:	5533      	strb	r3, [r6, r4]
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	58f3      	ldr	r3, [r6, r3]
 8004b10:	002a      	movs	r2, r5
 8004b12:	5dd8      	ldrb	r0, [r3, r7]
 8004b14:	0031      	movs	r1, r6
 8004b16:	2301      	movs	r3, #1
 8004b18:	f7fe f878 	bl	8002c0c <disk_read>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d000      	beq.n	8004b22 <f_lseek+0x156>
 8004b20:	e78a      	b.n	8004a38 <f_lseek+0x6c>
					fp->dsect = dsc;
 8004b22:	2383      	movs	r3, #131	; 0x83
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	50f5      	str	r5, [r6, r3]
 8004b28:	e7a7      	b.n	8004a7a <f_lseek+0xae>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8004b2a:	4a70      	ldr	r2, [pc, #448]	; (8004cec <f_lseek+0x320>)
 8004b2c:	58b3      	ldr	r3, [r6, r2]
 8004b2e:	9204      	str	r2, [sp, #16]
 8004b30:	429f      	cmp	r7, r3
 8004b32:	d904      	bls.n	8004b3e <f_lseek+0x172>
			 && !(fp->flag & FA_WRITE)
 8004b34:	4a70      	ldr	r2, [pc, #448]	; (8004cf8 <f_lseek+0x32c>)
 8004b36:	5cb2      	ldrb	r2, [r6, r2]
 8004b38:	0792      	lsls	r2, r2, #30
 8004b3a:	d400      	bmi.n	8004b3e <f_lseek+0x172>
 8004b3c:	001f      	movs	r7, r3
		ifptr = fp->fptr;
 8004b3e:	2481      	movs	r4, #129	; 0x81
		fp->fptr = nsect = 0;
 8004b40:	2300      	movs	r3, #0
		ifptr = fp->fptr;
 8004b42:	00e4      	lsls	r4, r4, #3
 8004b44:	5935      	ldr	r5, [r6, r4]
		fp->fptr = nsect = 0;
 8004b46:	5133      	str	r3, [r6, r4]
		if (ofs) {
 8004b48:	429f      	cmp	r7, r3
 8004b4a:	d146      	bne.n	8004bda <f_lseek+0x20e>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8004b4c:	2381      	movs	r3, #129	; 0x81
 8004b4e:	9a04      	ldr	r2, [sp, #16]
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	58b2      	ldr	r2, [r6, r2]
 8004b54:	58f3      	ldr	r3, [r6, r3]
 8004b56:	9201      	str	r2, [sp, #4]
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d800      	bhi.n	8004b5e <f_lseek+0x192>
 8004b5c:	e78d      	b.n	8004a7a <f_lseek+0xae>
			fp->fsize = fp->fptr;
 8004b5e:	9a04      	ldr	r2, [sp, #16]
 8004b60:	50b3      	str	r3, [r6, r2]
			fp->flag |= FA__WRITTEN;
 8004b62:	2320      	movs	r3, #32
 8004b64:	4a64      	ldr	r2, [pc, #400]	; (8004cf8 <f_lseek+0x32c>)
 8004b66:	5cb1      	ldrb	r1, [r6, r2]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	54b3      	strb	r3, [r6, r2]
 8004b6c:	e785      	b.n	8004a7a <f_lseek+0xae>
		fp->fptr = nsect = 0;
 8004b6e:	2400      	movs	r4, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	58f3      	ldr	r3, [r6, r3]
 8004b76:	9a06      	ldr	r2, [sp, #24]
 8004b78:	9301      	str	r3, [sp, #4]
 8004b7a:	5a99      	ldrh	r1, [r3, r2]
 8004b7c:	2381      	movs	r3, #129	; 0x81
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	58f0      	ldr	r0, [r6, r3]
 8004b82:	f7fb fb63 	bl	800024c <__aeabi_uidivmod>
 8004b86:	2900      	cmp	r1, #0
 8004b88:	d0e0      	beq.n	8004b4c <f_lseek+0x180>
 8004b8a:	2383      	movs	r3, #131	; 0x83
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	58f2      	ldr	r2, [r6, r3]
 8004b90:	4294      	cmp	r4, r2
 8004b92:	d0db      	beq.n	8004b4c <f_lseek+0x180>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8004b94:	2140      	movs	r1, #64	; 0x40
 8004b96:	4d58      	ldr	r5, [pc, #352]	; (8004cf8 <f_lseek+0x32c>)
 8004b98:	4f58      	ldr	r7, [pc, #352]	; (8004cfc <f_lseek+0x330>)
 8004b9a:	5d73      	ldrb	r3, [r6, r5]
 8004b9c:	420b      	tst	r3, r1
 8004b9e:	d00c      	beq.n	8004bba <f_lseek+0x1ee>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004ba0:	9b01      	ldr	r3, [sp, #4]
 8004ba2:	0031      	movs	r1, r6
 8004ba4:	5dd8      	ldrb	r0, [r3, r7]
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f7fe f83e 	bl	8002c28 <disk_write>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d000      	beq.n	8004bb2 <f_lseek+0x1e6>
 8004bb0:	e742      	b.n	8004a38 <f_lseek+0x6c>
				fp->flag &= ~FA__DIRTY;
 8004bb2:	2240      	movs	r2, #64	; 0x40
 8004bb4:	5d73      	ldrb	r3, [r6, r5]
 8004bb6:	4393      	bics	r3, r2
 8004bb8:	5573      	strb	r3, [r6, r5]
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	58f3      	ldr	r3, [r6, r3]
 8004bc0:	0022      	movs	r2, r4
 8004bc2:	5dd8      	ldrb	r0, [r3, r7]
 8004bc4:	0031      	movs	r1, r6
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f7fe f820 	bl	8002c0c <disk_read>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d000      	beq.n	8004bd2 <f_lseek+0x206>
 8004bd0:	e732      	b.n	8004a38 <f_lseek+0x6c>
			fp->dsect = nsect;
 8004bd2:	2383      	movs	r3, #131	; 0x83
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	50f4      	str	r4, [r6, r3]
 8004bd8:	e7b8      	b.n	8004b4c <f_lseek+0x180>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	58f3      	ldr	r3, [r6, r3]
 8004be0:	9303      	str	r3, [sp, #12]
 8004be2:	9a03      	ldr	r2, [sp, #12]
 8004be4:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <f_lseek+0x328>)
 8004be6:	9903      	ldr	r1, [sp, #12]
 8004be8:	5cd2      	ldrb	r2, [r2, r3]
 8004bea:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <f_lseek+0x324>)
 8004bec:	5ac9      	ldrh	r1, [r1, r3]
 8004bee:	9306      	str	r3, [sp, #24]
 8004bf0:	4351      	muls	r1, r2
 8004bf2:	9101      	str	r1, [sp, #4]
			if (ifptr > 0 &&
 8004bf4:	2d00      	cmp	r5, #0
 8004bf6:	d037      	beq.n	8004c68 <f_lseek+0x29c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8004bf8:	1e78      	subs	r0, r7, #1
 8004bfa:	f7fb faa1 	bl	8000140 <__udivsi3>
 8004bfe:	3d01      	subs	r5, #1
 8004c00:	9007      	str	r0, [sp, #28]
 8004c02:	9901      	ldr	r1, [sp, #4]
 8004c04:	0028      	movs	r0, r5
 8004c06:	f7fb fa9b 	bl	8000140 <__udivsi3>
			if (ifptr > 0 &&
 8004c0a:	9b07      	ldr	r3, [sp, #28]
 8004c0c:	4283      	cmp	r3, r0
 8004c0e:	d32b      	bcc.n	8004c68 <f_lseek+0x29c>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8004c10:	9b01      	ldr	r3, [sp, #4]
 8004c12:	425b      	negs	r3, r3
 8004c14:	401d      	ands	r5, r3
				clst = fp->clust;
 8004c16:	4b34      	ldr	r3, [pc, #208]	; (8004ce8 <f_lseek+0x31c>)
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8004c18:	5135      	str	r5, [r6, r4]
				clst = fp->clust;
 8004c1a:	58f4      	ldr	r4, [r6, r3]
				ofs -= fp->fptr;
 8004c1c:	1b7f      	subs	r7, r7, r5
			if (clst != 0) {
 8004c1e:	2c00      	cmp	r4, #0
 8004c20:	d0a5      	beq.n	8004b6e <f_lseek+0x1a2>
 8004c22:	2580      	movs	r5, #128	; 0x80
 8004c24:	00ed      	lsls	r5, r5, #3
				while (ofs > bcs) {						/* Cluster following loop */
 8004c26:	9b01      	ldr	r3, [sp, #4]
 8004c28:	429f      	cmp	r7, r3
 8004c2a:	d831      	bhi.n	8004c90 <f_lseek+0x2c4>
				fp->fptr += ofs;
 8004c2c:	2281      	movs	r2, #129	; 0x81
 8004c2e:	00d2      	lsls	r2, r2, #3
 8004c30:	58b3      	ldr	r3, [r6, r2]
				if (ofs % SS(fp->fs)) {
 8004c32:	0038      	movs	r0, r7
				fp->fptr += ofs;
 8004c34:	19db      	adds	r3, r3, r7
 8004c36:	50b3      	str	r3, [r6, r2]
				if (ofs % SS(fp->fs)) {
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	58f3      	ldr	r3, [r6, r3]
 8004c3e:	9a06      	ldr	r2, [sp, #24]
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	5a9d      	ldrh	r5, [r3, r2]
 8004c44:	0029      	movs	r1, r5
 8004c46:	f7fb fb01 	bl	800024c <__aeabi_uidivmod>
 8004c4a:	2900      	cmp	r1, #0
 8004c4c:	d08f      	beq.n	8004b6e <f_lseek+0x1a2>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8004c4e:	0021      	movs	r1, r4
 8004c50:	9801      	ldr	r0, [sp, #4]
 8004c52:	f7fe fc4b 	bl	80034ec <clust2sect>
 8004c56:	1e04      	subs	r4, r0, #0
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8004c58:	d100      	bne.n	8004c5c <f_lseek+0x290>
 8004c5a:	e6e4      	b.n	8004a26 <f_lseek+0x5a>
					nsect += ofs / SS(fp->fs);
 8004c5c:	0029      	movs	r1, r5
 8004c5e:	0038      	movs	r0, r7
 8004c60:	f7fb fa6e 	bl	8000140 <__udivsi3>
 8004c64:	1904      	adds	r4, r0, r4
 8004c66:	e783      	b.n	8004b70 <f_lseek+0x1a4>
				clst = fp->sclust;						/* start from the first cluster */
 8004c68:	2582      	movs	r5, #130	; 0x82
 8004c6a:	00ed      	lsls	r5, r5, #3
 8004c6c:	5974      	ldr	r4, [r6, r5]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8004c6e:	2c00      	cmp	r4, #0
 8004c70:	d10b      	bne.n	8004c8a <f_lseek+0x2be>
					clst = create_chain(fp->fs, 0);
 8004c72:	0021      	movs	r1, r4
 8004c74:	9803      	ldr	r0, [sp, #12]
 8004c76:	f7fe fdf9 	bl	800386c <create_chain>
 8004c7a:	0004      	movs	r4, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8004c7c:	2801      	cmp	r0, #1
 8004c7e:	d100      	bne.n	8004c82 <f_lseek+0x2b6>
 8004c80:	e6d1      	b.n	8004a26 <f_lseek+0x5a>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	d100      	bne.n	8004c88 <f_lseek+0x2bc>
 8004c86:	e6d7      	b.n	8004a38 <f_lseek+0x6c>
					fp->sclust = clst;
 8004c88:	5170      	str	r0, [r6, r5]
				fp->clust = clst;
 8004c8a:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <f_lseek+0x31c>)
 8004c8c:	50f4      	str	r4, [r6, r3]
 8004c8e:	e7c6      	b.n	8004c1e <f_lseek+0x252>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8004c90:	2202      	movs	r2, #2
 8004c92:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <f_lseek+0x32c>)
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8004c94:	0021      	movs	r1, r4
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8004c96:	5cf3      	ldrb	r3, [r6, r3]
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8004c98:	5970      	ldr	r0, [r6, r5]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8004c9a:	4213      	tst	r3, r2
 8004c9c:	d005      	beq.n	8004caa <f_lseek+0x2de>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8004c9e:	f7fe fde5 	bl	800386c <create_chain>
 8004ca2:	1e04      	subs	r4, r0, #0
						if (clst == 0) {				/* When disk gets full, clip file size */
 8004ca4:	d104      	bne.n	8004cb0 <f_lseek+0x2e4>
 8004ca6:	9f01      	ldr	r7, [sp, #4]
 8004ca8:	e7c0      	b.n	8004c2c <f_lseek+0x260>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8004caa:	f7fe fc33 	bl	8003514 <get_fat>
 8004cae:	0004      	movs	r4, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004cb0:	1c63      	adds	r3, r4, #1
 8004cb2:	d100      	bne.n	8004cb6 <f_lseek+0x2ea>
 8004cb4:	e6c0      	b.n	8004a38 <f_lseek+0x6c>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8004cb6:	2c01      	cmp	r4, #1
 8004cb8:	d800      	bhi.n	8004cbc <f_lseek+0x2f0>
 8004cba:	e6b4      	b.n	8004a26 <f_lseek+0x5a>
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <f_lseek+0x31c>)
 8004cbe:	5972      	ldr	r2, [r6, r5]
 8004cc0:	58d2      	ldr	r2, [r2, r3]
 8004cc2:	4294      	cmp	r4, r2
 8004cc4:	d300      	bcc.n	8004cc8 <f_lseek+0x2fc>
 8004cc6:	e6ae      	b.n	8004a26 <f_lseek+0x5a>
					fp->fptr += bcs;
 8004cc8:	2281      	movs	r2, #129	; 0x81
 8004cca:	00d2      	lsls	r2, r2, #3
					fp->clust = clst;
 8004ccc:	50f4      	str	r4, [r6, r3]
					fp->fptr += bcs;
 8004cce:	9901      	ldr	r1, [sp, #4]
 8004cd0:	58b3      	ldr	r3, [r6, r2]
					ofs -= bcs;
 8004cd2:	1a7f      	subs	r7, r7, r1
					fp->fptr += bcs;
 8004cd4:	185b      	adds	r3, r3, r1
 8004cd6:	50b3      	str	r3, [r6, r2]
 8004cd8:	e7a5      	b.n	8004c26 <f_lseek+0x25a>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8004cda:	2311      	movs	r3, #17
 8004cdc:	e6a6      	b.n	8004a2c <f_lseek+0x60>
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	00000407 	.word	0x00000407
 8004ce4:	00000424 	.word	0x00000424
 8004ce8:	00000414 	.word	0x00000414
 8004cec:	0000040c 	.word	0x0000040c
 8004cf0:	0000040a 	.word	0x0000040a
 8004cf4:	00000402 	.word	0x00000402
 8004cf8:	00000406 	.word	0x00000406
 8004cfc:	00000401 	.word	0x00000401

08004d00 <f_stat>:
{
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	4c15      	ldr	r4, [pc, #84]	; (8004d58 <f_stat+0x58>)
 8004d04:	000e      	movs	r6, r1
 8004d06:	44a5      	add	sp, r4
 8004d08:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 0);
 8004d0a:	a8ff      	add	r0, sp, #1020	; 0x3fc
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	a901      	add	r1, sp, #4
 8004d10:	301c      	adds	r0, #28
 8004d12:	f7fe fa57 	bl	80031c4 <find_volume>
 8004d16:	ad06      	add	r5, sp, #24
 8004d18:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 8004d1a:	d116      	bne.n	8004d4a <f_stat+0x4a>
		INIT_BUF(dj);
 8004d1c:	2383      	movs	r3, #131	; 0x83
 8004d1e:	aa03      	add	r2, sp, #12
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	50ea      	str	r2, [r5, r3]
 8004d24:	4a0d      	ldr	r2, [pc, #52]	; (8004d5c <f_stat+0x5c>)
 8004d26:	3308      	adds	r3, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 8004d28:	9901      	ldr	r1, [sp, #4]
 8004d2a:	0028      	movs	r0, r5
		INIT_BUF(dj);
 8004d2c:	50ea      	str	r2, [r5, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8004d2e:	f7fe ff65 	bl	8003bfc <follow_path>
 8004d32:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {				/* Follow completed */
 8004d34:	d109      	bne.n	8004d4a <f_stat+0x4a>
			if (dj.dir) {		/* Found an object */
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <f_stat+0x60>)
 8004d38:	58eb      	ldr	r3, [r5, r3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <f_stat+0x54>
				if (fno) get_fileinfo(&dj, fno);
 8004d3e:	2e00      	cmp	r6, #0
 8004d40:	d003      	beq.n	8004d4a <f_stat+0x4a>
 8004d42:	0031      	movs	r1, r6
 8004d44:	0028      	movs	r0, r5
 8004d46:	f7fe f8a5 	bl	8002e94 <get_fileinfo>
}
 8004d4a:	0020      	movs	r0, r4
 8004d4c:	2388      	movs	r3, #136	; 0x88
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	449d      	add	sp, r3
 8004d52:	bd70      	pop	{r4, r5, r6, pc}
				res = FR_INVALID_NAME;
 8004d54:	2406      	movs	r4, #6
 8004d56:	e7f8      	b.n	8004d4a <f_stat+0x4a>
 8004d58:	fffffbc0 	.word	0xfffffbc0
 8004d5c:	200000c2 	.word	0x200000c2
 8004d60:	00000414 	.word	0x00000414

08004d64 <f_getfree>:
{
 8004d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d66:	0014      	movs	r4, r2
 8004d68:	b087      	sub	sp, #28
 8004d6a:	9005      	str	r0, [sp, #20]
 8004d6c:	9103      	str	r1, [sp, #12]
	res = find_volume(fatfs, &path, 0);
 8004d6e:	2200      	movs	r2, #0
 8004d70:	a905      	add	r1, sp, #20
 8004d72:	0020      	movs	r0, r4
 8004d74:	f7fe fa26 	bl	80031c4 <find_volume>
 8004d78:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 8004d7a:	d10c      	bne.n	8004d96 <f_getfree+0x32>
		if (fs->free_clust <= fs->n_fatent - 2) {
 8004d7c:	2382      	movs	r3, #130	; 0x82
	fs = *fatfs;
 8004d7e:	6824      	ldr	r4, [r4, #0]
		if (fs->free_clust <= fs->n_fatent - 2) {
 8004d80:	4f35      	ldr	r7, [pc, #212]	; (8004e58 <f_getfree+0xf4>)
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	59e2      	ldr	r2, [r4, r7]
 8004d86:	58e3      	ldr	r3, [r4, r3]
 8004d88:	9201      	str	r2, [sp, #4]
 8004d8a:	3a02      	subs	r2, #2
 8004d8c:	9704      	str	r7, [sp, #16]
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d804      	bhi.n	8004d9c <f_getfree+0x38>
			*nclst = fs->free_clust;
 8004d92:	9a03      	ldr	r2, [sp, #12]
 8004d94:	6013      	str	r3, [r2, #0]
}
 8004d96:	0028      	movs	r0, r5
 8004d98:	b007      	add	sp, #28
 8004d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			fat = fs->fs_type;
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	5ce3      	ldrb	r3, [r4, r3]
 8004da2:	9302      	str	r3, [sp, #8]
			if (fat == FS_FAT12) {
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d11d      	bne.n	8004de4 <f_getfree+0x80>
 8004da8:	2602      	movs	r6, #2
 8004daa:	0007      	movs	r7, r0
					stat = get_fat(fs, clst);
 8004dac:	0031      	movs	r1, r6
 8004dae:	0020      	movs	r0, r4
 8004db0:	f7fe fbb0 	bl	8003514 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d049      	beq.n	8004e4c <f_getfree+0xe8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8004db8:	2801      	cmp	r0, #1
 8004dba:	d049      	beq.n	8004e50 <f_getfree+0xec>
					if (stat == 0) n++;
 8004dbc:	4243      	negs	r3, r0
 8004dbe:	4158      	adcs	r0, r3
				} while (++clst < fs->n_fatent);
 8004dc0:	9b04      	ldr	r3, [sp, #16]
 8004dc2:	3601      	adds	r6, #1
 8004dc4:	58e3      	ldr	r3, [r4, r3]
					if (stat == 0) n++;
 8004dc6:	183f      	adds	r7, r7, r0
				} while (++clst < fs->n_fatent);
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	429e      	cmp	r6, r3
 8004dcc:	d3ee      	bcc.n	8004dac <f_getfree+0x48>
			fs->free_clust = n;
 8004dce:	2382      	movs	r3, #130	; 0x82
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	50e7      	str	r7, [r4, r3]
			fs->fsi_flag |= 1;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4a21      	ldr	r2, [pc, #132]	; (8004e5c <f_getfree+0xf8>)
 8004dd8:	5ca1      	ldrb	r1, [r4, r2]
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	54a3      	strb	r3, [r4, r2]
			*nclst = n;
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	601f      	str	r7, [r3, #0]
 8004de2:	e7d8      	b.n	8004d96 <f_getfree+0x32>
				sect = fs->fatbase;
 8004de4:	2384      	movs	r3, #132	; 0x84
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	58e1      	ldr	r1, [r4, r3]
			n = 0;
 8004dea:	0007      	movs	r7, r0
				i = 0; p = 0;
 8004dec:	0003      	movs	r3, r0
					if (!i) {
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d109      	bne.n	8004e06 <f_getfree+0xa2>
						res = move_window(fs, sect++);
 8004df2:	0020      	movs	r0, r4
 8004df4:	1c4e      	adds	r6, r1, #1
 8004df6:	f7fe f987 	bl	8003108 <move_window>
						if (res != FR_OK) break;
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d12a      	bne.n	8004e54 <f_getfree+0xf0>
						p = fs->win.d8;
 8004dfe:	0023      	movs	r3, r4
						res = move_window(fs, sect++);
 8004e00:	0031      	movs	r1, r6
						i = SS(fs);
 8004e02:	4a17      	ldr	r2, [pc, #92]	; (8004e60 <f_getfree+0xfc>)
 8004e04:	5aa0      	ldrh	r0, [r4, r2]
					if (fat == FS_FAT16) {
 8004e06:	9a02      	ldr	r2, [sp, #8]
 8004e08:	2a02      	cmp	r2, #2
 8004e0a:	d10e      	bne.n	8004e2a <f_getfree+0xc6>
						if (LD_WORD(p) == 0) n++;
 8004e0c:	785e      	ldrb	r6, [r3, #1]
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	0236      	lsls	r6, r6, #8
 8004e12:	4332      	orrs	r2, r6
 8004e14:	4256      	negs	r6, r2
 8004e16:	4172      	adcs	r2, r6
						p += 2; i -= 2;
 8004e18:	3302      	adds	r3, #2
						if (LD_WORD(p) == 0) n++;
 8004e1a:	18bf      	adds	r7, r7, r2
						p += 2; i -= 2;
 8004e1c:	3802      	subs	r0, #2
				} while (--clst);
 8004e1e:	9a01      	ldr	r2, [sp, #4]
 8004e20:	3a01      	subs	r2, #1
 8004e22:	9201      	str	r2, [sp, #4]
 8004e24:	2a00      	cmp	r2, #0
 8004e26:	d1e2      	bne.n	8004dee <f_getfree+0x8a>
 8004e28:	e7d1      	b.n	8004dce <f_getfree+0x6a>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8004e2a:	785e      	ldrb	r6, [r3, #1]
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	0236      	lsls	r6, r6, #8
 8004e30:	4316      	orrs	r6, r2
 8004e32:	789a      	ldrb	r2, [r3, #2]
						p += 4; i -= 4;
 8004e34:	3804      	subs	r0, #4
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8004e36:	0412      	lsls	r2, r2, #16
 8004e38:	4316      	orrs	r6, r2
 8004e3a:	78da      	ldrb	r2, [r3, #3]
						p += 4; i -= 4;
 8004e3c:	3304      	adds	r3, #4
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8004e3e:	0612      	lsls	r2, r2, #24
 8004e40:	4332      	orrs	r2, r6
 8004e42:	0112      	lsls	r2, r2, #4
 8004e44:	4256      	negs	r6, r2
 8004e46:	4172      	adcs	r2, r6
 8004e48:	18bf      	adds	r7, r7, r2
 8004e4a:	e7e8      	b.n	8004e1e <f_getfree+0xba>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8004e4c:	2501      	movs	r5, #1
 8004e4e:	e7be      	b.n	8004dce <f_getfree+0x6a>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8004e50:	2502      	movs	r5, #2
 8004e52:	e7bc      	b.n	8004dce <f_getfree+0x6a>
						res = move_window(fs, sect++);
 8004e54:	0005      	movs	r5, r0
 8004e56:	e7ba      	b.n	8004dce <f_getfree+0x6a>
 8004e58:	00000414 	.word	0x00000414
 8004e5c:	00000405 	.word	0x00000405
 8004e60:	0000040a 	.word	0x0000040a

08004e64 <f_gets>:
{
 8004e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e66:	0006      	movs	r6, r0
 8004e68:	0017      	movs	r7, r2
	TCHAR c, *p = buff;
 8004e6a:	0005      	movs	r5, r0
	int n = 0;
 8004e6c:	2400      	movs	r4, #0
{
 8004e6e:	b085      	sub	sp, #20
 8004e70:	9101      	str	r1, [sp, #4]
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8004e72:	9b01      	ldr	r3, [sp, #4]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	429c      	cmp	r4, r3
 8004e78:	da12      	bge.n	8004ea0 <f_gets+0x3c>
		f_read(fp, s, 1, &rc);
 8004e7a:	ab03      	add	r3, sp, #12
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	a902      	add	r1, sp, #8
 8004e80:	0038      	movs	r0, r7
 8004e82:	f7ff facf 	bl	8004424 <f_read>
		if (rc != 1) break;
 8004e86:	9b03      	ldr	r3, [sp, #12]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d109      	bne.n	8004ea0 <f_gets+0x3c>
		c = s[0];
 8004e8c:	ab02      	add	r3, sp, #8
 8004e8e:	781b      	ldrb	r3, [r3, #0]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8004e90:	2b0d      	cmp	r3, #13
 8004e92:	d0ee      	beq.n	8004e72 <f_gets+0xe>
		*p++ = c;
 8004e94:	1c6a      	adds	r2, r5, #1
 8004e96:	702b      	strb	r3, [r5, #0]
		n++;
 8004e98:	3401      	adds	r4, #1
		*p++ = c;
 8004e9a:	0015      	movs	r5, r2
		if (c == '\n') break;		/* Break on EOL */
 8004e9c:	2b0a      	cmp	r3, #10
 8004e9e:	d1e8      	bne.n	8004e72 <f_gets+0xe>
	*p = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8004ea4:	1e63      	subs	r3, r4, #1
 8004ea6:	419c      	sbcs	r4, r3
 8004ea8:	4264      	negs	r4, r4
 8004eaa:	4026      	ands	r6, r4
}
 8004eac:	0030      	movs	r0, r6
 8004eae:	b005      	add	sp, #20
 8004eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eb2 <f_puts>:
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 8004eb2:	2300      	movs	r3, #0
{
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	0004      	movs	r4, r0
 8004eb8:	b096      	sub	sp, #88	; 0x58
	pb.fp = fp;				/* Initialize output buffer */
 8004eba:	9103      	str	r1, [sp, #12]
	pb.nchr = pb.idx = 0;
 8004ebc:	9304      	str	r3, [sp, #16]
 8004ebe:	9305      	str	r3, [sp, #20]

	while (*str)			/* Put the string */
 8004ec0:	7821      	ldrb	r1, [r4, #0]
 8004ec2:	2900      	cmp	r1, #0
 8004ec4:	d106      	bne.n	8004ed4 <f_puts+0x22>
		putc_bfd(&pb, *str++);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8004ec6:	9a04      	ldr	r2, [sp, #16]
 8004ec8:	2a00      	cmp	r2, #0
 8004eca:	da08      	bge.n	8004ede <f_puts+0x2c>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 8004ecc:	2001      	movs	r0, #1
 8004ece:	4240      	negs	r0, r0
}
 8004ed0:	b016      	add	sp, #88	; 0x58
 8004ed2:	bd10      	pop	{r4, pc}
		putc_bfd(&pb, *str++);
 8004ed4:	a803      	add	r0, sp, #12
 8004ed6:	3401      	adds	r4, #1
 8004ed8:	f7ff fcd8 	bl	800488c <putc_bfd>
 8004edc:	e7f0      	b.n	8004ec0 <f_puts+0xe>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8004ede:	ab02      	add	r3, sp, #8
 8004ee0:	a906      	add	r1, sp, #24
 8004ee2:	9803      	ldr	r0, [sp, #12]
 8004ee4:	f7ff fba4 	bl	8004630 <f_write>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d1ef      	bne.n	8004ecc <f_puts+0x1a>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8004eec:	9b04      	ldr	r3, [sp, #16]
 8004eee:	9a02      	ldr	r2, [sp, #8]
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d1ea      	bne.n	8004ecc <f_puts+0x1a>
 8004ef6:	9805      	ldr	r0, [sp, #20]
 8004ef8:	e7ea      	b.n	8004ed0 <f_puts+0x1e>
	...

08004efc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004efc:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
 8004efe:	2401      	movs	r4, #1
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <FATFS_LinkDriverEx+0x40>)
 8004f02:	7a5d      	ldrb	r5, [r3, #9]
 8004f04:	42a5      	cmp	r5, r4
 8004f06:	d816      	bhi.n	8004f36 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004f08:	2400      	movs	r4, #0
 8004f0a:	7a5d      	ldrb	r5, [r3, #9]
 8004f0c:	b2ed      	uxtb	r5, r5
 8004f0e:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8004f10:	7a5d      	ldrb	r5, [r3, #9]
 8004f12:	00ad      	lsls	r5, r5, #2
 8004f14:	195d      	adds	r5, r3, r5
 8004f16:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8004f18:	7a58      	ldrb	r0, [r3, #9]
 8004f1a:	1818      	adds	r0, r3, r0
 8004f1c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004f1e:	7a5a      	ldrb	r2, [r3, #9]
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	1c50      	adds	r0, r2, #1
 8004f24:	b2c0      	uxtb	r0, r0
 8004f26:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8004f28:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8004f2a:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8004f2c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004f2e:	3b0b      	subs	r3, #11
    path[0] = DiskNum + '0';
 8004f30:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8004f32:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004f34:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 8004f36:	0020      	movs	r0, r4
 8004f38:	bd30      	pop	{r4, r5, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	200002c4 	.word	0x200002c4

08004f40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004f40:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8004f42:	2200      	movs	r2, #0
 8004f44:	f7ff ffda 	bl	8004efc <FATFS_LinkDriverEx>
}
 8004f48:	bd10      	pop	{r4, pc}
	...

08004f4c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8004f4c:	b510      	push	{r4, lr}
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8004f4e:	287f      	cmp	r0, #127	; 0x7f
 8004f50:	d907      	bls.n	8004f62 <ff_convert+0x16>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8004f52:	2900      	cmp	r1, #0
 8004f54:	d006      	beq.n	8004f64 <ff_convert+0x18>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004f56:	28ff      	cmp	r0, #255	; 0xff
 8004f58:	d811      	bhi.n	8004f7e <ff_convert+0x32>
 8004f5a:	3880      	subs	r0, #128	; 0x80
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <ff_convert+0x38>)
 8004f5e:	0040      	lsls	r0, r0, #1
 8004f60:	5ac0      	ldrh	r0, [r0, r3]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8004f62:	bd10      	pop	{r4, pc}
				if (chr == Tbl[c]) break;
 8004f64:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <ff_convert+0x38>)
 8004f66:	004c      	lsls	r4, r1, #1
 8004f68:	5aa4      	ldrh	r4, [r4, r2]
 8004f6a:	b28b      	uxth	r3, r1
 8004f6c:	4284      	cmp	r4, r0
 8004f6e:	d003      	beq.n	8004f78 <ff_convert+0x2c>
 8004f70:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8004f72:	2980      	cmp	r1, #128	; 0x80
 8004f74:	d1f7      	bne.n	8004f66 <ff_convert+0x1a>
 8004f76:	000b      	movs	r3, r1
			c = (c + 0x80) & 0xFF;
 8004f78:	3380      	adds	r3, #128	; 0x80
 8004f7a:	b2d8      	uxtb	r0, r3
 8004f7c:	e7f1      	b.n	8004f62 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004f7e:	2000      	movs	r0, #0
 8004f80:	e7ef      	b.n	8004f62 <ff_convert+0x16>
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	080067c6 	.word	0x080067c6

08004f88 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8004f88:	2300      	movs	r3, #0
{
 8004f8a:	b510      	push	{r4, lr}
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8004f8c:	4c05      	ldr	r4, [pc, #20]	; (8004fa4 <ff_wtoupper+0x1c>)
 8004f8e:	005a      	lsls	r2, r3, #1
 8004f90:	5b11      	ldrh	r1, [r2, r4]
 8004f92:	2900      	cmp	r1, #0
 8004f94:	d003      	beq.n	8004f9e <ff_wtoupper+0x16>
 8004f96:	4281      	cmp	r1, r0
 8004f98:	d102      	bne.n	8004fa0 <ff_wtoupper+0x18>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8004f9a:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <ff_wtoupper+0x20>)
 8004f9c:	5ad0      	ldrh	r0, [r2, r3]
}
 8004f9e:	bd10      	pop	{r4, pc}
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	e7f4      	b.n	8004f8e <ff_wtoupper+0x6>
 8004fa4:	080068c6 	.word	0x080068c6
 8004fa8:	08006aa6 	.word	0x08006aa6

08004fac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004fac:	b510      	push	{r4, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004fae:	4903      	ldr	r1, [pc, #12]	; (8004fbc <MX_FATFS_Init+0x10>)
 8004fb0:	4803      	ldr	r0, [pc, #12]	; (8004fc0 <MX_FATFS_Init+0x14>)
 8004fb2:	f7ff ffc5 	bl	8004f40 <FATFS_LinkDriver>
 8004fb6:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <MX_FATFS_Init+0x18>)
 8004fb8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004fba:	bd10      	pop	{r4, pc}
 8004fbc:	200002e4 	.word	0x200002e4
 8004fc0:	20000010 	.word	0x20000010
 8004fc4:	200002e8 	.word	0x200002e8

08004fc8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8004fc8:	2000      	movs	r0, #0
 8004fca:	4770      	bx	lr

08004fcc <SPI_TxByte>:
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
}

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8004fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fce:	466b      	mov	r3, sp
 8004fd0:	1ddd      	adds	r5, r3, #7
 8004fd2:	7028      	strb	r0, [r5, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004fd4:	4c06      	ldr	r4, [pc, #24]	; (8004ff0 <SPI_TxByte+0x24>)
 8004fd6:	0020      	movs	r0, r4
 8004fd8:	f7fd fbd0 	bl	800277c <HAL_SPI_GetState>
 8004fdc:	0002      	movs	r2, r0
 8004fde:	2801      	cmp	r0, #1
 8004fe0:	d1f8      	bne.n	8004fd4 <SPI_TxByte+0x8>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8004fe2:	23fa      	movs	r3, #250	; 0xfa
 8004fe4:	0029      	movs	r1, r5
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	0020      	movs	r0, r4
 8004fea:	f7fd f9c5 	bl	8002378 <HAL_SPI_Transmit>
}
 8004fee:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8004ff0:	20001410 	.word	0x20001410

08004ff4 <SELECT>:
{
 8004ff4:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2140      	movs	r1, #64	; 0x40
 8004ffa:	4802      	ldr	r0, [pc, #8]	; (8005004 <SELECT+0x10>)
 8004ffc:	f7fc fd7c 	bl	8001af8 <HAL_GPIO_WritePin>
}
 8005000:	bd10      	pop	{r4, pc}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	48000400 	.word	0x48000400

08005008 <DESELECT>:
{
 8005008:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800500a:	2201      	movs	r2, #1
 800500c:	2140      	movs	r1, #64	; 0x40
 800500e:	4802      	ldr	r0, [pc, #8]	; (8005018 <DESELECT+0x10>)
 8005010:	f7fc fd72 	bl	8001af8 <HAL_GPIO_WritePin>
}
 8005014:	bd10      	pop	{r4, pc}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	48000400 	.word	0x48000400

0800501c <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 800501c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t dummy, data;
  dummy = 0xFF;
 800501e:	260e      	movs	r6, #14
 8005020:	23ff      	movs	r3, #255	; 0xff
 8005022:	446e      	add	r6, sp
  data = 0;
 8005024:	240f      	movs	r4, #15
  dummy = 0xFF;
 8005026:	7033      	strb	r3, [r6, #0]
  data = 0;
 8005028:	2300      	movs	r3, #0
 800502a:	446c      	add	r4, sp
 800502c:	7023      	strb	r3, [r4, #0]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800502e:	4d09      	ldr	r5, [pc, #36]	; (8005054 <SPI_RxByte+0x38>)
 8005030:	0028      	movs	r0, r5
 8005032:	f7fd fba3 	bl	800277c <HAL_SPI_GetState>
 8005036:	0003      	movs	r3, r0
 8005038:	2801      	cmp	r0, #1
 800503a:	d1f8      	bne.n	800502e <SPI_RxByte+0x12>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800503c:	22fa      	movs	r2, #250	; 0xfa
 800503e:	0092      	lsls	r2, r2, #2
 8005040:	9200      	str	r2, [sp, #0]
 8005042:	0031      	movs	r1, r6
 8005044:	0022      	movs	r2, r4
 8005046:	0028      	movs	r0, r5
 8005048:	f7fd fa66 	bl	8002518 <HAL_SPI_TransmitReceive>
  
  return data;
 800504c:	7820      	ldrb	r0, [r4, #0]
}
 800504e:	b004      	add	sp, #16
 8005050:	bd70      	pop	{r4, r5, r6, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	20001410 	.word	0x20001410

08005058 <SD_PowerOn>:
  return res;
}

/*Power on*/
static void SD_PowerOn(void) 
{
 8005058:	b513      	push	{r0, r1, r4, lr}
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
  

  DESELECT();
 800505a:	f7ff ffd5 	bl	8005008 <DESELECT>
 800505e:	240a      	movs	r4, #10
  
  for(int i = 0; i < 10; i++)
  {
    SPI_TxByte(0xFF);
 8005060:	20ff      	movs	r0, #255	; 0xff
 8005062:	3c01      	subs	r4, #1
 8005064:	f7ff ffb2 	bl	8004fcc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8005068:	2c00      	cmp	r4, #0
 800506a:	d1f9      	bne.n	8005060 <SD_PowerOn+0x8>
  }
  
  /* SPI Chips Select */
  SELECT();
 800506c:	f7ff ffc2 	bl	8004ff4 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8005070:	466a      	mov	r2, sp
 8005072:	2340      	movs	r3, #64	; 0x40
 8005074:	7013      	strb	r3, [r2, #0]
  cmd_arg[1] = 0;
  cmd_arg[2] = 0;
  cmd_arg[3] = 0;
  cmd_arg[4] = 0;
  cmd_arg[5] = 0x95;
 8005076:	2395      	movs	r3, #149	; 0x95
  cmd_arg[1] = 0;
 8005078:	7054      	strb	r4, [r2, #1]
  cmd_arg[2] = 0;
 800507a:	7094      	strb	r4, [r2, #2]
  cmd_arg[3] = 0;
 800507c:	70d4      	strb	r4, [r2, #3]
  cmd_arg[4] = 0;
 800507e:	7114      	strb	r4, [r2, #4]
  cmd_arg[5] = 0x95;
 8005080:	7153      	strb	r3, [r2, #5]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
  {
    SPI_TxByte(cmd_arg[i]);
 8005082:	466b      	mov	r3, sp
 8005084:	5d18      	ldrb	r0, [r3, r4]
  for (int i = 0; i < 6; i++)
 8005086:	3401      	adds	r4, #1
    SPI_TxByte(cmd_arg[i]);
 8005088:	f7ff ffa0 	bl	8004fcc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800508c:	2c06      	cmp	r4, #6
 800508e:	d1f8      	bne.n	8005082 <SD_PowerOn+0x2a>
 8005090:	2480      	movs	r4, #128	; 0x80
 8005092:	01a4      	lsls	r4, r4, #6
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8005094:	f7ff ffc2 	bl	800501c <SPI_RxByte>
 8005098:	2801      	cmp	r0, #1
 800509a:	d002      	beq.n	80050a2 <SD_PowerOn+0x4a>
 800509c:	3c01      	subs	r4, #1
 800509e:	2c00      	cmp	r4, #0
 80050a0:	d1f8      	bne.n	8005094 <SD_PowerOn+0x3c>
  {
    Count--;
  }
  
  DESELECT();
 80050a2:	f7ff ffb1 	bl	8005008 <DESELECT>
  SPI_TxByte(0XFF);
 80050a6:	20ff      	movs	r0, #255	; 0xff
 80050a8:	f7ff ff90 	bl	8004fcc <SPI_TxByte>
  
  PowerFlag = 1;
 80050ac:	2201      	movs	r2, #1
 80050ae:	4b01      	ldr	r3, [pc, #4]	; (80050b4 <SD_PowerOn+0x5c>)
 80050b0:	701a      	strb	r2, [r3, #0]
}
 80050b2:	bd13      	pop	{r0, r1, r4, pc}
 80050b4:	200002d1 	.word	0x200002d1

080050b8 <SD_ReadyWait>:
  Timer2 = 50;
 80050b8:	2332      	movs	r3, #50	; 0x32
{
 80050ba:	b510      	push	{r4, lr}
  Timer2 = 50;
 80050bc:	4c05      	ldr	r4, [pc, #20]	; (80050d4 <SD_ReadyWait+0x1c>)
 80050be:	7023      	strb	r3, [r4, #0]
  SPI_RxByte();
 80050c0:	f7ff ffac 	bl	800501c <SPI_RxByte>
    res = SPI_RxByte();
 80050c4:	f7ff ffaa 	bl	800501c <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 80050c8:	28ff      	cmp	r0, #255	; 0xff
 80050ca:	d002      	beq.n	80050d2 <SD_ReadyWait+0x1a>
 80050cc:	7823      	ldrb	r3, [r4, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f8      	bne.n	80050c4 <SD_ReadyWait+0xc>
}
 80050d2:	bd10      	pop	{r4, pc}
 80050d4:	20001950 	.word	0x20001950

080050d8 <SD_TxDataBlock>:
}

/* ë�°ì�´í„° ì „ì†¡ íŒ¨í‚· */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	0005      	movs	r5, r0
 80050dc:	000e      	movs	r6, r1
  uint8_t resp, wc;
  uint8_t i = 0;
    
  /* SDì¹´ë“œ ì¤€ë¹„ ëŒ€ê¸° */
  if (SD_ReadyWait() != 0xFF)
 80050de:	f7ff ffeb 	bl	80050b8 <SD_ReadyWait>
 80050e2:	0003      	movs	r3, r0
    return FALSE;
 80050e4:	2000      	movs	r0, #0
  if (SD_ReadyWait() != 0xFF)
 80050e6:	2bff      	cmp	r3, #255	; 0xff
 80050e8:	d12c      	bne.n	8005144 <SD_TxDataBlock+0x6c>
  
  /* í† í�° ì „ì†¡ */
  SPI_TxByte(token);      
 80050ea:	0030      	movs	r0, r6
 80050ec:	f7ff ff6e 	bl	8004fcc <SPI_TxByte>
  
  /* ë�°ì�´í„° í† í�°ì�¸ ê²½ìš° */
  if (token != 0xFD) 
 80050f0:	2efd      	cmp	r6, #253	; 0xfd
 80050f2:	d021      	beq.n	8005138 <SD_TxDataBlock+0x60>
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	002c      	movs	r4, r5
 80050fa:	18ed      	adds	r5, r5, r3
    wc = 0;
    
    /* 512 ë°”ì�´íŠ¸ ë�°ì�´í„° ì „ì†¡ */
    do 
    { 
      SPI_TxByte(*buff++);
 80050fc:	7820      	ldrb	r0, [r4, #0]
 80050fe:	f7ff ff65 	bl	8004fcc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8005102:	7860      	ldrb	r0, [r4, #1]
 8005104:	3402      	adds	r4, #2
 8005106:	f7ff ff61 	bl	8004fcc <SPI_TxByte>
    } while (--wc);
 800510a:	42ac      	cmp	r4, r5
 800510c:	d1f6      	bne.n	80050fc <SD_TxDataBlock+0x24>
    
    SPI_RxByte();       /* CRC ë¬´ì‹œ */
 800510e:	f7ff ff85 	bl	800501c <SPI_RxByte>
    SPI_RxByte();
 8005112:	2541      	movs	r5, #65	; 0x41
 8005114:	f7ff ff82 	bl	800501c <SPI_RxByte>
    while (i <= 64) 
    {			
      resp = SPI_RxByte();
      
      /* ì—�ëŸ¬ ì�‘ë‹µ ì²˜ë¦¬ */
      if ((resp & 0x1F) == 0x05) 
 8005118:	261f      	movs	r6, #31
      resp = SPI_RxByte();
 800511a:	f7ff ff7f 	bl	800501c <SPI_RxByte>
      if ((resp & 0x1F) == 0x05) 
 800511e:	0003      	movs	r3, r0
      resp = SPI_RxByte();
 8005120:	0004      	movs	r4, r0
      if ((resp & 0x1F) == 0x05) 
 8005122:	4033      	ands	r3, r6
 8005124:	2b05      	cmp	r3, #5
 8005126:	d003      	beq.n	8005130 <SD_TxDataBlock+0x58>
 8005128:	3d01      	subs	r5, #1
 800512a:	b2ed      	uxtb	r5, r5
    while (i <= 64) 
 800512c:	2d00      	cmp	r5, #0
 800512e:	d1f4      	bne.n	800511a <SD_TxDataBlock+0x42>
      
      i++;
    }
    
    /* SPI ìˆ˜ì‹  ë²„í�¼ Clear */
    while (SPI_RxByte() == 0);
 8005130:	f7ff ff74 	bl	800501c <SPI_RxByte>
 8005134:	2800      	cmp	r0, #0
 8005136:	d0fb      	beq.n	8005130 <SD_TxDataBlock+0x58>
  }
  
  if ((resp & 0x1F) == 0x05)
 8005138:	201f      	movs	r0, #31
 800513a:	4004      	ands	r4, r0
 800513c:	3c05      	subs	r4, #5
 800513e:	4260      	negs	r0, r4
 8005140:	4160      	adcs	r0, r4
    return FALSE;
 8005142:	b2c0      	uxtb	r0, r0
    return TRUE;
  else
    return FALSE;
}
 8005144:	bd70      	pop	{r4, r5, r6, pc}

08005146 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD íŒ¨í‚· ì „ì†¡ */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8005146:	b570      	push	{r4, r5, r6, lr}
 8005148:	0005      	movs	r5, r0
 800514a:	000c      	movs	r4, r1
  uint8_t crc, res;
  
  /* SDì¹´ë“œ ëŒ€ê¸° */
  if (SD_ReadyWait() != 0xFF)
 800514c:	f7ff ffb4 	bl	80050b8 <SD_ReadyWait>
 8005150:	0003      	movs	r3, r0
    return 0xFF;
 8005152:	20ff      	movs	r0, #255	; 0xff
  if (SD_ReadyWait() != 0xFF)
 8005154:	4283      	cmp	r3, r0
 8005156:	d126      	bne.n	80051a6 <SD_SendCmd+0x60>
  
  /* ëª…ë ¹ íŒ¨í‚· ì „ì†¡ */
  SPI_TxByte(cmd); 			/* Command */
 8005158:	0028      	movs	r0, r5
 800515a:	f7ff ff37 	bl	8004fcc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800515e:	0e20      	lsrs	r0, r4, #24
 8005160:	f7ff ff34 	bl	8004fcc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8005164:	0c20      	lsrs	r0, r4, #16
 8005166:	b2c0      	uxtb	r0, r0
 8005168:	f7ff ff30 	bl	8004fcc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800516c:	0a20      	lsrs	r0, r4, #8
 800516e:	b2c0      	uxtb	r0, r0
 8005170:	f7ff ff2c 	bl	8004fcc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8005174:	b2e0      	uxtb	r0, r4
 8005176:	f7ff ff29 	bl	8004fcc <SPI_TxByte>
  
  /* ëª…ë ¹ë³„ CRC ì¤€ë¹„ */
  crc = 0;  
  if (cmd == CMD0)
    crc = 0x95; /* CRC for CMD0(0) */
 800517a:	2095      	movs	r0, #149	; 0x95
  if (cmd == CMD0)
 800517c:	2d40      	cmp	r5, #64	; 0x40
 800517e:	d003      	beq.n	8005188 <SD_SendCmd+0x42>
  crc = 0;  
 8005180:	2000      	movs	r0, #0
  
  if (cmd == CMD8)
 8005182:	2d48      	cmp	r5, #72	; 0x48
 8005184:	d100      	bne.n	8005188 <SD_SendCmd+0x42>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8005186:	3087      	adds	r0, #135	; 0x87
  
  /* CRC ì „ì†¡ */
  SPI_TxByte(crc);
 8005188:	f7ff ff20 	bl	8004fcc <SPI_TxByte>
  
  /* CMD12 Stop Reading ëª…ë ¹ì�¸ ê²½ìš°ì—�ëŠ” ì�‘ë‹µ ë°”ì�´íŠ¸ í•˜ë‚˜ë¥¼ ë²„ë¦°ë‹¤ */
  if (cmd == CMD12)
 800518c:	2d4c      	cmp	r5, #76	; 0x4c
 800518e:	d101      	bne.n	8005194 <SD_SendCmd+0x4e>
    SPI_RxByte();
 8005190:	f7ff ff44 	bl	800501c <SPI_RxByte>
  crc = 0;  
 8005194:	240a      	movs	r4, #10
  
  /* 10íšŒ ë‚´ì—� ì •ìƒ� ë�°ì�´í„°ë¥¼ ìˆ˜ì‹ í•œë‹¤. */
  uint8_t n = 10; 
  do
  {
    res = SPI_RxByte();
 8005196:	f7ff ff41 	bl	800501c <SPI_RxByte>
  } while ((res & 0x80) && --n);
 800519a:	0603      	lsls	r3, r0, #24
 800519c:	d503      	bpl.n	80051a6 <SD_SendCmd+0x60>
 800519e:	3c01      	subs	r4, #1
 80051a0:	b2e4      	uxtb	r4, r4
 80051a2:	2c00      	cmp	r4, #0
 80051a4:	d1f7      	bne.n	8005196 <SD_SendCmd+0x50>
  
  return res;
}
 80051a6:	bd70      	pop	{r4, r5, r6, pc}

080051a8 <SD_RxDataBlock>:
  Timer1 = 10;
 80051a8:	230a      	movs	r3, #10
{
 80051aa:	b570      	push	{r4, r5, r6, lr}
 80051ac:	0004      	movs	r4, r0
 80051ae:	000d      	movs	r5, r1
  Timer1 = 10;
 80051b0:	4e0f      	ldr	r6, [pc, #60]	; (80051f0 <SD_RxDataBlock+0x48>)
 80051b2:	7033      	strb	r3, [r6, #0]
    token = SPI_RxByte();
 80051b4:	f7ff ff32 	bl	800501c <SPI_RxByte>
 80051b8:	0003      	movs	r3, r0
  } while((token == 0xFF) && Timer1);
 80051ba:	28ff      	cmp	r0, #255	; 0xff
 80051bc:	d104      	bne.n	80051c8 <SD_RxDataBlock+0x20>
 80051be:	7830      	ldrb	r0, [r6, #0]
 80051c0:	b2c0      	uxtb	r0, r0
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d1f6      	bne.n	80051b4 <SD_RxDataBlock+0xc>
}
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 80051c8:	2000      	movs	r0, #0
  if(token != 0xFE)
 80051ca:	2bfe      	cmp	r3, #254	; 0xfe
 80051cc:	d1fb      	bne.n	80051c6 <SD_RxDataBlock+0x1e>
 80051ce:	0026      	movs	r6, r4
  *buff = SPI_RxByte();
 80051d0:	f7ff ff24 	bl	800501c <SPI_RxByte>
 80051d4:	7030      	strb	r0, [r6, #0]
 80051d6:	f7ff ff21 	bl	800501c <SPI_RxByte>
 80051da:	7070      	strb	r0, [r6, #1]
 80051dc:	3602      	adds	r6, #2
  } while(btr -= 2);
 80051de:	1b73      	subs	r3, r6, r5
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	d1f5      	bne.n	80051d0 <SD_RxDataBlock+0x28>
  SPI_RxByte(); /* CRC ë¬´ì‹œ */
 80051e4:	f7ff ff1a 	bl	800501c <SPI_RxByte>
  SPI_RxByte();
 80051e8:	f7ff ff18 	bl	800501c <SPI_RxByte>
 80051ec:	2001      	movs	r0, #1
 80051ee:	e7ea      	b.n	80051c6 <SD_RxDataBlock+0x1e>
 80051f0:	20001951 	.word	0x20001951

080051f4 <SD_disk_initialize>:
  user_diskio.c íŒŒì�¼ì—�ì„œ ì‚¬ìš©ë�œë‹¤.
-----------------------------------------------------------------------*/

/* SDì¹´ë“œ ì´ˆê¸°í™” */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80051f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t n, type, ocr[4];
  
  /* í•œì¢…ë¥˜ì�˜ ë“œë�¼ì�´ë¸Œë§Œ ì§€ì›� */
  if(drv)
    return STA_NOINIT;  
 80051f6:	2301      	movs	r3, #1
  if(drv)
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d106      	bne.n	800520a <SD_disk_initialize+0x16>
  
  /* SDì¹´ë“œ ë¯¸ì‚½ìž… */
  if(Stat & STA_NODISK)
 80051fc:	2602      	movs	r6, #2
 80051fe:	4d46      	ldr	r5, [pc, #280]	; (8005318 <SD_disk_initialize+0x124>)
 8005200:	782c      	ldrb	r4, [r5, #0]
 8005202:	4034      	ands	r4, r6
 8005204:	d003      	beq.n	800520e <SD_disk_initialize+0x1a>
  {
    /* Initialization failed */
    SD_PowerOff();
  }
  
  return Stat;
 8005206:	782b      	ldrb	r3, [r5, #0]
 8005208:	b2db      	uxtb	r3, r3
}
 800520a:	0018      	movs	r0, r3
 800520c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  SD_PowerOn();         
 800520e:	f7ff ff23 	bl	8005058 <SD_PowerOn>
  SELECT();             
 8005212:	f7ff feef 	bl	8004ff4 <SELECT>
  if (SD_SendCmd(CMD0, 0) == 1) 
 8005216:	0021      	movs	r1, r4
 8005218:	2040      	movs	r0, #64	; 0x40
 800521a:	f7ff ff94 	bl	8005146 <SD_SendCmd>
 800521e:	2801      	cmp	r0, #1
 8005220:	d16d      	bne.n	80052fe <SD_disk_initialize+0x10a>
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8005222:	21d5      	movs	r1, #213	; 0xd5
    Timer1 = 100;
 8005224:	2364      	movs	r3, #100	; 0x64
 8005226:	4f3d      	ldr	r7, [pc, #244]	; (800531c <SD_disk_initialize+0x128>)
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8005228:	0049      	lsls	r1, r1, #1
 800522a:	3047      	adds	r0, #71	; 0x47
    Timer1 = 100;
 800522c:	703b      	strb	r3, [r7, #0]
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800522e:	f7ff ff8a 	bl	8005146 <SD_SendCmd>
 8005232:	2801      	cmp	r0, #1
 8005234:	d140      	bne.n	80052b8 <SD_disk_initialize+0xc4>
        ocr[n] = SPI_RxByte();
 8005236:	f7ff fef1 	bl	800501c <SPI_RxByte>
 800523a:	ae01      	add	r6, sp, #4
 800523c:	55a0      	strb	r0, [r4, r6]
 800523e:	3401      	adds	r4, #1
      for (n = 0; n < 4; n++)
 8005240:	2c04      	cmp	r4, #4
 8005242:	d1f8      	bne.n	8005236 <SD_disk_initialize+0x42>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8005244:	78b3      	ldrb	r3, [r6, #2]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d159      	bne.n	80052fe <SD_disk_initialize+0x10a>
 800524a:	78f3      	ldrb	r3, [r6, #3]
 800524c:	2baa      	cmp	r3, #170	; 0xaa
 800524e:	d156      	bne.n	80052fe <SD_disk_initialize+0x10a>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8005250:	2480      	movs	r4, #128	; 0x80
 8005252:	05e4      	lsls	r4, r4, #23
 8005254:	2100      	movs	r1, #0
 8005256:	2077      	movs	r0, #119	; 0x77
 8005258:	f7ff ff75 	bl	8005146 <SD_SendCmd>
 800525c:	2801      	cmp	r0, #1
 800525e:	d924      	bls.n	80052aa <SD_disk_initialize+0xb6>
        } while (Timer1);
 8005260:	783b      	ldrb	r3, [r7, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f6      	bne.n	8005254 <SD_disk_initialize+0x60>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8005266:	783b      	ldrb	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d048      	beq.n	80052fe <SD_disk_initialize+0x10a>
 800526c:	2100      	movs	r1, #0
 800526e:	207a      	movs	r0, #122	; 0x7a
 8005270:	f7ff ff69 	bl	8005146 <SD_SendCmd>
 8005274:	2800      	cmp	r0, #0
 8005276:	d142      	bne.n	80052fe <SD_disk_initialize+0x10a>
 8005278:	0004      	movs	r4, r0
            ocr[n] = SPI_RxByte();
 800527a:	f7ff fecf 	bl	800501c <SPI_RxByte>
 800527e:	5530      	strb	r0, [r6, r4]
 8005280:	3401      	adds	r4, #1
          for (n = 0; n < 4; n++)
 8005282:	2c04      	cmp	r4, #4
 8005284:	d1f9      	bne.n	800527a <SD_disk_initialize+0x86>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8005286:	7833      	ldrb	r3, [r6, #0]
 8005288:	2606      	movs	r6, #6
 800528a:	065b      	lsls	r3, r3, #25
 800528c:	d400      	bmi.n	8005290 <SD_disk_initialize+0x9c>
 800528e:	3e04      	subs	r6, #4
  CardType = type;
 8005290:	4b23      	ldr	r3, [pc, #140]	; (8005320 <SD_disk_initialize+0x12c>)
 8005292:	701e      	strb	r6, [r3, #0]
  DESELECT();
 8005294:	f7ff feb8 	bl	8005008 <DESELECT>
  SPI_RxByte(); /* Idle ìƒ�íƒœ ì „í™˜ (Release DO) */
 8005298:	f7ff fec0 	bl	800501c <SPI_RxByte>
  if (type) 
 800529c:	2e00      	cmp	r6, #0
 800529e:	d037      	beq.n	8005310 <SD_disk_initialize+0x11c>
    Stat &= ~STA_NOINIT; 
 80052a0:	2201      	movs	r2, #1
 80052a2:	782b      	ldrb	r3, [r5, #0]
 80052a4:	4393      	bics	r3, r2
 80052a6:	702b      	strb	r3, [r5, #0]
 80052a8:	e7ad      	b.n	8005206 <SD_disk_initialize+0x12>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80052aa:	0021      	movs	r1, r4
 80052ac:	2069      	movs	r0, #105	; 0x69
 80052ae:	f7ff ff4a 	bl	8005146 <SD_SendCmd>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d1d4      	bne.n	8005260 <SD_disk_initialize+0x6c>
 80052b6:	e7d6      	b.n	8005266 <SD_disk_initialize+0x72>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80052b8:	0021      	movs	r1, r4
 80052ba:	2077      	movs	r0, #119	; 0x77
 80052bc:	f7ff ff43 	bl	8005146 <SD_SendCmd>
 80052c0:	2801      	cmp	r0, #1
 80052c2:	d805      	bhi.n	80052d0 <SD_disk_initialize+0xdc>
 80052c4:	0021      	movs	r1, r4
 80052c6:	2069      	movs	r0, #105	; 0x69
 80052c8:	f7ff ff3d 	bl	8005146 <SD_SendCmd>
 80052cc:	2801      	cmp	r0, #1
 80052ce:	d900      	bls.n	80052d2 <SD_disk_initialize+0xde>
 80052d0:	2601      	movs	r6, #1
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80052d2:	2100      	movs	r1, #0
          if (SD_SendCmd(CMD1, 0) == 0)
 80052d4:	2041      	movs	r0, #65	; 0x41
        if (type == 2) 
 80052d6:	2e02      	cmp	r6, #2
 80052d8:	d115      	bne.n	8005306 <SD_disk_initialize+0x112>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80052da:	2077      	movs	r0, #119	; 0x77
 80052dc:	f7ff ff33 	bl	8005146 <SD_SendCmd>
 80052e0:	2801      	cmp	r0, #1
 80052e2:	d90e      	bls.n	8005302 <SD_disk_initialize+0x10e>
      } while (Timer1);
 80052e4:	783b      	ldrb	r3, [r7, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f3      	bne.n	80052d2 <SD_disk_initialize+0xde>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80052ea:	783b      	ldrb	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d006      	beq.n	80052fe <SD_disk_initialize+0x10a>
 80052f0:	2180      	movs	r1, #128	; 0x80
 80052f2:	2050      	movs	r0, #80	; 0x50
 80052f4:	0089      	lsls	r1, r1, #2
 80052f6:	f7ff ff26 	bl	8005146 <SD_SendCmd>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d0c8      	beq.n	8005290 <SD_disk_initialize+0x9c>
        type = 0;
 80052fe:	2600      	movs	r6, #0
 8005300:	e7c6      	b.n	8005290 <SD_disk_initialize+0x9c>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8005302:	2100      	movs	r1, #0
 8005304:	2069      	movs	r0, #105	; 0x69
 8005306:	f7ff ff1e 	bl	8005146 <SD_SendCmd>
 800530a:	2800      	cmp	r0, #0
 800530c:	d1ea      	bne.n	80052e4 <SD_disk_initialize+0xf0>
 800530e:	e7ec      	b.n	80052ea <SD_disk_initialize+0xf6>
  PowerFlag = 0;
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <SD_disk_initialize+0x130>)
 8005312:	701e      	strb	r6, [r3, #0]
 8005314:	e777      	b.n	8005206 <SD_disk_initialize+0x12>
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	20000008 	.word	0x20000008
 800531c:	20001951 	.word	0x20001951
 8005320:	200002d0 	.word	0x200002d0
 8005324:	200002d1 	.word	0x200002d1

08005328 <SD_disk_status>:

/* ë””ìŠ¤í�¬ ìƒ�íƒœ í™•ì�¸ */
DSTATUS SD_disk_status(BYTE drv) 
{
  if (drv)
    return STA_NOINIT; 
 8005328:	2301      	movs	r3, #1
  if (drv)
 800532a:	2800      	cmp	r0, #0
 800532c:	d102      	bne.n	8005334 <SD_disk_status+0xc>
  
  return Stat;
 800532e:	4b02      	ldr	r3, [pc, #8]	; (8005338 <SD_disk_status+0x10>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	b2db      	uxtb	r3, r3
}
 8005334:	0018      	movs	r0, r3
 8005336:	4770      	bx	lr
 8005338:	20000008 	.word	0x20000008

0800533c <SD_disk_read>:

/* ì„¹í„° ì�½ê¸° */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	0007      	movs	r7, r0
 8005340:	000d      	movs	r5, r1
 8005342:	0016      	movs	r6, r2
 8005344:	001c      	movs	r4, r3
  if (pdrv || !count)
    return RES_PARERR;
 8005346:	2004      	movs	r0, #4
  if (pdrv || !count)
 8005348:	2f00      	cmp	r7, #0
 800534a:	d123      	bne.n	8005394 <SD_disk_read+0x58>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d021      	beq.n	8005394 <SD_disk_read+0x58>
  
  if (Stat & STA_NOINIT)
 8005350:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <SD_disk_read+0x8c>)
    return RES_NOTRDY;
 8005352:	3801      	subs	r0, #1
  if (Stat & STA_NOINIT)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	07db      	lsls	r3, r3, #31
 8005358:	d41c      	bmi.n	8005394 <SD_disk_read+0x58>
  
  if (!(CardType & 4))
 800535a:	4b1c      	ldr	r3, [pc, #112]	; (80053cc <SD_disk_read+0x90>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	075b      	lsls	r3, r3, #29
 8005360:	d400      	bmi.n	8005364 <SD_disk_read+0x28>
    sector *= 512;      /* ì§€ì • sectorë¥¼ Byte addressing ë‹¨ìœ„ë¡œ ë³€ê²½ */
 8005362:	0256      	lsls	r6, r2, #9
  
  SELECT();
 8005364:	f7ff fe46 	bl	8004ff4 <SELECT>
  
  if (count == 1) 
  { 
    /* ì‹±ê¸€ ë¸”ë¡� ì�½ê¸° */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8005368:	0031      	movs	r1, r6
  if (count == 1) 
 800536a:	2c01      	cmp	r4, #1
 800536c:	d113      	bne.n	8005396 <SD_disk_read+0x5a>
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800536e:	2051      	movs	r0, #81	; 0x51
 8005370:	f7ff fee9 	bl	8005146 <SD_SendCmd>
 8005374:	2800      	cmp	r0, #0
 8005376:	d106      	bne.n	8005386 <SD_disk_read+0x4a>
 8005378:	2180      	movs	r1, #128	; 0x80
 800537a:	0028      	movs	r0, r5
 800537c:	0089      	lsls	r1, r1, #2
 800537e:	f7ff ff13 	bl	80051a8 <SD_RxDataBlock>
 8005382:	4244      	negs	r4, r0
 8005384:	4144      	adcs	r4, r0
      /* STOP_TRANSMISSION, ëª¨ë“  ë¸”ëŸ­ì�„ ë‹¤ ì�½ì�€ í›„, ì „ì†¡ ì¤‘ì§€ ìš”ì²­ */
      SD_SendCmd(CMD12, 0); 
    }
  }
  
  DESELECT();
 8005386:	f7ff fe3f 	bl	8005008 <DESELECT>
  SPI_RxByte(); /* Idle ìƒ�íƒœ(Release DO) */
 800538a:	f7ff fe47 	bl	800501c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800538e:	1e60      	subs	r0, r4, #1
 8005390:	4184      	sbcs	r4, r0
 8005392:	b2e0      	uxtb	r0, r4
}
 8005394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (SD_SendCmd(CMD18, sector) == 0) 
 8005396:	2052      	movs	r0, #82	; 0x52
 8005398:	f7ff fed5 	bl	8005146 <SD_SendCmd>
 800539c:	2800      	cmp	r0, #0
 800539e:	d1f2      	bne.n	8005386 <SD_disk_read+0x4a>
        if (!SD_RxDataBlock(buff, 512))
 80053a0:	2680      	movs	r6, #128	; 0x80
 80053a2:	00b6      	lsls	r6, r6, #2
 80053a4:	0031      	movs	r1, r6
 80053a6:	0028      	movs	r0, r5
 80053a8:	f7ff fefe 	bl	80051a8 <SD_RxDataBlock>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d005      	beq.n	80053bc <SD_disk_read+0x80>
        buff += 512;
 80053b0:	2380      	movs	r3, #128	; 0x80
      } while (--count);
 80053b2:	3c01      	subs	r4, #1
        buff += 512;
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	18ed      	adds	r5, r5, r3
      } while (--count);
 80053b8:	2c00      	cmp	r4, #0
 80053ba:	d1f3      	bne.n	80053a4 <SD_disk_read+0x68>
      SD_SendCmd(CMD12, 0); 
 80053bc:	2100      	movs	r1, #0
 80053be:	204c      	movs	r0, #76	; 0x4c
 80053c0:	f7ff fec1 	bl	8005146 <SD_SendCmd>
 80053c4:	e7df      	b.n	8005386 <SD_disk_read+0x4a>
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	20000008 	.word	0x20000008
 80053cc:	200002d0 	.word	0x200002d0

080053d0 <SD_disk_write>:

/* ì„¹í„° ì“°ê¸° */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d2:	0007      	movs	r7, r0
 80053d4:	000d      	movs	r5, r1
 80053d6:	0016      	movs	r6, r2
 80053d8:	001c      	movs	r4, r3
  if (pdrv || !count)
    return RES_PARERR;
 80053da:	2004      	movs	r0, #4
  if (pdrv || !count)
 80053dc:	2f00      	cmp	r7, #0
 80053de:	d127      	bne.n	8005430 <SD_disk_write+0x60>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d025      	beq.n	8005430 <SD_disk_write+0x60>
  
  if (Stat & STA_NOINIT)
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <SD_disk_write+0xac>)
    return RES_NOTRDY;
 80053e6:	3801      	subs	r0, #1
  if (Stat & STA_NOINIT)
 80053e8:	781a      	ldrb	r2, [r3, #0]
 80053ea:	07d2      	lsls	r2, r2, #31
 80053ec:	d420      	bmi.n	8005430 <SD_disk_write+0x60>
  
  if (Stat & STA_PROTECT)
 80053ee:	781a      	ldrb	r2, [r3, #0]
 80053f0:	2304      	movs	r3, #4
    return RES_WRPRT;
 80053f2:	3801      	subs	r0, #1
  if (Stat & STA_PROTECT)
 80053f4:	421a      	tst	r2, r3
 80053f6:	d11b      	bne.n	8005430 <SD_disk_write+0x60>
  
  if (!(CardType & 4))
 80053f8:	4f21      	ldr	r7, [pc, #132]	; (8005480 <SD_disk_write+0xb0>)
 80053fa:	783a      	ldrb	r2, [r7, #0]
 80053fc:	421a      	tst	r2, r3
 80053fe:	d100      	bne.n	8005402 <SD_disk_write+0x32>
    sector *= 512; /* ì§€ì • sectorë¥¼ Byte addressing ë‹¨ìœ„ë¡œ ë³€ê²½ */
 8005400:	0276      	lsls	r6, r6, #9
  
  SELECT();
 8005402:	f7ff fdf7 	bl	8004ff4 <SELECT>
  
  if (count == 1) 
 8005406:	2c01      	cmp	r4, #1
 8005408:	d113      	bne.n	8005432 <SD_disk_write+0x62>
  { 
    /* ì‹±ê¸€ ë¸”ë¡� ì“°ê¸° */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800540a:	0031      	movs	r1, r6
 800540c:	2058      	movs	r0, #88	; 0x58
 800540e:	f7ff fe9a 	bl	8005146 <SD_SendCmd>
 8005412:	2800      	cmp	r0, #0
 8005414:	d130      	bne.n	8005478 <SD_disk_write+0xa8>
 8005416:	21fe      	movs	r1, #254	; 0xfe
 8005418:	0028      	movs	r0, r5
 800541a:	f7ff fe5d 	bl	80050d8 <SD_TxDataBlock>
 800541e:	4244      	negs	r4, r0
 8005420:	4144      	adcs	r4, r0
        count = 1;
      }
    }
  }
  
  DESELECT();
 8005422:	f7ff fdf1 	bl	8005008 <DESELECT>
  SPI_RxByte();
 8005426:	f7ff fdf9 	bl	800501c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800542a:	1e60      	subs	r0, r4, #1
 800542c:	4184      	sbcs	r4, r0
 800542e:	b2e0      	uxtb	r0, r4
}
 8005430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (CardType & 2) 
 8005432:	783b      	ldrb	r3, [r7, #0]
 8005434:	079b      	lsls	r3, r3, #30
 8005436:	d507      	bpl.n	8005448 <SD_disk_write+0x78>
      SD_SendCmd(CMD55, 0);
 8005438:	2100      	movs	r1, #0
 800543a:	2077      	movs	r0, #119	; 0x77
 800543c:	f7ff fe83 	bl	8005146 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8005440:	0021      	movs	r1, r4
 8005442:	2057      	movs	r0, #87	; 0x57
 8005444:	f7ff fe7f 	bl	8005146 <SD_SendCmd>
    if (SD_SendCmd(CMD25, sector) == 0) 
 8005448:	0031      	movs	r1, r6
 800544a:	2059      	movs	r0, #89	; 0x59
 800544c:	f7ff fe7b 	bl	8005146 <SD_SendCmd>
 8005450:	2800      	cmp	r0, #0
 8005452:	d1e6      	bne.n	8005422 <SD_disk_write+0x52>
        if(!SD_TxDataBlock(buff, 0xFC))
 8005454:	21fc      	movs	r1, #252	; 0xfc
 8005456:	0028      	movs	r0, r5
 8005458:	f7ff fe3e 	bl	80050d8 <SD_TxDataBlock>
 800545c:	2800      	cmp	r0, #0
 800545e:	d005      	beq.n	800546c <SD_disk_write+0x9c>
        buff += 512;
 8005460:	2380      	movs	r3, #128	; 0x80
      } while (--count);
 8005462:	3c01      	subs	r4, #1
        buff += 512;
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	18ed      	adds	r5, r5, r3
      } while (--count);
 8005468:	2c00      	cmp	r4, #0
 800546a:	d1f3      	bne.n	8005454 <SD_disk_write+0x84>
      if(!SD_TxDataBlock(0, 0xFD))
 800546c:	21fd      	movs	r1, #253	; 0xfd
 800546e:	2000      	movs	r0, #0
 8005470:	f7ff fe32 	bl	80050d8 <SD_TxDataBlock>
 8005474:	2800      	cmp	r0, #0
 8005476:	d1d4      	bne.n	8005422 <SD_disk_write+0x52>
        count = 1;
 8005478:	2401      	movs	r4, #1
 800547a:	e7d2      	b.n	8005422 <SD_disk_write+0x52>
 800547c:	20000008 	.word	0x20000008
 8005480:	200002d0 	.word	0x200002d0

08005484 <SD_disk_ioctl>:
#endif /* _READONLY */

/* ê¸°íƒ€ í•¨ìˆ˜ */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8005484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005486:	0006      	movs	r6, r0
 8005488:	b085      	sub	sp, #20
 800548a:	000f      	movs	r7, r1
 800548c:	0015      	movs	r5, r2
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;
  
  if (drv)
    return RES_PARERR;
 800548e:	2404      	movs	r4, #4
  if (drv)
 8005490:	2800      	cmp	r0, #0
 8005492:	d108      	bne.n	80054a6 <SD_disk_ioctl+0x22>
  
  res = RES_ERROR;
  
  if (ctrl == CTRL_POWER) 
 8005494:	2905      	cmp	r1, #5
 8005496:	d118      	bne.n	80054ca <SD_disk_ioctl+0x46>
  {
    switch (*ptr) 
 8005498:	7813      	ldrb	r3, [r2, #0]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d00d      	beq.n	80054ba <SD_disk_ioctl+0x36>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <SD_disk_ioctl+0x28>
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d00d      	beq.n	80054c2 <SD_disk_ioctl+0x3e>
    DESELECT();
    SPI_RxByte();
  }
  
  return res;
}
 80054a6:	0020      	movs	r0, r4
 80054a8:	b005      	add	sp, #20
 80054aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return PowerFlag;
 80054ac:	4a46      	ldr	r2, [pc, #280]	; (80055c8 <SD_disk_ioctl+0x144>)
      res = RES_OK;
 80054ae:	001c      	movs	r4, r3
      if (SD_CheckPower())
 80054b0:	7811      	ldrb	r1, [r2, #0]
 80054b2:	2900      	cmp	r1, #0
 80054b4:	d0f7      	beq.n	80054a6 <SD_disk_ioctl+0x22>
  PowerFlag = 0;
 80054b6:	7013      	strb	r3, [r2, #0]
 80054b8:	e7f5      	b.n	80054a6 <SD_disk_ioctl+0x22>
      SD_PowerOn();             /* Power On */
 80054ba:	f7ff fdcd 	bl	8005058 <SD_PowerOn>
      res = RES_OK;             /* Power Check */
 80054be:	0034      	movs	r4, r6
      break;
 80054c0:	e7f1      	b.n	80054a6 <SD_disk_ioctl+0x22>
  return PowerFlag;
 80054c2:	4b41      	ldr	r3, [pc, #260]	; (80055c8 <SD_disk_ioctl+0x144>)
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	7053      	strb	r3, [r2, #1]
 80054c8:	e7f9      	b.n	80054be <SD_disk_ioctl+0x3a>
    if (Stat & STA_NOINIT)
 80054ca:	4b40      	ldr	r3, [pc, #256]	; (80055cc <SD_disk_ioctl+0x148>)
      return RES_NOTRDY;
 80054cc:	2403      	movs	r4, #3
    if (Stat & STA_NOINIT)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	07db      	lsls	r3, r3, #31
 80054d2:	d4e8      	bmi.n	80054a6 <SD_disk_ioctl+0x22>
    SELECT();
 80054d4:	f7ff fd8e 	bl	8004ff4 <SELECT>
    switch (ctrl) 
 80054d8:	2f0d      	cmp	r7, #13
 80054da:	d86b      	bhi.n	80055b4 <SD_disk_ioctl+0x130>
 80054dc:	0038      	movs	r0, r7
 80054de:	f7fa fe25 	bl	800012c <__gnu_thumb1_case_uqi>
 80054e2:	074b      	.short	0x074b
 80054e4:	69696946 	.word	0x69696946
 80054e8:	69696969 	.word	0x69696969
 80054ec:	63605369 	.word	0x63605369
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80054f0:	2100      	movs	r1, #0
 80054f2:	2049      	movs	r0, #73	; 0x49
 80054f4:	f7ff fe27 	bl	8005146 <SD_SendCmd>
 80054f8:	1e04      	subs	r4, r0, #0
 80054fa:	d005      	beq.n	8005508 <SD_disk_ioctl+0x84>
  res = RES_ERROR;
 80054fc:	2401      	movs	r4, #1
    DESELECT();
 80054fe:	f7ff fd83 	bl	8005008 <DESELECT>
    SPI_RxByte();
 8005502:	f7ff fd8b 	bl	800501c <SPI_RxByte>
 8005506:	e7ce      	b.n	80054a6 <SD_disk_ioctl+0x22>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8005508:	2110      	movs	r1, #16
 800550a:	4668      	mov	r0, sp
 800550c:	f7ff fe4c 	bl	80051a8 <SD_RxDataBlock>
 8005510:	2800      	cmp	r0, #0
 8005512:	d0f3      	beq.n	80054fc <SD_disk_ioctl+0x78>
        if ((csd[0] >> 6) == 1) 
 8005514:	466b      	mov	r3, sp
 8005516:	7819      	ldrb	r1, [r3, #0]
 8005518:	7a5a      	ldrb	r2, [r3, #9]
 800551a:	0989      	lsrs	r1, r1, #6
 800551c:	7a1b      	ldrb	r3, [r3, #8]
 800551e:	2901      	cmp	r1, #1
 8005520:	d106      	bne.n	8005530 <SD_disk_ioctl+0xac>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8005522:	3201      	adds	r2, #1
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	18d3      	adds	r3, r2, r3
          *(DWORD*) buff = (DWORD) csize << 10;
 8005528:	b29b      	uxth	r3, r3
 800552a:	029b      	lsls	r3, r3, #10
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800552c:	602b      	str	r3, [r5, #0]
 800552e:	e7e6      	b.n	80054fe <SD_disk_ioctl+0x7a>
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8005530:	4669      	mov	r1, sp
 8005532:	79c9      	ldrb	r1, [r1, #7]
 8005534:	099b      	lsrs	r3, r3, #6
 8005536:	0089      	lsls	r1, r1, #2
 8005538:	185b      	adds	r3, r3, r1
 800553a:	4669      	mov	r1, sp
 800553c:	20c0      	movs	r0, #192	; 0xc0
 800553e:	7989      	ldrb	r1, [r1, #6]
 8005540:	0100      	lsls	r0, r0, #4
 8005542:	0289      	lsls	r1, r1, #10
 8005544:	4001      	ands	r1, r0
 8005546:	3301      	adds	r3, #1
 8005548:	185b      	adds	r3, r3, r1
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800554a:	4669      	mov	r1, sp
 800554c:	200f      	movs	r0, #15
 800554e:	7949      	ldrb	r1, [r1, #5]
 8005550:	0052      	lsls	r2, r2, #1
 8005552:	4001      	ands	r1, r0
 8005554:	4668      	mov	r0, sp
 8005556:	7a80      	ldrb	r0, [r0, #10]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8005558:	b29b      	uxth	r3, r3
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800555a:	09c0      	lsrs	r0, r0, #7
 800555c:	1809      	adds	r1, r1, r0
 800555e:	2006      	movs	r0, #6
 8005560:	3102      	adds	r1, #2
 8005562:	4002      	ands	r2, r0
 8005564:	188a      	adds	r2, r1, r2
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	3a09      	subs	r2, #9
 800556a:	4093      	lsls	r3, r2
 800556c:	e7de      	b.n	800552c <SD_disk_ioctl+0xa8>
      *(WORD*) buff = 512;
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	802b      	strh	r3, [r5, #0]
      res = RES_OK;
 8005574:	2400      	movs	r4, #0
      break;
 8005576:	e7c2      	b.n	80054fe <SD_disk_ioctl+0x7a>
      if (SD_ReadyWait() == 0xFF)
 8005578:	f7ff fd9e 	bl	80050b8 <SD_ReadyWait>
 800557c:	38ff      	subs	r0, #255	; 0xff
 800557e:	0004      	movs	r4, r0
 8005580:	1e60      	subs	r0, r4, #1
 8005582:	4184      	sbcs	r4, r0
  res = RES_ERROR;
 8005584:	b2e4      	uxtb	r4, r4
 8005586:	e7ba      	b.n	80054fe <SD_disk_ioctl+0x7a>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8005588:	2100      	movs	r1, #0
 800558a:	2049      	movs	r0, #73	; 0x49
 800558c:	f7ff fddb 	bl	8005146 <SD_SendCmd>
 8005590:	2800      	cmp	r0, #0
 8005592:	d1b3      	bne.n	80054fc <SD_disk_ioctl+0x78>
 8005594:	2110      	movs	r1, #16
 8005596:	0028      	movs	r0, r5
 8005598:	f7ff fe06 	bl	80051a8 <SD_RxDataBlock>
 800559c:	4244      	negs	r4, r0
 800559e:	4144      	adcs	r4, r0
 80055a0:	e7f0      	b.n	8005584 <SD_disk_ioctl+0x100>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80055a2:	2100      	movs	r1, #0
 80055a4:	204a      	movs	r0, #74	; 0x4a
 80055a6:	e7f1      	b.n	800558c <SD_disk_ioctl+0x108>
      if (SD_SendCmd(CMD58, 0) == 0) 
 80055a8:	2100      	movs	r1, #0
 80055aa:	207a      	movs	r0, #122	; 0x7a
 80055ac:	f7ff fdcb 	bl	8005146 <SD_SendCmd>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d001      	beq.n	80055b8 <SD_disk_ioctl+0x134>
      res = RES_PARERR;
 80055b4:	2404      	movs	r4, #4
 80055b6:	e7a2      	b.n	80054fe <SD_disk_ioctl+0x7a>
 80055b8:	1d2c      	adds	r4, r5, #4
          *ptr++ = SPI_RxByte();
 80055ba:	f7ff fd2f 	bl	800501c <SPI_RxByte>
 80055be:	7028      	strb	r0, [r5, #0]
 80055c0:	3501      	adds	r5, #1
        for (n = 0; n < 4; n++)
 80055c2:	42a5      	cmp	r5, r4
 80055c4:	d1f9      	bne.n	80055ba <SD_disk_ioctl+0x136>
 80055c6:	e7f5      	b.n	80055b4 <SD_disk_ioctl+0x130>
 80055c8:	200002d1 	.word	0x200002d1
 80055cc:	20000008 	.word	0x20000008

080055d0 <send_uart>:
uint32_t total, free_space;


/* to send the data to the uart */
void send_uart (char *string)
{
 80055d0:	b510      	push	{r4, lr}
 80055d2:	0004      	movs	r4, r0
	uint8_t len = strlen (string);
 80055d4:	f7fa fd98 	bl	8000108 <strlen>
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);  // transmit in blocking mode
 80055d8:	23fa      	movs	r3, #250	; 0xfa
 80055da:	b2c2      	uxtb	r2, r0
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	0021      	movs	r1, r4
 80055e0:	4801      	ldr	r0, [pc, #4]	; (80055e8 <send_uart+0x18>)
 80055e2:	f7fd fa25 	bl	8002a30 <HAL_UART_Transmit>
}
 80055e6:	bd10      	pop	{r4, pc}
 80055e8:	20000f84 	.word	0x20000f84

080055ec <bufclear>:
	return i;
}

void bufclear (void)  // clear buffer
{
	for (int i=0; i<1024; i++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	2280      	movs	r2, #128	; 0x80
	{
		buffer[i] = '\0';
 80055f0:	0018      	movs	r0, r3
{
 80055f2:	b510      	push	{r4, lr}
		buffer[i] = '\0';
 80055f4:	4c03      	ldr	r4, [pc, #12]	; (8005604 <bufclear+0x18>)
	for (int i=0; i<1024; i++)
 80055f6:	00d2      	lsls	r2, r2, #3
		buffer[i] = '\0';
 80055f8:	1919      	adds	r1, r3, r4
	for (int i=0; i<1024; i++)
 80055fa:	3301      	adds	r3, #1
		buffer[i] = '\0';
 80055fc:	7008      	strb	r0, [r1, #0]
	for (int i=0; i<1024; i++)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d1fa      	bne.n	80055f8 <bufclear+0xc>
	}
}
 8005602:	bd10      	pop	{r4, pc}
 8005604:	20001004 	.word	0x20001004

08005608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005608:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800560a:	2410      	movs	r4, #16
{
 800560c:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800560e:	2230      	movs	r2, #48	; 0x30
 8005610:	2100      	movs	r1, #0
 8005612:	a80a      	add	r0, sp, #40	; 0x28
 8005614:	f000 fc29 	bl	8005e6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005618:	0022      	movs	r2, r4
 800561a:	2100      	movs	r1, #0
 800561c:	a801      	add	r0, sp, #4
 800561e:	f000 fc24 	bl	8005e6a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005622:	2214      	movs	r2, #20
 8005624:	2100      	movs	r1, #0
 8005626:	a805      	add	r0, sp, #20
 8005628:	f000 fc1f 	bl	8005e6a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800562c:	2312      	movs	r3, #18
 800562e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8005630:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005632:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005634:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8005636:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8005638:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800563a:	3c0e      	subs	r4, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800563c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800563e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8005640:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005642:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8005644:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005646:	f7fc fa63 	bl	8001b10 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800564a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800564c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800564e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005650:	0021      	movs	r1, r4
 8005652:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005654:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005656:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005658:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800565a:	f7fc fc8d 	bl	8001f78 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800565e:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005660:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005662:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005664:	f7fc fd1c 	bl	80020a0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8005668:	b017      	add	sp, #92	; 0x5c
 800566a:	bd30      	pop	{r4, r5, pc}

0800566c <main>:
{
 800566c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566e:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8005670:	f7fb fd92 	bl	8001198 <HAL_Init>
  SystemClock_Config();
 8005674:	f7ff ffc8 	bl	8005608 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005678:	2214      	movs	r2, #20
 800567a:	2100      	movs	r1, #0
 800567c:	a80f      	add	r0, sp, #60	; 0x3c
 800567e:	f000 fbf4 	bl	8005e6a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005682:	2180      	movs	r1, #128	; 0x80
 8005684:	4ceb      	ldr	r4, [pc, #940]	; (8005a34 <main+0x3c8>)
 8005686:	0309      	lsls	r1, r1, #12
 8005688:	6962      	ldr	r2, [r4, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 800568a:	27c0      	movs	r7, #192	; 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800568c:	430a      	orrs	r2, r1
 800568e:	6162      	str	r2, [r4, #20]
 8005690:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 8005692:	00bf      	lsls	r7, r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005694:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005696:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005698:	930c      	str	r3, [sp, #48]	; 0x30
 800569a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800569c:	6962      	ldr	r2, [r4, #20]
 800569e:	0289      	lsls	r1, r1, #10
 80056a0:	430a      	orrs	r2, r1
 80056a2:	6162      	str	r2, [r4, #20]
 80056a4:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80056a6:	48e4      	ldr	r0, [pc, #912]	; (8005a38 <main+0x3cc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056a8:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056aa:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ac:	930d      	str	r3, [sp, #52]	; 0x34
 80056ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056b0:	6962      	ldr	r2, [r4, #20]
 80056b2:	02c9      	lsls	r1, r1, #11
 80056b4:	430a      	orrs	r2, r1
 80056b6:	6162      	str	r2, [r4, #20]
 80056b8:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80056ba:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056bc:	400b      	ands	r3, r1
 80056be:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80056c0:	0039      	movs	r1, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOC, LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin, GPIO_PIN_RESET);
 80056c4:	f7fc fa18 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80056c8:	2200      	movs	r2, #0
 80056ca:	2140      	movs	r1, #64	; 0x40
 80056cc:	48db      	ldr	r0, [pc, #876]	; (8005a3c <main+0x3d0>)
 80056ce:	f7fc fa13 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80056d2:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056d4:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80056d6:	2601      	movs	r6, #1
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80056d8:	a90f      	add	r1, sp, #60	; 0x3c
 80056da:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80056dc:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056de:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e0:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80056e2:	f7fc f953 	bl	800198c <HAL_GPIO_Init>
  /*Configure GPIO pins : LD4_BLUE_LED_Pin LD3_GREEN_LED_Pin */
  GPIO_InitStruct.Pin = LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056e6:	a90f      	add	r1, sp, #60	; 0x3c
 80056e8:	48d3      	ldr	r0, [pc, #844]	; (8005a38 <main+0x3cc>)
  GPIO_InitStruct.Pin = LD4_BLUE_LED_Pin|LD3_GREEN_LED_Pin;
 80056ea:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056ec:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ee:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056f0:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056f2:	f7fc f94b 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80056f6:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056f8:	a90f      	add	r1, sp, #60	; 0x3c
 80056fa:	48d0      	ldr	r0, [pc, #832]	; (8005a3c <main+0x3d0>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80056fc:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056fe:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005700:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005702:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005704:	f7fc f942 	bl	800198c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005708:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800570a:	002a      	movs	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800570c:	4333      	orrs	r3, r6
 800570e:	6163      	str	r3, [r4, #20]
 8005710:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005712:	0029      	movs	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005714:	4033      	ands	r3, r6
 8005716:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005718:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800571a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800571c:	f7fc f82a 	bl	8001774 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005720:	2009      	movs	r0, #9
 8005722:	f7fc f857 	bl	80017d4 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8005726:	48c6      	ldr	r0, [pc, #792]	; (8005a40 <main+0x3d4>)
 8005728:	4bc6      	ldr	r3, [pc, #792]	; (8005a44 <main+0x3d8>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800572a:	6085      	str	r5, [r0, #8]
  hspi1.Instance = SPI1;
 800572c:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800572e:	2382      	movs	r3, #130	; 0x82
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005734:	23e0      	movs	r3, #224	; 0xe0
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800573a:	2380      	movs	r3, #128	; 0x80
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005740:	3bf1      	subs	r3, #241	; 0xf1
 8005742:	3bff      	subs	r3, #255	; 0xff
 8005744:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8005746:	3b09      	subs	r3, #9
 8005748:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800574a:	199b      	adds	r3, r3, r6
 800574c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800574e:	6105      	str	r5, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005750:	6145      	str	r5, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005752:	6205      	str	r5, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005754:	6245      	str	r5, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005756:	6285      	str	r5, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005758:	6305      	str	r5, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800575a:	f7fc fdaf 	bl	80022bc <HAL_SPI_Init>
  huart1.Instance = USART1;
 800575e:	48ba      	ldr	r0, [pc, #744]	; (8005a48 <main+0x3dc>)
 8005760:	4bba      	ldr	r3, [pc, #744]	; (8005a4c <main+0x3e0>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005762:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 8005764:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8005766:	23e1      	movs	r3, #225	; 0xe1
 8005768:	025b      	lsls	r3, r3, #9
 800576a:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800576c:	6144      	str	r4, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800576e:	6085      	str	r5, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005770:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005772:	6105      	str	r5, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005774:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005776:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005778:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800577a:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800577c:	f7fd f9f2 	bl	8002b64 <HAL_UART_Init>
  MX_FATFS_Init();
 8005780:	f7ff fc14 	bl	8004fac <MX_FATFS_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8005784:	0022      	movs	r2, r4
 8005786:	0029      	movs	r1, r5
 8005788:	a80f      	add	r0, sp, #60	; 0x3c
 800578a:	f000 fb6e 	bl	8005e6a <memset>
  hadc.Instance = ADC1;
 800578e:	4cb0      	ldr	r4, [pc, #704]	; (8005a50 <main+0x3e4>)
 8005790:	4bb0      	ldr	r3, [pc, #704]	; (8005a54 <main+0x3e8>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005792:	2704      	movs	r7, #4
  hadc.Instance = ADC1;
 8005794:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005796:	23c2      	movs	r3, #194	; 0xc2
 8005798:	33ff      	adds	r3, #255	; 0xff
 800579a:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800579c:	0020      	movs	r0, r4
  hadc.Init.DMAContinuousRequests = DISABLE;
 800579e:	1d63      	adds	r3, r4, #5
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80057a0:	6167      	str	r7, [r4, #20]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80057a2:	77dd      	strb	r5, [r3, #31]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80057a4:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80057a6:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80057a8:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80057aa:	6126      	str	r6, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80057ac:	7625      	strb	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80057ae:	7665      	strb	r5, [r4, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80057b0:	76a5      	strb	r5, [r4, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80057b2:	76e5      	strb	r5, [r4, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80057b4:	6225      	str	r5, [r4, #32]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80057b6:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80057b8:	f7fb fdd2 	bl	8001360 <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	015b      	lsls	r3, r3, #5
 80057c0:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80057c2:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057c4:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80057c6:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057c8:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80057ca:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.Channel = ADC_CHANNEL_1;
 80057cc:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057ce:	f7fb ff51 	bl	8001674 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 80057d2:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057d4:	a90f      	add	r1, sp, #60	; 0x3c
 80057d6:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80057d8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057da:	f7fb ff4b 	bl	8001674 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_3;
 80057de:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057e0:	a90f      	add	r1, sp, #60	; 0x3c
 80057e2:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80057e4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057e6:	f7fb ff45 	bl	8001674 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057ea:	a90f      	add	r1, sp, #60	; 0x3c
 80057ec:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 80057ee:	970f      	str	r7, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057f0:	f7fb ff40 	bl	8001674 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;
 80057f4:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057f6:	a90f      	add	r1, sp, #60	; 0x3c
 80057f8:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 80057fa:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057fc:	f7fb ff3a 	bl	8001674 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 8005800:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005802:	a90f      	add	r1, sp, #60	; 0x3c
 8005804:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 8005806:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005808:	f7fb ff34 	bl	8001674 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_7;
 800580c:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800580e:	a90f      	add	r1, sp, #60	; 0x3c
 8005810:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_7;
 8005812:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005814:	f7fb ff2e 	bl	8001674 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_8;
 8005818:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800581a:	a90f      	add	r1, sp, #60	; 0x3c
 800581c:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_8;
 800581e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005820:	f7fb ff28 	bl	8001674 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_9;
 8005824:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005826:	a90f      	add	r1, sp, #60	; 0x3c
 8005828:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 800582a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800582c:	f7fb ff22 	bl	8001674 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_10;
 8005830:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005832:	a90f      	add	r1, sp, #60	; 0x3c
 8005834:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_10;
 8005836:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005838:	f7fb ff1c 	bl	8001674 <HAL_ADC_ConfigChannel>
	fresult = f_mount(&fs, "", 1);
 800583c:	4f86      	ldr	r7, [pc, #536]	; (8005a58 <main+0x3ec>)
 800583e:	0032      	movs	r2, r6
 8005840:	0039      	movs	r1, r7
 8005842:	4886      	ldr	r0, [pc, #536]	; (8005a5c <main+0x3f0>)
 8005844:	f7fe fca6 	bl	8004194 <f_mount>
 8005848:	4b85      	ldr	r3, [pc, #532]	; (8005a60 <main+0x3f4>)
 800584a:	7018      	strb	r0, [r3, #0]
	if (fresult != FR_OK) send_uart ("error in mounting SD CARD...\n");
 800584c:	42a8      	cmp	r0, r5
 800584e:	d100      	bne.n	8005852 <main+0x1e6>
 8005850:	e0ee      	b.n	8005a30 <main+0x3c4>
 8005852:	4884      	ldr	r0, [pc, #528]	; (8005a64 <main+0x3f8>)
	else send_uart("SD CARD mounted successfully...\n");
 8005854:	f7ff febc 	bl	80055d0 <send_uart>
	f_getfree("", &fre_clust, &pfs);
 8005858:	4d83      	ldr	r5, [pc, #524]	; (8005a68 <main+0x3fc>)
 800585a:	4e84      	ldr	r6, [pc, #528]	; (8005a6c <main+0x400>)
 800585c:	002a      	movs	r2, r5
 800585e:	0031      	movs	r1, r6
 8005860:	0038      	movs	r0, r7
 8005862:	f7ff fa7f 	bl	8004d64 <f_getfree>
	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8005866:	682a      	ldr	r2, [r5, #0]
 8005868:	4b81      	ldr	r3, [pc, #516]	; (8005a70 <main+0x404>)
 800586a:	4982      	ldr	r1, [pc, #520]	; (8005a74 <main+0x408>)
 800586c:	58d3      	ldr	r3, [r2, r3]
 800586e:	5c50      	ldrb	r0, [r2, r1]
 8005870:	3b02      	subs	r3, #2
 8005872:	4358      	muls	r0, r3
 8005874:	f7fb fad8 	bl	8000e28 <__aeabi_ui2d>
 8005878:	2200      	movs	r2, #0
 800587a:	4b7f      	ldr	r3, [pc, #508]	; (8005a78 <main+0x40c>)
 800587c:	f7fa fd0a 	bl	8000294 <__aeabi_dmul>
 8005880:	f7fa fcea 	bl	8000258 <__aeabi_d2uiz>
 8005884:	4b7d      	ldr	r3, [pc, #500]	; (8005a7c <main+0x410>)
	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8005886:	4f7e      	ldr	r7, [pc, #504]	; (8005a80 <main+0x414>)
	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8005888:	0002      	movs	r2, r0
 800588a:	6018      	str	r0, [r3, #0]
	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 800588c:	497d      	ldr	r1, [pc, #500]	; (8005a84 <main+0x418>)
 800588e:	0038      	movs	r0, r7
 8005890:	f000 fbae 	bl	8005ff0 <siprintf>
	send_uart(buffer);
 8005894:	0038      	movs	r0, r7
 8005896:	f7ff fe9b 	bl	80055d0 <send_uart>
	bufclear();
 800589a:	f7ff fea7 	bl	80055ec <bufclear>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800589e:	682b      	ldr	r3, [r5, #0]
 80058a0:	4a74      	ldr	r2, [pc, #464]	; (8005a74 <main+0x408>)
 80058a2:	6830      	ldr	r0, [r6, #0]
 80058a4:	5c9b      	ldrb	r3, [r3, r2]
	int fileNumber = 0;
 80058a6:	2500      	movs	r5, #0
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80058a8:	4358      	muls	r0, r3
 80058aa:	f7fb fabd 	bl	8000e28 <__aeabi_ui2d>
 80058ae:	2200      	movs	r2, #0
 80058b0:	4b71      	ldr	r3, [pc, #452]	; (8005a78 <main+0x40c>)
 80058b2:	f7fa fcef 	bl	8000294 <__aeabi_dmul>
 80058b6:	f7fa fccf 	bl	8000258 <__aeabi_d2uiz>
 80058ba:	4b73      	ldr	r3, [pc, #460]	; (8005a88 <main+0x41c>)
 80058bc:	0002      	movs	r2, r0
 80058be:	6018      	str	r0, [r3, #0]
	sprintf (buffer, "SD CARD Free Space: \t%lu\n",free_space);
 80058c0:	4972      	ldr	r1, [pc, #456]	; (8005a8c <main+0x420>)
 80058c2:	0038      	movs	r0, r7
 80058c4:	f000 fb94 	bl	8005ff0 <siprintf>
	send_uart(buffer);
 80058c8:	0038      	movs	r0, r7
 80058ca:	f7ff fe81 	bl	80055d0 <send_uart>
	sprintf(name, "F%d.TXT", fileNumber);
 80058ce:	4e70      	ldr	r6, [pc, #448]	; (8005a90 <main+0x424>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	0031      	movs	r1, r6
 80058d4:	a80f      	add	r0, sp, #60	; 0x3c
 80058d6:	f000 fb8b 	bl	8005ff0 <siprintf>
	while(f_stat(name,NULL)==FR_OK)
 80058da:	2100      	movs	r1, #0
 80058dc:	a80f      	add	r0, sp, #60	; 0x3c
 80058de:	f7ff fa0f 	bl	8004d00 <f_stat>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d100      	bne.n	80058e8 <main+0x27c>
 80058e6:	e0eb      	b.n	8005ac0 <main+0x454>
	fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80058e8:	4e6a      	ldr	r6, [pc, #424]	; (8005a94 <main+0x428>)
 80058ea:	2213      	movs	r2, #19
 80058ec:	a90f      	add	r1, sp, #60	; 0x3c
 80058ee:	0030      	movs	r0, r6
 80058f0:	f7fe fc88 	bl	8004204 <f_open>
 80058f4:	4d5a      	ldr	r5, [pc, #360]	; (8005a60 <main+0x3f4>)
	fresult = f_puts("ADC0 ADC1 ADC2 ADC3 ADC4 ADC5 ADC6 ADC7 ADC8 ADC9\n", &fil);
 80058f6:	0031      	movs	r1, r6
	fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80058f8:	7028      	strb	r0, [r5, #0]
	fresult = f_puts("ADC0 ADC1 ADC2 ADC3 ADC4 ADC5 ADC6 ADC7 ADC8 ADC9\n", &fil);
 80058fa:	4867      	ldr	r0, [pc, #412]	; (8005a98 <main+0x42c>)
 80058fc:	f7ff fad9 	bl	8004eb2 <f_puts>
 8005900:	7028      	strb	r0, [r5, #0]
	fresult = f_close(&fil);
 8005902:	0030      	movs	r0, r6
 8005904:	f7ff f84c 	bl	80049a0 <f_close>
 8005908:	7028      	strb	r0, [r5, #0]
	send_uart (name); //ex: File1.txt created and is ready for data to be written
 800590a:	a80f      	add	r0, sp, #60	; 0x3c
 800590c:	f7ff fe60 	bl	80055d0 <send_uart>
	send_uart (" created and header was written \n");
 8005910:	4862      	ldr	r0, [pc, #392]	; (8005a9c <main+0x430>)
 8005912:	f7ff fe5d 	bl	80055d0 <send_uart>
  send_uart("Begin ADC 10 Channel w/ LED Test\r\n");
 8005916:	4862      	ldr	r0, [pc, #392]	; (8005aa0 <main+0x434>)
 8005918:	f7ff fe5a 	bl	80055d0 <send_uart>
	  HAL_GPIO_TogglePin(GPIOC, LD4_BLUE_LED_Pin);
 800591c:	2580      	movs	r5, #128	; 0x80
  send_uart("ADC0 ADC1 ADC2 ADC3 ADC4 ADC5 ADC6 ADC7 ADC8 ADC9\r\n"); //note that these are not pin numbers
 800591e:	4861      	ldr	r0, [pc, #388]	; (8005aa4 <main+0x438>)
 8005920:	f7ff fe56 	bl	80055d0 <send_uart>
	  HAL_GPIO_TogglePin(GPIOC, LD4_BLUE_LED_Pin);
 8005924:	006d      	lsls	r5, r5, #1
 8005926:	0029      	movs	r1, r5
 8005928:	4843      	ldr	r0, [pc, #268]	; (8005a38 <main+0x3cc>)
 800592a:	f7fc f8eb 	bl	8001b04 <HAL_GPIO_TogglePin>
	  if (HAL_GPIO_ReadPin(GPIOA, USER_BUTTON_Pin) == GPIO_PIN_SET) {
 800592e:	2090      	movs	r0, #144	; 0x90
 8005930:	2101      	movs	r1, #1
 8005932:	05c0      	lsls	r0, r0, #23
 8005934:	f7fc f8da 	bl	8001aec <HAL_GPIO_ReadPin>
 8005938:	2801      	cmp	r0, #1
 800593a:	d000      	beq.n	800593e <main+0x2d2>
 800593c:	e0c7      	b.n	8005ace <main+0x462>
			  HAL_GPIO_TogglePin(GPIOC, LD3_GREEN_LED_Pin);
 800593e:	2680      	movs	r6, #128	; 0x80
 8005940:	2506      	movs	r5, #6
 8005942:	00b6      	lsls	r6, r6, #2
 8005944:	0031      	movs	r1, r6
 8005946:	483c      	ldr	r0, [pc, #240]	; (8005a38 <main+0x3cc>)
 8005948:	f7fc f8dc 	bl	8001b04 <HAL_GPIO_TogglePin>
 800594c:	3d01      	subs	r5, #1
			  HAL_Delay(100);  //1000ms delay
 800594e:	2064      	movs	r0, #100	; 0x64
 8005950:	f7fb fc44 	bl	80011dc <HAL_Delay>
		  for (int i = 0; i < 6; i++) {
 8005954:	2d00      	cmp	r5, #0
 8005956:	d1f5      	bne.n	8005944 <main+0x2d8>
  HAL_ADC_Start_DMA(&hadc, value, 10);  //start the adc in dma mode
 8005958:	220a      	movs	r2, #10
 800595a:	4953      	ldr	r1, [pc, #332]	; (8005aa8 <main+0x43c>)
 800595c:	0020      	movs	r0, r4
 800595e:	f7fb fdf1 	bl	8001544 <HAL_ADC_Start_DMA>
  char *str = malloc(sizeof(uint32_t) * 10 + sizeof(char) * (9 + 2));
 8005962:	2033      	movs	r0, #51	; 0x33
 8005964:	f000 fa6e 	bl	8005e44 <malloc>
 8005968:	230a      	movs	r3, #10
 800596a:	0007      	movs	r7, r0
 800596c:	9308      	str	r3, [sp, #32]
	sprintf(str, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n",
 800596e:	4a4e      	ldr	r2, [pc, #312]	; (8005aa8 <main+0x43c>)
 8005970:	494e      	ldr	r1, [pc, #312]	; (8005aac <main+0x440>)
 8005972:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005974:	0038      	movs	r0, r7
 8005976:	9307      	str	r3, [sp, #28]
 8005978:	6a13      	ldr	r3, [r2, #32]
 800597a:	9306      	str	r3, [sp, #24]
 800597c:	69d3      	ldr	r3, [r2, #28]
 800597e:	9305      	str	r3, [sp, #20]
 8005980:	6993      	ldr	r3, [r2, #24]
 8005982:	9304      	str	r3, [sp, #16]
 8005984:	6953      	ldr	r3, [r2, #20]
 8005986:	9303      	str	r3, [sp, #12]
 8005988:	6913      	ldr	r3, [r2, #16]
 800598a:	9302      	str	r3, [sp, #8]
 800598c:	68d3      	ldr	r3, [r2, #12]
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	6893      	ldr	r3, [r2, #8]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	6853      	ldr	r3, [r2, #4]
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	f000 fb2a 	bl	8005ff0 <siprintf>
	send_uart(str);
 800599c:	0038      	movs	r0, r7
 800599e:	f7ff fe17 	bl	80055d0 <send_uart>
	fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_WRITE);
 80059a2:	4d3c      	ldr	r5, [pc, #240]	; (8005a94 <main+0x428>)
 80059a4:	2212      	movs	r2, #18
 80059a6:	a90f      	add	r1, sp, #60	; 0x3c
 80059a8:	0028      	movs	r0, r5
 80059aa:	f7fe fc2b 	bl	8004204 <f_open>
	fresult = f_lseek(&fil, fil.fsize);
 80059ae:	4b40      	ldr	r3, [pc, #256]	; (8005ab0 <main+0x444>)
	fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_WRITE);
 80059b0:	4e2b      	ldr	r6, [pc, #172]	; (8005a60 <main+0x3f4>)
	fresult = f_lseek(&fil, fil.fsize);
 80059b2:	58e9      	ldr	r1, [r5, r3]
	fresult = f_open(&fil, name, FA_OPEN_ALWAYS | FA_WRITE);
 80059b4:	7030      	strb	r0, [r6, #0]
	fresult = f_lseek(&fil, fil.fsize);
 80059b6:	0028      	movs	r0, r5
 80059b8:	f7ff f808 	bl	80049cc <f_lseek>
	fresult = f_puts(str, &fil);
 80059bc:	0029      	movs	r1, r5
	fresult = f_lseek(&fil, fil.fsize);
 80059be:	7030      	strb	r0, [r6, #0]
	fresult = f_puts(str, &fil);
 80059c0:	0038      	movs	r0, r7
 80059c2:	f7ff fa76 	bl	8004eb2 <f_puts>
 80059c6:	7030      	strb	r0, [r6, #0]
	f_close (&fil);
 80059c8:	0028      	movs	r0, r5
 80059ca:	f7fe ffe9 	bl	80049a0 <f_close>
	HAL_ADC_Stop(&hadc);
 80059ce:	0020      	movs	r0, r4
 80059d0:	f7fb fd9a 	bl	8001508 <HAL_ADC_Stop>
	HAL_ADC_Start(&hadc);
 80059d4:	0020      	movs	r0, r4
 80059d6:	f7fb fd6b 	bl	80014b0 <HAL_ADC_Start>
 80059da:	9b08      	ldr	r3, [sp, #32]
 80059dc:	3b01      	subs	r3, #1
 80059de:	9308      	str	r3, [sp, #32]
 80059e0:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <main+0x444>)
 80059e2:	9309      	str	r3, [sp, #36]	; 0x24
  for (int i = 0; i < 10; i++)  //@todo change this to a while loop with a button to break out of data collection
 80059e4:	9b08      	ldr	r3, [sp, #32]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1c1      	bne.n	800596e <main+0x302>
  	send_uart ("Data Collection halted.  Sending data written to serial stream\n\n");
 80059ea:	4832      	ldr	r0, [pc, #200]	; (8005ab4 <main+0x448>)
 80059ec:	f7ff fdf0 	bl	80055d0 <send_uart>
	fresult = f_open (&fil, name, FA_READ);
 80059f0:	2201      	movs	r2, #1
 80059f2:	a90f      	add	r1, sp, #60	; 0x3c
 80059f4:	0028      	movs	r0, r5
 80059f6:	f7fe fc05 	bl	8004204 <f_open>
	while(!f_eof(&fil)) {
 80059fa:	2781      	movs	r7, #129	; 0x81
	fresult = f_open (&fil, name, FA_READ);
 80059fc:	7030      	strb	r0, [r6, #0]
	while(!f_eof(&fil)) {
 80059fe:	00ff      	lsls	r7, r7, #3
 8005a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a02:	58e9      	ldr	r1, [r5, r3]
 8005a04:	59eb      	ldr	r3, [r5, r7]
 8005a06:	428b      	cmp	r3, r1
 8005a08:	d165      	bne.n	8005ad6 <main+0x46a>
	f_close(&fil);
 8005a0a:	0028      	movs	r0, r5
 8005a0c:	f7fe ffc8 	bl	80049a0 <f_close>
	bufclear();
 8005a10:	f7ff fdec 	bl	80055ec <bufclear>
	fresult = f_mount(NULL, "", 1);
 8005a14:	2201      	movs	r2, #1
 8005a16:	4910      	ldr	r1, [pc, #64]	; (8005a58 <main+0x3ec>)
 8005a18:	2000      	movs	r0, #0
 8005a1a:	f7fe fbbb 	bl	8004194 <f_mount>
 8005a1e:	7030      	strb	r0, [r6, #0]
	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d102      	bne.n	8005a2a <main+0x3be>
 8005a24:	4824      	ldr	r0, [pc, #144]	; (8005ab8 <main+0x44c>)
 8005a26:	f7ff fdd3 	bl	80055d0 <send_uart>
}
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	b015      	add	sp, #84	; 0x54
 8005a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else send_uart("SD CARD mounted successfully...\n");
 8005a30:	4822      	ldr	r0, [pc, #136]	; (8005abc <main+0x450>)
 8005a32:	e70f      	b.n	8005854 <main+0x1e8>
 8005a34:	40021000 	.word	0x40021000
 8005a38:	48000800 	.word	0x48000800
 8005a3c:	48000400 	.word	0x48000400
 8005a40:	20001410 	.word	0x20001410
 8005a44:	40013000 	.word	0x40013000
 8005a48:	20000f84 	.word	0x20000f84
 8005a4c:	40013800 	.word	0x40013800
 8005a50:	200014bc 	.word	0x200014bc
 8005a54:	40012400 	.word	0x40012400
 8005a58:	08006e16 	.word	0x08006e16
 8005a5c:	20000b4c 	.word	0x20000b4c
 8005a60:	2000140c 	.word	0x2000140c
 8005a64:	08006c86 	.word	0x08006c86
 8005a68:	20001408 	.word	0x20001408
 8005a6c:	20000b48 	.word	0x20000b48
 8005a70:	00000414 	.word	0x00000414
 8005a74:	00000402 	.word	0x00000402
 8005a78:	3fe00000 	.word	0x3fe00000
 8005a7c:	20001474 	.word	0x20001474
 8005a80:	20001004 	.word	0x20001004
 8005a84:	08006cc5 	.word	0x08006cc5
 8005a88:	20000f80 	.word	0x20000f80
 8005a8c:	08006cdf 	.word	0x08006cdf
 8005a90:	08006cf9 	.word	0x08006cf9
 8005a94:	200014fc 	.word	0x200014fc
 8005a98:	08006d01 	.word	0x08006d01
 8005a9c:	08006d34 	.word	0x08006d34
 8005aa0:	08006d56 	.word	0x08006d56
 8005aa4:	08006d79 	.word	0x08006d79
 8005aa8:	20001928 	.word	0x20001928
 8005aac:	08006dad 	.word	0x08006dad
 8005ab0:	0000040c 	.word	0x0000040c
 8005ab4:	08006dd6 	.word	0x08006dd6
 8005ab8:	08006e17 	.word	0x08006e17
 8005abc:	08006ca4 	.word	0x08006ca4
		fileNumber++;
 8005ac0:	3501      	adds	r5, #1
		sprintf(name, "F%d.TXT", fileNumber);
 8005ac2:	002a      	movs	r2, r5
 8005ac4:	0031      	movs	r1, r6
 8005ac6:	a80f      	add	r0, sp, #60	; 0x3c
 8005ac8:	f000 fa92 	bl	8005ff0 <siprintf>
 8005acc:	e705      	b.n	80058da <main+0x26e>
	  HAL_Delay(100);
 8005ace:	2064      	movs	r0, #100	; 0x64
 8005ad0:	f7fb fb84 	bl	80011dc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, LD4_BLUE_LED_Pin);
 8005ad4:	e727      	b.n	8005926 <main+0x2ba>
		f_gets(buffer, fil.fsize, &fil);
 8005ad6:	4c04      	ldr	r4, [pc, #16]	; (8005ae8 <main+0x47c>)
 8005ad8:	002a      	movs	r2, r5
 8005ada:	0020      	movs	r0, r4
 8005adc:	f7ff f9c2 	bl	8004e64 <f_gets>
		send_uart(buffer);
 8005ae0:	0020      	movs	r0, r4
 8005ae2:	f7ff fd75 	bl	80055d0 <send_uart>
 8005ae6:	e78b      	b.n	8005a00 <main+0x394>
 8005ae8:	20001004 	.word	0x20001004

08005aec <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005aec:	4770      	bx	lr
	...

08005af0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005af0:	2001      	movs	r0, #1
 8005af2:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <HAL_MspInit+0x2c>)
{
 8005af4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005af6:	6999      	ldr	r1, [r3, #24]
 8005af8:	4301      	orrs	r1, r0
 8005afa:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005afc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005afe:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b00:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b02:	4002      	ands	r2, r0
 8005b04:	9200      	str	r2, [sp, #0]
 8005b06:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b08:	69da      	ldr	r2, [r3, #28]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	61da      	str	r2, [r3, #28]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	400b      	ands	r3, r1
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b16:	b002      	add	sp, #8
 8005b18:	4770      	bx	lr
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	40021000 	.word	0x40021000

08005b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b22:	0005      	movs	r5, r0
 8005b24:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b26:	2214      	movs	r2, #20
 8005b28:	2100      	movs	r1, #0
 8005b2a:	a805      	add	r0, sp, #20
 8005b2c:	f000 f99d 	bl	8005e6a <memset>
  if(hadc->Instance==ADC1)
 8005b30:	4b2d      	ldr	r3, [pc, #180]	; (8005be8 <HAL_ADC_MspInit+0xc8>)
 8005b32:	682a      	ldr	r2, [r5, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d154      	bne.n	8005be2 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b38:	2680      	movs	r6, #128	; 0x80
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b3a:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b3c:	4b2b      	ldr	r3, [pc, #172]	; (8005bec <HAL_ADC_MspInit+0xcc>)
 8005b3e:	00b6      	lsls	r6, r6, #2
 8005b40:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b42:	0300      	lsls	r0, r0, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b44:	4332      	orrs	r2, r6
 8005b46:	619a      	str	r2, [r3, #24]
 8005b48:	699a      	ldr	r2, [r3, #24]
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b4a:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b4c:	4032      	ands	r2, r6
 8005b4e:	9201      	str	r2, [sp, #4]
 8005b50:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b52:	6959      	ldr	r1, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b54:	2700      	movs	r7, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b56:	4301      	orrs	r1, r0
 8005b58:	6159      	str	r1, [r3, #20]
 8005b5a:	695a      	ldr	r2, [r3, #20]
 8005b5c:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b5e:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b60:	9202      	str	r2, [sp, #8]
 8005b62:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b64:	6959      	ldr	r1, [r3, #20]
 8005b66:	0280      	lsls	r0, r0, #10
 8005b68:	4301      	orrs	r1, r0
 8005b6a:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b6c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b6e:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b70:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b72:	4002      	ands	r2, r0
 8005b74:	9203      	str	r2, [sp, #12]
 8005b76:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b78:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b7a:	481d      	ldr	r0, [pc, #116]	; (8005bf0 <HAL_ADC_MspInit+0xd0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	615a      	str	r2, [r3, #20]
 8005b80:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b82:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b84:	400b      	ands	r3, r1
 8005b86:	9304      	str	r3, [sp, #16]
 8005b88:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005b8a:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b8c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005b8e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b90:	f7fb fefc 	bl	800198c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b94:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8005b96:	23fe      	movs	r3, #254	; 0xfe
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b98:	a905      	add	r1, sp, #20
 8005b9a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8005b9c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b9e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba0:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ba2:	f7fb fef3 	bl	800198c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ba6:	4813      	ldr	r0, [pc, #76]	; (8005bf4 <HAL_ADC_MspInit+0xd4>)
 8005ba8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005baa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bac:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bae:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bb0:	f7fb feec 	bl	800198c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8005bb4:	4c10      	ldr	r4, [pc, #64]	; (8005bf8 <HAL_ADC_MspInit+0xd8>)
 8005bb6:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <HAL_ADC_MspInit+0xdc>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005bb8:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 8005bba:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005bc6:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bc8:	6067      	str	r7, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bca:	60a7      	str	r7, [r4, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005bcc:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005bce:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8005bd0:	61e7      	str	r7, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005bd2:	f7fb fe25 	bl	8001820 <HAL_DMA_Init>
 8005bd6:	42b8      	cmp	r0, r7
 8005bd8:	d001      	beq.n	8005bde <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8005bda:	f7ff ff87 	bl	8005aec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8005bde:	632c      	str	r4, [r5, #48]	; 0x30
 8005be0:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005be2:	b00b      	add	sp, #44	; 0x2c
 8005be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	40012400 	.word	0x40012400
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	48000800 	.word	0x48000800
 8005bf4:	48000400 	.word	0x48000400
 8005bf8:	20001478 	.word	0x20001478
 8005bfc:	40020008 	.word	0x40020008

08005c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005c00:	b510      	push	{r4, lr}
 8005c02:	0004      	movs	r4, r0
 8005c04:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c06:	2214      	movs	r2, #20
 8005c08:	2100      	movs	r1, #0
 8005c0a:	a803      	add	r0, sp, #12
 8005c0c:	f000 f92d 	bl	8005e6a <memset>
  if(hspi->Instance==SPI1)
 8005c10:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <HAL_SPI_MspInit+0x58>)
 8005c12:	6822      	ldr	r2, [r4, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d11c      	bne.n	8005c52 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c18:	2080      	movs	r0, #128	; 0x80
 8005c1a:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <HAL_SPI_MspInit+0x5c>)
 8005c1c:	0140      	lsls	r0, r0, #5
 8005c1e:	6999      	ldr	r1, [r3, #24]
 8005c20:	4301      	orrs	r1, r0
 8005c22:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c24:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c26:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c28:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c2a:	4002      	ands	r2, r0
 8005c2c:	9201      	str	r2, [sp, #4]
 8005c2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c30:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c32:	480b      	ldr	r0, [pc, #44]	; (8005c60 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c34:	430a      	orrs	r2, r1
 8005c36:	615a      	str	r2, [r3, #20]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	400b      	ands	r3, r1
 8005c3c:	9302      	str	r3, [sp, #8]
 8005c3e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005c40:	2338      	movs	r3, #56	; 0x38
 8005c42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c44:	3b36      	subs	r3, #54	; 0x36
 8005c46:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c48:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c4e:	f7fb fe9d 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005c52:	b008      	add	sp, #32
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	40013000 	.word	0x40013000
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	48000400 	.word	0x48000400

08005c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c64:	b510      	push	{r4, lr}
 8005c66:	0004      	movs	r4, r0
 8005c68:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6a:	2214      	movs	r2, #20
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	a803      	add	r0, sp, #12
 8005c70:	f000 f8fb 	bl	8005e6a <memset>
  if(huart->Instance==USART1)
 8005c74:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <HAL_UART_MspInit+0x60>)
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d120      	bne.n	8005cbe <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c7c:	2080      	movs	r0, #128	; 0x80
 8005c7e:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <HAL_UART_MspInit+0x64>)
 8005c80:	01c0      	lsls	r0, r0, #7
 8005c82:	6999      	ldr	r1, [r3, #24]
 8005c84:	4301      	orrs	r1, r0
 8005c86:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c88:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c8a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c8c:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c8e:	4002      	ands	r2, r0
 8005c90:	9201      	str	r2, [sp, #4]
 8005c92:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c94:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c96:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	615a      	str	r2, [r3, #20]
 8005c9c:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c9e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ca0:	400b      	ands	r3, r1
 8005ca2:	9302      	str	r3, [sp, #8]
 8005ca4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005ca6:	23c0      	movs	r3, #192	; 0xc0
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cac:	2302      	movs	r3, #2
 8005cae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cb4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005cb6:	3b02      	subs	r3, #2
 8005cb8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cba:	f7fb fe67 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005cbe:	b008      	add	sp, #32
 8005cc0:	bd10      	pop	{r4, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	40013800 	.word	0x40013800
 8005cc8:	40021000 	.word	0x40021000

08005ccc <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 8005ccc:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <SDTimer_Handler+0x24>)
 8005cce:	7813      	ldrb	r3, [r2, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <SDTimer_Handler+0x10>
    Timer1--;
 8005cd4:	7813      	ldrb	r3, [r2, #0]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 8005cdc:	4a05      	ldr	r2, [pc, #20]	; (8005cf4 <SDTimer_Handler+0x28>)
 8005cde:	7813      	ldrb	r3, [r2, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <SDTimer_Handler+0x20>
    Timer2--;
 8005ce4:	7813      	ldrb	r3, [r2, #0]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	7013      	strb	r3, [r2, #0]
}
 8005cec:	4770      	bx	lr
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	20001951 	.word	0x20001951
 8005cf4:	20001950 	.word	0x20001950

08005cf8 <NMI_Handler>:
 8005cf8:	4770      	bx	lr

08005cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cfa:	e7fe      	b.n	8005cfa <HardFault_Handler>

08005cfc <SVC_Handler>:
 8005cfc:	4770      	bx	lr

08005cfe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cfe:	4770      	bx	lr

08005d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d00:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8005d02:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <SysTick_Handler+0x20>)
 8005d04:	7813      	ldrb	r3, [r2, #0]
 8005d06:	3301      	adds	r3, #1
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	7013      	strb	r3, [r2, #0]
    if(FatFsCnt >= 10)
 8005d0c:	7813      	ldrb	r3, [r2, #0]
 8005d0e:	2b09      	cmp	r3, #9
 8005d10:	d903      	bls.n	8005d1a <SysTick_Handler+0x1a>
    {
	  FatFsCnt = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	7013      	strb	r3, [r2, #0]
	  SDTimer_Handler();
 8005d16:	f7ff ffd9 	bl	8005ccc <SDTimer_Handler>
    }


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d1a:	f7fb fa4d 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d1e:	bd10      	pop	{r4, pc}
 8005d20:	200002d2 	.word	0x200002d2

08005d24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005d24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005d26:	4802      	ldr	r0, [pc, #8]	; (8005d30 <DMA1_Channel1_IRQHandler+0xc>)
 8005d28:	f7fb fde7 	bl	80018fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005d2c:	bd10      	pop	{r4, pc}
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	20001478 	.word	0x20001478

08005d34 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005d34:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <_sbrk+0x2c>)
{
 8005d36:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8005d38:	6819      	ldr	r1, [r3, #0]
{
 8005d3a:	0002      	movs	r2, r0
	if (heap_end == 0)
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	d101      	bne.n	8005d44 <_sbrk+0x10>
		heap_end = &end;
 8005d40:	4908      	ldr	r1, [pc, #32]	; (8005d64 <_sbrk+0x30>)
 8005d42:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005d44:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8005d46:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005d48:	1882      	adds	r2, r0, r2
 8005d4a:	428a      	cmp	r2, r1
 8005d4c:	d906      	bls.n	8005d5c <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005d4e:	f000 f84f 	bl	8005df0 <__errno>
 8005d52:	230c      	movs	r3, #12
 8005d54:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005d56:	2001      	movs	r0, #1
 8005d58:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8005d5a:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8005d5c:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8005d5e:	e7fc      	b.n	8005d5a <_sbrk+0x26>
 8005d60:	200002d4 	.word	0x200002d4
 8005d64:	20001958 	.word	0x20001958

08005d68 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005d68:	4770      	bx	lr

08005d6a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005d6a:	b510      	push	{r4, lr}
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8005d6c:	f7ff fa42 	bl	80051f4 <SD_disk_initialize>
 8005d70:	b2c0      	uxtb	r0, r0
  /* USER CODE END INIT */
}
 8005d72:	bd10      	pop	{r4, pc}

08005d74 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005d74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8005d76:	f7ff fad7 	bl	8005328 <SD_disk_status>
 8005d7a:	b2c0      	uxtb	r0, r0
  /* USER CODE END STATUS */
}
 8005d7c:	bd10      	pop	{r4, pc}

08005d7e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005d7e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005d80:	f7ff fadc 	bl	800533c <SD_disk_read>
 8005d84:	b2c0      	uxtb	r0, r0
  /* USER CODE END READ */
}
 8005d86:	bd10      	pop	{r4, pc}

08005d88 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8005d88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8005d8a:	f7ff fb21 	bl	80053d0 <SD_disk_write>
 8005d8e:	b2c0      	uxtb	r0, r0
  /* USER CODE END WRITE */
}
 8005d90:	bd10      	pop	{r4, pc}

08005d92 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005d92:	b510      	push	{r4, lr}
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005d94:	f7ff fb76 	bl	8005484 <SD_disk_ioctl>
 8005d98:	b2c0      	uxtb	r0, r0
  /* USER CODE END IOCTL */
}
 8005d9a:	bd10      	pop	{r4, pc}

08005d9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005d9c:	480d      	ldr	r0, [pc, #52]	; (8005dd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005d9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005da0:	480d      	ldr	r0, [pc, #52]	; (8005dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005da2:	490e      	ldr	r1, [pc, #56]	; (8005ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005da4:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <LoopForever+0xe>)
  movs r3, #0
 8005da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005da8:	e002      	b.n	8005db0 <LoopCopyDataInit>

08005daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dae:	3304      	adds	r3, #4

08005db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005db4:	d3f9      	bcc.n	8005daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005db6:	4a0b      	ldr	r2, [pc, #44]	; (8005de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005db8:	4c0b      	ldr	r4, [pc, #44]	; (8005de8 <LoopForever+0x16>)
  movs r3, #0
 8005dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dbc:	e001      	b.n	8005dc2 <LoopFillZerobss>

08005dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dc0:	3204      	adds	r2, #4

08005dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dc4:	d3fb      	bcc.n	8005dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005dc6:	f7ff ffcf 	bl	8005d68 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005dca:	f000 f817 	bl	8005dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005dce:	f7ff fc4d 	bl	800566c <main>

08005dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8005dd2:	e7fe      	b.n	8005dd2 <LoopForever>
  ldr   r0, =_estack
 8005dd4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ddc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8005de0:	08006e90 	.word	0x08006e90
  ldr r2, =_sbss
 8005de4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005de8:	20001958 	.word	0x20001958

08005dec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005dec:	e7fe      	b.n	8005dec <ADC1_COMP_IRQHandler>
	...

08005df0 <__errno>:
 8005df0:	4b01      	ldr	r3, [pc, #4]	; (8005df8 <__errno+0x8>)
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	4770      	bx	lr
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	20000024 	.word	0x20000024

08005dfc <__libc_init_array>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	2600      	movs	r6, #0
 8005e00:	4d0c      	ldr	r5, [pc, #48]	; (8005e34 <__libc_init_array+0x38>)
 8005e02:	4c0d      	ldr	r4, [pc, #52]	; (8005e38 <__libc_init_array+0x3c>)
 8005e04:	1b64      	subs	r4, r4, r5
 8005e06:	10a4      	asrs	r4, r4, #2
 8005e08:	42a6      	cmp	r6, r4
 8005e0a:	d109      	bne.n	8005e20 <__libc_init_array+0x24>
 8005e0c:	2600      	movs	r6, #0
 8005e0e:	f000 fc4d 	bl	80066ac <_init>
 8005e12:	4d0a      	ldr	r5, [pc, #40]	; (8005e3c <__libc_init_array+0x40>)
 8005e14:	4c0a      	ldr	r4, [pc, #40]	; (8005e40 <__libc_init_array+0x44>)
 8005e16:	1b64      	subs	r4, r4, r5
 8005e18:	10a4      	asrs	r4, r4, #2
 8005e1a:	42a6      	cmp	r6, r4
 8005e1c:	d105      	bne.n	8005e2a <__libc_init_array+0x2e>
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}
 8005e20:	00b3      	lsls	r3, r6, #2
 8005e22:	58eb      	ldr	r3, [r5, r3]
 8005e24:	4798      	blx	r3
 8005e26:	3601      	adds	r6, #1
 8005e28:	e7ee      	b.n	8005e08 <__libc_init_array+0xc>
 8005e2a:	00b3      	lsls	r3, r6, #2
 8005e2c:	58eb      	ldr	r3, [r5, r3]
 8005e2e:	4798      	blx	r3
 8005e30:	3601      	adds	r6, #1
 8005e32:	e7f2      	b.n	8005e1a <__libc_init_array+0x1e>
 8005e34:	08006e88 	.word	0x08006e88
 8005e38:	08006e88 	.word	0x08006e88
 8005e3c:	08006e88 	.word	0x08006e88
 8005e40:	08006e8c 	.word	0x08006e8c

08005e44 <malloc>:
 8005e44:	b510      	push	{r4, lr}
 8005e46:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <malloc+0x10>)
 8005e48:	0001      	movs	r1, r0
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	f000 f860 	bl	8005f10 <_malloc_r>
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	20000024 	.word	0x20000024

08005e58 <memcpy>:
 8005e58:	2300      	movs	r3, #0
 8005e5a:	b510      	push	{r4, lr}
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d100      	bne.n	8005e62 <memcpy+0xa>
 8005e60:	bd10      	pop	{r4, pc}
 8005e62:	5ccc      	ldrb	r4, [r1, r3]
 8005e64:	54c4      	strb	r4, [r0, r3]
 8005e66:	3301      	adds	r3, #1
 8005e68:	e7f8      	b.n	8005e5c <memcpy+0x4>

08005e6a <memset>:
 8005e6a:	0003      	movs	r3, r0
 8005e6c:	1882      	adds	r2, r0, r2
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d100      	bne.n	8005e74 <memset+0xa>
 8005e72:	4770      	bx	lr
 8005e74:	7019      	strb	r1, [r3, #0]
 8005e76:	3301      	adds	r3, #1
 8005e78:	e7f9      	b.n	8005e6e <memset+0x4>
	...

08005e7c <_free_r>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	0005      	movs	r5, r0
 8005e80:	2900      	cmp	r1, #0
 8005e82:	d010      	beq.n	8005ea6 <_free_r+0x2a>
 8005e84:	1f0c      	subs	r4, r1, #4
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	da00      	bge.n	8005e8e <_free_r+0x12>
 8005e8c:	18e4      	adds	r4, r4, r3
 8005e8e:	0028      	movs	r0, r5
 8005e90:	f000 f8d0 	bl	8006034 <__malloc_lock>
 8005e94:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <_free_r+0x90>)
 8005e96:	6813      	ldr	r3, [r2, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <_free_r+0x2c>
 8005e9c:	6063      	str	r3, [r4, #4]
 8005e9e:	6014      	str	r4, [r2, #0]
 8005ea0:	0028      	movs	r0, r5
 8005ea2:	f000 f8c8 	bl	8006036 <__malloc_unlock>
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	42a3      	cmp	r3, r4
 8005eaa:	d909      	bls.n	8005ec0 <_free_r+0x44>
 8005eac:	6821      	ldr	r1, [r4, #0]
 8005eae:	1860      	adds	r0, r4, r1
 8005eb0:	4283      	cmp	r3, r0
 8005eb2:	d1f3      	bne.n	8005e9c <_free_r+0x20>
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	1841      	adds	r1, r0, r1
 8005eba:	6021      	str	r1, [r4, #0]
 8005ebc:	e7ee      	b.n	8005e9c <_free_r+0x20>
 8005ebe:	0013      	movs	r3, r2
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	d001      	beq.n	8005eca <_free_r+0x4e>
 8005ec6:	42a2      	cmp	r2, r4
 8005ec8:	d9f9      	bls.n	8005ebe <_free_r+0x42>
 8005eca:	6819      	ldr	r1, [r3, #0]
 8005ecc:	1858      	adds	r0, r3, r1
 8005ece:	42a0      	cmp	r0, r4
 8005ed0:	d10b      	bne.n	8005eea <_free_r+0x6e>
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	1809      	adds	r1, r1, r0
 8005ed6:	1858      	adds	r0, r3, r1
 8005ed8:	6019      	str	r1, [r3, #0]
 8005eda:	4282      	cmp	r2, r0
 8005edc:	d1e0      	bne.n	8005ea0 <_free_r+0x24>
 8005ede:	6810      	ldr	r0, [r2, #0]
 8005ee0:	6852      	ldr	r2, [r2, #4]
 8005ee2:	1841      	adds	r1, r0, r1
 8005ee4:	6019      	str	r1, [r3, #0]
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	e7da      	b.n	8005ea0 <_free_r+0x24>
 8005eea:	42a0      	cmp	r0, r4
 8005eec:	d902      	bls.n	8005ef4 <_free_r+0x78>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	e7d5      	b.n	8005ea0 <_free_r+0x24>
 8005ef4:	6821      	ldr	r1, [r4, #0]
 8005ef6:	1860      	adds	r0, r4, r1
 8005ef8:	4282      	cmp	r2, r0
 8005efa:	d103      	bne.n	8005f04 <_free_r+0x88>
 8005efc:	6810      	ldr	r0, [r2, #0]
 8005efe:	6852      	ldr	r2, [r2, #4]
 8005f00:	1841      	adds	r1, r0, r1
 8005f02:	6021      	str	r1, [r4, #0]
 8005f04:	6062      	str	r2, [r4, #4]
 8005f06:	605c      	str	r4, [r3, #4]
 8005f08:	e7ca      	b.n	8005ea0 <_free_r+0x24>
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	200002d8 	.word	0x200002d8

08005f10 <_malloc_r>:
 8005f10:	2303      	movs	r3, #3
 8005f12:	b570      	push	{r4, r5, r6, lr}
 8005f14:	1ccd      	adds	r5, r1, #3
 8005f16:	439d      	bics	r5, r3
 8005f18:	3508      	adds	r5, #8
 8005f1a:	0006      	movs	r6, r0
 8005f1c:	2d0c      	cmp	r5, #12
 8005f1e:	d21e      	bcs.n	8005f5e <_malloc_r+0x4e>
 8005f20:	250c      	movs	r5, #12
 8005f22:	42a9      	cmp	r1, r5
 8005f24:	d81d      	bhi.n	8005f62 <_malloc_r+0x52>
 8005f26:	0030      	movs	r0, r6
 8005f28:	f000 f884 	bl	8006034 <__malloc_lock>
 8005f2c:	4a25      	ldr	r2, [pc, #148]	; (8005fc4 <_malloc_r+0xb4>)
 8005f2e:	6814      	ldr	r4, [r2, #0]
 8005f30:	0021      	movs	r1, r4
 8005f32:	2900      	cmp	r1, #0
 8005f34:	d119      	bne.n	8005f6a <_malloc_r+0x5a>
 8005f36:	4c24      	ldr	r4, [pc, #144]	; (8005fc8 <_malloc_r+0xb8>)
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <_malloc_r+0x36>
 8005f3e:	0030      	movs	r0, r6
 8005f40:	f000 f844 	bl	8005fcc <_sbrk_r>
 8005f44:	6020      	str	r0, [r4, #0]
 8005f46:	0029      	movs	r1, r5
 8005f48:	0030      	movs	r0, r6
 8005f4a:	f000 f83f 	bl	8005fcc <_sbrk_r>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d12c      	bne.n	8005fac <_malloc_r+0x9c>
 8005f52:	230c      	movs	r3, #12
 8005f54:	0030      	movs	r0, r6
 8005f56:	6033      	str	r3, [r6, #0]
 8005f58:	f000 f86d 	bl	8006036 <__malloc_unlock>
 8005f5c:	e003      	b.n	8005f66 <_malloc_r+0x56>
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	dadf      	bge.n	8005f22 <_malloc_r+0x12>
 8005f62:	230c      	movs	r3, #12
 8005f64:	6033      	str	r3, [r6, #0]
 8005f66:	2000      	movs	r0, #0
 8005f68:	bd70      	pop	{r4, r5, r6, pc}
 8005f6a:	680b      	ldr	r3, [r1, #0]
 8005f6c:	1b5b      	subs	r3, r3, r5
 8005f6e:	d41a      	bmi.n	8005fa6 <_malloc_r+0x96>
 8005f70:	2b0b      	cmp	r3, #11
 8005f72:	d903      	bls.n	8005f7c <_malloc_r+0x6c>
 8005f74:	600b      	str	r3, [r1, #0]
 8005f76:	18cc      	adds	r4, r1, r3
 8005f78:	6025      	str	r5, [r4, #0]
 8005f7a:	e003      	b.n	8005f84 <_malloc_r+0x74>
 8005f7c:	428c      	cmp	r4, r1
 8005f7e:	d10e      	bne.n	8005f9e <_malloc_r+0x8e>
 8005f80:	6863      	ldr	r3, [r4, #4]
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	0030      	movs	r0, r6
 8005f86:	f000 f856 	bl	8006036 <__malloc_unlock>
 8005f8a:	0020      	movs	r0, r4
 8005f8c:	2207      	movs	r2, #7
 8005f8e:	300b      	adds	r0, #11
 8005f90:	1d23      	adds	r3, r4, #4
 8005f92:	4390      	bics	r0, r2
 8005f94:	1ac3      	subs	r3, r0, r3
 8005f96:	d0e7      	beq.n	8005f68 <_malloc_r+0x58>
 8005f98:	425a      	negs	r2, r3
 8005f9a:	50e2      	str	r2, [r4, r3]
 8005f9c:	e7e4      	b.n	8005f68 <_malloc_r+0x58>
 8005f9e:	684b      	ldr	r3, [r1, #4]
 8005fa0:	6063      	str	r3, [r4, #4]
 8005fa2:	000c      	movs	r4, r1
 8005fa4:	e7ee      	b.n	8005f84 <_malloc_r+0x74>
 8005fa6:	000c      	movs	r4, r1
 8005fa8:	6849      	ldr	r1, [r1, #4]
 8005faa:	e7c2      	b.n	8005f32 <_malloc_r+0x22>
 8005fac:	2303      	movs	r3, #3
 8005fae:	1cc4      	adds	r4, r0, #3
 8005fb0:	439c      	bics	r4, r3
 8005fb2:	42a0      	cmp	r0, r4
 8005fb4:	d0e0      	beq.n	8005f78 <_malloc_r+0x68>
 8005fb6:	1a21      	subs	r1, r4, r0
 8005fb8:	0030      	movs	r0, r6
 8005fba:	f000 f807 	bl	8005fcc <_sbrk_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	d1da      	bne.n	8005f78 <_malloc_r+0x68>
 8005fc2:	e7c6      	b.n	8005f52 <_malloc_r+0x42>
 8005fc4:	200002d8 	.word	0x200002d8
 8005fc8:	200002dc 	.word	0x200002dc

08005fcc <_sbrk_r>:
 8005fcc:	2300      	movs	r3, #0
 8005fce:	b570      	push	{r4, r5, r6, lr}
 8005fd0:	4c06      	ldr	r4, [pc, #24]	; (8005fec <_sbrk_r+0x20>)
 8005fd2:	0005      	movs	r5, r0
 8005fd4:	0008      	movs	r0, r1
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	f7ff feac 	bl	8005d34 <_sbrk>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d103      	bne.n	8005fe8 <_sbrk_r+0x1c>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d000      	beq.n	8005fe8 <_sbrk_r+0x1c>
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	bd70      	pop	{r4, r5, r6, pc}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	20001954 	.word	0x20001954

08005ff0 <siprintf>:
 8005ff0:	b40e      	push	{r1, r2, r3}
 8005ff2:	b510      	push	{r4, lr}
 8005ff4:	b09d      	sub	sp, #116	; 0x74
 8005ff6:	a902      	add	r1, sp, #8
 8005ff8:	9002      	str	r0, [sp, #8]
 8005ffa:	6108      	str	r0, [r1, #16]
 8005ffc:	480b      	ldr	r0, [pc, #44]	; (800602c <siprintf+0x3c>)
 8005ffe:	2482      	movs	r4, #130	; 0x82
 8006000:	6088      	str	r0, [r1, #8]
 8006002:	6148      	str	r0, [r1, #20]
 8006004:	2001      	movs	r0, #1
 8006006:	4240      	negs	r0, r0
 8006008:	ab1f      	add	r3, sp, #124	; 0x7c
 800600a:	81c8      	strh	r0, [r1, #14]
 800600c:	4808      	ldr	r0, [pc, #32]	; (8006030 <siprintf+0x40>)
 800600e:	cb04      	ldmia	r3!, {r2}
 8006010:	00a4      	lsls	r4, r4, #2
 8006012:	6800      	ldr	r0, [r0, #0]
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	818c      	strh	r4, [r1, #12]
 8006018:	f000 f870 	bl	80060fc <_svfiprintf_r>
 800601c:	2300      	movs	r3, #0
 800601e:	9a02      	ldr	r2, [sp, #8]
 8006020:	7013      	strb	r3, [r2, #0]
 8006022:	b01d      	add	sp, #116	; 0x74
 8006024:	bc10      	pop	{r4}
 8006026:	bc08      	pop	{r3}
 8006028:	b003      	add	sp, #12
 800602a:	4718      	bx	r3
 800602c:	7fffffff 	.word	0x7fffffff
 8006030:	20000024 	.word	0x20000024

08006034 <__malloc_lock>:
 8006034:	4770      	bx	lr

08006036 <__malloc_unlock>:
 8006036:	4770      	bx	lr

08006038 <__ssputs_r>:
 8006038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603a:	688e      	ldr	r6, [r1, #8]
 800603c:	b085      	sub	sp, #20
 800603e:	0007      	movs	r7, r0
 8006040:	000c      	movs	r4, r1
 8006042:	9203      	str	r2, [sp, #12]
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	429e      	cmp	r6, r3
 8006048:	d839      	bhi.n	80060be <__ssputs_r+0x86>
 800604a:	2390      	movs	r3, #144	; 0x90
 800604c:	898a      	ldrh	r2, [r1, #12]
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	421a      	tst	r2, r3
 8006052:	d034      	beq.n	80060be <__ssputs_r+0x86>
 8006054:	2503      	movs	r5, #3
 8006056:	6909      	ldr	r1, [r1, #16]
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	1a5b      	subs	r3, r3, r1
 800605c:	9302      	str	r3, [sp, #8]
 800605e:	6963      	ldr	r3, [r4, #20]
 8006060:	9802      	ldr	r0, [sp, #8]
 8006062:	435d      	muls	r5, r3
 8006064:	0feb      	lsrs	r3, r5, #31
 8006066:	195d      	adds	r5, r3, r5
 8006068:	9b01      	ldr	r3, [sp, #4]
 800606a:	106d      	asrs	r5, r5, #1
 800606c:	3301      	adds	r3, #1
 800606e:	181b      	adds	r3, r3, r0
 8006070:	42ab      	cmp	r3, r5
 8006072:	d900      	bls.n	8006076 <__ssputs_r+0x3e>
 8006074:	001d      	movs	r5, r3
 8006076:	0553      	lsls	r3, r2, #21
 8006078:	d532      	bpl.n	80060e0 <__ssputs_r+0xa8>
 800607a:	0029      	movs	r1, r5
 800607c:	0038      	movs	r0, r7
 800607e:	f7ff ff47 	bl	8005f10 <_malloc_r>
 8006082:	1e06      	subs	r6, r0, #0
 8006084:	d109      	bne.n	800609a <__ssputs_r+0x62>
 8006086:	230c      	movs	r3, #12
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	2340      	movs	r3, #64	; 0x40
 800608c:	2001      	movs	r0, #1
 800608e:	89a2      	ldrh	r2, [r4, #12]
 8006090:	4240      	negs	r0, r0
 8006092:	4313      	orrs	r3, r2
 8006094:	81a3      	strh	r3, [r4, #12]
 8006096:	b005      	add	sp, #20
 8006098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800609a:	9a02      	ldr	r2, [sp, #8]
 800609c:	6921      	ldr	r1, [r4, #16]
 800609e:	f7ff fedb 	bl	8005e58 <memcpy>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <__ssputs_r+0xc0>)
 80060a6:	401a      	ands	r2, r3
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	4313      	orrs	r3, r2
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	9b02      	ldr	r3, [sp, #8]
 80060b0:	6126      	str	r6, [r4, #16]
 80060b2:	18f6      	adds	r6, r6, r3
 80060b4:	6026      	str	r6, [r4, #0]
 80060b6:	6165      	str	r5, [r4, #20]
 80060b8:	9e01      	ldr	r6, [sp, #4]
 80060ba:	1aed      	subs	r5, r5, r3
 80060bc:	60a5      	str	r5, [r4, #8]
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	42b3      	cmp	r3, r6
 80060c2:	d200      	bcs.n	80060c6 <__ssputs_r+0x8e>
 80060c4:	001e      	movs	r6, r3
 80060c6:	0032      	movs	r2, r6
 80060c8:	9903      	ldr	r1, [sp, #12]
 80060ca:	6820      	ldr	r0, [r4, #0]
 80060cc:	f000 faad 	bl	800662a <memmove>
 80060d0:	68a3      	ldr	r3, [r4, #8]
 80060d2:	2000      	movs	r0, #0
 80060d4:	1b9b      	subs	r3, r3, r6
 80060d6:	60a3      	str	r3, [r4, #8]
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	199e      	adds	r6, r3, r6
 80060dc:	6026      	str	r6, [r4, #0]
 80060de:	e7da      	b.n	8006096 <__ssputs_r+0x5e>
 80060e0:	002a      	movs	r2, r5
 80060e2:	0038      	movs	r0, r7
 80060e4:	f000 fab3 	bl	800664e <_realloc_r>
 80060e8:	1e06      	subs	r6, r0, #0
 80060ea:	d1e0      	bne.n	80060ae <__ssputs_r+0x76>
 80060ec:	6921      	ldr	r1, [r4, #16]
 80060ee:	0038      	movs	r0, r7
 80060f0:	f7ff fec4 	bl	8005e7c <_free_r>
 80060f4:	e7c7      	b.n	8006086 <__ssputs_r+0x4e>
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	fffffb7f 	.word	0xfffffb7f

080060fc <_svfiprintf_r>:
 80060fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060fe:	b09f      	sub	sp, #124	; 0x7c
 8006100:	9002      	str	r0, [sp, #8]
 8006102:	9305      	str	r3, [sp, #20]
 8006104:	898b      	ldrh	r3, [r1, #12]
 8006106:	000f      	movs	r7, r1
 8006108:	0016      	movs	r6, r2
 800610a:	061b      	lsls	r3, r3, #24
 800610c:	d511      	bpl.n	8006132 <_svfiprintf_r+0x36>
 800610e:	690b      	ldr	r3, [r1, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10e      	bne.n	8006132 <_svfiprintf_r+0x36>
 8006114:	2140      	movs	r1, #64	; 0x40
 8006116:	f7ff fefb 	bl	8005f10 <_malloc_r>
 800611a:	6038      	str	r0, [r7, #0]
 800611c:	6138      	str	r0, [r7, #16]
 800611e:	2800      	cmp	r0, #0
 8006120:	d105      	bne.n	800612e <_svfiprintf_r+0x32>
 8006122:	230c      	movs	r3, #12
 8006124:	9a02      	ldr	r2, [sp, #8]
 8006126:	3801      	subs	r0, #1
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	b01f      	add	sp, #124	; 0x7c
 800612c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800612e:	2340      	movs	r3, #64	; 0x40
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	2300      	movs	r3, #0
 8006134:	ad06      	add	r5, sp, #24
 8006136:	616b      	str	r3, [r5, #20]
 8006138:	3320      	adds	r3, #32
 800613a:	766b      	strb	r3, [r5, #25]
 800613c:	3310      	adds	r3, #16
 800613e:	76ab      	strb	r3, [r5, #26]
 8006140:	0034      	movs	r4, r6
 8006142:	7823      	ldrb	r3, [r4, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d147      	bne.n	80061d8 <_svfiprintf_r+0xdc>
 8006148:	1ba3      	subs	r3, r4, r6
 800614a:	9304      	str	r3, [sp, #16]
 800614c:	d00d      	beq.n	800616a <_svfiprintf_r+0x6e>
 800614e:	1ba3      	subs	r3, r4, r6
 8006150:	0032      	movs	r2, r6
 8006152:	0039      	movs	r1, r7
 8006154:	9802      	ldr	r0, [sp, #8]
 8006156:	f7ff ff6f 	bl	8006038 <__ssputs_r>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	d100      	bne.n	8006160 <_svfiprintf_r+0x64>
 800615e:	e0b5      	b.n	80062cc <_svfiprintf_r+0x1d0>
 8006160:	696a      	ldr	r2, [r5, #20]
 8006162:	9b04      	ldr	r3, [sp, #16]
 8006164:	4694      	mov	ip, r2
 8006166:	4463      	add	r3, ip
 8006168:	616b      	str	r3, [r5, #20]
 800616a:	7823      	ldrb	r3, [r4, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d100      	bne.n	8006172 <_svfiprintf_r+0x76>
 8006170:	e0ac      	b.n	80062cc <_svfiprintf_r+0x1d0>
 8006172:	2201      	movs	r2, #1
 8006174:	2300      	movs	r3, #0
 8006176:	4252      	negs	r2, r2
 8006178:	606a      	str	r2, [r5, #4]
 800617a:	a902      	add	r1, sp, #8
 800617c:	3254      	adds	r2, #84	; 0x54
 800617e:	1852      	adds	r2, r2, r1
 8006180:	3401      	adds	r4, #1
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	60eb      	str	r3, [r5, #12]
 8006186:	60ab      	str	r3, [r5, #8]
 8006188:	7013      	strb	r3, [r2, #0]
 800618a:	65ab      	str	r3, [r5, #88]	; 0x58
 800618c:	4e58      	ldr	r6, [pc, #352]	; (80062f0 <_svfiprintf_r+0x1f4>)
 800618e:	2205      	movs	r2, #5
 8006190:	7821      	ldrb	r1, [r4, #0]
 8006192:	0030      	movs	r0, r6
 8006194:	f000 fa3e 	bl	8006614 <memchr>
 8006198:	1c62      	adds	r2, r4, #1
 800619a:	2800      	cmp	r0, #0
 800619c:	d120      	bne.n	80061e0 <_svfiprintf_r+0xe4>
 800619e:	6829      	ldr	r1, [r5, #0]
 80061a0:	06cb      	lsls	r3, r1, #27
 80061a2:	d504      	bpl.n	80061ae <_svfiprintf_r+0xb2>
 80061a4:	2353      	movs	r3, #83	; 0x53
 80061a6:	ae02      	add	r6, sp, #8
 80061a8:	3020      	adds	r0, #32
 80061aa:	199b      	adds	r3, r3, r6
 80061ac:	7018      	strb	r0, [r3, #0]
 80061ae:	070b      	lsls	r3, r1, #28
 80061b0:	d504      	bpl.n	80061bc <_svfiprintf_r+0xc0>
 80061b2:	2353      	movs	r3, #83	; 0x53
 80061b4:	202b      	movs	r0, #43	; 0x2b
 80061b6:	ae02      	add	r6, sp, #8
 80061b8:	199b      	adds	r3, r3, r6
 80061ba:	7018      	strb	r0, [r3, #0]
 80061bc:	7823      	ldrb	r3, [r4, #0]
 80061be:	2b2a      	cmp	r3, #42	; 0x2a
 80061c0:	d016      	beq.n	80061f0 <_svfiprintf_r+0xf4>
 80061c2:	2000      	movs	r0, #0
 80061c4:	210a      	movs	r1, #10
 80061c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c8:	7822      	ldrb	r2, [r4, #0]
 80061ca:	3a30      	subs	r2, #48	; 0x30
 80061cc:	2a09      	cmp	r2, #9
 80061ce:	d955      	bls.n	800627c <_svfiprintf_r+0x180>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	d015      	beq.n	8006200 <_svfiprintf_r+0x104>
 80061d4:	9309      	str	r3, [sp, #36]	; 0x24
 80061d6:	e013      	b.n	8006200 <_svfiprintf_r+0x104>
 80061d8:	2b25      	cmp	r3, #37	; 0x25
 80061da:	d0b5      	beq.n	8006148 <_svfiprintf_r+0x4c>
 80061dc:	3401      	adds	r4, #1
 80061de:	e7b0      	b.n	8006142 <_svfiprintf_r+0x46>
 80061e0:	2301      	movs	r3, #1
 80061e2:	1b80      	subs	r0, r0, r6
 80061e4:	4083      	lsls	r3, r0
 80061e6:	6829      	ldr	r1, [r5, #0]
 80061e8:	0014      	movs	r4, r2
 80061ea:	430b      	orrs	r3, r1
 80061ec:	602b      	str	r3, [r5, #0]
 80061ee:	e7cd      	b.n	800618c <_svfiprintf_r+0x90>
 80061f0:	9b05      	ldr	r3, [sp, #20]
 80061f2:	1d18      	adds	r0, r3, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	9005      	str	r0, [sp, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	db39      	blt.n	8006270 <_svfiprintf_r+0x174>
 80061fc:	9309      	str	r3, [sp, #36]	; 0x24
 80061fe:	0014      	movs	r4, r2
 8006200:	7823      	ldrb	r3, [r4, #0]
 8006202:	2b2e      	cmp	r3, #46	; 0x2e
 8006204:	d10b      	bne.n	800621e <_svfiprintf_r+0x122>
 8006206:	7863      	ldrb	r3, [r4, #1]
 8006208:	1c62      	adds	r2, r4, #1
 800620a:	2b2a      	cmp	r3, #42	; 0x2a
 800620c:	d13e      	bne.n	800628c <_svfiprintf_r+0x190>
 800620e:	9b05      	ldr	r3, [sp, #20]
 8006210:	3402      	adds	r4, #2
 8006212:	1d1a      	adds	r2, r3, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	9205      	str	r2, [sp, #20]
 8006218:	2b00      	cmp	r3, #0
 800621a:	db34      	blt.n	8006286 <_svfiprintf_r+0x18a>
 800621c:	9307      	str	r3, [sp, #28]
 800621e:	4e35      	ldr	r6, [pc, #212]	; (80062f4 <_svfiprintf_r+0x1f8>)
 8006220:	7821      	ldrb	r1, [r4, #0]
 8006222:	2203      	movs	r2, #3
 8006224:	0030      	movs	r0, r6
 8006226:	f000 f9f5 	bl	8006614 <memchr>
 800622a:	2800      	cmp	r0, #0
 800622c:	d006      	beq.n	800623c <_svfiprintf_r+0x140>
 800622e:	2340      	movs	r3, #64	; 0x40
 8006230:	1b80      	subs	r0, r0, r6
 8006232:	4083      	lsls	r3, r0
 8006234:	682a      	ldr	r2, [r5, #0]
 8006236:	3401      	adds	r4, #1
 8006238:	4313      	orrs	r3, r2
 800623a:	602b      	str	r3, [r5, #0]
 800623c:	7821      	ldrb	r1, [r4, #0]
 800623e:	2206      	movs	r2, #6
 8006240:	482d      	ldr	r0, [pc, #180]	; (80062f8 <_svfiprintf_r+0x1fc>)
 8006242:	1c66      	adds	r6, r4, #1
 8006244:	7629      	strb	r1, [r5, #24]
 8006246:	f000 f9e5 	bl	8006614 <memchr>
 800624a:	2800      	cmp	r0, #0
 800624c:	d046      	beq.n	80062dc <_svfiprintf_r+0x1e0>
 800624e:	4b2b      	ldr	r3, [pc, #172]	; (80062fc <_svfiprintf_r+0x200>)
 8006250:	2b00      	cmp	r3, #0
 8006252:	d12f      	bne.n	80062b4 <_svfiprintf_r+0x1b8>
 8006254:	6829      	ldr	r1, [r5, #0]
 8006256:	9b05      	ldr	r3, [sp, #20]
 8006258:	2207      	movs	r2, #7
 800625a:	05c9      	lsls	r1, r1, #23
 800625c:	d528      	bpl.n	80062b0 <_svfiprintf_r+0x1b4>
 800625e:	189b      	adds	r3, r3, r2
 8006260:	4393      	bics	r3, r2
 8006262:	3308      	adds	r3, #8
 8006264:	9305      	str	r3, [sp, #20]
 8006266:	696b      	ldr	r3, [r5, #20]
 8006268:	9a03      	ldr	r2, [sp, #12]
 800626a:	189b      	adds	r3, r3, r2
 800626c:	616b      	str	r3, [r5, #20]
 800626e:	e767      	b.n	8006140 <_svfiprintf_r+0x44>
 8006270:	425b      	negs	r3, r3
 8006272:	60eb      	str	r3, [r5, #12]
 8006274:	2302      	movs	r3, #2
 8006276:	430b      	orrs	r3, r1
 8006278:	602b      	str	r3, [r5, #0]
 800627a:	e7c0      	b.n	80061fe <_svfiprintf_r+0x102>
 800627c:	434b      	muls	r3, r1
 800627e:	3401      	adds	r4, #1
 8006280:	189b      	adds	r3, r3, r2
 8006282:	2001      	movs	r0, #1
 8006284:	e7a0      	b.n	80061c8 <_svfiprintf_r+0xcc>
 8006286:	2301      	movs	r3, #1
 8006288:	425b      	negs	r3, r3
 800628a:	e7c7      	b.n	800621c <_svfiprintf_r+0x120>
 800628c:	2300      	movs	r3, #0
 800628e:	0014      	movs	r4, r2
 8006290:	200a      	movs	r0, #10
 8006292:	001a      	movs	r2, r3
 8006294:	606b      	str	r3, [r5, #4]
 8006296:	7821      	ldrb	r1, [r4, #0]
 8006298:	3930      	subs	r1, #48	; 0x30
 800629a:	2909      	cmp	r1, #9
 800629c:	d903      	bls.n	80062a6 <_svfiprintf_r+0x1aa>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0bd      	beq.n	800621e <_svfiprintf_r+0x122>
 80062a2:	9207      	str	r2, [sp, #28]
 80062a4:	e7bb      	b.n	800621e <_svfiprintf_r+0x122>
 80062a6:	4342      	muls	r2, r0
 80062a8:	3401      	adds	r4, #1
 80062aa:	1852      	adds	r2, r2, r1
 80062ac:	2301      	movs	r3, #1
 80062ae:	e7f2      	b.n	8006296 <_svfiprintf_r+0x19a>
 80062b0:	3307      	adds	r3, #7
 80062b2:	e7d5      	b.n	8006260 <_svfiprintf_r+0x164>
 80062b4:	ab05      	add	r3, sp, #20
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	003a      	movs	r2, r7
 80062ba:	4b11      	ldr	r3, [pc, #68]	; (8006300 <_svfiprintf_r+0x204>)
 80062bc:	0029      	movs	r1, r5
 80062be:	9802      	ldr	r0, [sp, #8]
 80062c0:	e000      	b.n	80062c4 <_svfiprintf_r+0x1c8>
 80062c2:	bf00      	nop
 80062c4:	9003      	str	r0, [sp, #12]
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	d1cc      	bne.n	8006266 <_svfiprintf_r+0x16a>
 80062cc:	89bb      	ldrh	r3, [r7, #12]
 80062ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80062d0:	065b      	lsls	r3, r3, #25
 80062d2:	d400      	bmi.n	80062d6 <_svfiprintf_r+0x1da>
 80062d4:	e729      	b.n	800612a <_svfiprintf_r+0x2e>
 80062d6:	2001      	movs	r0, #1
 80062d8:	4240      	negs	r0, r0
 80062da:	e726      	b.n	800612a <_svfiprintf_r+0x2e>
 80062dc:	ab05      	add	r3, sp, #20
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	003a      	movs	r2, r7
 80062e2:	4b07      	ldr	r3, [pc, #28]	; (8006300 <_svfiprintf_r+0x204>)
 80062e4:	0029      	movs	r1, r5
 80062e6:	9802      	ldr	r0, [sp, #8]
 80062e8:	f000 f87a 	bl	80063e0 <_printf_i>
 80062ec:	e7ea      	b.n	80062c4 <_svfiprintf_r+0x1c8>
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	08006e52 	.word	0x08006e52
 80062f4:	08006e58 	.word	0x08006e58
 80062f8:	08006e5c 	.word	0x08006e5c
 80062fc:	00000000 	.word	0x00000000
 8006300:	08006039 	.word	0x08006039

08006304 <_printf_common>:
 8006304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006306:	0015      	movs	r5, r2
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	688a      	ldr	r2, [r1, #8]
 800630c:	690b      	ldr	r3, [r1, #16]
 800630e:	9000      	str	r0, [sp, #0]
 8006310:	000c      	movs	r4, r1
 8006312:	4293      	cmp	r3, r2
 8006314:	da00      	bge.n	8006318 <_printf_common+0x14>
 8006316:	0013      	movs	r3, r2
 8006318:	0022      	movs	r2, r4
 800631a:	602b      	str	r3, [r5, #0]
 800631c:	3243      	adds	r2, #67	; 0x43
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	2a00      	cmp	r2, #0
 8006322:	d001      	beq.n	8006328 <_printf_common+0x24>
 8006324:	3301      	adds	r3, #1
 8006326:	602b      	str	r3, [r5, #0]
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	069b      	lsls	r3, r3, #26
 800632c:	d502      	bpl.n	8006334 <_printf_common+0x30>
 800632e:	682b      	ldr	r3, [r5, #0]
 8006330:	3302      	adds	r3, #2
 8006332:	602b      	str	r3, [r5, #0]
 8006334:	2706      	movs	r7, #6
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	401f      	ands	r7, r3
 800633a:	d027      	beq.n	800638c <_printf_common+0x88>
 800633c:	0023      	movs	r3, r4
 800633e:	3343      	adds	r3, #67	; 0x43
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	1e5a      	subs	r2, r3, #1
 8006344:	4193      	sbcs	r3, r2
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	0692      	lsls	r2, r2, #26
 800634a:	d430      	bmi.n	80063ae <_printf_common+0xaa>
 800634c:	0022      	movs	r2, r4
 800634e:	9901      	ldr	r1, [sp, #4]
 8006350:	3243      	adds	r2, #67	; 0x43
 8006352:	9800      	ldr	r0, [sp, #0]
 8006354:	9e08      	ldr	r6, [sp, #32]
 8006356:	47b0      	blx	r6
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d025      	beq.n	80063a8 <_printf_common+0xa4>
 800635c:	2306      	movs	r3, #6
 800635e:	6820      	ldr	r0, [r4, #0]
 8006360:	682a      	ldr	r2, [r5, #0]
 8006362:	68e1      	ldr	r1, [r4, #12]
 8006364:	4003      	ands	r3, r0
 8006366:	2500      	movs	r5, #0
 8006368:	2b04      	cmp	r3, #4
 800636a:	d103      	bne.n	8006374 <_printf_common+0x70>
 800636c:	1a8d      	subs	r5, r1, r2
 800636e:	43eb      	mvns	r3, r5
 8006370:	17db      	asrs	r3, r3, #31
 8006372:	401d      	ands	r5, r3
 8006374:	68a3      	ldr	r3, [r4, #8]
 8006376:	6922      	ldr	r2, [r4, #16]
 8006378:	4293      	cmp	r3, r2
 800637a:	dd01      	ble.n	8006380 <_printf_common+0x7c>
 800637c:	1a9b      	subs	r3, r3, r2
 800637e:	18ed      	adds	r5, r5, r3
 8006380:	2700      	movs	r7, #0
 8006382:	42bd      	cmp	r5, r7
 8006384:	d120      	bne.n	80063c8 <_printf_common+0xc4>
 8006386:	2000      	movs	r0, #0
 8006388:	e010      	b.n	80063ac <_printf_common+0xa8>
 800638a:	3701      	adds	r7, #1
 800638c:	68e3      	ldr	r3, [r4, #12]
 800638e:	682a      	ldr	r2, [r5, #0]
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	429f      	cmp	r7, r3
 8006394:	dad2      	bge.n	800633c <_printf_common+0x38>
 8006396:	0022      	movs	r2, r4
 8006398:	2301      	movs	r3, #1
 800639a:	3219      	adds	r2, #25
 800639c:	9901      	ldr	r1, [sp, #4]
 800639e:	9800      	ldr	r0, [sp, #0]
 80063a0:	9e08      	ldr	r6, [sp, #32]
 80063a2:	47b0      	blx	r6
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d1f0      	bne.n	800638a <_printf_common+0x86>
 80063a8:	2001      	movs	r0, #1
 80063aa:	4240      	negs	r0, r0
 80063ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063ae:	2030      	movs	r0, #48	; 0x30
 80063b0:	18e1      	adds	r1, r4, r3
 80063b2:	3143      	adds	r1, #67	; 0x43
 80063b4:	7008      	strb	r0, [r1, #0]
 80063b6:	0021      	movs	r1, r4
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	3145      	adds	r1, #69	; 0x45
 80063bc:	7809      	ldrb	r1, [r1, #0]
 80063be:	18a2      	adds	r2, r4, r2
 80063c0:	3243      	adds	r2, #67	; 0x43
 80063c2:	3302      	adds	r3, #2
 80063c4:	7011      	strb	r1, [r2, #0]
 80063c6:	e7c1      	b.n	800634c <_printf_common+0x48>
 80063c8:	0022      	movs	r2, r4
 80063ca:	2301      	movs	r3, #1
 80063cc:	321a      	adds	r2, #26
 80063ce:	9901      	ldr	r1, [sp, #4]
 80063d0:	9800      	ldr	r0, [sp, #0]
 80063d2:	9e08      	ldr	r6, [sp, #32]
 80063d4:	47b0      	blx	r6
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	d0e6      	beq.n	80063a8 <_printf_common+0xa4>
 80063da:	3701      	adds	r7, #1
 80063dc:	e7d1      	b.n	8006382 <_printf_common+0x7e>
	...

080063e0 <_printf_i>:
 80063e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e2:	b08b      	sub	sp, #44	; 0x2c
 80063e4:	9206      	str	r2, [sp, #24]
 80063e6:	000a      	movs	r2, r1
 80063e8:	3243      	adds	r2, #67	; 0x43
 80063ea:	9307      	str	r3, [sp, #28]
 80063ec:	9005      	str	r0, [sp, #20]
 80063ee:	9204      	str	r2, [sp, #16]
 80063f0:	7e0a      	ldrb	r2, [r1, #24]
 80063f2:	000c      	movs	r4, r1
 80063f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063f6:	2a6e      	cmp	r2, #110	; 0x6e
 80063f8:	d100      	bne.n	80063fc <_printf_i+0x1c>
 80063fa:	e08f      	b.n	800651c <_printf_i+0x13c>
 80063fc:	d817      	bhi.n	800642e <_printf_i+0x4e>
 80063fe:	2a63      	cmp	r2, #99	; 0x63
 8006400:	d02c      	beq.n	800645c <_printf_i+0x7c>
 8006402:	d808      	bhi.n	8006416 <_printf_i+0x36>
 8006404:	2a00      	cmp	r2, #0
 8006406:	d100      	bne.n	800640a <_printf_i+0x2a>
 8006408:	e099      	b.n	800653e <_printf_i+0x15e>
 800640a:	2a58      	cmp	r2, #88	; 0x58
 800640c:	d054      	beq.n	80064b8 <_printf_i+0xd8>
 800640e:	0026      	movs	r6, r4
 8006410:	3642      	adds	r6, #66	; 0x42
 8006412:	7032      	strb	r2, [r6, #0]
 8006414:	e029      	b.n	800646a <_printf_i+0x8a>
 8006416:	2a64      	cmp	r2, #100	; 0x64
 8006418:	d001      	beq.n	800641e <_printf_i+0x3e>
 800641a:	2a69      	cmp	r2, #105	; 0x69
 800641c:	d1f7      	bne.n	800640e <_printf_i+0x2e>
 800641e:	6821      	ldr	r1, [r4, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	0608      	lsls	r0, r1, #24
 8006424:	d523      	bpl.n	800646e <_printf_i+0x8e>
 8006426:	1d11      	adds	r1, r2, #4
 8006428:	6019      	str	r1, [r3, #0]
 800642a:	6815      	ldr	r5, [r2, #0]
 800642c:	e025      	b.n	800647a <_printf_i+0x9a>
 800642e:	2a73      	cmp	r2, #115	; 0x73
 8006430:	d100      	bne.n	8006434 <_printf_i+0x54>
 8006432:	e088      	b.n	8006546 <_printf_i+0x166>
 8006434:	d808      	bhi.n	8006448 <_printf_i+0x68>
 8006436:	2a6f      	cmp	r2, #111	; 0x6f
 8006438:	d029      	beq.n	800648e <_printf_i+0xae>
 800643a:	2a70      	cmp	r2, #112	; 0x70
 800643c:	d1e7      	bne.n	800640e <_printf_i+0x2e>
 800643e:	2220      	movs	r2, #32
 8006440:	6809      	ldr	r1, [r1, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	6022      	str	r2, [r4, #0]
 8006446:	e003      	b.n	8006450 <_printf_i+0x70>
 8006448:	2a75      	cmp	r2, #117	; 0x75
 800644a:	d020      	beq.n	800648e <_printf_i+0xae>
 800644c:	2a78      	cmp	r2, #120	; 0x78
 800644e:	d1de      	bne.n	800640e <_printf_i+0x2e>
 8006450:	0022      	movs	r2, r4
 8006452:	2178      	movs	r1, #120	; 0x78
 8006454:	3245      	adds	r2, #69	; 0x45
 8006456:	7011      	strb	r1, [r2, #0]
 8006458:	4a6c      	ldr	r2, [pc, #432]	; (800660c <_printf_i+0x22c>)
 800645a:	e030      	b.n	80064be <_printf_i+0xde>
 800645c:	000e      	movs	r6, r1
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	3642      	adds	r6, #66	; 0x42
 8006462:	1d11      	adds	r1, r2, #4
 8006464:	6019      	str	r1, [r3, #0]
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	7033      	strb	r3, [r6, #0]
 800646a:	2301      	movs	r3, #1
 800646c:	e079      	b.n	8006562 <_printf_i+0x182>
 800646e:	0649      	lsls	r1, r1, #25
 8006470:	d5d9      	bpl.n	8006426 <_printf_i+0x46>
 8006472:	1d11      	adds	r1, r2, #4
 8006474:	6019      	str	r1, [r3, #0]
 8006476:	2300      	movs	r3, #0
 8006478:	5ed5      	ldrsh	r5, [r2, r3]
 800647a:	2d00      	cmp	r5, #0
 800647c:	da03      	bge.n	8006486 <_printf_i+0xa6>
 800647e:	232d      	movs	r3, #45	; 0x2d
 8006480:	9a04      	ldr	r2, [sp, #16]
 8006482:	426d      	negs	r5, r5
 8006484:	7013      	strb	r3, [r2, #0]
 8006486:	4b62      	ldr	r3, [pc, #392]	; (8006610 <_printf_i+0x230>)
 8006488:	270a      	movs	r7, #10
 800648a:	9303      	str	r3, [sp, #12]
 800648c:	e02f      	b.n	80064ee <_printf_i+0x10e>
 800648e:	6820      	ldr	r0, [r4, #0]
 8006490:	6819      	ldr	r1, [r3, #0]
 8006492:	0605      	lsls	r5, r0, #24
 8006494:	d503      	bpl.n	800649e <_printf_i+0xbe>
 8006496:	1d08      	adds	r0, r1, #4
 8006498:	6018      	str	r0, [r3, #0]
 800649a:	680d      	ldr	r5, [r1, #0]
 800649c:	e005      	b.n	80064aa <_printf_i+0xca>
 800649e:	0640      	lsls	r0, r0, #25
 80064a0:	d5f9      	bpl.n	8006496 <_printf_i+0xb6>
 80064a2:	680d      	ldr	r5, [r1, #0]
 80064a4:	1d08      	adds	r0, r1, #4
 80064a6:	6018      	str	r0, [r3, #0]
 80064a8:	b2ad      	uxth	r5, r5
 80064aa:	4b59      	ldr	r3, [pc, #356]	; (8006610 <_printf_i+0x230>)
 80064ac:	2708      	movs	r7, #8
 80064ae:	9303      	str	r3, [sp, #12]
 80064b0:	2a6f      	cmp	r2, #111	; 0x6f
 80064b2:	d018      	beq.n	80064e6 <_printf_i+0x106>
 80064b4:	270a      	movs	r7, #10
 80064b6:	e016      	b.n	80064e6 <_printf_i+0x106>
 80064b8:	3145      	adds	r1, #69	; 0x45
 80064ba:	700a      	strb	r2, [r1, #0]
 80064bc:	4a54      	ldr	r2, [pc, #336]	; (8006610 <_printf_i+0x230>)
 80064be:	9203      	str	r2, [sp, #12]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	6821      	ldr	r1, [r4, #0]
 80064c4:	1d10      	adds	r0, r2, #4
 80064c6:	6018      	str	r0, [r3, #0]
 80064c8:	6815      	ldr	r5, [r2, #0]
 80064ca:	0608      	lsls	r0, r1, #24
 80064cc:	d522      	bpl.n	8006514 <_printf_i+0x134>
 80064ce:	07cb      	lsls	r3, r1, #31
 80064d0:	d502      	bpl.n	80064d8 <_printf_i+0xf8>
 80064d2:	2320      	movs	r3, #32
 80064d4:	4319      	orrs	r1, r3
 80064d6:	6021      	str	r1, [r4, #0]
 80064d8:	2710      	movs	r7, #16
 80064da:	2d00      	cmp	r5, #0
 80064dc:	d103      	bne.n	80064e6 <_printf_i+0x106>
 80064de:	2320      	movs	r3, #32
 80064e0:	6822      	ldr	r2, [r4, #0]
 80064e2:	439a      	bics	r2, r3
 80064e4:	6022      	str	r2, [r4, #0]
 80064e6:	0023      	movs	r3, r4
 80064e8:	2200      	movs	r2, #0
 80064ea:	3343      	adds	r3, #67	; 0x43
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	6863      	ldr	r3, [r4, #4]
 80064f0:	60a3      	str	r3, [r4, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	db5c      	blt.n	80065b0 <_printf_i+0x1d0>
 80064f6:	2204      	movs	r2, #4
 80064f8:	6821      	ldr	r1, [r4, #0]
 80064fa:	4391      	bics	r1, r2
 80064fc:	6021      	str	r1, [r4, #0]
 80064fe:	2d00      	cmp	r5, #0
 8006500:	d158      	bne.n	80065b4 <_printf_i+0x1d4>
 8006502:	9e04      	ldr	r6, [sp, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d064      	beq.n	80065d2 <_printf_i+0x1f2>
 8006508:	0026      	movs	r6, r4
 800650a:	9b03      	ldr	r3, [sp, #12]
 800650c:	3642      	adds	r6, #66	; 0x42
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	7033      	strb	r3, [r6, #0]
 8006512:	e05e      	b.n	80065d2 <_printf_i+0x1f2>
 8006514:	0648      	lsls	r0, r1, #25
 8006516:	d5da      	bpl.n	80064ce <_printf_i+0xee>
 8006518:	b2ad      	uxth	r5, r5
 800651a:	e7d8      	b.n	80064ce <_printf_i+0xee>
 800651c:	6809      	ldr	r1, [r1, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	0608      	lsls	r0, r1, #24
 8006522:	d505      	bpl.n	8006530 <_printf_i+0x150>
 8006524:	1d11      	adds	r1, r2, #4
 8006526:	6019      	str	r1, [r3, #0]
 8006528:	6813      	ldr	r3, [r2, #0]
 800652a:	6962      	ldr	r2, [r4, #20]
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e006      	b.n	800653e <_printf_i+0x15e>
 8006530:	0649      	lsls	r1, r1, #25
 8006532:	d5f7      	bpl.n	8006524 <_printf_i+0x144>
 8006534:	1d11      	adds	r1, r2, #4
 8006536:	6019      	str	r1, [r3, #0]
 8006538:	6813      	ldr	r3, [r2, #0]
 800653a:	8aa2      	ldrh	r2, [r4, #20]
 800653c:	801a      	strh	r2, [r3, #0]
 800653e:	2300      	movs	r3, #0
 8006540:	9e04      	ldr	r6, [sp, #16]
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	e054      	b.n	80065f0 <_printf_i+0x210>
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	1d11      	adds	r1, r2, #4
 800654a:	6019      	str	r1, [r3, #0]
 800654c:	6816      	ldr	r6, [r2, #0]
 800654e:	2100      	movs	r1, #0
 8006550:	6862      	ldr	r2, [r4, #4]
 8006552:	0030      	movs	r0, r6
 8006554:	f000 f85e 	bl	8006614 <memchr>
 8006558:	2800      	cmp	r0, #0
 800655a:	d001      	beq.n	8006560 <_printf_i+0x180>
 800655c:	1b80      	subs	r0, r0, r6
 800655e:	6060      	str	r0, [r4, #4]
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	6123      	str	r3, [r4, #16]
 8006564:	2300      	movs	r3, #0
 8006566:	9a04      	ldr	r2, [sp, #16]
 8006568:	7013      	strb	r3, [r2, #0]
 800656a:	e041      	b.n	80065f0 <_printf_i+0x210>
 800656c:	6923      	ldr	r3, [r4, #16]
 800656e:	0032      	movs	r2, r6
 8006570:	9906      	ldr	r1, [sp, #24]
 8006572:	9805      	ldr	r0, [sp, #20]
 8006574:	9d07      	ldr	r5, [sp, #28]
 8006576:	47a8      	blx	r5
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d043      	beq.n	8006604 <_printf_i+0x224>
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	2500      	movs	r5, #0
 8006580:	079b      	lsls	r3, r3, #30
 8006582:	d40f      	bmi.n	80065a4 <_printf_i+0x1c4>
 8006584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006586:	68e0      	ldr	r0, [r4, #12]
 8006588:	4298      	cmp	r0, r3
 800658a:	da3d      	bge.n	8006608 <_printf_i+0x228>
 800658c:	0018      	movs	r0, r3
 800658e:	e03b      	b.n	8006608 <_printf_i+0x228>
 8006590:	0022      	movs	r2, r4
 8006592:	2301      	movs	r3, #1
 8006594:	3219      	adds	r2, #25
 8006596:	9906      	ldr	r1, [sp, #24]
 8006598:	9805      	ldr	r0, [sp, #20]
 800659a:	9e07      	ldr	r6, [sp, #28]
 800659c:	47b0      	blx	r6
 800659e:	1c43      	adds	r3, r0, #1
 80065a0:	d030      	beq.n	8006604 <_printf_i+0x224>
 80065a2:	3501      	adds	r5, #1
 80065a4:	68e3      	ldr	r3, [r4, #12]
 80065a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	429d      	cmp	r5, r3
 80065ac:	dbf0      	blt.n	8006590 <_printf_i+0x1b0>
 80065ae:	e7e9      	b.n	8006584 <_printf_i+0x1a4>
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	d0a9      	beq.n	8006508 <_printf_i+0x128>
 80065b4:	9e04      	ldr	r6, [sp, #16]
 80065b6:	0028      	movs	r0, r5
 80065b8:	0039      	movs	r1, r7
 80065ba:	f7f9 fe47 	bl	800024c <__aeabi_uidivmod>
 80065be:	9b03      	ldr	r3, [sp, #12]
 80065c0:	3e01      	subs	r6, #1
 80065c2:	5c5b      	ldrb	r3, [r3, r1]
 80065c4:	0028      	movs	r0, r5
 80065c6:	7033      	strb	r3, [r6, #0]
 80065c8:	0039      	movs	r1, r7
 80065ca:	f7f9 fdb9 	bl	8000140 <__udivsi3>
 80065ce:	1e05      	subs	r5, r0, #0
 80065d0:	d1f1      	bne.n	80065b6 <_printf_i+0x1d6>
 80065d2:	2f08      	cmp	r7, #8
 80065d4:	d109      	bne.n	80065ea <_printf_i+0x20a>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	07db      	lsls	r3, r3, #31
 80065da:	d506      	bpl.n	80065ea <_printf_i+0x20a>
 80065dc:	6863      	ldr	r3, [r4, #4]
 80065de:	6922      	ldr	r2, [r4, #16]
 80065e0:	4293      	cmp	r3, r2
 80065e2:	dc02      	bgt.n	80065ea <_printf_i+0x20a>
 80065e4:	2330      	movs	r3, #48	; 0x30
 80065e6:	3e01      	subs	r6, #1
 80065e8:	7033      	strb	r3, [r6, #0]
 80065ea:	9b04      	ldr	r3, [sp, #16]
 80065ec:	1b9b      	subs	r3, r3, r6
 80065ee:	6123      	str	r3, [r4, #16]
 80065f0:	9b07      	ldr	r3, [sp, #28]
 80065f2:	aa09      	add	r2, sp, #36	; 0x24
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	0021      	movs	r1, r4
 80065f8:	9b06      	ldr	r3, [sp, #24]
 80065fa:	9805      	ldr	r0, [sp, #20]
 80065fc:	f7ff fe82 	bl	8006304 <_printf_common>
 8006600:	1c43      	adds	r3, r0, #1
 8006602:	d1b3      	bne.n	800656c <_printf_i+0x18c>
 8006604:	2001      	movs	r0, #1
 8006606:	4240      	negs	r0, r0
 8006608:	b00b      	add	sp, #44	; 0x2c
 800660a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800660c:	08006e74 	.word	0x08006e74
 8006610:	08006e63 	.word	0x08006e63

08006614 <memchr>:
 8006614:	b2c9      	uxtb	r1, r1
 8006616:	1882      	adds	r2, r0, r2
 8006618:	4290      	cmp	r0, r2
 800661a:	d101      	bne.n	8006620 <memchr+0xc>
 800661c:	2000      	movs	r0, #0
 800661e:	4770      	bx	lr
 8006620:	7803      	ldrb	r3, [r0, #0]
 8006622:	428b      	cmp	r3, r1
 8006624:	d0fb      	beq.n	800661e <memchr+0xa>
 8006626:	3001      	adds	r0, #1
 8006628:	e7f6      	b.n	8006618 <memchr+0x4>

0800662a <memmove>:
 800662a:	b510      	push	{r4, lr}
 800662c:	4288      	cmp	r0, r1
 800662e:	d902      	bls.n	8006636 <memmove+0xc>
 8006630:	188b      	adds	r3, r1, r2
 8006632:	4298      	cmp	r0, r3
 8006634:	d308      	bcc.n	8006648 <memmove+0x1e>
 8006636:	2300      	movs	r3, #0
 8006638:	429a      	cmp	r2, r3
 800663a:	d007      	beq.n	800664c <memmove+0x22>
 800663c:	5ccc      	ldrb	r4, [r1, r3]
 800663e:	54c4      	strb	r4, [r0, r3]
 8006640:	3301      	adds	r3, #1
 8006642:	e7f9      	b.n	8006638 <memmove+0xe>
 8006644:	5c8b      	ldrb	r3, [r1, r2]
 8006646:	5483      	strb	r3, [r0, r2]
 8006648:	3a01      	subs	r2, #1
 800664a:	d2fb      	bcs.n	8006644 <memmove+0x1a>
 800664c:	bd10      	pop	{r4, pc}

0800664e <_realloc_r>:
 800664e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006650:	0007      	movs	r7, r0
 8006652:	000d      	movs	r5, r1
 8006654:	0016      	movs	r6, r2
 8006656:	2900      	cmp	r1, #0
 8006658:	d105      	bne.n	8006666 <_realloc_r+0x18>
 800665a:	0011      	movs	r1, r2
 800665c:	f7ff fc58 	bl	8005f10 <_malloc_r>
 8006660:	0004      	movs	r4, r0
 8006662:	0020      	movs	r0, r4
 8006664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006666:	2a00      	cmp	r2, #0
 8006668:	d103      	bne.n	8006672 <_realloc_r+0x24>
 800666a:	f7ff fc07 	bl	8005e7c <_free_r>
 800666e:	0034      	movs	r4, r6
 8006670:	e7f7      	b.n	8006662 <_realloc_r+0x14>
 8006672:	f000 f812 	bl	800669a <_malloc_usable_size_r>
 8006676:	002c      	movs	r4, r5
 8006678:	4286      	cmp	r6, r0
 800667a:	d9f2      	bls.n	8006662 <_realloc_r+0x14>
 800667c:	0031      	movs	r1, r6
 800667e:	0038      	movs	r0, r7
 8006680:	f7ff fc46 	bl	8005f10 <_malloc_r>
 8006684:	1e04      	subs	r4, r0, #0
 8006686:	d0ec      	beq.n	8006662 <_realloc_r+0x14>
 8006688:	0029      	movs	r1, r5
 800668a:	0032      	movs	r2, r6
 800668c:	f7ff fbe4 	bl	8005e58 <memcpy>
 8006690:	0029      	movs	r1, r5
 8006692:	0038      	movs	r0, r7
 8006694:	f7ff fbf2 	bl	8005e7c <_free_r>
 8006698:	e7e3      	b.n	8006662 <_realloc_r+0x14>

0800669a <_malloc_usable_size_r>:
 800669a:	1f0b      	subs	r3, r1, #4
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	1f18      	subs	r0, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	da01      	bge.n	80066a8 <_malloc_usable_size_r+0xe>
 80066a4:	580b      	ldr	r3, [r1, r0]
 80066a6:	18c0      	adds	r0, r0, r3
 80066a8:	4770      	bx	lr
	...

080066ac <_init>:
 80066ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b2:	bc08      	pop	{r3}
 80066b4:	469e      	mov	lr, r3
 80066b6:	4770      	bx	lr

080066b8 <_fini>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066be:	bc08      	pop	{r3}
 80066c0:	469e      	mov	lr, r3
 80066c2:	4770      	bx	lr
